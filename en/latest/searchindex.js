Search.setIndex({"docnames": ["aboutus", "cli", "guide", "index", "install", "internals/evalf", "internals/g-functions", "internals/gruntz", "internals/hyperexpand", "internals/index", "internals/polys", "modules/calculus/index", "modules/combinatorics/graycode", "modules/combinatorics/group_constructs", "modules/combinatorics/index", "modules/combinatorics/named_groups", "modules/combinatorics/partitions", "modules/combinatorics/perm_groups", "modules/combinatorics/permutations", "modules/combinatorics/polyhedron", "modules/combinatorics/prufer", "modules/combinatorics/subsets", "modules/combinatorics/tensor_can", "modules/combinatorics/testutil", "modules/combinatorics/util", "modules/concrete", "modules/config", "modules/core", "modules/domains", "modules/functions/combinatorial", "modules/functions/elementary", "modules/functions/index", "modules/functions/special", "modules/index", "modules/integrals", "modules/interactive", "modules/logic", "modules/matrices/dense", "modules/matrices/expressions", "modules/matrices/immutablematrices", "modules/matrices/index", "modules/matrices/matrices", "modules/matrices/sparse", "modules/ntheory", "modules/parsing", "modules/polys", "modules/printing", "modules/sets", "modules/simplify/simplify", "modules/solvers/diophantine", "modules/solvers/index", "modules/solvers/inequalities", "modules/solvers/ode", "modules/solvers/pde", "modules/solvers/recurr", "modules/solvers/solvers", "modules/solvers/utilities", "modules/tensor/array", "modules/tensor/index", "modules/tensor/index_methods", "modules/tensor/indexed", "modules/tensor/tensor", "modules/utilities/autowrap", "modules/utilities/codegen", "modules/utilities/decorator", "modules/utilities/enumerative", "modules/utilities/index", "modules/utilities/iterables", "modules/utilities/lambdify", "modules/utilities/memoization", "modules/utilities/misc", "modules/utilities/randtest", "release/index", "release/notes-0.10", "release/notes-0.11", "release/notes-0.12", "release/notes-0.13", "release/notes-0.14", "release/notes-0.5.0", "release/notes-0.5.1", "release/notes-0.5.10", "release/notes-0.5.11", "release/notes-0.5.12", "release/notes-0.5.13", "release/notes-0.5.14", "release/notes-0.5.15", "release/notes-0.5.2", "release/notes-0.5.3", "release/notes-0.5.4", "release/notes-0.5.5", "release/notes-0.5.6", "release/notes-0.5.7", "release/notes-0.5.8", "release/notes-0.5.9", "release/notes-0.6.0", "release/notes-0.6.1", "release/notes-0.6.2", "release/notes-0.6.3", "release/notes-0.6.4", "release/notes-0.6.5", "release/notes-0.6.6", "release/notes-0.6.7", "release/notes-0.7.0", "release/notes-0.7.1", "release/notes-0.7.2", "release/notes-0.7.3", "release/notes-0.7.4", "release/notes-0.7.5", "release/notes-0.7.6", "release/notes-0.8", "release/notes-0.9", "release/sympy", "sources", "tutorial/basics", "tutorial/calculus", "tutorial/gotchas", "tutorial/index", "tutorial/intro", "tutorial/manipulation", "tutorial/matrices", "tutorial/polys", "tutorial/printing", "tutorial/simplification", "tutorial/solvers"], "filenames": ["aboutus.rst", "cli.rst", "guide.rst", "index.rst", "install.rst", "internals/evalf.rst", "internals/g-functions.rst", "internals/gruntz.rst", "internals/hyperexpand.rst", "internals/index.rst", "internals/polys.rst", "modules/calculus/index.rst", "modules/combinatorics/graycode.rst", "modules/combinatorics/group_constructs.rst", "modules/combinatorics/index.rst", "modules/combinatorics/named_groups.rst", "modules/combinatorics/partitions.rst", "modules/combinatorics/perm_groups.rst", "modules/combinatorics/permutations.rst", "modules/combinatorics/polyhedron.rst", "modules/combinatorics/prufer.rst", "modules/combinatorics/subsets.rst", "modules/combinatorics/tensor_can.rst", "modules/combinatorics/testutil.rst", "modules/combinatorics/util.rst", "modules/concrete.rst", "modules/config.rst", "modules/core.rst", "modules/domains.rst", "modules/functions/combinatorial.rst", "modules/functions/elementary.rst", "modules/functions/index.rst", "modules/functions/special.rst", "modules/index.rst", "modules/integrals.rst", "modules/interactive.rst", "modules/logic.rst", "modules/matrices/dense.rst", "modules/matrices/expressions.rst", "modules/matrices/immutablematrices.rst", "modules/matrices/index.rst", "modules/matrices/matrices.rst", "modules/matrices/sparse.rst", "modules/ntheory.rst", "modules/parsing.rst", "modules/polys.rst", "modules/printing.rst", "modules/sets.rst", "modules/simplify/simplify.rst", "modules/solvers/diophantine.rst", "modules/solvers/index.rst", "modules/solvers/inequalities.rst", "modules/solvers/ode.rst", "modules/solvers/pde.rst", "modules/solvers/recurr.rst", "modules/solvers/solvers.rst", "modules/solvers/utilities.rst", "modules/tensor/array.rst", "modules/tensor/index.rst", "modules/tensor/index_methods.rst", "modules/tensor/indexed.rst", "modules/tensor/tensor.rst", "modules/utilities/autowrap.rst", "modules/utilities/codegen.rst", "modules/utilities/decorator.rst", "modules/utilities/enumerative.rst", "modules/utilities/index.rst", "modules/utilities/iterables.rst", "modules/utilities/lambdify.rst", "modules/utilities/memoization.rst", "modules/utilities/misc.rst", "modules/utilities/randtest.rst", "release/index.rst", "release/notes-0.10.rst", "release/notes-0.11.rst", "release/notes-0.12.rst", "release/notes-0.13.rst", "release/notes-0.14.rst", "release/notes-0.5.0.rst", "release/notes-0.5.1.rst", "release/notes-0.5.10.rst", "release/notes-0.5.11.rst", "release/notes-0.5.12.rst", "release/notes-0.5.13.rst", "release/notes-0.5.14.rst", "release/notes-0.5.15.rst", "release/notes-0.5.2.rst", "release/notes-0.5.3.rst", "release/notes-0.5.4.rst", "release/notes-0.5.5.rst", "release/notes-0.5.6.rst", "release/notes-0.5.7.rst", "release/notes-0.5.8.rst", "release/notes-0.5.9.rst", "release/notes-0.6.0.rst", "release/notes-0.6.1.rst", "release/notes-0.6.2.rst", "release/notes-0.6.3.rst", "release/notes-0.6.4.rst", "release/notes-0.6.5.rst", "release/notes-0.6.6.rst", "release/notes-0.6.7.rst", "release/notes-0.7.0.rst", "release/notes-0.7.1.rst", "release/notes-0.7.2.rst", "release/notes-0.7.3.rst", "release/notes-0.7.4.rst", "release/notes-0.7.5.rst", "release/notes-0.7.6.rst", "release/notes-0.8.rst", "release/notes-0.9.rst", "release/sympy.rst", "sources.rst", "tutorial/basics.rst", "tutorial/calculus.rst", "tutorial/gotchas.rst", "tutorial/index.rst", "tutorial/intro.rst", "tutorial/manipulation.rst", "tutorial/matrices.rst", "tutorial/polys.rst", "tutorial/printing.rst", "tutorial/simplification.rst", "tutorial/solvers.rst"], "titles": ["About", "Command-Line Usage", "Development", "Diofant\u2019s documentation", "Installation", "Numerical evaluation", "Computing Integrals using Meijer G-Functions", "The Gruntz Algorithm", "Details on the Hypergeometric Function Expansion", "Internals", "Internals of the Polynomial Manipulation Module", "Calculus", "Gray Code", "Group constructors", "Combinatorics", "Named Groups", "Partitions", "Permutation Groups", "Permutations", "Polyhedron", "Prufer Sequences", "Subsets", "Tensor Canonicalization", "Test Utilities", "Utilities", "Concrete Mathematics", "Config", "Core", "Domains", "Combinatorial", "Elementary", "Mathematical Functions", "Special", "Reference", "Integrals", "Interactive", "Logic", "Dense Matrices", "Matrix Expressions", "Immutable Matrices", "Matrices", "Matrices (linear algebra)", "Sparse Matrices", "Number Theory", "Parsing", "Polynomials", "Printing", "Sets", "Simplify", "Diophantine", "Solvers", "Inequality Solvers", "ODE", "PDE", "Recurrence Equations", "Algebraic equations", "Utilities for solving", "N-dim array", "Tensors", "Methods", "Indexed Objects", "Tensor", "Autowrap Module", "Codegen", "Decorator", "Enumerative", "Utilities", "Iterables", "Lambdify", "Memoization", "Miscellaneous", "Randomised Testing", "Release Notes", "Diofant 0.10", "Diofant 0.11", "Diofant 0.12", "Diofant 0.13", "Diofant 0.14", "SymPy 0.5.0", "SymPy 0.5.1", "SymPy 0.5.10", "SymPy 0.5.11", "SymPy 0.5.12", "SymPy 0.5.13", "SymPy 0.5.14", "SymPy 0.5.15", "SymPy 0.5.2", "SymPy 0.5.3", "SymPy 0.5.4", "SymPy 0.5.5", "SymPy 0.5.6", "SymPy 0.5.7", "SymPy 0.5.8", "SymPy 0.5.9", "SymPy 0.6.0", "SymPy 0.6.1", "SymPy 0.6.2", "SymPy 0.6.3", "SymPy 0.6.4", "SymPy 0.6.5", "SymPy 0.6.6", "SymPy 0.6.7", "SymPy 0.7.0", "SymPy 0.7.1", "SymPy 0.7.2", "SymPy 0.7.3", "SymPy 0.7.4", "SymPy 0.7.5", "SymPy 0.7.6", "Diofant 0.8", "Diofant 0.9", "SymPy releases", "Bibliography", "Basics", "Calculus", "Gotchas", "Tutorial", "Introduction", "Expression Trees", "Matrices", "Polynomials", "Printing", "Simplification", "Solvers"], "terms": {"thi": [0, 1, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 88, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123], "python": [0, 2, 3, 4, 5, 18, 27, 28, 30, 35, 36, 37, 41, 42, 43, 44, 46, 48, 52, 57, 62, 63, 65, 67, 68, 73, 74, 76, 77, 80, 82, 89, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 115, 116, 117, 121, 122], "librari": [0, 2, 3, 27, 28, 34, 63, 68, 102, 103, 104, 108, 113, 115, 116], "symbol": [0, 1, 3, 5, 7, 8, 10, 11, 25, 28, 29, 30, 32, 33, 34, 35, 36, 38, 41, 42, 43, 44, 46, 47, 48, 49, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 67, 68, 71, 74, 76, 77, 83, 89, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123], "mathemat": [0, 3, 6, 18, 27, 29, 30, 32, 33, 36, 43, 46, 47, 49, 52, 60, 62, 63, 86, 110, 112, 113, 115, 117, 118, 122], "i": [0, 1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 65, 67, 68, 71, 73, 74, 75, 76, 77, 82, 83, 84, 89, 92, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123], "fork": [0, 2, 109], "sympi": [0, 2, 3, 18, 27, 68, 72, 73, 74, 75, 76, 77, 109, 110], "start": [0, 2, 3, 4, 8, 10, 12, 16, 17, 18, 22, 25, 27, 32, 41, 43, 45, 46, 47, 49, 52, 57, 59, 62, 67, 70, 74, 83, 104, 116, 117], "sergei": [0, 112], "b": [0, 2, 3, 5, 6, 7, 8, 10, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 57, 60, 61, 64, 65, 67, 71, 74, 102, 103, 104, 106, 107, 108, 109, 110, 112, 117, 122, 123], "kirpichev": 0, "last": [0, 5, 10, 18, 22, 25, 27, 30, 34, 37, 39, 41, 42, 43, 45, 46, 49, 59, 61, 63, 67, 74, 75, 98, 102, 103, 104, 105, 108, 114, 117, 118, 119], "regular": [0, 5, 15, 32, 34, 43, 52, 61, 98, 113], "": [0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 16, 17, 18, 20, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 36, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 61, 62, 63, 65, 67, 68, 70, 73, 74, 75, 76, 77, 83, 89, 95, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, 123], "commit": [0, 2, 102, 103, 104], "cbdd072": [0, 2], "22": [0, 5, 17, 27, 32, 43, 48, 49, 54, 74, 93, 95, 107], "feb": [0, 107, 110], "2015": [0, 112], "The": [0, 2, 3, 4, 5, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 30, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 67, 68, 74, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123], "git": [0, 2, 4, 102, 103, 104], "histori": [0, 2], "goe": [0, 8, 23, 27, 31, 52, 67, 77], "back": [0, 5, 6, 8, 22, 25, 30, 32, 34, 43, 46, 52, 57, 104, 110, 113], "2007": [0, 43, 65, 78, 79, 86, 87, 88, 89, 90, 91, 92, 93], "project": [0, 2, 5, 10, 33, 41, 62, 63, 104, 105, 106], "wa": [0, 2, 8, 10, 16, 17, 18, 20, 27, 32, 37, 43, 44, 45, 46, 48, 54, 64, 67, 73, 74, 75, 78, 79, 80, 83, 84, 85, 87, 88, 91, 92, 94, 95, 96, 102, 103, 104, 106, 107, 108, 109, 117], "name": [0, 2, 6, 8, 10, 14, 19, 22, 25, 27, 30, 32, 33, 38, 41, 43, 44, 45, 46, 48, 49, 52, 53, 60, 61, 62, 63, 68, 73, 96, 103, 104, 105, 106, 110, 116, 117, 122], "after": [0, 2, 7, 10, 15, 17, 18, 22, 24, 25, 27, 34, 41, 42, 43, 44, 46, 49, 52, 53, 57, 64, 67, 70, 75, 104, 109, 110, 113, 120, 122], "diophantu": [0, 49], "alexandria": [0, 49], "hi": [0, 49], "arithmetica": [0, 49], "one": [0, 2, 5, 6, 7, 8, 10, 11, 12, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 30, 31, 32, 34, 36, 40, 41, 43, 44, 45, 46, 48, 49, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 65, 67, 68, 70, 73, 74, 75, 77, 85, 90, 102, 103, 104, 105, 107, 108, 110, 113, 117, 118, 120, 122], "earliest": 0, "known": [0, 5, 8, 16, 17, 18, 27, 28, 29, 31, 32, 41, 43, 47, 48, 52, 53, 67, 74, 83, 109], "text": [0, 6, 17, 30, 43, 46, 49, 52, 112], "us": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 78, 80, 83, 85, 87, 88, 91, 94, 95, 96, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123], "equat": [0, 6, 8, 10, 22, 25, 27, 30, 32, 33, 41, 45, 46, 48, 50, 51, 52, 53, 56, 60, 73, 74, 75, 76, 77, 84, 95, 99, 103, 104, 105, 106, 107, 108, 109, 110, 112, 115, 116, 117], "diofant": [0, 2, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123], "transliter": 0, "\u0434\u0438\u043e\u0444\u0430\u043d\u0442": 0, "from": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 57, 59, 61, 62, 63, 64, 65, 67, 68, 70, 73, 74, 75, 76, 77, 78, 83, 92, 95, 102, 104, 105, 106, 107, 108, 109, 110, 111, 116, 117, 118, 122, 123], "russian": 0, "unless": [0, 2, 3, 10, 17, 27, 32, 41, 42, 45, 46, 52, 65, 67, 68, 107, 109, 114, 122], "state": [0, 2, 3, 8, 17, 24, 32, 43, 48, 65, 102, 103, 104, 108, 112], "otherwis": [0, 3, 5, 6, 10, 11, 17, 18, 22, 25, 27, 32, 34, 36, 41, 43, 44, 45, 46, 48, 49, 52, 53, 55, 57, 63, 67, 68, 105, 110, 114], "all": [0, 2, 5, 6, 7, 8, 10, 11, 12, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 67, 68, 71, 73, 74, 77, 80, 83, 85, 88, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 117, 119, 120, 122], "file": [0, 8, 41, 48, 62, 63, 73, 103, 105, 107, 109], "ar": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 73, 74, 75, 76, 77, 83, 84, 85, 88, 96, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123], "new": [0, 2, 3, 6, 8, 10, 17, 25, 27, 32, 41, 42, 43, 45, 46, 48, 49, 52, 54, 57, 68, 72, 78, 83, 96, 99, 100, 102, 103, 104, 105, 106, 107, 112, 119], "bsd": 0, "copyright": 0, "c": [0, 3, 5, 6, 8, 10, 12, 13, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 29, 30, 32, 34, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 57, 61, 62, 63, 65, 67, 71, 76, 83, 84, 89, 97, 99, 102, 108, 110, 112, 113, 117, 121, 123], "2006": [0, 41], "2022": 0, "develop": [0, 3, 4, 9, 10, 24, 33, 52, 54, 72, 105], "team": 0, "2013": [0, 105, 106], "2023": 0, "right": [0, 6, 8, 10, 11, 17, 18, 22, 27, 29, 30, 32, 34, 41, 43, 46, 47, 52, 63, 65, 67, 77, 99, 104, 106, 114, 117, 122], "reserv": [0, 2, 61, 63, 108], "redistribut": [0, 45], "sourc": [0, 3, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 94, 103, 111], "binari": [0, 12, 21, 27, 43, 49, 62, 65, 103, 106], "form": [0, 1, 5, 6, 7, 8, 10, 17, 18, 22, 23, 25, 27, 29, 30, 32, 33, 34, 41, 43, 45, 46, 48, 49, 52, 53, 54, 55, 61, 67, 74, 77, 99, 102, 104, 105, 109, 112, 113, 117, 119, 120, 121, 122, 123], "without": [0, 5, 6, 8, 10, 27, 34, 38, 41, 45, 46, 48, 49, 52, 53, 56, 60, 61, 63, 67, 77, 84, 97, 99, 102, 103, 104, 105], "modif": [0, 41, 65, 76, 104], "permit": [0, 18, 30], "provid": [0, 2, 8, 10, 16, 17, 18, 24, 27, 28, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 52, 53, 54, 55, 57, 60, 61, 62, 63, 65, 67, 68, 77, 83, 102, 104, 106, 107, 108, 114, 119, 120], "follow": [0, 1, 2, 5, 6, 7, 8, 10, 16, 17, 18, 19, 22, 25, 27, 29, 30, 31, 32, 34, 36, 41, 43, 45, 46, 48, 49, 52, 53, 55, 56, 57, 59, 60, 61, 65, 67, 103, 104, 106, 112, 114, 118], "condit": [0, 8, 17, 27, 30, 32, 34, 41, 43, 46, 52, 54, 60, 77, 104, 105, 108, 109, 110], "met": [0, 49, 64], "code": [0, 1, 3, 5, 6, 8, 10, 14, 17, 20, 21, 27, 31, 32, 33, 34, 35, 44, 48, 52, 60, 62, 63, 67, 73, 74, 77, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 117, 121], "must": [0, 2, 6, 8, 10, 17, 18, 20, 22, 24, 27, 29, 31, 32, 33, 34, 36, 37, 41, 42, 43, 45, 46, 48, 52, 59, 60, 63, 65, 67, 68, 105, 109, 110], "retain": [0, 18, 27, 34, 42, 44, 45, 48, 108], "abov": [0, 4, 6, 7, 8, 10, 12, 17, 18, 22, 27, 29, 32, 34, 36, 41, 46, 48, 49, 52, 54, 55, 59, 60, 62, 63, 68, 102, 103, 104, 113, 115, 117, 122], "notic": [0, 8, 17, 18, 24, 27, 41, 61, 102, 103, 104, 117], "list": [0, 4, 5, 6, 8, 10, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 32, 34, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 57, 59, 60, 61, 62, 63, 65, 67, 68, 73, 74, 75, 76, 77, 82, 102, 103, 104, 107, 109, 110, 112, 116, 119, 123], "disclaim": 0, "reproduc": [0, 2], "document": [0, 2, 6, 8, 9, 10, 22, 28, 30, 31, 32, 33, 45, 46, 52, 63, 72, 74, 77, 84, 89, 93, 94, 99, 100, 101, 102, 104, 107, 109, 116], "other": [0, 2, 4, 5, 6, 8, 10, 11, 17, 18, 19, 23, 25, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 57, 60, 61, 62, 63, 65, 67, 68, 74, 82, 84, 88, 102, 103, 104, 105, 106, 108, 110, 113, 115, 117, 119, 120], "materi": 0, "distribut": [0, 9, 17, 24, 27, 45, 47, 61, 105, 109], "neither": [0, 7, 27, 47, 52, 61, 122], "holder": [0, 27], "nor": [0, 7, 27, 36, 52, 61], "its": [0, 2, 6, 10, 12, 15, 17, 18, 25, 27, 28, 29, 30, 32, 34, 36, 38, 41, 43, 45, 46, 47, 48, 52, 54, 59, 60, 61, 65, 67, 104, 107, 108, 109, 112, 115, 119, 120, 121, 122], "contributor": 0, "mai": [0, 4, 5, 6, 8, 9, 10, 17, 19, 25, 27, 30, 32, 34, 41, 43, 46, 48, 49, 52, 53, 55, 57, 59, 62, 63, 65, 68, 71, 85, 103, 108, 113, 115, 117, 120, 122], "endors": 0, "promot": 0, "product": [0, 5, 6, 10, 13, 15, 17, 18, 22, 25, 27, 29, 34, 38, 41, 43, 45, 47, 48, 49, 52, 53, 58, 59, 60, 61, 62, 65, 67, 74, 76, 102, 103, 104, 105, 106, 109, 116, 117, 120], "deriv": [0, 6, 8, 10, 12, 17, 30, 31, 32, 34, 37, 39, 41, 46, 48, 52, 53, 55, 58, 63, 71, 73, 74, 76, 77, 82, 83, 103, 104, 106, 107, 108, 109, 110, 116, 117, 123], "softwar": [0, 112], "specif": [0, 10, 17, 25, 27, 32, 41, 45, 46, 48, 49, 52, 53, 56, 63, 67, 73, 122], "prior": [0, 45, 48], "written": [0, 6, 7, 8, 15, 17, 18, 22, 27, 29, 32, 43, 45, 48, 49, 52, 63, 80, 86, 106], "permiss": 0, "BY": [0, 49], "THE": 0, "AND": [0, 36], "AS": 0, "ani": [0, 2, 4, 5, 6, 7, 8, 10, 11, 16, 17, 18, 24, 25, 27, 30, 32, 34, 35, 36, 37, 39, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 60, 61, 62, 65, 67, 68, 74, 90, 102, 103, 104, 106, 107, 109, 110, 113, 117, 120, 122, 123], "express": [0, 3, 5, 6, 7, 8, 10, 11, 18, 25, 27, 28, 29, 30, 32, 33, 34, 37, 39, 40, 41, 43, 44, 45, 46, 48, 49, 52, 53, 55, 57, 59, 60, 61, 62, 63, 65, 67, 68, 74, 76, 77, 80, 82, 83, 90, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123], "OR": [0, 36], "impli": [0, 8, 10, 17, 28, 36, 57, 59, 60, 74, 102], "warranti": 0, "includ": [0, 2, 4, 5, 8, 10, 18, 22, 27, 32, 34, 38, 40, 41, 43, 44, 45, 46, 47, 48, 52, 53, 58, 61, 63, 65, 76, 77, 100, 102, 104, 105, 106, 107, 108, 109, 111, 114, 117, 119, 123], "BUT": 0, "NOT": [0, 62], "limit": [0, 4, 7, 10, 11, 25, 27, 28, 29, 30, 32, 34, 37, 39, 41, 43, 46, 48, 49, 52, 60, 65, 67, 73, 74, 75, 76, 77, 84, 85, 88, 97, 99, 106, 107, 108, 109, 110, 115, 116, 117], "TO": 0, "OF": [0, 65], "merchant": 0, "fit": [0, 6, 27, 41, 42, 43, 46, 52, 70], "FOR": 0, "A": [0, 5, 6, 7, 8, 10, 12, 13, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 76, 89, 102, 103, 104, 106, 107, 108, 109, 112, 119, 121], "particular": [0, 5, 6, 8, 10, 17, 32, 34, 36, 38, 41, 45, 48, 52, 54, 55, 63, 65, 110, 115], "purpos": [0, 17, 23, 27, 34, 41, 46, 52, 60, 65, 66], "IN": 0, "NO": 0, "event": 0, "shall": [0, 6, 7, 8], "regent": 0, "BE": 0, "liabl": [0, 27, 36], "direct": [0, 2, 5, 8, 11, 13, 15, 17, 22, 27, 30, 41, 61, 67, 76, 77, 83, 99, 106, 114, 122], "indirect": 0, "incident": 0, "special": [0, 5, 6, 8, 18, 27, 29, 31, 33, 34, 41, 46, 48, 52, 53, 62, 63, 67, 68, 75, 103, 104, 105, 106, 107, 112, 114, 116], "exemplari": 0, "consequenti": 0, "damag": 0, "procur": 0, "substitut": [0, 6, 7, 8, 10, 27, 32, 34, 41, 48, 49, 52, 53, 54, 55, 56, 61, 68, 75, 76, 99, 103, 106, 109, 110, 116], "good": [0, 2, 4, 5, 6, 8, 27, 41, 43, 46, 48, 52, 67], "servic": 0, "loss": [0, 6, 73], "data": [0, 5, 10, 17, 27, 28, 41, 42, 44, 45, 48, 60, 61, 63, 65, 67, 110], "profit": 0, "busi": 0, "interrupt": 0, "howev": [0, 2, 5, 6, 7, 8, 10, 17, 22, 25, 27, 29, 30, 32, 36, 41, 43, 45, 46, 48, 52, 53, 54, 62, 67, 102, 104, 117, 122], "caus": [0, 5, 27, 30, 52, 53, 55, 65, 109, 110], "ON": 0, "theori": [0, 3, 16, 17, 18, 24, 27, 29, 32, 33, 45, 47, 49, 65, 92, 104, 112, 117], "liabil": 0, "whether": [0, 10, 17, 27, 32, 34, 36, 41, 42, 43, 46, 47, 49, 52, 56, 57, 63, 67, 71, 74, 104, 106], "contract": [0, 46, 58, 59, 60, 61, 99, 106, 110], "strict": [0, 5, 10, 17, 27, 29, 62, 110, 113, 122], "tort": 0, "neglig": 0, "aris": [0, 6, 29], "wai": [0, 6, 8, 12, 16, 17, 18, 19, 22, 27, 28, 29, 41, 43, 45, 46, 48, 49, 52, 53, 60, 63, 65, 67, 68, 103, 106, 108, 113, 114, 117, 118, 120, 122], "out": [0, 6, 8, 10, 17, 18, 27, 29, 32, 34, 38, 41, 43, 45, 46, 48, 52, 63, 76, 82, 105, 108, 110], "even": [0, 2, 5, 6, 8, 10, 15, 17, 18, 27, 28, 29, 32, 34, 36, 41, 43, 46, 48, 49, 52, 62, 67, 104, 106, 114, 115, 118, 120], "IF": 0, "advis": 0, "possibl": [0, 2, 6, 10, 12, 16, 17, 18, 20, 21, 22, 27, 28, 30, 32, 34, 37, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 57, 61, 63, 65, 67, 68, 77, 103, 104, 109, 113, 119], "SUCH": 0, "when": [1, 2, 5, 8, 10, 12, 17, 18, 19, 24, 25, 27, 29, 30, 31, 32, 33, 34, 36, 37, 41, 42, 43, 44, 45, 46, 48, 49, 52, 53, 55, 59, 60, 61, 62, 63, 67, 68, 71, 73, 74, 75, 76, 77, 83, 89, 101, 103, 105, 106, 109, 110, 113, 114, 115, 117, 118, 120, 121, 122, 123], "call": [1, 5, 6, 8, 10, 12, 13, 16, 17, 18, 24, 27, 29, 32, 34, 35, 37, 39, 41, 42, 43, 44, 45, 46, 48, 49, 52, 59, 61, 62, 63, 65, 67, 68, 74, 76, 77, 102, 104, 105, 106, 107, 113, 114, 115, 117, 118, 119, 120, 122, 123], "program": [1, 2, 12, 18, 63, 65, 75, 104, 107, 110, 116], "shell": [1, 84], "just": [1, 2, 7, 8, 17, 24, 27, 28, 32, 33, 34, 35, 36, 43, 46, 52, 61, 63, 73, 77, 80, 85, 103, 105, 106, 107, 109, 110, 114, 117, 119, 122], "normal": [1, 5, 10, 17, 23, 25, 27, 28, 36, 39, 41, 43, 44, 46, 49, 52, 102, 103, 105, 107, 122], "ipython": [1, 35, 83, 98, 103, 104, 105, 121], "you": [1, 2, 3, 4, 5, 6, 10, 18, 25, 27, 30, 32, 33, 34, 36, 38, 39, 41, 43, 45, 46, 47, 48, 49, 52, 53, 59, 60, 61, 62, 63, 67, 68, 71, 102, 103, 104, 107, 108, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "have": [1, 2, 4, 5, 6, 8, 10, 12, 17, 18, 19, 22, 24, 25, 27, 28, 29, 30, 32, 33, 34, 41, 43, 45, 46, 48, 49, 52, 55, 57, 59, 61, 62, 63, 65, 67, 72, 73, 77, 85, 96, 100, 102, 103, 104, 105, 106, 108, 110, 116, 117, 118, 119, 120, 121, 122], "packag": [1, 4, 73, 90, 104, 107, 108, 109, 110], "instal": [1, 2, 3, 62, 68, 81, 90, 101, 105, 108], "add": [1, 2, 5, 8, 10, 16, 22, 33, 35, 38, 41, 42, 43, 45, 46, 48, 49, 52, 53, 59, 60, 61, 64, 68, 73, 74, 75, 76, 94, 96, 99, 102, 103, 106, 108, 109, 110, 115, 118], "default": [1, 5, 10, 11, 12, 17, 27, 29, 30, 32, 34, 35, 36, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 60, 61, 62, 63, 65, 67, 68, 73, 74, 77, 83, 91, 94, 96, 102, 104, 106, 108, 110, 113, 117, 120, 121, 122], "import": [1, 3, 4, 5, 6, 17, 18, 22, 24, 25, 27, 29, 32, 34, 35, 36, 39, 41, 43, 44, 45, 46, 48, 49, 52, 53, 54, 57, 62, 63, 67, 68, 73, 79, 83, 87, 89, 102, 104, 105, 108, 110, 117, 119, 122, 123], "run": [1, 2, 3, 6, 8, 17, 18, 20, 27, 30, 35, 44, 48, 52, 53, 62, 64, 65, 67, 76, 109, 110, 115], "some": [1, 2, 4, 5, 6, 8, 10, 11, 15, 17, 18, 24, 25, 27, 28, 29, 30, 31, 32, 34, 36, 41, 43, 44, 45, 46, 48, 49, 52, 53, 62, 63, 65, 66, 67, 68, 74, 80, 88, 96, 101, 103, 104, 106, 107, 109, 110, 113, 115, 120, 122], "initi": [1, 6, 8, 17, 21, 27, 29, 32, 35, 44, 48, 52, 54, 63, 69, 70, 74, 75, 77, 104, 106, 109], "h": [1, 3, 6, 10, 12, 17, 22, 25, 27, 29, 32, 41, 44, 45, 47, 48, 52, 57, 63, 74, 112, 123], "wrap": [1, 16, 27, 30, 35, 46, 60, 62, 104, 108, 109, 110, 115], "divis": [1, 10, 27, 28, 35, 41, 43, 45, 46, 52, 75, 76, 87, 89, 97, 102, 106, 110, 115, 116, 118], "help": [1, 6, 8, 27, 32, 34, 43, 46, 49, 52, 53, 62, 63, 73, 74, 75, 122], "show": [1, 5, 6, 7, 8, 10, 18, 25, 27, 30, 31, 41, 43, 45, 48, 49, 52, 55, 56, 57, 62, 63, 102, 103, 104, 117, 119, 120, 121], "messag": [1, 2], "exit": [1, 43], "don": [1, 2, 6, 8, 27, 30, 34, 36, 41, 43, 44, 45, 46, 48, 55, 62, 64, 67, 73, 74, 76, 77, 82, 110], "t": [1, 2, 3, 6, 8, 10, 12, 17, 18, 20, 22, 24, 25, 27, 29, 30, 32, 34, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 61, 62, 64, 67, 68, 70, 73, 74, 75, 76, 77, 82, 87, 102, 108, 109, 110, 112, 113, 117, 119, 120, 122, 123], "integ": [1, 3, 8, 10, 16, 17, 18, 19, 20, 22, 25, 28, 29, 31, 32, 33, 34, 36, 41, 43, 44, 45, 46, 47, 48, 49, 52, 59, 60, 61, 63, 65, 67, 73, 74, 75, 76, 83, 102, 103, 104, 105, 108, 109, 110, 112, 113, 115, 118, 119, 120, 121, 123], "fraction": [1, 5, 10, 27, 28, 33, 34, 35, 41, 43, 46, 49, 74, 75, 76, 87, 102, 105, 108, 109, 115, 122], "auto": [1, 10, 27, 45, 46, 48, 52, 76, 110], "automat": [1, 5, 6, 8, 11, 18, 27, 28, 29, 30, 31, 32, 33, 35, 36, 43, 44, 45, 46, 48, 49, 52, 55, 60, 61, 62, 63, 73, 74, 81, 99, 102, 104, 105, 106, 108, 109, 115, 117, 121, 123], "creat": [1, 5, 6, 8, 10, 16, 18, 27, 28, 30, 32, 37, 38, 39, 40, 42, 44, 45, 46, 48, 52, 57, 60, 61, 62, 63, 65, 68, 73, 74, 75, 76, 77, 97, 102, 103, 104, 107, 109, 113, 114, 115, 118, 119, 123], "miss": [1, 35, 46, 63, 75, 77, 109, 110, 122], "If": [2, 3, 4, 5, 6, 7, 8, 10, 11, 16, 17, 18, 22, 24, 25, 27, 29, 30, 32, 34, 35, 36, 37, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 67, 68, 71, 102, 103, 105, 107, 108, 109, 113, 114, 116, 119, 120, 121, 123], "tutori": [2, 3, 4, 46, 50, 52, 77, 117, 123], "willing": 2, "assum": [2, 3, 6, 8, 10, 11, 12, 16, 17, 27, 32, 34, 41, 43, 46, 48, 49, 52, 53, 55, 59, 60, 61, 63, 77, 105, 106, 113, 116, 117, 123], "know": [2, 5, 6, 8, 27, 34, 41, 43, 45, 46, 48, 52, 67, 77, 114, 116], "languag": [2, 30, 35, 46, 62, 63, 108, 115, 116], "control": [2, 5, 6, 27, 45, 49, 67, 74, 106, 108], "system": [2, 4, 6, 10, 17, 27, 28, 30, 35, 36, 41, 45, 46, 48, 50, 51, 54, 62, 73, 74, 75, 77, 90, 95, 96, 100, 104, 105, 107, 108, 109, 110, 112, 113, 115, 117, 123], "adher": [2, 6, 102], "No": [2, 27, 32, 36, 43, 45, 48, 49, 55, 60, 65, 73, 109, 110, 113], "conduct": [2, 109], "judg": 2, "technic": [2, 27, 52, 63, 112, 118], "merit": 2, "open": [2, 4, 34, 46, 47, 108], "pleas": [2, 4, 6, 7, 10, 27, 43, 47, 48, 49, 110, 112, 116, 121], "take": [2, 5, 8, 10, 13, 17, 21, 25, 27, 30, 31, 32, 34, 41, 43, 45, 46, 47, 48, 49, 52, 60, 62, 67, 68, 73, 74, 77, 103, 106, 110, 114, 117, 118, 119, 121, 122], "step": [2, 6, 7, 8, 10, 21, 22, 25, 32, 34, 41, 43, 48, 49, 52, 54, 62, 67], "search": [2, 8, 10, 17, 18, 22, 24, 27, 30, 43, 48, 53, 104], "github": [2, 4, 74], "avoid": [2, 27, 30, 32, 34, 36, 41, 44, 46, 52, 59, 61, 63, 101, 106, 117], "duplic": [2, 17, 20, 32, 43, 52, 67, 77, 109], "try": [2, 5, 6, 8, 10, 11, 25, 27, 32, 34, 37, 39, 43, 46, 47, 48, 49, 52, 55, 56, 76, 77, 96, 101, 109, 110, 115, 121], "updat": [2, 4, 10, 27, 46, 80, 92, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110], "master": 2, "your": [2, 4, 27, 34, 41, 46, 48, 52, 71, 117], "minim": [2, 10, 11, 17, 18, 22, 25, 28, 34, 41, 43, 45, 48, 49, 55, 56, 73, 102, 108, 109, 110], "exampl": [2, 3, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 65, 67, 68, 69, 71, 76, 87, 90, 98, 101, 102, 103, 104, 105, 106, 108, 109, 114, 115, 117, 118, 119, 122], "demonstr": [2, 17, 27, 34, 43], "problem": [2, 8, 10, 12, 20, 22, 43, 48, 49, 55, 65, 74, 76, 77, 89, 104, 105, 109, 110, 112, 113], "relev": [2, 8, 52, 53], "detail": [2, 3, 6, 7, 9, 17, 27, 29, 32, 34, 43, 49, 52, 53, 60, 61, 66, 88, 100], "local": [2, 6, 27, 44, 73, 90, 109], "setup": [2, 8, 10, 26, 27, 45, 62, 81, 102], "chang": [2, 5, 6, 8, 9, 10, 17, 18, 22, 25, 27, 30, 34, 41, 43, 46, 48, 52, 57, 68, 72, 82, 85, 112, 113, 114], "want": [2, 4, 6, 8, 12, 27, 31, 34, 41, 43, 45, 46, 47, 48, 49, 52, 53, 61, 63, 65, 67, 68, 102, 103, 113, 114, 117, 119, 120, 121, 122], "fix": [2, 8, 10, 17, 19, 22, 24, 32, 46, 54, 61, 72, 80, 81, 82, 83, 84, 86, 88, 89, 90, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110], "typo": [2, 8, 74, 110], "so": [2, 4, 5, 6, 8, 10, 11, 12, 15, 16, 17, 18, 20, 22, 24, 27, 30, 31, 32, 34, 36, 38, 41, 42, 43, 44, 45, 46, 48, 49, 52, 53, 54, 59, 60, 62, 65, 67, 68, 71, 84, 90, 102, 103, 104, 106, 107, 108, 115, 118, 121, 123], "expand": [2, 6, 8, 10, 29, 30, 32, 34, 41, 45, 48, 52, 59, 62, 77, 83, 95, 96, 99, 101, 102, 104, 106, 115, 117, 120, 122], "comment": [2, 4, 17, 46, 63, 67, 109], "work": [2, 4, 5, 6, 7, 8, 10, 19, 27, 28, 32, 34, 36, 38, 41, 43, 44, 45, 46, 48, 49, 52, 55, 61, 62, 63, 65, 68, 72, 74, 76, 80, 82, 88, 91, 96, 97, 98, 102, 103, 104, 106, 109, 110, 117, 120, 122], "should": [2, 5, 6, 7, 8, 17, 19, 20, 22, 25, 27, 32, 34, 36, 41, 43, 44, 45, 46, 48, 49, 52, 55, 59, 60, 62, 63, 65, 67, 68, 72, 73, 74, 75, 76, 77, 80, 102, 103, 104, 106, 108, 109, 110, 114, 115, 122], "submit": 2, "via": [2, 6, 10, 17, 27, 29, 32, 34, 36, 43, 45, 60, 63, 74, 87, 103, 104, 108, 110, 120], "pull": [2, 27, 29, 32, 48, 52, 73, 74, 75, 76, 77, 109, 110], "request": [2, 4, 27, 43, 59, 62, 73, 74, 75, 76, 77, 109, 110], "pr": [2, 10, 25, 41, 45, 76, 99, 112], "can": [2, 4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 17, 18, 19, 21, 22, 25, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 67, 68, 73, 74, 75, 76, 80, 83, 85, 87, 94, 95, 96, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123], "soon": [2, 25, 27], "worth": 2, "discuss": [2, 17, 32, 43, 61, 65, 113], "make": [2, 4, 5, 8, 17, 25, 27, 30, 34, 36, 41, 43, 44, 45, 46, 48, 52, 53, 55, 56, 59, 62, 63, 67, 73, 74, 86, 88, 95, 99, 103, 104, 105, 108, 109, 110, 113, 117, 119, 122], "draft": 2, "intend": [2, 6, 27, 44, 49, 52, 53, 54, 113], "merg": [2, 17, 18, 46, 47, 83, 96, 104], "present": [2, 10, 12, 17, 18, 20, 24, 27, 41, 43, 46, 49, 63, 68, 71, 107, 117], "shape": [2, 8, 38, 41, 42, 46, 57, 59, 60, 61, 107, 119], "check": [2, 6, 8, 10, 16, 17, 18, 19, 23, 24, 25, 27, 28, 29, 32, 34, 36, 41, 42, 43, 45, 47, 48, 52, 53, 55, 56, 59, 60, 61, 63, 73, 76, 105, 108, 113], "pass": [2, 5, 17, 18, 27, 30, 32, 34, 41, 44, 46, 47, 48, 49, 52, 53, 57, 59, 60, 62, 63, 64, 67, 68, 97, 99, 104, 114, 121, 122, 123], "put": [2, 8, 22, 23, 27, 30, 41, 45, 46, 48, 52, 61, 62, 67, 119, 122], "branch": [2, 8, 9, 29, 30, 32, 71, 109, 122], "gener": [2, 4, 5, 6, 8, 10, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 36, 37, 39, 41, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 60, 61, 62, 63, 65, 66, 67, 68, 73, 75, 76, 83, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 117, 118, 119, 120, 122], "made": [2, 20, 22, 27, 34, 41, 43, 44, 45, 48, 52, 63, 72, 79, 83, 85, 91, 94, 96, 102, 103, 104], "against": [2, 27, 41, 79, 109], "One": [2, 6, 7, 18, 30, 34, 41, 43, 45, 48, 57, 61, 104, 113, 115, 119], "logic": [2, 3, 27, 33, 43, 47, 52, 74, 99, 102, 103, 104, 105, 106, 109, 110, 113, 117], "per": [2, 45, 73], "short": [2, 18, 22, 30, 43, 121], "78": [2, 17, 43], "charact": [2, 6, 27, 44, 46, 52, 61, 63, 103, 109, 117, 121], "line": [2, 3, 6, 8, 17, 18, 22, 27, 35, 41, 42, 43, 46, 48, 52, 62, 63, 70, 76, 80, 102, 104, 107], "summari": 2, "newlin": [2, 41, 70], "verbos": [2, 27, 43, 62, 101], "descript": [2, 27, 32, 34, 43, 46, 59, 63, 65], "mention": [2, 6, 8, 17, 49, 52], "close": [2, 5, 6, 25, 29, 32, 34, 47, 63, 102, 103, 104, 112], "conform": [2, 27, 59, 60, 86, 89], "pep": [2, 36], "8": [2, 3, 5, 6, 8, 10, 12, 17, 18, 19, 22, 24, 27, 28, 29, 30, 32, 34, 36, 37, 39, 41, 42, 43, 44, 45, 46, 48, 49, 52, 53, 54, 57, 60, 61, 63, 65, 67, 72, 76, 87, 111, 112, 113, 114, 117, 119, 120, 122], "257": [2, 43], "flake518": [2, 77], "format": [2, 8, 43, 45, 46, 52, 72, 74, 104, 110, 121], "test": [2, 4, 8, 10, 11, 14, 17, 18, 27, 28, 33, 38, 41, 42, 43, 47, 49, 52, 53, 55, 56, 62, 63, 64, 65, 66, 73, 74, 75, 76, 77, 81, 95, 97, 98, 99, 100, 101, 102, 104, 109, 110, 115], "bugfix": [2, 97, 98, 101, 110], "regress": [2, 76, 77, 109], "test_issue_123": 2, "test_sympyissue_123": 2, "function": [2, 3, 5, 7, 9, 10, 11, 17, 18, 21, 22, 24, 28, 29, 33, 34, 35, 37, 38, 40, 42, 43, 47, 50, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 73, 74, 75, 76, 77, 78, 82, 83, 85, 87, 88, 92, 93, 95, 96, 97, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 116, 117, 119, 120, 121, 123], "everi": [2, 8, 10, 15, 17, 18, 27, 33, 41, 42, 43, 46, 47, 48, 49, 52, 67, 116, 118, 119], "cover": [2, 9, 43, 61, 63, 104, 114, 123], "onli": [2, 5, 6, 8, 9, 10, 16, 17, 18, 19, 20, 22, 24, 25, 27, 29, 30, 32, 34, 36, 38, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 67, 73, 74, 83, 90, 102, 103, 104, 105, 107, 108, 110, 113, 114, 120, 122, 123], "public": [2, 10, 27, 45, 49, 73, 106, 112], "interfac": [2, 10, 27, 45, 47, 62, 63, 74, 80, 92, 104, 106, 108, 109, 118], "account": [2, 48, 52, 103], "coverag": [2, 73, 74, 75, 76, 99, 109, 110], "statist": [2, 12, 32, 73, 76, 104], "option": [2, 4, 5, 10, 11, 17, 24, 25, 27, 30, 34, 41, 43, 44, 45, 46, 48, 49, 52, 53, 54, 55, 56, 60, 62, 63, 67, 73, 74, 94, 95, 97, 102, 103, 104, 105, 106, 107, 108, 110, 116, 121, 122], "doctest": [2, 19, 41, 43, 52, 64, 73, 96, 98, 99, 100, 101, 109], "illustr": 2, "usag": [2, 3, 8, 10, 30, 41, 46, 52, 53, 57, 65, 69, 77, 104, 108], "But": [2, 8, 10, 27, 32, 41, 42, 43, 48, 49, 60, 65, 67, 108, 113, 115, 117, 118, 120, 122], "keep": [2, 5, 6, 7, 8, 22, 27, 29, 32, 41, 45, 52, 74, 114], "mind": [2, 7, 27, 41], "think": [2, 4, 17, 27, 65, 115], "them": [2, 5, 6, 8, 10, 16, 17, 18, 25, 27, 28, 32, 36, 41, 43, 45, 46, 48, 49, 52, 55, 57, 61, 63, 65, 67, 107, 109, 113, 114, 115, 122], "happen": [2, 5, 27, 45, 48, 76, 104, 115], "It": [2, 5, 6, 7, 8, 10, 15, 17, 18, 20, 21, 22, 23, 25, 27, 29, 30, 31, 32, 34, 36, 41, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 67, 68, 103, 104, 106, 107, 108, 113, 114, 115, 116, 119, 120, 122], "idea": [2, 6, 13, 17, 24, 27, 34, 43, 48, 49, 52, 62, 63, 73, 122], "sure": [2, 4, 17, 27, 33, 41, 52, 62, 73, 122], "exist": [2, 5, 7, 8, 10, 12, 17, 27, 34, 41, 43, 46, 47, 49, 52, 61, 76, 103, 104, 105, 106, 108, 119], "break": [2, 27, 43, 46, 67], "anyth": [2, 27, 41, 46, 48, 52, 67, 71, 115], "pytest": [2, 4, 109, 110], "To": [2, 4, 5, 6, 8, 10, 17, 22, 25, 27, 29, 30, 32, 34, 36, 38, 41, 45, 49, 52, 53, 57, 59, 60, 61, 62, 65, 67, 68, 71, 104, 105, 108, 113, 114, 115, 117, 119, 121, 122, 123], "also": [2, 4, 5, 6, 7, 8, 10, 11, 16, 17, 18, 25, 27, 28, 29, 30, 31, 32, 34, 36, 39, 41, 43, 45, 46, 47, 48, 49, 52, 53, 54, 57, 59, 60, 61, 62, 63, 65, 67, 68, 73, 74, 75, 76, 77, 83, 89, 99, 100, 102, 103, 104, 105, 106, 108, 109, 110, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123], "modul": [2, 3, 4, 8, 9, 11, 27, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 45, 46, 50, 54, 55, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 84, 86, 87, 89, 94, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 113, 115, 117], "potenti": [2, 8, 38, 41, 43, 52, 65, 106], "flaw": 2, "pylint": [2, 73], "do": [2, 6, 8, 10, 18, 22, 27, 32, 34, 36, 39, 41, 43, 45, 46, 47, 48, 49, 52, 53, 55, 56, 60, 61, 67, 72, 73, 75, 76, 102, 104, 106, 108, 109, 113, 114, 116, 117, 120, 122], "type": [2, 5, 8, 17, 22, 25, 27, 28, 30, 31, 34, 36, 38, 41, 43, 44, 46, 48, 49, 52, 59, 60, 61, 62, 63, 67, 68, 73, 75, 76, 102, 103, 104, 106, 107, 109, 110, 115, 117, 122], "mypi": [2, 75], "affect": [2, 25, 27, 41, 104], "build": [2, 27, 36, 45, 67, 104, 109], "sphinx": [2, 30, 52, 74, 99, 103], "w": [2, 6, 7, 8, 10, 12, 27, 30, 32, 34, 41, 45, 47, 48, 49, 52, 53, 67, 68, 70, 73, 74, 106, 109, 112], "html": [2, 12, 19, 20, 27, 29, 30, 32, 43, 46, 47, 49, 52, 62, 67], "doc": [2, 4, 49, 52, 62, 84, 94, 99, 103, 104, 110], "look": [2, 5, 8, 17, 27, 32, 33, 41, 43, 46, 48, 49, 53, 65, 67, 96, 100, 118, 122], "expect": [2, 7, 10, 13, 27, 30, 32, 36, 41, 43, 48, 62, 65, 67, 71, 101, 103, 109, 117, 118, 122], "could": [2, 6, 7, 8, 10, 19, 27, 34, 35, 41, 46, 48, 55, 56, 57, 59, 60, 73, 104, 106, 110, 115, 118], "handi": [2, 25, 27, 41, 46], "collect": [2, 8, 27, 28, 34, 43, 45, 52, 67, 103, 104, 106, 110, 115, 122], "here": [2, 5, 6, 8, 10, 12, 16, 17, 24, 25, 27, 28, 29, 31, 32, 34, 35, 36, 37, 41, 43, 45, 46, 48, 49, 52, 54, 59, 60, 62, 63, 65, 67, 72, 102, 103, 104, 108, 111, 113, 115, 116, 117, 118, 120, 123], "fact": [2, 6, 8, 10, 27, 29, 32, 43, 48, 52, 61, 105, 109, 116], "about": [2, 3, 5, 17, 18, 19, 20, 27, 30, 34, 41, 43, 46, 48, 49, 52, 59, 60, 62, 63, 64, 65, 72, 101, 105, 109, 113, 118, 119, 122], "explain": [2, 7, 22, 27, 32, 73], "histor": [2, 112], "convent": [2, 17, 22, 25, 27, 29, 46, 52, 53, 61, 74, 105], "first": [2, 4, 6, 7, 8, 10, 11, 17, 18, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 34, 37, 39, 41, 43, 45, 46, 47, 48, 49, 52, 53, 59, 63, 67, 68, 73, 74, 83, 90, 105, 109, 110, 113, 117, 118, 119, 123], "host": 2, "svn": 2, "repositori": [2, 4], "googl": [2, 105], "our": [2, 6, 7, 8, 41, 49, 98, 103, 118], "ad": [2, 8, 10, 12, 27, 43, 44, 46, 49, 52, 61, 73, 74, 75, 76, 80, 81, 83, 84, 87, 92, 97, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110], "move": [2, 17, 18, 27, 48, 78, 80, 94, 102, 104, 107, 108, 110], "u": [2, 6, 8, 10, 17, 22, 25, 27, 34, 37, 41, 42, 43, 46, 47, 48, 49, 52, 53, 54, 60, 77, 102, 103, 112, 115, 117, 118, 119], "we": [2, 5, 6, 7, 8, 10, 11, 12, 16, 17, 18, 19, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 34, 41, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 59, 61, 62, 63, 65, 68, 71, 83, 85, 96, 103, 108, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123], "old": [2, 27, 48, 52, 68, 88, 99, 102, 103, 104, 108, 109, 110, 111], "see": [2, 6, 8, 10, 11, 15, 17, 18, 19, 22, 25, 27, 29, 30, 31, 32, 34, 36, 41, 43, 44, 45, 46, 47, 48, 49, 52, 53, 60, 61, 62, 63, 65, 67, 69, 73, 74, 75, 76, 77, 84, 88, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 115, 117, 118, 119, 120, 122], "part": [2, 6, 8, 9, 10, 17, 18, 25, 27, 29, 30, 32, 34, 36, 38, 43, 45, 46, 48, 49, 52, 54, 63, 65, 67, 74, 76, 99, 102, 104, 105, 106, 109], "clone": [2, 4, 10], "repo": 2, "simpli": [2, 8, 25, 27, 30, 38, 43, 52, 61, 67, 68, 106], "fetch": 2, "origin": [2, 6, 8, 10, 17, 18, 19, 22, 25, 27, 30, 32, 34, 35, 37, 42, 43, 45, 46, 48, 49, 52, 53, 54, 67, 68, 76, 113], "ref": [2, 30], "replac": [2, 5, 8, 10, 17, 25, 27, 34, 36, 37, 41, 43, 45, 48, 52, 55, 61, 68, 74, 84, 102, 104, 108, 109, 110, 113], "note": [2, 3, 5, 6, 7, 8, 10, 11, 17, 18, 19, 22, 24, 25, 27, 28, 29, 30, 32, 34, 35, 36, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 60, 61, 62, 65, 67, 102, 103, 108, 111, 112, 117, 119, 120, 122], "dozen": [2, 122], "refer": [2, 3, 4, 6, 8, 10, 11, 12, 15, 16, 17, 18, 19, 20, 24, 27, 28, 29, 30, 32, 40, 43, 45, 46, 47, 48, 50, 52, 53, 54, 55, 61, 65, 66, 67], "codebas": [2, 76, 106, 109, 110], "Such": [2, 7, 8, 27, 48, 113, 114], "either": [2, 6, 8, 10, 12, 18, 25, 27, 28, 29, 30, 32, 34, 36, 41, 43, 46, 47, 49, 52, 53, 54, 59, 60, 62, 68, 115, 118, 119], "url": [2, 112], "fulli": [2, 10, 17, 27, 61, 106, 110], "qualifi": [2, 10], "like": [2, 4, 5, 8, 10, 13, 18, 27, 30, 32, 34, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 57, 59, 61, 62, 63, 67, 70, 74, 77, 88, 96, 97, 102, 103, 104, 105, 106, 108, 109, 110, 113, 114, 115, 117, 118, 119, 122, 123], "123": [2, 27, 29], "unqualifi": 2, "befor": [2, 10, 20, 22, 27, 32, 41, 43, 44, 45, 46, 47, 48, 49, 52, 55, 56, 64, 67, 77, 108, 115, 116, 122], "whole": [2, 8, 27, 32, 45, 47, 52, 76], "stori": 2, "littl": [2, 8, 18, 41, 43, 46, 48, 65, 112], "wors": [2, 36], "becaus": [2, 5, 6, 8, 10, 18, 27, 30, 32, 33, 34, 39, 41, 43, 45, 48, 49, 52, 53, 61, 62, 67, 102, 103, 109, 110, 114, 117, 119], "6f68fa1": 2, "clearli": [2, 3, 8, 25, 61], "were": [2, 3, 6, 18, 20, 25, 27, 37, 41, 42, 43, 44, 45, 48, 54, 67, 68, 73, 74, 75, 76, 77, 80, 83, 88, 93, 94, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 117, 123], "march": 2, "2014": [2, 107, 108, 112], "7235": 2, "transfer": 2, "number": [2, 3, 8, 9, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 28, 29, 30, 32, 33, 34, 36, 37, 41, 42, 44, 46, 47, 48, 49, 52, 54, 55, 57, 60, 61, 63, 65, 67, 71, 73, 74, 77, 83, 92, 99, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 116, 117, 118, 119, 120, 122], "shift": [2, 8, 13, 17, 18, 20, 28, 32, 36, 45, 106, 108], "3099": 2, "e": [2, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 22, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 65, 67, 68, 69, 73, 74, 75, 77, 85, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 117, 119, 121, 122], "doe": [2, 5, 6, 7, 8, 10, 17, 18, 22, 25, 27, 30, 32, 34, 36, 41, 43, 44, 45, 46, 47, 48, 49, 52, 60, 61, 63, 65, 67, 71, 73, 74, 76, 77, 105, 108, 109, 110, 114, 115], "mean": [2, 6, 8, 10, 18, 27, 34, 36, 39, 41, 43, 46, 48, 49, 52, 55, 57, 59, 61, 103, 106, 115, 117, 119], "3222": 2, "standard": [2, 6, 27, 30, 32, 34, 36, 39, 41, 43, 44, 46, 48, 49, 52, 68, 99, 102, 104, 105, 109, 113, 115, 122], "semant": [2, 77], "scheme": [2, 5, 18, 25, 45, 73], "adopt": [2, 17, 25, 61, 109], "440": 2, "alpha": [2, 10, 17, 28, 32, 34, 45, 46, 48, 52], "an": [2, 4, 5, 6, 7, 10, 11, 12, 13, 16, 17, 18, 19, 20, 22, 24, 25, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 67, 68, 70, 73, 74, 75, 76, 83, 101, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123], "suffix": [2, 27, 63], "beta": [2, 17, 31, 34, 46, 52, 105], "bn": 2, "devn": 2, "tag": [2, 46], "latest": [2, 4, 110], "publish": 2, "vx": 2, "y": [2, 3, 5, 6, 7, 10, 17, 18, 25, 27, 28, 30, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 57, 59, 60, 62, 63, 67, 68, 73, 74, 83, 95, 96, 99, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 117, 118, 119, 120, 122, 123], "z": [2, 3, 6, 8, 10, 11, 17, 18, 25, 27, 28, 29, 30, 32, 34, 36, 38, 41, 43, 44, 45, 48, 49, 52, 53, 55, 57, 60, 62, 63, 67, 68, 71, 74, 77, 95, 96, 97, 102, 103, 106, 110, 112, 114, 117, 120, 122, 123], "push": [2, 6], "statement": [3, 4, 6, 27, 32, 36, 38, 46, 63, 87, 102, 103, 108, 117, 123], "execut": [3, 4, 5, 46, 52, 63, 117, 123], "begin": [3, 6, 8, 27, 30, 32, 41, 43, 46, 49, 52, 53, 70, 104, 115, 117], "interact": [3, 4, 27, 33, 34, 39, 48, 83, 84, 96, 103, 104, 105, 121, 122], "session": [3, 27, 34, 35, 121], "d": [3, 6, 8, 10, 12, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 32, 34, 36, 41, 42, 43, 45, 48, 49, 52, 53, 54, 57, 59, 61, 71, 103, 112, 117, 119, 123], "x": [3, 4, 5, 6, 7, 8, 10, 11, 16, 17, 18, 22, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 60, 62, 63, 64, 67, 68, 71, 73, 74, 75, 76, 77, 82, 83, 84, 87, 88, 95, 96, 97, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123], "k": [3, 5, 6, 8, 10, 12, 17, 20, 21, 24, 25, 27, 28, 29, 30, 32, 34, 37, 41, 42, 43, 45, 48, 49, 52, 54, 57, 60, 61, 65, 67, 73, 74, 81, 103, 106, 109, 110, 112, 123], "m": [3, 4, 6, 8, 10, 15, 16, 17, 18, 22, 25, 27, 29, 32, 34, 37, 38, 39, 41, 42, 43, 45, 46, 48, 49, 52, 54, 55, 57, 60, 61, 62, 63, 65, 67, 76, 103, 106, 107, 108, 109, 110, 112, 119, 123], "n": [3, 5, 6, 8, 10, 12, 15, 16, 17, 18, 20, 22, 24, 25, 28, 29, 30, 32, 33, 34, 35, 37, 38, 41, 42, 43, 45, 46, 48, 49, 52, 54, 58, 60, 61, 62, 67, 73, 74, 76, 77, 103, 104, 105, 106, 107, 108, 109, 110, 112, 119, 120, 121, 122, 123], "true": [3, 5, 6, 8, 10, 11, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 67, 68, 71, 74, 77, 84, 87, 89, 97, 103, 104, 105, 106, 107, 108, 109, 110, 113, 115, 117, 119, 120, 122, 123], "f": [3, 5, 6, 7, 8, 10, 11, 17, 18, 22, 25, 27, 28, 30, 31, 32, 34, 37, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 61, 62, 63, 64, 65, 67, 68, 71, 75, 77, 93, 96, 103, 106, 112, 113, 117, 120, 123], "g": [3, 5, 7, 9, 10, 11, 13, 15, 17, 18, 22, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 41, 43, 44, 45, 46, 48, 49, 52, 53, 56, 57, 59, 60, 61, 63, 67, 68, 69, 71, 73, 74, 85, 102, 103, 104, 105, 106, 107, 108, 110, 112, 114, 120, 122, 123], "cl": [3, 17, 27, 31, 34, 41, 42, 52, 60, 64, 67, 105, 117, 123], "feedback": [3, 106], "introduct": [3, 18, 33, 46, 49, 52, 116, 121], "basic": [3, 5, 6, 7, 10, 15, 17, 21, 24, 25, 30, 33, 34, 36, 39, 40, 46, 48, 52, 53, 54, 63, 67, 73, 76, 83, 84, 85, 102, 104, 105, 106, 107, 109, 110, 114, 116, 122], "gotcha": [3, 27, 116], "print": [3, 4, 5, 8, 10, 12, 16, 17, 18, 25, 27, 32, 33, 35, 36, 41, 43, 48, 52, 61, 63, 67, 74, 75, 76, 77, 82, 84, 89, 91, 93, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 114, 116, 117], "simplif": [3, 9, 27, 29, 30, 31, 33, 41, 44, 45, 52, 54, 55, 56, 74, 76, 95, 98, 100, 104, 105, 107, 108, 109, 113, 115, 116, 117], "calculu": [3, 7, 27, 29, 33, 34, 61, 77, 107, 108, 110, 116], "solver": [3, 32, 33, 41, 43, 45, 49, 52, 53, 54, 55, 56, 74, 76, 77, 84, 93, 95, 99, 102, 103, 105, 107, 109, 110, 116], "polynomi": [3, 5, 8, 9, 17, 25, 27, 28, 29, 31, 33, 34, 41, 48, 50, 52, 54, 73, 74, 75, 76, 77, 84, 92, 94, 95, 98, 99, 100, 102, 104, 105, 107, 109, 110, 112, 116, 119, 122, 123], "matric": [3, 8, 33, 46, 48, 49, 55, 57, 61, 63, 73, 74, 94, 96, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 116, 117], "tree": [3, 11, 17, 20, 27, 42, 45, 46, 48, 59, 65, 67, 73, 105, 106, 116], "command": [3, 5, 46, 62, 76, 94, 102, 103, 104], "config": [3, 33, 76], "core": [3, 17, 30, 31, 33, 37, 39, 40, 41, 43, 44, 45, 46, 48, 49, 52, 62, 67, 73, 74, 78, 83, 99, 102, 104, 108, 109, 110, 115, 118], "combinator": [3, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 29, 33, 43, 61, 65, 67, 104, 117, 122], "concret": [3, 18, 29, 30, 33, 34, 43, 86, 102], "integr": [3, 8, 9, 10, 25, 27, 29, 31, 33, 37, 39, 41, 45, 46, 52, 53, 63, 73, 74, 75, 76, 77, 80, 82, 83, 87, 92, 94, 96, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 116, 117, 121], "domain": [3, 6, 10, 25, 27, 32, 33, 34, 41, 43, 52, 73, 74, 75, 76, 77, 102, 110, 119, 120], "set": [3, 4, 5, 6, 7, 8, 10, 11, 15, 16, 17, 18, 19, 23, 24, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 45, 46, 48, 49, 52, 53, 54, 55, 59, 60, 61, 62, 63, 67, 68, 74, 87, 96, 100, 102, 103, 104, 107, 108, 109, 110, 112, 113, 122], "simplifi": [3, 8, 25, 27, 29, 30, 32, 33, 34, 36, 37, 39, 41, 42, 47, 49, 52, 53, 54, 55, 56, 74, 75, 76, 77, 80, 83, 85, 88, 92, 95, 102, 103, 104, 105, 106, 108, 109, 110, 113, 117, 122], "tensor": [3, 14, 31, 33, 41, 46, 57, 59, 60, 62, 102, 104, 105, 106, 110], "util": [3, 5, 14, 16, 17, 26, 29, 33, 40, 46, 48, 49, 50, 62, 63, 64, 65, 67, 68, 69, 70, 71, 74, 75, 102, 103, 104, 107, 108], "pars": [3, 18, 27, 33, 76, 108, 110], "intern": [3, 5, 17, 27, 33, 46, 48, 50, 52, 53, 59, 61, 63, 65, 67, 74, 93, 102, 103, 106, 109, 112, 118, 121], "manipul": [3, 6, 9, 17, 27, 33, 36, 40, 43, 46, 48, 58, 67, 76, 102, 113, 114, 117], "gruntz": [3, 9, 11, 27, 77, 102, 105, 107, 109, 112], "algorithm": [3, 5, 6, 9, 11, 12, 13, 17, 18, 20, 22, 24, 25, 27, 29, 33, 34, 36, 41, 42, 43, 48, 49, 52, 54, 55, 61, 65, 73, 74, 75, 76, 77, 84, 88, 95, 99, 102, 103, 104, 105, 107, 108, 109, 112, 114, 120, 122], "hypergeometr": [3, 5, 6, 9, 27, 29, 31, 33, 54, 96, 103, 104, 110, 112, 122], "expans": [3, 9, 11, 27, 29, 30, 32, 33, 34, 41, 43, 45, 52, 74, 76, 77, 82, 89, 100, 102, 106, 108, 109, 110, 116, 122], "comput": [3, 4, 5, 7, 8, 9, 10, 11, 12, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 30, 32, 34, 38, 41, 43, 45, 47, 48, 49, 52, 54, 62, 65, 67, 71, 74, 76, 77, 78, 83, 99, 102, 103, 104, 107, 108, 109, 110, 112, 113, 114, 115, 117, 119, 120], "meijer": [3, 9, 32, 34, 103, 112, 114, 122], "numer": [3, 8, 9, 10, 25, 27, 32, 33, 43, 44, 45, 46, 48, 52, 55, 60, 61, 62, 68, 71, 73, 74, 75, 78, 83, 94, 96, 102, 103, 104, 105, 110, 115, 116, 122], "evalu": [3, 6, 8, 9, 10, 11, 29, 30, 32, 33, 34, 36, 38, 41, 43, 44, 45, 46, 47, 48, 52, 62, 63, 68, 71, 73, 74, 75, 76, 77, 94, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 117, 122], "report": [3, 17, 41, 43, 73, 101, 102, 109, 112, 123], "issu": [3, 4, 27, 36, 41, 46, 63, 65, 67, 102, 103, 104, 105, 106, 122], "contribut": [3, 10, 52], "rosetta": 3, "stone": 3, "version": [3, 10, 17, 24, 27, 34, 36, 37, 39, 41, 42, 46, 48, 54, 57, 63, 65, 67, 72, 73, 77, 87, 88, 101, 103, 104, 105, 106, 107, 110, 111, 118], "releas": [3, 4, 60, 68, 73, 74, 75, 76, 77, 83, 84, 96, 98, 102, 103, 104, 105, 106, 108, 109, 110], "procedur": [3, 10, 13, 17, 23, 24, 25, 34, 48, 49, 54, 55], "licens": 3, "0": [3, 4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 65, 67, 68, 72, 111, 112, 113, 114, 117, 119, 120, 123], "14": [3, 6, 16, 17, 21, 22, 24, 27, 29, 30, 32, 41, 42, 43, 45, 46, 47, 48, 49, 52, 55, 57, 61, 72, 101, 111, 112, 114], "Not": [3, 27, 29, 31, 36, 46, 72, 77, 109, 110], "yet": [3, 5, 27, 29, 31, 33, 34, 52, 72, 77, 103, 105, 110, 113, 117], "13": [3, 6, 16, 17, 22, 27, 29, 32, 41, 42, 43, 47, 49, 53, 54, 55, 57, 62, 72, 105, 111], "12": [3, 6, 10, 15, 16, 17, 18, 19, 22, 24, 25, 27, 29, 30, 32, 34, 41, 42, 43, 45, 46, 47, 49, 52, 57, 62, 65, 72, 73, 78, 79, 111, 112, 119, 120, 122], "11": [3, 6, 17, 20, 22, 24, 27, 29, 32, 34, 41, 42, 43, 45, 47, 49, 52, 54, 57, 62, 67, 72, 103, 111, 112, 119], "10": [3, 4, 5, 6, 10, 16, 17, 18, 22, 24, 27, 29, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 57, 61, 67, 68, 72, 76, 77, 103, 109, 110, 111, 112, 119, 120, 122], "9": [3, 6, 8, 10, 15, 17, 18, 22, 24, 27, 28, 32, 34, 37, 39, 41, 42, 43, 45, 46, 47, 48, 49, 52, 54, 57, 61, 65, 67, 72, 77, 104, 106, 109, 111, 112, 117, 119, 120, 123], "bibliographi": [3, 74], "3": [4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 65, 67, 68, 71, 73, 74, 75, 76, 77, 78, 83, 85, 88, 95, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 119, 120, 122, 123], "pip": 4, "extra": [4, 5, 8, 10, 27, 33, 63], "depend": [4, 5, 6, 7, 8, 17, 18, 25, 27, 28, 29, 30, 32, 34, 35, 41, 43, 46, 48, 49, 52, 53, 62, 63, 64, 67, 73, 74, 75, 76, 77, 97, 103, 106, 108, 109, 110, 122], "gmpy": [4, 28, 73, 94, 102, 103, 105, 109, 110], "unicod": [4, 32, 35, 41, 46, 83, 89, 91, 96, 109, 117, 121], "pretti": [4, 8, 32, 33, 34, 35, 41, 48, 74, 75, 82, 83, 84, 89, 91, 100, 102, 103, 109, 110, 116, 117], "configur": [4, 26, 73, 74, 102, 109, 110, 121], "ttf": 4, "font": 4, "dejavu": 4, "san": 4, "mono": 4, "seem": [4, 6, 27, 48, 52, 109, 110, 114], "accept": [4, 8, 17, 27, 30, 34, 36, 41, 44, 45, 46, 48, 60, 62, 67, 68, 74, 94, 102, 104, 110], "choic": [4, 6, 10, 18, 32, 46, 48], "On": [4, 10, 19, 32, 36, 41, 45, 46, 52, 65, 112], "debian": [4, 86, 89, 90], "apt": 4, "get": [4, 5, 6, 8, 10, 12, 16, 18, 19, 21, 22, 25, 27, 28, 29, 30, 32, 41, 43, 45, 46, 47, 48, 49, 52, 53, 57, 61, 62, 67, 68, 73, 102, 103, 109, 110, 115, 117, 118, 119, 121, 122, 123], "thei": [4, 5, 6, 7, 8, 10, 15, 17, 18, 24, 27, 29, 30, 32, 34, 36, 37, 38, 39, 41, 43, 44, 46, 47, 48, 49, 52, 53, 55, 57, 61, 62, 63, 65, 67, 72, 77, 103, 104, 106, 108, 113, 114, 116, 117, 119, 122], "come": [4, 8, 22, 24, 25, 27, 30, 32, 34, 41, 45, 49, 52, 67, 75, 104, 113, 117], "requir": [4, 5, 8, 10, 17, 27, 31, 32, 41, 43, 46, 49, 52, 59, 62, 63, 103, 104, 105, 106, 108, 109, 119, 120], "com": [4, 17, 19, 20, 27, 29, 30, 32, 41, 43, 47, 48, 49, 52, 67, 112], "cd": 4, "verifi": [4, 10, 23, 52, 57], "freshli": 4, "up": [4, 5, 6, 8, 17, 18, 20, 27, 28, 32, 34, 35, 36, 41, 43, 45, 46, 48, 49, 52, 53, 54, 62, 63, 65, 77, 83, 98, 101, 104, 106, 109, 111, 119], "interpret": [4, 17, 25, 27, 29, 32, 34, 37, 41, 42, 43, 45, 46, 48, 49, 60, 65, 74, 117, 119], "simpl": [4, 5, 6, 8, 17, 25, 27, 28, 32, 34, 41, 43, 45, 46, 48, 49, 52, 62, 63, 74, 75, 76, 77, 80, 82, 97, 109, 110, 119, 120, 121, 122], "ones": [4, 6, 10, 17, 22, 34, 37, 41, 42, 43, 45, 49, 52, 57, 61, 63, 96, 119, 121], "below": [4, 6, 17, 27, 29, 31, 32, 34, 41, 43, 45, 46, 48, 49, 52, 53, 63, 67, 119], "abc": [4, 17, 25, 27, 32, 34, 35, 41, 45, 46, 48, 49, 57, 63, 65, 67, 68, 89], "1": [4, 5, 7, 8, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 65, 67, 68, 71, 73, 74, 76, 77, 82, 83, 84, 85, 87, 92, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123], "For": [4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 17, 18, 19, 22, 25, 27, 28, 29, 30, 32, 34, 36, 41, 43, 44, 45, 46, 47, 48, 49, 52, 57, 59, 60, 61, 62, 63, 65, 67, 103, 105, 106, 108, 111, 113, 114, 115, 120, 122], "starter": 4, "guid": [4, 46, 61, 83], "full": [4, 5, 10, 17, 18, 27, 32, 34, 45, 46, 48, 49, 87, 100, 102, 103, 104, 105, 113], "unit": [4, 8, 27, 28, 43, 45, 47, 49, 75, 104, 108, 112], "everyth": [4, 27, 32, 34, 39, 46, 73, 102], "pyarg": 4, "bug": [4, 52, 72, 73, 74, 75, 76, 77, 83, 86, 88, 99, 100, 101, 102, 103, 104, 106, 109, 110], "question": [4, 6, 8, 27, 34, 36, 43, 52], "would": [4, 5, 6, 8, 16, 18, 27, 31, 41, 43, 44, 46, 48, 49, 52, 53, 54, 59, 60, 61, 63, 65, 67, 68, 101, 106, 108, 110, 114, 117, 121, 122, 123], "featur": [4, 5, 27, 33, 44, 46, 63, 72, 104, 107, 116], "ticket": 4, "sent": [4, 34, 48], "mail": [4, 46], "instanc": [5, 8, 19, 21, 25, 27, 30, 34, 43, 44, 45, 46, 47, 52, 55, 59, 60, 61, 62, 63, 65, 67, 68, 73, 74, 77, 103, 105, 106, 108, 110, 113, 114, 117, 118, 119, 122], "class": [5, 6, 7, 8, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 43, 44, 45, 47, 49, 52, 53, 54, 58, 60, 61, 62, 63, 64, 65, 67, 68, 73, 74, 75, 78, 84, 88, 95, 102, 103, 104, 105, 106, 107, 108, 110, 114, 115, 118], "custom": [5, 18, 27, 41, 46, 49, 62, 68, 102, 104, 107], "precis": [5, 27, 28, 29, 32, 34, 46, 48, 49, 63, 71, 73, 75, 78, 102, 103, 105, 110, 113, 117, 122], "second": [5, 8, 10, 17, 18, 21, 22, 23, 24, 25, 29, 30, 32, 34, 41, 43, 45, 46, 48, 49, 52, 57, 67, 101, 102, 110, 112, 119], "argument": [5, 6, 8, 10, 17, 18, 21, 24, 25, 27, 29, 30, 31, 32, 34, 36, 38, 41, 43, 44, 45, 46, 47, 48, 52, 53, 59, 60, 62, 63, 65, 67, 68, 71, 73, 74, 75, 85, 88, 94, 102, 103, 104, 105, 107, 108, 109, 110, 114, 118, 119, 120, 122], "100000000000000": 5, "1000000000": 5, "125": [5, 27, 43, 49], "30": [5, 27, 29, 32, 41, 43, 45, 48, 49, 54, 57, 90, 109], "125000000000000000000000000000": 5, "100000000000000005551115123126": 5, "As": [5, 6, 8, 17, 27, 28, 29, 30, 32, 36, 41, 46, 47, 52, 61, 67, 68, 108, 114, 118, 120, 121, 122, 123], "accur": [5, 27, 43, 96], "15": [5, 6, 10, 16, 17, 22, 24, 27, 29, 32, 34, 41, 42, 43, 45, 46, 47, 48, 49, 53, 55, 57, 67, 71, 109, 110, 111, 113, 119], "digit": [5, 27, 34, 43, 45, 48, 71, 74, 84, 94, 95, 113], "input": [5, 10, 22, 27, 29, 36, 41, 43, 45, 46, 48, 49, 62, 63, 65, 67, 68, 74, 76, 107, 108, 118, 122, 123], "while": [5, 18, 19, 22, 25, 27, 29, 35, 36, 41, 42, 43, 52, 61, 63, 65, 67, 74, 76, 103, 104, 106, 109, 110], "those": [5, 6, 10, 17, 18, 24, 25, 27, 28, 31, 36, 43, 45, 46, 48, 52, 53, 55, 61, 65, 67, 97, 105, 106, 107], "denomin": [5, 8, 10, 27, 28, 32, 34, 43, 45, 46, 48, 49, 52, 54, 55, 73, 76, 83, 92, 104, 112, 122], "power": [5, 6, 7, 10, 11, 18, 30, 33, 34, 38, 43, 45, 46, 47, 49, 52, 59, 61, 63, 67, 73, 74, 75, 76, 83, 92, 102, 103, 105, 108, 109, 110, 113, 114, 115, 116, 117, 119, 120], "2": [5, 7, 8, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 65, 67, 68, 71, 73, 74, 76, 77, 79, 80, 82, 83, 85, 87, 97, 98, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123], "exact": [5, 6, 10, 25, 27, 28, 41, 45, 48, 52, 76, 105, 117, 121], "high": [5, 27, 43, 45, 46, 49, 73, 108], "decim": [5, 27, 44, 45, 104], "better": [5, 8, 11, 18, 27, 32, 36, 52, 53, 54, 62, 67, 68, 73, 95, 96, 100, 105, 106, 107, 108, 109, 113], "string": [5, 12, 16, 27, 35, 36, 41, 43, 44, 46, 48, 52, 59, 60, 61, 62, 63, 67, 68, 70, 74, 99, 102, 103, 108, 109, 121], "ration": [5, 6, 8, 10, 25, 28, 29, 30, 32, 33, 34, 41, 43, 44, 46, 47, 48, 49, 52, 54, 55, 71, 73, 74, 75, 76, 77, 83, 102, 104, 108, 109, 110, 112, 115, 116, 118, 120, 121], "evalf": [5, 25, 29, 30, 31, 32, 33, 34, 41, 42, 43, 45, 47, 48, 62, 68, 73, 74, 75, 76, 83, 95, 96, 110, 113, 117], "100000000000000000000000000000": 5, "determin": [5, 7, 8, 10, 11, 12, 17, 27, 30, 34, 41, 42, 43, 45, 46, 48, 49, 52, 59, 67, 103, 105, 107, 109, 119, 122], "perform": [5, 10, 17, 18, 21, 25, 27, 28, 30, 34, 39, 41, 43, 45, 48, 49, 52, 54, 57, 61, 62, 104, 106, 113, 114, 117, 122], "arithmet": [5, 10, 11, 27, 41, 43, 45, 83, 102, 110, 115, 122], "displai": [5, 6, 46, 59, 76], "two": [5, 6, 7, 8, 10, 13, 16, 17, 18, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 34, 36, 37, 41, 42, 43, 45, 46, 48, 49, 52, 53, 54, 57, 60, 61, 65, 67, 73, 76, 77, 103, 104, 106, 108, 110, 114, 115, 118, 119, 121, 122], "differ": [5, 6, 10, 16, 17, 18, 22, 25, 27, 29, 30, 32, 34, 36, 38, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 59, 61, 62, 63, 65, 67, 68, 74, 76, 77, 103, 106, 108, 109, 112, 115, 117, 118, 120], "togeth": [5, 17, 27, 28, 41, 43, 45, 46, 48, 52, 54, 67, 102], "oper": [5, 6, 10, 11, 17, 18, 19, 25, 27, 30, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 52, 54, 57, 59, 60, 61, 62, 65, 67, 74, 76, 83, 99, 102, 103, 104, 105, 106, 108, 109, 110, 115, 116, 122], "higher": [5, 11, 27, 32, 41, 42, 45, 48, 52, 57, 68, 71, 76, 107], "result": [5, 6, 8, 10, 17, 18, 22, 25, 27, 30, 34, 36, 41, 42, 43, 44, 45, 46, 48, 49, 52, 53, 57, 59, 61, 62, 63, 65, 67, 71, 74, 75, 76, 77, 83, 102, 104, 105, 106, 107, 108, 109, 110, 117, 122], "001": [5, 12], "1415": 5, "0001": [5, 12], "ha": [5, 6, 8, 10, 12, 16, 17, 18, 20, 22, 25, 27, 28, 29, 30, 32, 33, 34, 36, 38, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 57, 59, 60, 61, 63, 65, 67, 74, 76, 77, 85, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 119, 120, 122], "uncertainti": [5, 104], "003": 5, "5": [5, 6, 7, 8, 10, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 34, 35, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 60, 61, 62, 67, 68, 73, 74, 94, 96, 97, 101, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 115, 119, 120, 122, 123], "shown": [5, 6, 10, 16, 18, 25, 27, 32, 46, 52, 116], "31417": 5, "model": [5, 36, 43, 104], "propag": 5, "signific": [5, 27, 34, 74, 83, 108], "rather": [5, 8, 10, 17, 18, 19, 27, 36, 38, 43, 44, 45, 49, 52, 60, 65, 103, 117], "emploi": [5, 34, 43, 52], "ensur": [5, 27, 41, 42], "stabil": [5, 17, 22, 24, 59, 104], "method": [5, 6, 10, 11, 12, 17, 18, 19, 25, 27, 30, 31, 32, 33, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 57, 58, 60, 61, 63, 65, 67, 68, 73, 74, 75, 76, 77, 82, 83, 84, 90, 91, 92, 95, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 116, 122], "50000000000000": [5, 27], "5000": 5, "increas": [5, 10, 18, 24, 27, 43, 52, 67, 76, 104, 110], "constructor": [5, 14, 17, 19, 27, 31, 32, 33, 39, 41, 46, 47, 60, 63, 73, 118, 119], "50000000000000000000000000000": 5, "complic": [5, 6, 8, 10, 17, 25, 30, 32, 34, 41, 48, 59, 60, 63, 65, 73, 77], "becom": [5, 22, 25, 27, 31, 35, 44, 52, 61, 122], "concern": [5, 46, 48, 49, 62, 63, 65, 104, 122], "consid": [5, 6, 7, 10, 16, 18, 21, 27, 29, 30, 36, 41, 43, 46, 48, 49, 52, 53, 63, 67, 73, 119, 120, 122], "100": [5, 12, 16, 27, 41, 43, 73, 74, 75, 76, 110], "th": [5, 8, 10, 17, 18, 24, 29, 30, 32, 41, 43, 45, 49, 52, 54, 57, 61], "fibonacci": [5, 31, 43, 76, 109], "excel": 5, "approxim": [5, 17, 25, 27, 32, 34, 41, 43, 45, 102, 108, 112, 117], "varphi": [5, 32, 52], "sqrt": [5, 6, 8, 10, 27, 28, 29, 31, 32, 34, 35, 41, 43, 45, 46, 48, 49, 52, 55, 67, 68, 73, 74, 75, 76, 77, 82, 106, 109, 110, 113, 117, 120, 121, 122], "where": [5, 6, 7, 8, 10, 16, 17, 18, 20, 22, 24, 25, 27, 29, 30, 32, 34, 36, 38, 41, 42, 43, 45, 46, 48, 49, 52, 53, 54, 59, 61, 63, 67, 83, 90, 101, 106, 109, 110, 113, 117, 119, 122], "golden": [5, 27, 43], "ratio": [5, 25, 27, 29, 32, 37, 41, 43, 46, 48, 76], "With": [5, 6, 10, 25, 27, 43, 46, 48, 57, 106, 110, 120], "ordinari": [5, 17, 30, 32, 34, 52, 56, 57, 65, 74, 112, 117], "subtract": [5, 10, 18, 27, 43, 103, 118], "each": [5, 8, 10, 12, 17, 18, 22, 27, 29, 30, 34, 37, 39, 41, 42, 43, 45, 46, 48, 49, 52, 53, 57, 59, 60, 61, 63, 65, 67, 103, 106, 114, 116, 123], "erron": [5, 109], "complet": [5, 6, 10, 27, 30, 31, 32, 41, 43, 45, 48, 49, 52, 63, 73, 74, 75, 76, 77, 87, 103, 105, 108, 109, 110, 122], "cancel": [5, 6, 10, 27, 34, 43, 45, 48, 76, 77, 82, 83, 102, 106, 109, 117, 122], "goldenratio": [5, 48, 109, 120], "1000": [5, 12, 38, 83], "4": [5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 60, 61, 62, 65, 67, 68, 73, 74, 76, 77, 78, 79, 80, 84, 87, 96, 97, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 114, 119, 120, 122], "3466557686937455e": 5, "208": 5, "track": [5, 17, 27, 32, 73, 74, 114], "order": [5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 43, 44, 46, 48, 49, 52, 53, 54, 55, 56, 57, 61, 62, 63, 65, 67, 73, 74, 75, 76, 77, 85, 95, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 114, 118, 120, 122], "obtain": [5, 6, 7, 8, 10, 12, 17, 18, 19, 22, 27, 29, 32, 34, 41, 43, 45, 46, 48, 49, 52, 53, 55, 67, 104, 120, 121, 122], "correct": [5, 6, 10, 16, 17, 23, 25, 27, 30, 34, 41, 43, 45, 52, 59, 61, 62, 67, 71, 74, 107, 109, 110, 115, 121], "64613129282185e": 5, "unfortun": [5, 27, 49], "cannot": [5, 10, 11, 18, 23, 25, 27, 28, 34, 37, 39, 41, 42, 43, 45, 46, 48, 52, 57, 73, 74, 75, 77, 109, 110, 113], "tell": [5, 8, 18, 32, 37, 42, 44, 52, 62], "exactli": [5, 8, 12, 27, 31, 44, 48, 52, 57, 65, 67, 114, 117], "zero": [5, 6, 7, 8, 10, 11, 17, 18, 22, 29, 30, 32, 34, 37, 38, 40, 41, 42, 43, 45, 47, 48, 49, 52, 53, 54, 55, 57, 67, 73, 74, 75, 76, 96, 102, 106, 109, 112, 119], "apart": [5, 10, 17, 22, 27, 30, 34, 45, 49, 61, 74, 75, 87, 118, 122], "mere": 5, "veri": [5, 6, 8, 10, 22, 27, 29, 34, 41, 43, 46, 48, 49, 52, 55, 56, 62, 63, 68, 77, 88, 109, 110, 118, 122], "small": [5, 17, 18, 29, 41, 43, 48, 49, 54, 67, 86, 99, 100, 103, 107, 109, 117], "therefor": [5, 10, 22, 27, 32, 43, 45, 46, 52, 57, 61], "cap": 5, "around": [5, 7, 10, 11, 16, 18, 27, 30, 34, 43, 46, 49, 52, 73, 75, 77, 114, 117], "traceback": [5, 10, 18, 27, 34, 37, 39, 41, 42, 45, 59, 67, 109, 114, 119], "most": [5, 7, 8, 10, 17, 18, 25, 27, 28, 33, 34, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 49, 52, 53, 59, 63, 67, 83, 97, 104, 105, 107, 113, 114, 115, 117, 118, 119, 121, 122], "recent": [5, 10, 18, 27, 32, 34, 37, 39, 41, 42, 45, 59, 67, 101, 104, 114, 119], "precisionexhaust": 5, "except": [5, 10, 18, 27, 30, 32, 40, 43, 45, 46, 49, 52, 53, 59, 60, 62, 63, 67, 73, 76, 97, 99, 103, 107, 110], "indic": [5, 6, 10, 12, 16, 17, 18, 19, 21, 22, 25, 27, 29, 32, 34, 36, 41, 42, 43, 46, 48, 57, 58, 59, 60, 61, 62, 63, 104, 119], "fail": [5, 6, 8, 10, 17, 18, 22, 25, 27, 30, 34, 37, 39, 41, 43, 52, 67, 73, 74, 75, 76, 77, 88, 101, 109, 110], "achiev": [5, 8, 27, 32, 43, 48, 83], "forc": [5, 6, 23, 27, 30, 34, 45, 48, 49, 56, 74, 102, 110], "maxn": [5, 27], "keyword": [5, 17, 18, 27, 29, 41, 43, 46, 48, 62, 74, 102, 104, 110, 120, 122], "500": [5, 108], "60123853010113e": 5, "210": [5, 43, 49], "thousand": [5, 43], "awar": [5, 8, 27, 41, 68, 102], "slowdown": [5, 83], "extrem": [5, 17, 34, 48, 73], "case": [5, 6, 7, 8, 10, 11, 13, 15, 17, 18, 22, 25, 27, 28, 29, 30, 32, 33, 34, 36, 41, 43, 44, 45, 46, 48, 49, 52, 53, 54, 55, 59, 60, 61, 63, 67, 68, 73, 74, 75, 83, 96, 99, 103, 104, 110, 113, 115, 117, 119, 120, 122], "fals": [5, 10, 11, 17, 18, 19, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 61, 62, 63, 64, 67, 68, 74, 76, 84, 94, 101, 104, 106, 108, 109, 110, 113, 115, 117, 120, 121], "imprecis": 5, "answer": [5, 6, 7, 8, 10, 17, 27, 34, 41, 43, 48, 55, 65, 73, 74, 76, 77, 104, 105, 109, 110, 117], "instead": [5, 8, 10, 17, 19, 22, 25, 27, 34, 36, 39, 43, 45, 46, 48, 52, 55, 59, 60, 65, 68, 73, 74, 76, 77, 82, 83, 87, 88, 102, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118], "term": [5, 6, 7, 8, 10, 11, 17, 27, 29, 30, 32, 33, 34, 36, 41, 43, 45, 46, 47, 48, 49, 52, 53, 54, 59, 60, 67, 74, 75, 76, 77, 84, 102, 103, 104, 106, 107, 109, 110, 114, 115, 117, 118, 122], "binet": 5, "formula": [5, 9, 10, 20, 25, 27, 29, 32, 41, 43, 45, 46, 48, 49, 74, 102, 108, 117], "126": [5, 41, 43], "1336": 5, "In": [5, 6, 8, 10, 12, 16, 17, 18, 25, 27, 28, 29, 30, 31, 32, 34, 36, 37, 41, 42, 43, 44, 45, 46, 48, 49, 52, 53, 54, 55, 59, 61, 63, 65, 67, 68, 77, 102, 103, 104, 106, 108, 112, 113, 115, 116, 117, 119, 120, 121, 122], "situat": [5, 6, 52, 55], "occur": [5, 6, 10, 18, 27, 31, 41, 44, 48, 53, 67, 76], "chop": [5, 27, 32, 41, 113], "real": [5, 6, 8, 10, 11, 25, 27, 28, 29, 30, 31, 32, 34, 41, 43, 45, 47, 48, 52, 63, 74, 76, 77, 102, 104, 106, 108, 109, 110, 114, 117, 122], "imaginari": [5, 27, 30, 32, 41, 45, 48, 73, 74, 109, 113], "portion": [5, 37, 41], "00000000000000": 5, "wish": [5, 6, 27, 43, 65, 106, 114], "remov": [5, 10, 11, 17, 20, 24, 27, 28, 30, 41, 45, 48, 49, 52, 62, 63, 67, 73, 74, 75, 76, 77, 83, 85, 92, 94, 95, 96, 99, 102, 105, 106, 107, 108, 109, 110, 113], "meaningless": 5, "re": [5, 6, 8, 10, 17, 18, 27, 31, 32, 34, 41, 46, 48, 71, 73, 74, 110, 112, 114, 122], "round": [5, 27, 29, 30, 45, 61, 67, 71, 104, 110], "12345": [5, 110], "012297": 5, "_": [5, 6, 8, 10, 11, 15, 16, 17, 18, 19, 22, 25, 27, 29, 30, 32, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 52, 61, 67, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123], "01": [5, 18, 27, 48], "deal": [5, 6, 10, 25, 34, 45, 49, 70, 112, 117, 120], "contain": [5, 8, 10, 11, 17, 18, 22, 24, 25, 28, 30, 32, 33, 34, 36, 41, 43, 45, 46, 47, 48, 49, 50, 52, 53, 55, 59, 60, 61, 62, 63, 65, 66, 67, 68, 76, 102, 103, 104, 105, 108, 109, 110, 113], "arbitrari": [5, 13, 18, 19, 25, 27, 28, 29, 32, 36, 41, 48, 52, 53, 54, 55, 61, 67, 68, 78, 104, 105, 106, 108, 113, 114, 120, 122, 123], "rel": [5, 6, 8, 10, 17, 18, 19, 23, 24, 25, 43, 47, 54, 67, 84, 108, 110], "given": [5, 6, 7, 8, 10, 11, 12, 15, 16, 17, 18, 19, 20, 22, 25, 27, 28, 29, 30, 32, 34, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 60, 61, 63, 65, 67, 68, 74, 76, 103, 104, 108, 113, 119, 122], "v": [5, 6, 8, 10, 11, 22, 25, 27, 36, 37, 41, 42, 43, 48, 49, 52, 54, 61, 67, 77, 109, 112], "pi": [5, 6, 8, 11, 18, 29, 30, 32, 34, 41, 43, 46, 48, 52, 75, 76, 77, 83, 84, 94, 95, 108, 109, 110, 113, 117], "co": [5, 6, 8, 11, 27, 29, 31, 32, 34, 41, 43, 44, 45, 46, 48, 49, 52, 57, 67, 71, 73, 74, 77, 83, 88, 96, 109, 110, 113, 114, 117, 122, 123], "31": [5, 15, 27, 43, 45, 49], "9562288417661": 5, "956": 5, "infinit": [5, 11, 25, 27, 28, 29, 30, 41, 43, 48, 49, 55, 67, 74, 76, 106, 108], "seri": [5, 7, 8, 11, 17, 25, 27, 29, 30, 32, 43, 46, 52, 73, 74, 76, 77, 82, 88, 89, 91, 95, 96, 99, 102, 106, 108, 109, 110, 112, 116], "support": [5, 10, 11, 18, 25, 27, 31, 32, 34, 41, 43, 45, 46, 47, 48, 52, 53, 55, 57, 60, 62, 63, 73, 74, 75, 76, 77, 82, 83, 85, 89, 96, 102, 103, 104, 105, 106, 108, 109, 110, 113, 114, 119, 120], "oo": [5, 11, 25, 27, 29, 30, 31, 32, 34, 41, 47, 48, 52, 60, 73, 74, 75, 76, 77, 83, 103, 107, 108, 109, 110, 114, 117], "29128599706266": 5, "50": [5, 17, 32, 41, 43, 45, 48, 95, 96, 109], "2912859970626635404072825905956005414986193682745": 5, "exp": [5, 6, 7, 8, 11, 27, 29, 31, 32, 34, 38, 41, 43, 45, 48, 52, 53, 57, 67, 73, 76, 77, 96, 99, 105, 106, 109, 110, 114, 117, 123], "14159265358979323846264338328": 5, "By": [5, 6, 10, 27, 29, 32, 37, 39, 41, 42, 43, 44, 45, 46, 48, 49, 52, 59, 61, 67, 113], "tanh": [5, 27, 31, 34, 46, 48, 122], "sinh": [5, 6, 8, 27, 31, 32, 46, 48, 76, 122], "quadratur": [5, 27, 34, 52, 96, 105], "effici": [5, 12, 17, 22, 27, 28, 29, 41, 43, 45, 48, 49, 54, 67, 83, 99, 102, 107, 112, 119, 122], "robust": [5, 23, 27, 45, 48, 52, 67, 68, 84, 85, 95, 96, 98, 99, 102, 106, 107, 108, 109], "smooth": [5, 27, 43], "integrand": [5, 6, 8, 32, 34, 101], "endpoint": [5, 25, 27, 47], "singular": [5, 11, 30, 32, 34, 41, 42, 52, 104, 109, 114], "struggl": 5, "highli": [5, 27, 45, 63], "oscillatori": [5, 27, 96], "mid": [5, 49], "interv": [5, 10, 27, 30, 32, 34, 45, 47, 73, 74, 76, 77, 102, 103, 104, 107, 109, 110], "discontinu": [5, 30, 32, 34, 77], "mani": [5, 6, 8, 10, 15, 17, 22, 27, 28, 30, 32, 34, 37, 41, 42, 43, 48, 49, 52, 53, 55, 59, 63, 67, 86, 97, 98, 99, 100, 102, 103, 104, 105, 108, 113, 114, 116, 117], "correctli": [5, 6, 41, 52, 74, 76, 81, 83, 99, 103, 109, 110, 115], "estim": [5, 10, 25], "four": [5, 18, 27, 32, 43, 48, 49, 52, 57, 61], "ab": [5, 6, 25, 27, 29, 31, 32, 41, 46, 49, 52, 65, 73, 74, 76, 102, 109, 110, 112], "sin": [5, 6, 8, 11, 27, 29, 31, 32, 34, 41, 44, 46, 47, 48, 52, 57, 63, 67, 68, 71, 73, 74, 82, 83, 85, 88, 102, 105, 108, 109, 110, 113, 114, 117, 122, 123], "split": [5, 6, 10, 25, 27, 34, 44, 46, 61, 67, 102, 105], "piec": [5, 8, 27, 63], "34635637913639": 5, "similar": [5, 8, 25, 27, 29, 30, 32, 36, 48, 52, 54, 65, 102, 104, 117, 119, 122], "dealt": [5, 6], "much": [5, 6, 8, 13, 22, 27, 32, 34, 45, 48, 52, 53, 54, 63, 65, 74, 96, 100, 103, 104, 105, 107, 114, 117, 122], "more": [5, 6, 8, 10, 17, 18, 23, 25, 27, 29, 30, 31, 32, 34, 36, 39, 41, 43, 45, 46, 48, 49, 52, 53, 56, 61, 63, 65, 67, 68, 74, 75, 78, 83, 84, 85, 88, 92, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 115, 116, 117, 119, 122], "quad": [5, 27, 32, 46], "osc": [5, 27], "504067061906928": 5, "20": [5, 16, 17, 18, 25, 27, 29, 32, 43, 45, 46, 47, 48, 49, 86, 89, 100, 109, 117], "50406706190692837199": 5, "factor": [5, 8, 9, 17, 18, 25, 27, 29, 30, 32, 41, 42, 43, 45, 48, 49, 52, 59, 65, 67, 74, 75, 76, 77, 83, 95, 97, 98, 99, 102, 105, 106, 109, 110, 116, 117, 119, 122], "ax": [5, 6, 10, 41, 42, 49, 52, 57, 60, 106, 108], "transform": [5, 9, 11, 22, 25, 27, 29, 32, 33, 35, 38, 41, 45, 47, 48, 49, 52, 53, 54, 60, 63, 68, 96, 102, 104, 106, 109, 110, 117, 119, 122], "variabl": [5, 6, 7, 10, 11, 21, 25, 27, 32, 34, 36, 41, 44, 45, 46, 48, 49, 52, 53, 55, 63, 65, 67, 73, 74, 76, 77, 83, 96, 99, 102, 104, 105, 106, 108, 109, 110, 113, 114, 117, 120, 122], "init_print": [5, 34, 35, 41, 105, 107, 117, 121, 123], "pretty_print": [5, 34, 35, 41, 46, 117, 123], "use_unicod": [5, 32, 34, 35, 41, 43, 46, 48, 52, 53, 110, 117, 121, 123], "wrap_lin": [5, 34, 41, 46, 52], "no_glob": [5, 34, 35, 41], "intgrl": 5, "dx": [5, 22, 34, 41, 49, 52, 53, 57, 106, 114, 117, 121, 123], "summat": [5, 25, 27, 29, 32, 46, 48, 59, 60, 61, 62, 74, 76, 96, 102, 105, 106, 112, 114], "converg": [5, 8, 32, 34, 43, 91, 108, 114], "quickli": [5, 10, 17, 43, 65, 67, 89], "enough": [5, 10, 27, 43, 46, 52, 67, 113], "extrapol": [5, 91], "euler": [5, 25, 27, 31, 32, 43, 52, 77, 105, 107], "maclaurin": [5, 25], "richardson": 5, "speed": [5, 17, 34, 41, 46, 48, 52, 62, 65, 67, 104, 122], "allow": [5, 6, 10, 12, 17, 19, 25, 27, 28, 35, 36, 38, 39, 41, 43, 44, 45, 46, 48, 52, 57, 60, 67, 68, 74, 102, 103, 104, 108, 113, 118, 122], "slowli": 5, "64493406684823": 5, "zeta": [5, 29, 31, 46, 73, 110], "log": [5, 6, 7, 8, 11, 17, 25, 27, 29, 31, 32, 34, 41, 43, 46, 48, 52, 73, 74, 76, 77, 88, 102, 103, 104, 105, 107, 109, 110, 114, 122], "577215664901533": 5, "57721566490153286060651209008240243104215933593992": 5, "eulergamma": [5, 29, 32, 109], "finit": [5, 9, 10, 15, 17, 25, 27, 28, 34, 45, 47, 49, 52, 55, 73, 74, 75, 76, 77, 99, 102, 106, 107, 108, 109, 120], "10000000": [5, 45], "20000000": [5, 45], "693147255559946": 5, "assumpt": [5, 17, 20, 25, 30, 33, 34, 36, 38, 41, 47, 48, 52, 55, 56, 63, 67, 74, 76, 83, 96, 100, 102, 105, 108, 109, 110, 116, 122], "alwai": [5, 6, 7, 8, 17, 18, 25, 27, 28, 30, 32, 34, 36, 41, 43, 45, 47, 48, 49, 52, 53, 63, 68, 90, 103, 104, 114, 115, 117, 118, 122], "optim": [5, 10, 11, 12, 17, 32, 43, 45, 46, 48, 62, 96, 102, 106, 109, 122], "fine": [5, 27, 46, 48], "tune": [5, 46], "over": [5, 7, 9, 17, 18, 21, 23, 27, 28, 29, 34, 36, 41, 43, 45, 46, 48, 49, 52, 54, 57, 59, 73, 74, 75, 76, 77, 97, 102, 104, 105, 110, 112, 120, 122], "might": [5, 6, 8, 27, 30, 41, 43, 45, 46, 48, 49, 63, 67, 104, 113, 117, 118, 122], "worthwhil": 5, "manual": [5, 10, 44, 46, 52, 104, 110, 121], "euler_maclaurin": [5, 25], "factori": [5, 10, 25, 27, 31, 32, 41, 48, 54, 63, 67, 68, 73, 74, 77, 102, 107, 122], "binomi": [5, 25, 31, 32, 43, 48, 52, 67, 74, 76, 77, 102, 109, 122], "coeffici": [5, 6, 7, 8, 10, 11, 25, 27, 28, 29, 32, 41, 42, 43, 45, 48, 49, 52, 53, 54, 61, 67, 73, 74, 75, 76, 83, 102, 105, 106, 109, 110, 120, 122], "rapidli": [5, 6, 7, 27], "ramanujan": [5, 29, 43], "000": [5, 12, 34, 95], "r": [5, 6, 8, 10, 12, 17, 18, 27, 28, 30, 32, 34, 37, 41, 42, 43, 45, 46, 47, 48, 49, 52, 54, 61, 63, 65, 73, 74, 77, 112, 120], "9801": 5, "1103": [5, 75], "26390": 5, "396": [5, 110], "10000": [5, 43, 77], "141592653589793238462643383279502884197169399375105820974944592307": 5, "nsimplifi": [5, 27, 33, 97, 102, 110], "attempt": [5, 17, 22, 24, 27, 34, 43, 46, 48, 49, 52, 104], "find": [5, 6, 7, 8, 10, 11, 17, 20, 21, 22, 25, 27, 30, 32, 33, 34, 41, 43, 47, 48, 49, 52, 54, 55, 73, 84, 98, 102, 104, 108, 109, 110, 114, 117, 119], "equal": [5, 8, 10, 16, 17, 18, 22, 24, 25, 28, 29, 30, 32, 36, 37, 38, 39, 41, 43, 46, 47, 49, 52, 53, 54, 55, 61, 62, 63, 67, 74, 76, 77, 104, 105, 109, 110, 114, 116, 123], "guess": [5, 8, 49, 54], "simpler": [5, 6, 8, 10, 27, 32, 48, 52, 54, 122], "capabl": [5, 6, 27, 102, 106, 113, 116, 117], "identifi": [5, 19, 27, 34, 35, 41, 52, 53, 109, 122], "algebra": [5, 6, 9, 11, 17, 27, 28, 30, 33, 34, 40, 43, 49, 50, 51, 52, 54, 73, 74, 77, 99, 102, 104, 105, 106, 110, 112, 115, 116, 117, 120], "linear": [5, 8, 10, 18, 25, 27, 30, 32, 33, 34, 38, 40, 45, 49, 53, 54, 55, 73, 74, 75, 99, 103, 105, 106, 108, 109, 110], "combin": [5, 8, 10, 27, 29, 32, 34, 41, 45, 46, 48, 49, 52, 54, 57, 65, 67, 77, 99, 103, 104, 106, 108, 118, 122], "constant": [5, 6, 7, 8, 10, 11, 25, 27, 32, 45, 46, 48, 49, 52, 53, 54, 63, 67, 74, 75, 95, 104, 105, 109, 110, 114, 123], "certain": [5, 6, 8, 10, 17, 24, 27, 34, 44, 46, 48, 49, 52, 63, 64, 76, 104, 110, 113], "elementari": [5, 6, 27, 31, 32, 33, 34, 43, 45, 67, 103, 105, 109, 110], "preced": [5, 18, 29, 48], "minimum": [5, 10, 17, 18, 20, 22, 27, 30, 41, 67], "toler": [5, 27, 28, 45, 48], "6": [5, 6, 10, 12, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 32, 34, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 57, 61, 62, 65, 67, 73, 74, 76, 83, 92, 102, 103, 109, 111, 112, 114, 119, 120, 122, 123], "28": [5, 17, 41, 43, 49, 52, 102, 112], "7": [5, 6, 8, 10, 12, 16, 17, 18, 19, 20, 22, 24, 25, 27, 29, 30, 32, 34, 37, 39, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 55, 57, 60, 61, 62, 65, 67, 68, 73, 76, 81, 94, 109, 111, 112, 114, 119, 120, 123], "355": [5, 43, 112], "113": [5, 43, 49, 109], "33333": 5, "1e": [5, 27, 45, 71], "635": [5, 73], "504": 5, "___": [5, 25, 29, 34, 35, 41, 48, 60, 67, 114, 117, 120, 121, 122, 123], "sever": [5, 6, 7, 13, 17, 18, 25, 27, 29, 31, 32, 34, 47, 55, 63, 67, 107, 108, 113, 119, 121, 122], "advanc": [5, 17, 27, 29, 41, 45, 62, 63, 67, 112, 116], "130198866629986772369127970337": 5, "atan": [5, 31, 52, 68], "____": [5, 25, 34, 67, 113, 117, 119, 122], "49": [5, 29, 41, 43, 49, 112], "17": [5, 6, 16, 17, 18, 30, 41, 43, 48, 49, 52, 57, 65, 73, 91, 96, 99, 101, 103, 117], "___________": [5, 52, 119], "gamma": [5, 6, 8, 10, 25, 27, 29, 31, 34, 46, 48, 52, 68, 74, 77, 103, 104, 105, 106, 107, 110, 122], "numpi": [5, 27, 40, 60, 61, 62, 63, 68, 77, 80, 82, 85, 96, 101, 102, 108, 109, 110, 113, 115], "vector": [5, 8, 12, 17, 18, 32, 41, 60, 61, 62, 77, 85, 103, 104, 106, 107, 108, 110, 113, 119], "sometim": [5, 6, 27, 29, 32, 45, 49, 52, 67, 76, 77, 109, 110, 113, 119, 122], "incur": 5, "unnecessari": [5, 45, 76], "cost": [5, 43, 67], "chain": [5, 17, 22, 27, 103], "get_numpy_arrai": 5, "routin": [5, 10, 16, 27, 36, 41, 42, 43, 45, 46, 48, 49, 52, 53, 62, 66, 67, 71, 103, 107, 108], "tight": 5, "loop": [5, 27, 43, 46, 52, 65], "someth": [5, 6, 7, 27, 33, 36, 41, 43, 48, 52, 63, 103, 104, 110, 113, 117], "int": [5, 6, 25, 27, 29, 30, 32, 34, 35, 36, 41, 43, 46, 49, 52, 61, 67, 74, 109, 115, 117, 121], "temp": 5, "slightli": [5, 8, 22, 44, 48, 106], "sub": [5, 25, 30, 32, 36, 38, 41, 42, 43, 48, 49, 52, 53, 55, 62, 73, 74, 76, 84, 96, 99, 102, 103, 106, 109, 110, 113, 114], "alloc": [5, 30], "arrai": [5, 17, 18, 22, 23, 32, 33, 34, 41, 43, 46, 58, 60, 62, 63, 65, 68, 74, 80, 101, 102, 108, 109], "walk": [5, 8, 12, 116], "memori": [5, 10, 43, 57, 62, 65, 67], "twice": [5, 27, 43, 46, 65, 114], "onc": [5, 6, 8, 10, 12, 17, 22, 27, 34, 46, 48, 52, 67, 113, 114, 122, 123], "been": [5, 6, 8, 10, 17, 18, 19, 22, 27, 34, 43, 48, 53, 57, 63, 67, 72, 77, 102, 103, 104, 105, 106, 107, 108, 117], "suffici": [5, 7, 17, 18, 22, 52, 65, 67], "solut": [5, 10, 22, 27, 30, 32, 34, 41, 42, 43, 45, 48, 49, 52, 53, 54, 55, 56, 73, 74, 76, 77, 99, 104, 105, 107, 109, 110, 112, 115, 123], "fuse": 5, "both": [5, 6, 8, 10, 18, 21, 22, 24, 25, 27, 29, 30, 32, 34, 36, 41, 48, 49, 52, 55, 57, 60, 63, 67, 73, 97, 98, 102, 104, 107, 109, 110, 114, 117, 122], "element": [5, 6, 7, 8, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 29, 30, 33, 36, 37, 38, 39, 41, 42, 43, 45, 47, 48, 49, 52, 57, 60, 61, 62, 65, 67, 73, 74, 77, 103, 104, 107, 108, 110, 112, 119, 120], "wise": [5, 30, 42, 62], "singl": [5, 6, 7, 8, 10, 12, 17, 27, 28, 29, 30, 32, 34, 36, 37, 41, 44, 46, 48, 49, 52, 54, 55, 60, 61, 63, 65, 73, 74, 102, 106, 114, 118, 123], "static": [5, 17, 18, 20, 30, 46, 47, 61], "compil": [5, 46, 48, 60, 62, 63, 95, 102, 109, 110, 113], "unabl": [5, 77, 110, 114], "advantag": [5, 27, 36, 43, 49, 52, 65], "fortun": 5, "abl": [5, 22, 27, 34, 41, 52, 110, 122], "low": [5, 10, 27, 32, 43, 48, 62, 63, 67, 74], "level": [5, 10, 17, 24, 27, 32, 43, 45, 46, 48, 49, 59, 62, 63, 67, 74, 104, 108, 110], "fortran": [5, 33, 63, 102, 108, 121], "cython": [5, 62, 102, 108, 109], "f2py": [5, 62, 63, 108], "reconnect": 5, "process": [5, 6, 10, 17, 18, 24, 27, 34, 41, 43, 46, 48, 52, 65, 67, 76, 106], "well": [5, 8, 10, 12, 27, 29, 30, 31, 32, 39, 41, 48, 52, 62, 83, 104, 106, 112], "autom": [5, 62, 109], "user": [5, 6, 17, 27, 38, 44, 45, 46, 48, 50, 62, 63, 65, 68, 72, 83, 106, 113, 122], "expr": [5, 7, 10, 11, 25, 28, 30, 32, 33, 34, 36, 37, 38, 39, 45, 46, 48, 49, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 67, 68, 73, 76, 77, 102, 103, 104, 105, 106, 110, 113, 114, 117, 118, 121, 122], "autowrap": [5, 33, 60, 63, 66, 77, 105, 108, 109, 110], "consum": [5, 32], "return": [5, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 65, 67, 68, 70, 71, 73, 74, 76, 77, 83, 84, 87, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 118, 119, 120, 122, 123], "least": [5, 6, 10, 17, 27, 30, 34, 41, 42, 43, 45, 48, 52, 63, 83, 120], "lambdifi": [5, 32, 33, 46, 62, 66, 73, 74, 85, 94, 102, 103, 105, 107, 108, 109, 110, 113], "often": [5, 6, 10, 27, 32, 34, 43, 47, 49, 52, 117, 122], "significantli": [5, 62, 65, 96, 102, 104], "outperform": [5, 105], "jensen": 5, "blog": [5, 49, 100], "post": [5, 20, 27, 46, 48, 88, 106, 118], "topic": 5, "aim": [6, 8, 52, 116], "describ": [6, 8, 17, 20, 21, 24, 25, 27, 32, 34, 43, 48, 49, 52, 59, 63, 104], "subtleti": 6, "involv": [6, 8, 17, 25, 27, 29, 34, 37, 43, 48, 52, 54, 73, 74, 75, 76, 77, 106, 107, 109, 110, 122], "definit": [6, 7, 10, 11, 17, 23, 25, 27, 28, 29, 30, 32, 34, 35, 41, 42, 43, 45, 46, 57, 62, 63, 75, 76, 104, 107, 109, 110, 114], "indefinit": [6, 10, 34, 45, 109, 112, 114], "ignor": [6, 17, 27, 43, 45, 48, 74, 76, 109, 110], "proof": [6, 7, 17, 20, 34, 112], "mathrm": [6, 8, 10, 32, 34, 41, 43, 52, 114], "int_0": [6, 32, 34, 114], "infti": [6, 7, 8, 11, 27, 29, 32, 34, 52, 114, 117], "consist": [6, 18, 22, 27, 29, 41, 47, 48, 52, 59, 62, 63, 67, 74, 102, 103, 106, 107], "three": [6, 8, 17, 19, 27, 28, 32, 36, 45, 46, 48, 49, 54, 73, 102, 104, 113, 115], "rewrit": [6, 7, 10, 25, 27, 29, 30, 32, 34, 41, 45, 47, 48, 52, 53, 87, 96, 103, 104, 110, 117, 122], "usual": [6, 8, 10, 17, 25, 27, 34, 41, 46, 52, 57, 60, 61, 63, 65, 67, 68, 74, 107, 108, 111, 117, 122], "anoth": [6, 8, 10, 18, 23, 27, 30, 32, 34, 41, 43, 45, 46, 47, 52, 62, 63, 77, 104, 108, 117, 122], "hyperexpand": [6, 8, 27, 32, 103], "q": [6, 8, 10, 18, 22, 27, 28, 32, 34, 41, 43, 44, 45, 46, 49, 52, 54, 60, 61, 73, 112, 120, 122], "moreov": [6, 10, 17, 122], "thu": [6, 8, 10, 13, 17, 18, 27, 30, 32, 39, 41, 43, 46, 48, 63, 94, 98, 118], "treatment": [6, 45, 106], "int_": [6, 32, 34, 114, 117], "recast": [6, 55], "There": [6, 8, 17, 18, 19, 20, 23, 27, 28, 29, 32, 34, 36, 41, 43, 45, 47, 49, 52, 54, 60, 65, 68, 74, 104, 114, 115, 118, 122], "lot": [6, 17, 27, 49, 79, 84, 85, 89, 102, 110, 122], "heurist": [6, 9, 18, 34, 48, 50, 55, 73, 82, 87, 104, 110, 112, 122], "best": [6, 8, 27, 32, 34, 41, 46, 48, 52, 59, 62, 67, 104, 117, 121, 122], "typic": [6, 8, 10, 22, 32, 43, 63, 106, 122], "branchpoint": 6, "being": [6, 8, 17, 24, 25, 27, 36, 41, 43, 45, 46, 48, 49, 52, 53, 54, 65, 67, 73, 75, 76, 101, 102, 108, 113], "pm": [6, 7, 25, 49], "sinc": [6, 8, 10, 17, 18, 19, 22, 23, 24, 27, 36, 41, 43, 46, 48, 49, 52, 61, 65, 67, 98, 102, 103, 104, 105, 107, 120, 122], "sort": [6, 10, 16, 18, 22, 27, 41, 42, 43, 45, 48, 49, 52, 53, 59, 61, 63, 67, 73, 99, 102, 103, 106, 108, 110, 117], "left": [6, 8, 10, 11, 17, 22, 27, 29, 30, 32, 34, 41, 43, 46, 47, 48, 52, 62, 63, 65, 67, 99, 104, 106, 114, 117, 122], "human": [6, 45, 46, 96], "need": [6, 8, 10, 13, 17, 18, 22, 24, 25, 27, 30, 31, 32, 34, 41, 43, 44, 45, 46, 47, 48, 49, 52, 59, 60, 62, 63, 64, 65, 67, 75, 76, 103, 104, 107, 108, 110, 118, 120, 122], "crude": 6, "understand": [6, 8, 27, 49, 121], "mathcal": [6, 30], "theta": [6, 30, 32, 35, 41, 44, 46], "mathbb": [6, 8, 10, 17, 25, 28, 30, 32, 43], "map": [6, 18, 27, 30, 34, 43, 46, 48, 52, 53, 54, 56, 59, 62, 65, 67, 68, 73, 83, 105, 110], "p": [6, 8, 10, 15, 16, 17, 18, 19, 20, 22, 24, 25, 27, 28, 29, 30, 32, 34, 41, 43, 45, 46, 48, 49, 52, 55, 57, 60, 61, 67, 73, 102, 109, 112, 113, 119, 122], "rightarrow": [6, 11, 29, 30, 32, 34, 109], "mapsto": [6, 25], "decre": 6, "biholomorph": 6, "give": [6, 8, 16, 17, 18, 19, 20, 25, 27, 29, 30, 32, 34, 36, 41, 43, 45, 48, 49, 52, 54, 63, 67, 73, 74, 75, 76, 77, 102, 103, 104, 105, 106, 108, 109, 110, 113, 116], "topologi": 6, "complex": [6, 8, 10, 17, 27, 28, 29, 31, 32, 33, 41, 42, 44, 45, 48, 52, 55, 63, 67, 71, 75, 76, 77, 83, 102, 103, 106, 108, 109, 113, 122], "structur": [6, 15, 17, 18, 24, 27, 36, 41, 42, 45, 48, 50, 52, 59, 60, 63, 65, 67, 102, 105, 115], "riemann": [6, 27, 29, 30, 31, 48, 61, 110], "surfac": [6, 27, 30, 32, 48, 104, 106], "logarithm": [6, 8, 10, 27, 30, 31, 43, 48, 74, 76, 105, 116], "reason": [6, 8, 10, 18, 24, 27, 32, 39, 46, 48, 52, 65, 67, 77, 103, 113], "defin": [6, 7, 8, 10, 11, 12, 17, 18, 21, 24, 25, 27, 28, 29, 30, 31, 32, 34, 37, 41, 43, 46, 48, 49, 57, 60, 61, 62, 63, 67, 68, 69, 103, 104, 106, 107, 110, 117, 120], "operatornam": [6, 8, 28, 29, 30, 32, 34, 46, 54], "ii": [6, 43, 46, 52], "These": [6, 8, 17, 25, 34, 41, 44, 46, 49, 52, 53, 62, 63, 67, 73, 74, 75, 76, 77, 103, 104, 106, 109, 110, 122], "holomorph": 6, "inde": [6, 8, 15, 17, 25, 32, 52, 110], "mutual": 6, "formal": [6, 10, 11, 25, 33], "attach": [6, 20, 62, 68], "point": [6, 9, 10, 11, 17, 24, 27, 30, 32, 34, 41, 43, 45, 47, 52, 62, 65, 73, 75, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114], "denot": [6, 7, 8, 10, 27, 32, 41, 43], "object": [6, 10, 12, 17, 18, 19, 20, 21, 25, 27, 28, 29, 30, 32, 33, 34, 36, 38, 39, 41, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 65, 67, 74, 76, 80, 83, 85, 96, 102, 103, 104, 105, 106, 107, 108, 110, 113, 114, 115, 117, 118, 119, 121], "_0": [6, 28, 41, 68], "notabl": [6, 32, 107], "fundament": [6, 34, 49, 52], "neighbourhood": 6, "which": [6, 7, 8, 10, 16, 17, 18, 19, 22, 24, 25, 27, 29, 30, 32, 34, 36, 39, 41, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 59, 61, 62, 63, 64, 65, 67, 68, 74, 76, 83, 88, 102, 103, 104, 105, 106, 108, 110, 114, 115, 116, 117, 118, 120, 121, 122], "further": [6, 8, 9, 32, 41, 45, 48, 61, 117], "arg": [6, 10, 12, 17, 18, 20, 23, 25, 27, 29, 31, 32, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 52, 55, 57, 60, 61, 62, 63, 67, 68, 82, 83, 88, 102, 103, 109, 110, 118], "evid": [6, 8], "continu": [6, 10, 18, 20, 27, 29, 32, 41, 43, 45, 49, 52, 59, 76, 77, 108, 109], "everywher": [6, 27], "extend": [6, 9, 10, 17, 27, 28, 29, 34, 43, 45, 46, 47, 49, 52, 57, 63, 65, 87, 99, 102, 103, 106], "easili": [6, 27, 32, 43, 45, 46, 48, 49, 52, 54, 62, 103, 104], "properti": [6, 7, 8, 10, 12, 15, 16, 17, 18, 19, 20, 21, 25, 27, 28, 30, 32, 34, 37, 38, 39, 41, 42, 43, 45, 47, 49, 52, 60, 61, 63, 73, 74, 104, 106, 107, 108, 109, 110, 113, 119], "hold": [6, 8, 22, 27, 30, 32, 41, 45, 48, 52, 54, 63, 105, 122], "posit": [6, 7, 8, 10, 12, 16, 17, 18, 19, 21, 27, 29, 30, 32, 34, 41, 42, 43, 47, 48, 49, 55, 56, 57, 61, 67, 77, 103, 107, 110, 113, 122], "cut": [6, 8, 29, 30, 32, 65, 71, 109, 122], "peculiar": 6, "addit": [6, 8, 10, 18, 25, 27, 32, 34, 38, 41, 44, 46, 48, 49, 52, 53, 62, 63, 65, 67, 96, 102, 103, 104, 105, 106, 108, 109, 110, 113, 115, 118, 119, 120, 121], "sum": [6, 8, 9, 16, 18, 25, 27, 29, 32, 34, 38, 41, 43, 45, 48, 49, 52, 54, 57, 59, 61, 67, 74, 76, 77, 83, 84, 99, 102, 106, 109, 110, 116, 122], "behaviour": [6, 77, 102, 108], "rule": [6, 8, 17, 18, 25, 27, 34, 36, 41, 42, 46, 47, 48, 52, 61, 87, 103, 105, 108, 119, 122], "circl": [6, 27], "agre": [6, 8, 27, 32, 71, 73], "squar": [6, 10, 30, 33, 34, 37, 41, 42, 43, 45, 47, 49, 61, 73, 74, 76, 80, 103, 106, 109, 110, 116, 117], "root": [6, 8, 10, 27, 31, 32, 33, 34, 41, 42, 43, 46, 52, 65, 73, 74, 76, 77, 80, 94, 96, 98, 102, 109, 110, 117, 119, 123], "le": [6, 8, 10, 32, 84], "els": [6, 18, 22, 25, 27, 30, 32, 36, 41, 43, 45, 46, 48, 52, 56, 59, 61, 67, 70, 73, 102, 113], "end": [6, 10, 17, 22, 24, 25, 27, 30, 32, 36, 41, 42, 43, 46, 47, 49, 52, 53, 63, 67, 104, 114, 117], "omit": [6, 8, 18, 25, 27, 30, 34, 37, 41, 42, 59, 63, 67], "matter": [6, 16, 18, 29, 34], "final": [6, 7, 8, 10, 18, 25, 27, 32, 34, 36, 41, 43, 45, 48, 49, 52, 54, 75, 76, 83, 102, 103, 118], "suppos": [6, 8, 10, 18, 25, 27, 31, 46, 52], "introduc": [6, 8, 22, 25, 27, 32, 46, 49, 77, 88, 99, 102, 104, 106, 116, 117], "actual": [6, 8, 16, 17, 24, 27, 32, 34, 38, 41, 43, 46, 47, 48, 49, 52, 62, 65, 108], "canon": [6, 12, 16, 18, 22, 27, 41, 43, 44, 48, 52, 61, 67, 92, 106, 119, 122], "setminu": [6, 10, 32], "l": [6, 7, 8, 10, 16, 17, 18, 25, 32, 34, 41, 42, 43, 46, 49, 52, 54, 60, 61, 63, 67, 112], "Then": [6, 7, 8, 10, 22, 25, 27, 41, 47, 48, 49, 52, 106], "circ": 6, "lift": [6, 10, 22, 30, 32, 73, 75], "princip": [6, 10, 27, 30, 32, 34, 41, 45], "throughout": [6, 36], "than": [6, 8, 10, 11, 13, 17, 18, 19, 25, 27, 29, 30, 31, 32, 34, 36, 38, 41, 42, 43, 44, 45, 46, 48, 49, 52, 53, 54, 55, 61, 62, 63, 65, 67, 71, 76, 84, 98, 103, 108, 113, 115, 116, 119, 120], "multipl": [6, 8, 10, 16, 18, 22, 25, 27, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 48, 49, 52, 53, 57, 59, 61, 63, 65, 67, 96, 102, 103, 106, 107, 110, 114, 118, 119, 120, 123], "absorb": [6, 48, 52], "later": [6, 8, 10, 17, 27, 46, 48, 52, 65, 114], "done": [6, 10, 17, 19, 24, 27, 29, 32, 41, 43, 48, 49, 52, 55, 60, 62, 65, 103, 106, 107, 119], "_split_mul": 6, "assembl": 6, "tupl": [6, 7, 10, 17, 18, 25, 30, 33, 34, 37, 41, 43, 44, 46, 48, 49, 52, 53, 54, 55, 57, 60, 61, 62, 63, 67, 68, 77, 82, 102, 110, 114, 118, 119, 121], "_mytyp": 6, "next": [6, 8, 10, 12, 16, 17, 18, 20, 21, 27, 30, 36, 43, 45, 46, 47, 49, 52, 65, 103, 104, 108, 109], "index": [6, 8, 10, 16, 17, 18, 22, 25, 27, 28, 30, 32, 33, 41, 43, 45, 46, 57, 58, 59, 61, 62, 73, 74, 75, 106, 107, 108, 109, 110, 112, 116], "_create_lookup_t": 6, "hopefulli": 6, "yield": [6, 7, 10, 17, 27, 32, 43, 45, 48, 49, 65, 67, 77, 109, 121], "pattern": [6, 8, 27, 34, 41, 42, 48, 52, 78, 104, 105, 118], "match": [6, 17, 27, 34, 41, 42, 48, 52, 53, 63, 67, 74, 76, 78, 104, 105, 106, 108, 109, 110], "success": [6, 10, 17, 27, 32, 34, 43, 52, 67, 104], "now": [6, 8, 10, 11, 27, 32, 41, 48, 49, 52, 57, 61, 62, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 88, 89, 91, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 117, 118, 122], "inequival": 6, "f_1": [6, 10, 29, 45, 52], "f_2": [6, 8, 10, 29, 52], "minimis": [6, 45], "f_i": [6, 10, 25, 41], "2x": [6, 7, 44, 48, 49, 83, 115], "_mul_as_two_part": 6, "recurs": [6, 7, 10, 27, 29, 34, 36, 43, 45, 48, 56, 59, 65, 67, 74, 77, 105, 106, 109, 110, 118], "techniqu": [6, 21, 46, 48, 52], "essenti": [6, 8, 11, 12, 21, 30, 32], "write": [6, 8, 10, 16, 27, 34, 38, 46, 49, 52, 60, 62, 63, 103, 106, 118], "read": [6, 18, 30, 33, 46, 65, 112, 121], "off": [6, 27, 41, 45, 46, 52, 71, 73, 96], "generalis": 6, "bx": [6, 10, 61], "twist": 6, "though": [6, 8, 27, 33, 41, 43, 45, 48, 52, 53, 88, 114, 122], "grow": [6, 10, 22, 27, 43], "too": [6, 17, 18, 27, 30, 43, 48, 49, 52, 62, 73, 74, 76, 77, 122], "recognis": [6, 8, 48, 103], "analyt": [6, 29, 32, 52], "paramet": [6, 7, 10, 11, 17, 18, 22, 24, 25, 27, 32, 34, 35, 36, 37, 41, 43, 44, 45, 46, 48, 49, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 65, 67, 68, 74, 77, 103, 106, 109, 110, 120], "deduc": [6, 8, 61], "easi": [6, 7, 8, 15, 18, 27, 49, 52, 59, 60, 121], "subset": [6, 10, 12, 14, 17, 18, 23, 24, 27, 30, 33, 46, 47, 67, 75, 104, 108, 110], "anywai": [6, 48, 52], "filter": [6, 10, 27, 45, 67, 104], "_rewrite_singl": 6, "_rewrite1": 6, "_rewrite2": 6, "respect": [6, 7, 10, 11, 17, 18, 21, 22, 24, 25, 27, 30, 32, 34, 41, 43, 45, 48, 49, 52, 53, 55, 56, 57, 60, 61, 63, 71, 77, 102, 103, 105, 106, 107, 108, 114], "helper": [6, 8, 17, 21, 24, 27, 33, 35, 49, 52, 53, 62, 71, 74, 104, 107, 109, 110], "reduc": [6, 8, 10, 22, 27, 29, 30, 32, 35, 41, 43, 45, 47, 48, 49, 51, 52, 53, 54, 71, 73, 102, 105, 107, 108, 110, 112, 119, 122], "expon": [6, 7, 27, 30, 34, 43, 45, 46, 48, 52, 59, 65, 67, 76, 104, 109, 120, 122], "uniti": [6, 30, 32, 77, 110], "_rewrite_saxena_1": 6, "_rewrite_saxena": 6, "go": [6, 7, 8, 17, 30, 42, 52, 96, 109, 115, 117], "through": [6, 8, 10, 17, 18, 20, 25, 27, 29, 32, 46, 47, 48, 52, 57, 62, 67, 83, 96, 104, 106, 108, 118], "under": [6, 8, 17, 22, 24, 32, 34, 41, 45, 46, 47, 49, 52, 55, 61, 99, 103], "remedi": 6, "clear": [6, 8, 10, 25, 27, 28, 45, 48, 61, 65, 115], "satisfi": [6, 10, 15, 17, 22, 27, 29, 32, 36, 41, 46, 49, 52, 53, 55, 56, 61, 110], "meijerg": [6, 32, 34, 103, 105, 107, 110, 122], "get_period": [6, 32], "discov": [6, 59], "principal_branch": [6, 27, 31], "period": [6, 27, 30, 43], "py": [6, 8, 27, 30, 41, 46, 52, 53, 61, 73, 74, 81, 97, 99, 101, 104, 107, 109, 110], "exploit": [6, 42, 62], "inform": [6, 8, 10, 17, 18, 24, 27, 29, 32, 34, 41, 46, 49, 50, 59, 60, 63, 65, 100, 104, 105, 108, 109, 112], "transpar": [6, 46], "section": [6, 7, 8, 9, 10, 18, 25, 27, 32, 37, 46, 52, 65, 72, 114, 115, 123], "he": [6, 10, 29, 112], "prove": [6, 27, 34, 37, 39, 41, 43, 104, 105, 115], "literatur": 6, "stade": 6, "g_": [6, 17, 24, 25, 32, 49], "matrix": [6, 8, 10, 16, 18, 27, 32, 33, 39, 40, 42, 46, 48, 49, 52, 55, 57, 59, 60, 61, 62, 63, 68, 73, 74, 84, 93, 99, 103, 104, 105, 106, 107, 108, 109, 110, 117, 119], "a_1": [6, 8, 10, 17, 32, 41, 49, 52], "ldot": [6, 7, 8, 10, 11, 17, 27, 28, 29, 32, 43, 46, 49, 57, 109], "a_p": [6, 8, 32], "b_1": [6, 8, 17, 24, 32, 49, 52], "b_q": [6, 8, 32], "eta": [6, 32, 46, 52, 53], "frac": [6, 7, 8, 10, 11, 25, 27, 29, 30, 32, 34, 43, 46, 49, 52, 53, 57, 114, 117, 121], "prod_": [6, 8, 10, 32, 43], "j": [6, 8, 10, 17, 18, 22, 24, 25, 27, 28, 29, 32, 37, 38, 41, 42, 43, 48, 49, 57, 59, 60, 61, 62, 67, 103, 112, 119], "b_j": [6, 8, 22, 24, 32], "a_j": [6, 8, 32], "c_1": [6, 7, 8, 52], "c_u": 6, "d_1": [6, 52], "d_v": 6, "sigma": [6, 46, 52], "omega": [6, 7, 17, 43, 46], "a_n": [6, 10, 22, 32, 49, 52], "a_": [6, 8, 22, 25, 27, 32, 49, 52, 57, 106], "b_m": [6, 32], "b_": [6, 8, 17, 22, 24, 27, 29, 32, 49, 57], "interest": [6, 8, 10, 22, 29, 41, 43, 45, 48, 49, 62, 63, 67, 104, 105, 122], "what": [6, 8, 10, 18, 20, 25, 27, 28, 29, 30, 41, 43, 48, 49, 52, 60, 63, 67, 71, 76, 104, 115, 116, 118, 122], "amalgam": 6, "found": [6, 8, 10, 17, 18, 20, 22, 24, 27, 43, 46, 48, 49, 52, 54, 59, 99, 104, 105, 108, 110, 123], "appm90": [6, 8, 112], "luk69": [6, 8, 112], "let": [6, 7, 8, 10, 22, 27, 41, 42, 44, 46, 48, 49, 52, 54, 61, 62, 96, 102, 103, 107, 110, 113, 115, 117, 118, 120, 121, 122], "error": [6, 9, 10, 16, 18, 25, 27, 31, 34, 41, 42, 43, 46, 48, 52, 53, 60, 62, 63, 67, 68, 71, 73, 74, 75, 76, 77, 99, 103, 104, 105, 109, 110, 113], "relat": [6, 7, 8, 10, 11, 12, 17, 24, 29, 30, 31, 33, 34, 36, 45, 48, 49, 52, 67, 74, 75, 76, 102, 103, 104, 107, 108, 109, 110], "notat": [6, 15, 18, 19, 25, 27, 29, 48, 60, 61, 102, 109, 114], "xi": [6, 46, 52, 53], "delta": [6, 12, 20, 29, 32, 46, 49, 61, 85, 106], "c_3": [6, 52], "c_4": [6, 52], "five": [6, 16, 49, 106], "separ": [6, 15, 27, 32, 34, 41, 45, 46, 48, 49, 53, 59, 61, 65, 67, 76, 77, 99, 104, 105, 115], "infin": [6, 7, 10, 11, 29, 30, 31, 32, 34, 45, 47, 48, 52, 73, 76, 104, 106, 108, 109, 110], "larg": [6, 7, 8, 10, 18, 27, 34, 42, 43, 45, 46, 48, 60, 62, 67, 109, 122], "valu": [6, 10, 11, 12, 16, 17, 18, 22, 25, 26, 27, 29, 30, 32, 34, 36, 37, 39, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 67, 68, 74, 76, 77, 103, 106, 109, 110, 113, 121, 122], "wherea": [6, 10, 36, 46, 67], "epsilon": [6, 25, 27, 32, 34, 46, 61], "specifi": [6, 8, 10, 11, 21, 25, 27, 28, 30, 34, 41, 42, 43, 45, 46, 48, 52, 53, 55, 57, 60, 61, 62, 63, 67, 68, 73, 74, 77, 80, 104, 108, 110, 120, 122], "distinct": [6, 8, 17, 29, 41, 43, 46, 52], "immedi": [6, 17, 27, 32, 36, 62], "visibl": 6, "harder": 6, "fulfil": 6, "wedg": 6, "vee": 6, "neg": [6, 8, 10, 21, 27, 29, 30, 32, 34, 41, 42, 43, 45, 46, 47, 48, 49, 52, 73, 75, 92, 102, 107, 109, 110], "ne": [6, 8, 10, 52, 73, 84, 110, 112], "2k": [6, 27, 43, 49, 52], "lceil": 6, "rceil": 6, "sum_": [6, 8, 10, 25, 27, 29, 32, 34, 43, 52], "And": [6, 25, 27, 36, 48, 49, 103, 104, 109, 110, 113], "rho": [6, 41, 43, 46], "d_j": [6, 8], "c_j": [6, 8], "mu": [6, 10, 32, 43, 46, 61], "phi": [6, 27, 29, 32, 41, 43, 46, 52, 109], "psi": [6, 32, 46, 61], "lambda_c": 6, "lambda_": 6, "s0": [6, 25], "c_2": [6, 52], "sign": [6, 7, 10, 11, 22, 27, 29, 31, 34, 46, 48, 49, 56, 67, 74, 75, 102, 110], "z_0": [6, 11, 48], "z_1": [6, 52], "a_i": [6, 8], "notin": [6, 47], "c_i": [6, 8, 27, 52], "b_i": [6, 8, 17, 22, 24], "c_5": 6, "d_i": [6, 22], "c_6": 6, "c_7": 6, "c_8": 6, "lvert": 6, "rvert": 6, "c_9": 6, "c_": [6, 10, 43], "16": [6, 8, 10, 17, 18, 21, 27, 29, 32, 34, 41, 43, 45, 46, 47, 48, 49, 57, 102, 104, 109, 112, 120], "establish": [6, 8, 22], "enumer": [6, 8, 12, 16, 18, 21, 43, 65, 67, 73, 107], "neq": [6, 10, 28, 49, 52], "leq": [6, 10, 17, 25, 32, 49], "fairli": [6, 27, 32], "versatil": 6, "bz": [6, 49, 61], "ask": [6, 27, 47, 67], "zt": [6, 32], "appear": [6, 10, 12, 16, 17, 27, 34, 41, 45, 46, 48, 52, 53, 59, 61, 67, 68, 76], "int_l": [6, 8, 32], "interchang": [6, 25, 52], "inner": [6, 25, 102, 103, 106], "seen": [6, 10, 18, 25, 52, 121], "cauchi": [6, 32], "jordan": [6, 41, 52, 109, 119], "lemma": 6, "deform": 6, "contour": [6, 8, 32], "encircl": 6, "sens": [6, 8, 10, 27, 29, 48, 63, 113, 115, 122], "greater": [6, 10, 11, 18, 27, 30, 43, 48, 52, 55, 65], "onto": [6, 41], "axi": [6, 19, 29, 30, 41], "sine": [6, 30, 32, 34], "entir": [6, 17, 27, 32, 47, 60, 106], "appeal": 6, "henc": [6, 8, 10, 17, 32, 36, 43, 46, 49, 53, 65], "fox": 6, "obstacl": 6, "absolut": [6, 8, 27, 30, 34, 48, 76], "identif": 6, "pole": [6, 8, 27, 32, 34, 110], "newli": [6, 8, 27], "properli": [6, 30, 46, 52, 63, 67, 109], "remain": [6, 8, 17, 18, 20, 22, 37, 43, 44, 45, 52, 53, 61, 65, 67, 102, 104, 109, 110, 113, 117], "observ": [6, 8, 22, 52], "unbranch": [6, 32], "long": [6, 8, 18, 27, 34, 41, 43, 46, 55, 62, 67, 74, 76, 77, 109, 110], "o": [6, 10, 11, 17, 18, 24, 27, 30, 32, 43, 52, 60, 67, 73, 76, 77, 102, 109, 112, 114], "latter": [6, 8, 17, 27, 29, 32, 43, 46, 49, 61, 63, 67, 68, 106], "along": [6, 17, 27, 32, 38, 41, 42, 49, 67], "ge": [6, 8, 10, 30, 41, 43, 67, 84], "domin": [6, 7], "although": [6, 10, 18, 27, 34, 41, 43, 48, 49, 67, 68, 104, 122], "investig": [6, 8, 18, 67], "lim_": [6, 7, 30, 32, 114, 117], "iT": 6, "tau": [6, 46, 52], "sim": [6, 17, 22, 24, 104], "asymptot": [6, 27, 109, 114], "equival": [6, 17, 22, 27, 30, 32, 33, 34, 37, 39, 43, 44, 45, 48, 52, 54, 57, 60, 61, 65, 67, 82, 108], "omega_": 6, "im": [6, 27, 31, 39, 41, 46, 71, 73, 74, 110, 122], "same": [6, 7, 8, 10, 16, 17, 18, 22, 25, 27, 29, 32, 34, 36, 37, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 61, 63, 65, 67, 68, 74, 76, 88, 103, 104, 107, 110, 113, 114, 115, 118, 119, 121, 122], "variou": [6, 8, 10, 12, 17, 27, 28, 29, 34, 36, 45, 49, 52, 53, 63, 72, 77, 102, 103, 104, 105, 120, 122], "disguis": 6, "current": [6, 8, 10, 12, 17, 20, 21, 23, 24, 27, 30, 32, 34, 41, 43, 46, 48, 49, 52, 53, 54, 61, 62, 63, 65, 104, 106], "entri": [6, 8, 10, 18, 24, 40, 42, 68, 104], "correspond": [6, 8, 10, 11, 17, 18, 20, 21, 22, 25, 27, 37, 39, 41, 43, 46, 48, 49, 52, 53, 59, 60, 61, 63, 65, 103], "shrink": 6, "futur": [6, 48, 60, 104, 108], "improv": [6, 10, 45, 52, 60, 77, 78, 82, 83, 84, 85, 89, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 114, 122], "Of": [6, 25, 41, 67, 109, 110], "cours": [6, 8, 12, 25, 32, 41, 43], "whenev": [6, 8, 24, 46, 114], "middl": [6, 8, 32, 41, 42, 74, 78], "exp_": [6, 8], "chi": [6, 8, 32, 46, 61, 104], "ci": [6, 32, 74, 104], "ei": [6, 8, 32, 49, 52, 61, 104, 106], "shi": [6, 8, 32, 104], "si": [6, 32, 104], "i_": [6, 8, 32], "j_": [6, 8, 29, 32, 34], "k_": [6, 32], "y_": [6, 32], "cosh": [6, 8, 27, 31, 32, 46, 48, 76, 122], "erf": [6, 8, 32, 34, 77, 105, 109], "erfc": [6, 32, 77], "erfi": [6, 32, 110], "gru96": [7, 27, 112], "time": [7, 8, 10, 17, 18, 22, 27, 32, 41, 43, 46, 48, 52, 67, 76, 95, 96, 107, 110, 114, 119], "still": [7, 8, 10, 18, 25, 27, 32, 34, 41, 46, 48, 52, 60, 61, 67, 98, 102, 103, 104, 106, 108, 109], "how": [7, 8, 10, 18, 27, 31, 32, 33, 36, 37, 41, 42, 44, 46, 48, 49, 52, 53, 62, 63, 67, 77, 110, 114, 117, 118, 121, 122], "implement": [7, 9, 10, 13, 17, 18, 23, 27, 29, 30, 31, 32, 33, 34, 36, 41, 43, 45, 48, 49, 50, 52, 53, 54, 56, 59, 60, 65, 66, 67, 68, 73, 74, 75, 76, 80, 82, 84, 85, 87, 90, 92, 94, 97, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 114, 120, 122], "accord": [7, 10, 15, 17, 18, 22, 25, 27, 43, 49, 61, 63, 67, 73], "vari": [7, 27], "compar": [7, 10, 18, 23, 27, 30, 36, 41, 48, 52, 60, 67, 76, 77, 78, 83, 84, 96, 110], "lim": [7, 11, 27, 114], "limits_": [7, 11, 25, 27], "sai": [7, 8, 10, 25, 27, 49, 52, 54, 117, 120], "succ": 7, "iff": [7, 8, 10, 11, 18, 36, 41, 49], "asymp": 7, "42": [7, 16, 27, 29, 37, 39, 41, 42, 43, 49, 109], "strategi": [7, 8, 27, 34, 41, 48, 53, 75, 109, 112], "subexpress": [7, 27, 41, 42, 45, 46, 48, 63, 74, 94, 106, 122], "mrv": [7, 27, 77], "item": [7, 16, 18, 26, 27, 29, 41, 43, 45, 46, 47, 52, 53, 62, 65, 67], "belong": [7, 10, 11, 17, 22, 27, 41, 45, 47, 49, 61], "choos": [7, 8, 10, 22, 27, 29, 41, 43, 45, 52, 53, 122], "tend": [7, 8, 10, 27, 106], "independ": [7, 8, 27, 32, 34, 41, 45, 48, 49, 52, 53, 54, 55, 61, 62, 67, 73, 105, 106, 112, 118], "lead": [7, 10, 25, 27, 34, 43, 45, 48, 52, 63, 70, 75, 76, 105, 110, 120], "c_0": [7, 27], "e_0": [7, 27], "e_1": 7, "e_2": 7, "exposit": 7, "gloss": 7, "address": [7, 46, 73, 74, 75, 76, 77, 109, 110], "thesi": [7, 17, 112], "termin": [7, 17, 27, 30, 43, 46, 75, 76, 89, 121], "pp": [7, 10, 17, 18, 24, 29, 30, 34, 41, 52, 53], "52": [7, 16, 29, 49, 52, 67, 114], "60": [7, 17, 19, 27, 29, 41, 43, 49, 52, 67, 109], "between": [7, 10, 17, 18, 20, 24, 27, 29, 34, 38, 39, 41, 43, 44, 45, 46, 48, 52, 53, 57, 67, 68, 74, 102, 103, 104, 106, 110, 115], "functon": 7, "leadterm": 7, "pair": [7, 8, 10, 17, 18, 27, 30, 37, 39, 41, 43, 45, 47, 48, 49, 52, 63, 73, 106, 107, 109, 119], "c0": [7, 52, 54, 123], "e0": 7, "limitinf": 7, "calcul": [7, 10, 18, 24, 27, 32, 34, 37, 39, 41, 43, 45, 52, 59, 62, 63, 67, 68, 74, 76, 77, 84, 94, 95, 102, 104, 105, 109, 110, 119], "place": [7, 11, 18, 19, 27, 37, 42, 48, 65, 67, 80, 104, 113, 119], "rewritten": [7, 32, 48, 52, 80, 103, 105, 106], "signinf": 7, "minu": [7, 27, 46, 102], "constantli": 7, "page": [8, 10, 29, 41, 43, 49, 72, 89, 94], "symplifi": [8, 48], "base": [8, 10, 16, 17, 22, 23, 24, 27, 28, 29, 30, 31, 32, 34, 35, 37, 38, 41, 42, 43, 45, 46, 47, 48, 49, 52, 59, 60, 61, 62, 63, 64, 65, 67, 73, 74, 77, 97, 102, 103, 104, 106, 107, 110, 112, 116, 122], "paper": [8, 43, 45, 49, 112], "roa96": [8, 112], "roa97": [8, 112], "recal": [8, 10, 115], "_pf_q": [8, 32], "_n": [8, 29, 32, 34], "turn": [8, 27, 30, 35, 39, 46, 47, 48, 49, 52, 61, 67, 76, 106, 117], "differenti": [8, 27, 29, 30, 32, 48, 52, 53, 54, 55, 56, 74, 76, 77, 93, 99, 103, 104, 105, 109, 110, 112, 114, 116, 117], "p_q": 8, "sequenc": [8, 12, 14, 17, 18, 22, 24, 25, 27, 29, 32, 33, 41, 43, 46, 48, 49, 52, 53, 61, 62, 63, 67, 69, 91, 106, 112, 113, 122], "convert": [8, 10, 12, 18, 22, 27, 28, 32, 36, 41, 42, 43, 44, 45, 46, 48, 49, 52, 53, 57, 60, 61, 62, 73, 76, 90, 95, 102, 104, 108, 109, 110, 113], "a_r": 8, "reachabl": 8, "subscript": [8, 18, 46, 49, 67, 119], "length": [8, 12, 17, 18, 20, 24, 25, 27, 30, 32, 41, 43, 45, 46, 48, 52, 62, 67, 104], "conjunct": [8, 36, 122], "uppercas": 8, "chosen": [8, 10, 17, 18, 43, 52], "inequ": [8, 10, 27, 33, 47, 50, 55, 75, 76, 102, 107, 108, 109, 110], "dz": 8, "_p": [8, 10, 48], "f_q": 8, "atop": [8, 29, 32], "e_i": [8, 27, 61], "similarli": [8, 10, 22, 27, 47, 52, 84, 103, 118, 119], "upper": [8, 10, 25, 32, 41, 49, 60], "lower": [8, 10, 17, 18, 25, 27, 32, 41, 48, 52, 60, 61, 65, 67], "a_2": [8, 17, 41, 49, 52], "arriv": [8, 48, 52], "multipli": [8, 10, 17, 27, 41, 42, 43, 46, 49, 52, 76, 77, 96, 103, 118], "suitabl": [8, 10, 34, 46, 49, 52, 57], "undo": 8, "whenc": 8, "invers": [8, 9, 17, 18, 27, 28, 31, 32, 33, 34, 38, 41, 42, 43, 45, 46, 104, 105, 109, 115, 119], "commut": [8, 10, 17, 18, 22, 27, 34, 45, 61, 102, 103, 104, 106, 108, 109, 110, 112, 118, 120], "half": [8, 10, 28, 32, 34, 43, 44, 45, 48], "nice": [8, 27, 31, 41, 46, 89, 91, 92, 97], "had": [8, 27, 43, 45, 46, 52, 64, 105], "infer": [8, 33, 34, 52, 62, 105, 107], "un": [8, 109], "analysi": [8, 17, 27, 30, 108], "game": 8, "quit": [8, 32, 41, 43, 54, 55, 115], "trivial": [8, 10, 11, 17, 22, 25, 27, 36, 43, 49, 52, 59, 76, 109, 110], "f_": [8, 10, 27, 29, 32, 34, 52], "remark": [8, 10, 52], "p_0": [8, 17, 22, 49], "p_1": [8, 17, 22, 43, 49], "degre": [8, 10, 17, 24, 25, 32, 41, 45, 48, 49, 52, 54, 73, 77, 104, 110, 120], "p_2": [8, 17, 43], "c_r": 8, "d_": [8, 22], "databas": 8, "twofold": 8, "firstli": 8, "easier": [8, 27, 63, 108, 113], "secondli": 8, "non": [8, 10, 19, 27, 29, 30, 32, 34, 36, 41, 42, 45, 47, 48, 49, 52, 55, 57, 59, 60, 61, 63, 67, 73, 75, 76, 83, 102, 103, 106, 109, 110, 112, 118, 120], "treat": [8, 10, 24, 25, 27, 41, 44, 45, 48, 59, 62, 65, 104, 113], "incongru": 8, "mod": [8, 10, 28, 29, 30, 33, 41, 43, 45, 49, 104, 109, 110], "congruent": [8, 49], "down": [8, 38, 47, 48, 52, 65, 106, 122], "arbitrarili": [8, 10, 27, 43, 52, 53, 108], "less": [8, 10, 18, 25, 27, 29, 30, 32, 41, 43, 45, 48, 49, 52, 54, 63, 101, 122], "bigger": [8, 27, 29, 122], "wlog": [8, 10], "ever": [8, 52, 63], "undefin": [8, 27, 30, 31, 32, 44, 73, 77, 123], "smaller": [8, 10, 17, 18, 27, 32, 38, 43, 54, 67, 102, 103, 104, 113, 120, 122], "associ": [8, 10, 24, 27, 28, 32, 49, 61, 76, 107], "invari": [8, 22, 45, 52], "alpha_r": 8, "equiv": [8, 49], "pmod": [8, 41], "beta_r": 8, "symmetr": [8, 10, 15, 17, 18, 22, 28, 41, 42, 43, 45, 47, 61, 73, 102, 105], "blindli": 8, "messi": 8, "contigu": [8, 27, 63], "2n": [8, 18, 25, 29, 32, 34], "undesir": [8, 27, 109], "max": [8, 18, 31, 41, 43, 67, 73, 74, 102, 110], "basi": [8, 9, 38, 41, 45, 48, 54, 57, 61, 67, 75, 103, 104, 106, 109, 110], "store": [8, 17, 27, 38, 42, 43, 57, 59, 60, 61, 63, 65, 67, 118], "particularli": [8, 41, 122], "_r": 8, "hint": [8, 11, 12, 27, 30, 34, 41, 43, 45, 50], "bulk": 8, "few": [8, 18, 34, 43, 46, 52, 63, 67], "trick": [8, 22, 61], "extens": [8, 10, 17, 27, 28, 30, 41, 45, 46, 48, 52, 63, 73, 74, 75, 77, 102, 104, 105, 110, 112, 116, 120], "slater": [8, 32], "theorem": [8, 9, 10, 11, 15, 32, 34, 43, 48, 49, 102], "residu": [8, 11, 22, 43, 76, 102], "confluent": [8, 32], "repres": [8, 9, 10, 11, 12, 16, 17, 18, 19, 21, 22, 25, 27, 28, 30, 31, 32, 34, 36, 38, 41, 42, 45, 46, 47, 48, 49, 52, 59, 60, 61, 63, 65, 67, 84, 103, 104, 106, 108, 113, 114, 115, 117, 118, 123], "far": [8, 46, 68], "plu": [8, 25, 82], "why": [8, 67, 109, 110, 122], "enclos": [8, 46, 61, 110], "doubl": [8, 22, 27, 31, 41, 46, 63, 110, 122], "quotient": [8, 10, 25, 28, 30, 43, 45, 48, 52, 104, 108], "empti": [8, 10, 17, 21, 25, 27, 34, 41, 42, 43, 46, 47, 54, 55, 63, 67, 70, 74, 76, 104, 109, 110, 118, 123], "k_1": [8, 43, 52], "k_u": 8, "k_i": [8, 43], "l_1": [8, 29, 61], "l_v": 8, "l_i": 8, "k_j": 8, "c_w": 8, "exhaust": [8, 27, 116], "congruenc": [8, 17, 27, 49, 104], "claim": 8, "f_j": 8, "r_j": 8, "mostli": [8, 27, 30, 46, 55, 121], "again": [8, 27, 32, 52, 87, 88, 115, 122], "l_u": 8, "res_": 8, "delta_i": 8, "_t": [8, 34], "align": [8, 41, 46, 74], "design": [8, 41, 46, 52, 102, 112, 121], "etc": [8, 18, 22, 27, 29, 30, 40, 43, 46, 47, 48, 49, 59, 62, 63, 67, 102, 103, 104, 109, 120], "straightforward": [8, 17], "At": [8, 22, 27, 30, 32, 43], "top": [8, 27, 46, 52, 63, 104, 109, 110], "add_formula": 8, "nest": [8, 27, 32, 37, 42, 46, 48, 57, 59, 67, 68, 76, 106], "ap": [8, 32], "bq": [8, 32], "addb": 8, "dummi": [8, 22, 25, 34, 41, 45, 48, 52, 59, 61, 63, 67, 68, 77, 83, 105, 109], "declar": [8, 41, 46, 52, 53, 60, 63, 113], "hyper": [8, 29, 32, 48, 54, 103, 122], "free": [8, 10, 22, 25, 27, 34, 41, 43, 45, 46, 48, 49, 52, 55, 61, 73, 76, 77, 109, 116], "sum_0": 8, "avail": [8, 17, 18, 25, 27, 28, 32, 34, 41, 45, 46, 47, 48, 49, 57, 60, 61, 67, 68, 89, 106, 108, 110, 121, 122], "test_hyperexpand": 8, "test_formula": 8, "presum": [8, 63], "enter": [8, 10, 18, 27, 44], "probabl": [8, 17, 27, 29, 32, 43, 46, 52, 62, 68, 74, 109], "chanc": [8, 71, 115], "suboptim": 8, "output": [8, 27, 41, 43, 45, 46, 48, 49, 52, 54, 60, 62, 63, 65, 67, 73, 74, 76, 97, 99, 106, 108, 110, 117, 119, 121, 122, 123], "hand": [8, 10, 18, 19, 27, 30, 32, 34, 36, 41, 43, 46, 63, 65, 80], "explan": [8, 43, 60], "theoret": [8, 112], "difficult": [8, 27, 52, 53, 62, 74, 104], "explicit": [8, 18, 25, 27, 30, 43, 45, 53, 55, 65], "fresnel": [8, 31, 114], "obei": [8, 32, 46], "represent": [8, 10, 17, 20, 27, 32, 36, 38, 42, 43, 45, 46, 48, 49, 52, 60, 61, 73, 74, 75, 102, 103, 106, 108, 110, 112, 121], "cdot": [8, 10, 25, 41, 43, 52, 57, 109, 120], "lookup": [8, 9, 34, 41, 43, 73, 84], "bit": [8, 12, 36, 41, 43, 49], "mainli": [8, 17, 32, 41, 49, 52, 104, 105], "proce": [8, 10, 46], "naiv": [8, 17, 23, 27, 29, 54, 55, 61], "insid": [8, 17, 18, 23, 27, 45, 46, 49, 59, 61, 65, 106, 110, 119], "exp_polar": [8, 27, 31, 32, 110], "third": [8, 27, 32, 45, 52, 104, 112, 114], "fresnelc": [8, 32], "realli": [8, 27, 48, 52, 62, 70, 106], "simplic": [8, 52], "earlier": [8, 48, 52, 103], "b_0": [8, 22, 29, 49], "_1": [8, 32, 41, 68], "mathbf": [8, 57], "imath": 8, "directli": [8, 17, 25, 27, 30, 43, 45, 47, 48, 49, 53, 62, 63, 65, 67, 84, 103, 105, 107, 108, 114], "b0": [8, 22, 32], "diff": [8, 10, 29, 30, 31, 32, 37, 39, 41, 46, 52, 53, 55, 56, 57, 76, 96, 103, 110, 114, 117, 123], "prime": [8, 10, 17, 24, 25, 29, 32, 43, 45, 49, 65, 73, 101, 120], "b1prime": 8, "32": [8, 30, 32, 41, 43, 49], "b_2": [8, 17, 24, 52], "common": [8, 10, 17, 27, 30, 33, 41, 43, 45, 46, 52, 62, 63, 67, 74, 83, 94, 106, 110, 113, 117, 119, 120, 121, 122], "contrast": [8, 25, 27, 52], "obvious": [8, 17, 113, 122], "alreadi": [8, 10, 27, 31, 33, 34, 41, 43, 48, 52, 61, 83, 116, 121], "row": [8, 16, 18, 29, 37, 38, 41, 42, 43, 46, 68, 73, 107, 110, 119], "b1": [8, 17, 22], "b2": 8, "vital": 8, "taken": [8, 15, 24, 25, 27, 30, 34, 41, 42, 45, 60, 63, 67, 76, 111], "atanh": [8, 31], "asin": [8, 31, 32, 46, 76, 115], "polar": [8, 9, 30, 32, 48, 74], "knowledg": [8, 25, 52], "api": [9, 10, 27, 33, 49, 66, 104, 108, 116], "anytim": 9, "anyon": 9, "spars": [9, 33, 40, 41, 57, 74, 75, 76, 77, 102, 109], "gr\u00f6bner": [9, 45, 102, 103, 104, 110, 112, 116], "field": [9, 28, 33, 34, 49, 54, 61, 73, 74, 75, 76, 77, 102, 104, 106, 112, 120], "modular": [9, 28, 43, 75, 102, 103, 104, 106], "gcd": [9, 25, 27, 28, 43, 45, 48, 49, 73, 74, 76, 77, 102, 110, 112, 116], "tool": [9, 17, 33, 41, 45, 51, 62, 67, 108], "undocu": [9, 109], "confluenc": 9, "tabl": [9, 32, 34, 41, 43, 104, 105], "overview": 9, "argand": 9, "plane": [9, 27, 30, 32, 34, 77, 122], "mellin": [9, 32, 34, 104], "appli": [9, 10, 17, 18, 19, 24, 25, 27, 30, 31, 36, 37, 39, 41, 42, 43, 44, 45, 48, 52, 53, 57, 59, 61, 67, 68, 75, 104, 106, 112, 122], "laplac": [9, 34, 104, 109], "float": [9, 10, 30, 32, 34, 35, 41, 42, 44, 45, 48, 55, 71, 73, 74, 75, 77, 102, 104, 107, 109, 110, 113, 115], "accuraci": [9, 27, 45], "handl": [9, 11, 15, 18, 27, 34, 36, 40, 43, 45, 48, 54, 57, 59, 62, 67, 68, 73, 74, 83, 99, 102, 103, 105, 108, 109], "ufuncifi": [9, 62, 108], "ground": [10, 28, 41, 45, 73, 102], "decid": [10, 25, 27, 37, 39, 63], "ring": [10, 28, 41, 45, 73, 76, 104, 120], "perfectli": [10, 25, 27, 45], "legitim": 10, "uninterest": 10, "reli": [10, 46, 48, 103, 105], "encapsul": [10, 63], "unifi": [10, 27, 28, 45, 84, 97, 106, 109], "access": [10, 27, 32, 36, 38, 41, 48, 52, 57, 59, 61, 62, 63, 88, 96, 103, 105, 107, 108, 110, 113], "zz": [10, 27, 28, 34, 43, 45, 109, 119], "quo": [10, 28, 45, 102], "dens": [10, 33, 38, 40, 41, 42, 57, 75, 76, 102, 109], "infeas": [10, 45], "amount": [10, 27], "storag": [10, 27, 41], "dictionari": [10, 16, 17, 18, 24, 27, 35, 42, 43, 44, 45, 46, 48, 49, 52, 53, 54, 55, 56, 59, 65, 67, 68, 75, 119], "poli": [10, 25, 27, 28, 30, 32, 34, 45, 73, 74, 75, 76, 77, 83, 85, 94, 100, 102, 109, 110], "lexord": [10, 28, 45], "construct": [10, 27, 28, 30, 32, 38, 41, 45, 46, 49, 54, 57, 60, 61, 63, 65, 102, 104, 108, 109, 110, 115, 119], "x_1": [10, 29, 41, 45, 49], "x_n": [10, 41, 45, 49], "str": [10, 18, 27, 41, 43, 44, 45, 46, 48, 52, 61, 62, 67, 68, 74, 110, 116], "coercibl": 10, "lex": [10, 45, 46, 67, 103, 120], "polyel": [10, 73, 74, 75, 76], "multivari": [10, 27, 28, 45, 48, 73, 75, 76, 77, 78, 84, 98, 102, 120, 122], "mutabl": [10, 37, 38, 39, 41, 42, 46, 48, 57, 73, 109, 119], "until": [10, 18, 20, 27, 43, 52, 108], "hash": [10, 48, 52, 63, 67, 76, 106, 122], "preserv": [10, 25, 27, 45, 67], "plan": [10, 103], "inplac": 10, "copi": [10, 18, 19, 27, 37, 41, 46, 67, 70, 73, 103, 121], "p1": [10, 17, 22, 57], "p2": [10, 17, 25], "runtimeerror": [10, 74, 109, 110], "modifi": [10, 17, 32, 43, 44, 48, 55, 65, 67, 68, 119], "polynomialr": [10, 28, 73, 74, 77], "__add__": 10, "__eq__": [10, 17, 84, 110], "__getitem__": [10, 27, 37, 60, 75], "stand": [10, 61], "monomi": [10, 27, 33, 43, 46, 75, 120, 122], "is_monomi": [10, 74], "23": [10, 17, 18, 27, 30, 32, 41, 43, 45, 67, 109, 110], "__mul__": [10, 13, 17, 37, 41], "__pow__": 10, "none": [10, 11, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 48, 49, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 67, 68, 71, 74, 75, 76, 104, 106, 107, 108, 109, 113, 119, 122], "rais": [10, 16, 18, 27, 34, 41, 43, 45, 46, 48, 52, 53, 59, 61, 63, 67, 73, 74, 76, 104, 106, 107, 109, 110, 119], "__rmul__": 10, "self": [10, 11, 17, 18, 23, 25, 27, 28, 31, 32, 34, 37, 41, 42, 45, 46, 47, 61, 108, 109], "__rsub__": 10, "substract": 10, "__sub__": 10, "__weakref__": 10, "weak": [10, 106], "compos": [10, 38, 41, 45, 48, 73, 75, 103], "composit": [10, 16, 18, 28, 34, 43, 45, 73, 74, 75, 105], "content": [10, 27, 41, 45, 46, 63, 120], "shallow": 10, "main": [10, 27, 30, 41, 46, 52, 60, 62, 99, 104, 106, 108, 122, 123], "partial": [10, 17, 24, 29, 30, 33, 43, 48, 52, 53, 56, 57, 87, 99, 102, 104, 105, 108, 110, 113, 114, 122], "discrimin": [10, 43, 45, 52, 100], "div": [10, 27, 28, 45, 46, 48, 76, 83, 102, 110, 120], "fv": 10, "divsor": 10, "qv": 10, "uniqu": [10, 20, 22, 27, 32, 34, 41, 48, 49, 59, 63, 67, 120], "divisor": [10, 17, 27, 43, 45, 74, 120], "f1": [10, 17, 41, 45], "f2": [10, 27, 41, 45], "g1": [10, 13, 17, 41], "g2": [10, 13, 17, 41], "closhea15": [10, 45, 55, 112], "64": [10, 13, 48], "gcdex": [10, 28, 45], "euclidean": [10, 43, 45, 120], "qq": [10, 25, 28, 34, 45, 73, 74, 77, 109], "leading_expv": 10, "leading_term": 10, "monic": [10, 25, 41, 45, 120], "divid": [10, 17, 27, 41, 43, 45, 46, 52, 65, 75, 118, 120], "prem": [10, 76], "pseudo": [10, 18, 43], "knu85": [10, 112], "407": 10, "primit": [10, 17, 27, 28, 32, 43, 45, 46, 49, 76, 110, 112], "includepr": [10, 45], "54": [10, 27, 31, 67, 112], "729": [10, 73], "216": 10, "27": [10, 17, 21, 43, 48, 73, 82], "tail_degre": [10, 75], "tail": [10, 12, 25, 27], "total_degre": [10, 45], "total": [10, 16, 27, 37, 45, 48, 52, 59, 106, 122], "univar": [10, 28], "univarpolyel": [10, 75], "univari": [10, 11, 25, 27, 28, 30, 34, 45, 49, 74, 75, 95, 120], "decompos": [10, 17, 18, 24, 30, 43, 45], "decomposit": [10, 17, 24, 33, 41, 42, 87, 102, 105, 122], "characterist": [10, 28, 41, 52, 54, 73, 74, 119], "f_n": [10, 25, 29, 32, 45], "homogen": [10, 41, 45, 49, 52, 53, 73, 75, 106, 108, 109], "unlik": [10, 27, 43, 49, 52, 65, 117, 118, 119], "t_n": [10, 32, 34], "t_m": 10, "chebyshev": [10, 27, 34, 45], "kl89": [10, 112], "half_gcdex": [10, 28, 45], "sturm": [10, 74], "dst88": [10, 112], "f_0": [10, 29], "rem": [10, 28, 45, 102], "25": [10, 17, 18, 29, 32, 41, 42, 43, 45, 46, 49, 52, 53, 62, 83, 84], "2079": 10, "variant": [10, 52], "euclid": 10, "indetermin": [10, 27, 54], "qg": 10, "deg": [10, 28, 34, 120], "ident": [10, 17, 18, 24, 25, 27, 29, 30, 37, 38, 41, 42, 45, 46, 48, 52, 59, 61, 67, 73, 103, 105, 109, 112, 119, 122], "ideal": [10, 45, 110, 112], "greatest": [10, 43, 45, 102, 120], "strictli": [10, 27, 32, 41, 43, 48, 107], "decreas": [10, 27, 103], "f_k": [10, 25], "alon": [10, 48, 52, 54, 60, 117], "analogi": 10, "natur": [10, 17, 27, 30, 39, 43, 47, 67, 74, 104], "uf": 10, "vg": 10, "qquad": [10, 30], "analog": [10, 19, 29, 57], "Be": [10, 27, 41, 52, 68, 73], "zout": 10, "fast": [10, 27, 40, 41, 42, 43, 45, 52, 56, 65, 67, 68, 78, 83, 96, 98, 107, 112], "reduct": [10, 49, 102, 109], "extract": [10, 27, 34, 41, 42, 43, 45, 63, 104], "cf": [10, 43], "coprim": [10, 34, 43], "exceedingli": 10, "effort": 10, "besid": [10, 54], "exclud": [10, 25, 27, 45, 52, 55, 67, 110], "collin": [10, 102, 112], "col67": [10, 112], "realiz": [10, 13, 17, 43], "size": [10, 12, 16, 17, 18, 19, 20, 21, 22, 27, 41, 42, 43, 48, 49, 52, 67, 76, 107, 108], "linearli": [10, 32, 41, 52, 54, 61], "subdomain": 10, "growth": [10, 16, 43, 106, 114], "2l": 10, "sylvest": [10, 43], "Its": [10, 46, 119], "2j": 10, "submatrix": [10, 41, 42, 107], "s_j": 10, "scalar": [10, 27, 37, 38, 41, 42, 57, 61, 63, 104, 105, 106, 110], "briefli": [10, 88], "guarante": [10, 17, 18, 27, 41, 52, 67, 71, 106, 122], "remainin": 10, "subdetermin": 10, "regardless": [10, 18, 25, 34, 43, 47, 48, 67, 77], "n_0": 10, "n_1": 10, "n_2": 10, "n_k": 10, "n_i": [10, 22, 54], "n_": [10, 49], "abnorm": 10, "s_": [10, 22], "former": [10, 27, 29, 45, 49, 67, 76, 77, 106, 110], "gamma_i": 10, "brown": [10, 112], "traub": [10, 112], "bt71": [10, 112], "Their": [10, 27, 32, 112], "exclus": [10, 25, 27, 36], "conjectur": [10, 43], "subsequ": [10, 27, 45, 65, 67], "justifi": 10, "bro78": [10, 112], "who": [10, 46, 116], "implic": [10, 36], "discoveri": 10, "vanish": [10, 41, 45, 52], "sensit": [10, 27, 48], "previou": [10, 12, 16, 17, 18, 21, 27, 34, 68, 83, 84, 96, 103, 106, 108, 118], "groebnertool": 10, "buchberg": [10, 45, 112, 120], "li": [10, 32, 105], "solv": [10, 12, 22, 25, 33, 41, 42, 45, 48, 49, 50, 51, 52, 53, 54, 55, 73, 74, 75, 76, 77, 95, 96, 100, 102, 104, 105, 107, 109, 110, 112, 117, 123], "lexicograph": [10, 17, 18, 21, 22, 27, 45, 67, 102], "elimin": [10, 22, 33, 41, 42, 61, 63, 75, 94, 106, 122], "dimension": [10, 12, 41, 45, 55, 61, 62, 106, 108, 110, 112, 121], "nkbg03": [10, 112], "gmn": [10, 112], "91": [10, 109, 112], "alw95": [10, 112], "bw93": [10, 112], "232": 10, "cp_kei": 10, "kei": [10, 16, 17, 18, 26, 27, 37, 41, 43, 45, 46, 48, 49, 52, 53, 59, 65, 67, 106, 119], "critic": 10, "critical_pair": 10, "label": [10, 20, 22, 27, 46, 48, 60, 61, 108], "um": 10, "vm": 10, "sake": [10, 29, 49], "expens": [10, 37, 39, 52, 53, 62, 67, 84, 119], "lightweight": 10, "f5_reduc": 10, "f5": [10, 112], "contin": 10, "lt_h": 10, "lt_f": 10, "lbp": 10, "sig": 10, "polyn": 10, "f5b": [10, 45], "yao": [10, 112], "sun": [10, 112], "dingkang": [10, 112], "wang": [10, 102, 112], "adjoin": [10, 17], "signatur": [10, 18, 27, 63, 107], "path": [10, 17, 48, 52, 62, 65, 80, 83, 96], "discard": 10, "redund": [10, 17, 24, 36, 63, 102, 109, 110], "sw10": [10, 112], "203": [10, 16, 29], "groebner": [10, 45, 48, 73, 75, 109, 120], "seq": [10, 17, 27, 41, 67], "wrapper": [10, 18, 27, 32, 34, 52, 62, 102], "groebner_gcd": 10, "groebner_lcm": 10, "lcm": [10, 27, 28, 43, 45, 102, 110, 116], "intersect": [10, 17, 47, 74, 99, 103, 104, 107, 108, 110], "approach": [10, 11, 27, 34, 41, 53, 54, 62, 65, 67, 102, 112], "unrel": 10, "doesn": [10, 17, 24, 25, 27, 37, 41, 43, 48, 52, 55, 56, 67, 70, 73, 74, 75, 76, 108, 109, 110, 113, 120, 122], "is_groebn": 10, "is_minim": 10, "is_rewritable_or_compar": 10, "num": [10, 17, 27, 48, 52, 65], "thatsign": 10, "lbp_cmp": 10, "lbp_kei": 10, "lbp_mul_term": 10, "cx": [10, 52], "lbp_sub": 10, "maximum": [10, 17, 18, 27, 30, 41, 43, 45, 46, 48, 52, 65, 67, 103, 109, 110], "matrix_fglm": 10, "o_to": 10, "o_from": 10, "faugereglm93": [10, 45, 112], "red_groebn": 10, "select": [10, 11, 12, 17, 18, 25, 27, 36, 37, 41, 45, 48, 73, 107, 112], "s_poli": 10, "cp": [10, 18], "sig_cmp": 10, "sig_kei": 10, "sig_mult": 10, "spoli": 10, "lm": [10, 45], "numberfield": [10, 45, 110], "minpoly_groebn": [10, 73], "ex": [10, 15, 28, 45, 61, 64, 73, 110], "minimal_polynomi": [10, 45, 73, 74, 75, 76, 77, 105, 106, 110], "al94": [10, 112], "factorization_alg_field": 10, "_alpha_to_z": 10, "x_0": [10, 11, 49, 52], "_denomin": 10, "den": [10, 48], "smallest": [10, 20, 28, 30, 41, 43, 67], "_diophantin": 10, "minpoli": [10, 73, 76, 77], "diophantin": [10, 33, 43, 50, 74, 106, 109, 110], "z_p": 10, "_diophantine_univari": 10, "h_f": 10, "lbrace": 10, "rbrace": 10, "_distinct_prime_divisor": 10, "pairwis": [10, 29, 41, 43, 49, 54], "jm09": [10, 112], "_div": 10, "_extended_euclidean_algorithm": 10, "sf": [10, 75], "tg": 10, "_factor": 10, "save": [10, 27, 43, 55, 65, 87], "squarefre": [10, 43], "_hensel_lift": 10, "lc": [10, 45], "parallel": [10, 34, 41, 98], "hensel": [10, 75], "irreduc": [10, 45, 61, 73, 102, 120, 122], "pfactor": 10, "modulo": [10, 27, 43, 45], "_leading_coeff": 10, "lcfactor": 10, "denom": [10, 27, 48, 73, 74], "defect": 10, "possibli": [10, 18, 24, 27, 34, 43, 48, 63, 74, 110], "u_": 10, "_monic_associ": 10, "_padic_lift": 10, "z_": [10, 48], "geq": [10, 28, 32, 49], "bound": [10, 25, 27, 34, 37, 43, 54, 60, 65, 108, 109, 110], "largest": [10, 18, 20, 27, 28, 30, 32, 41, 43], "_sqf_p": 10, "_subs_ground": 10, "_test_evaluation_point": 10, "fa": 10, "_test_prim": 10, "_z_to_alpha": 10, "efactor": 10, "faster": [10, 13, 27, 32, 34, 41, 42, 43, 48, 49, 52, 53, 62, 65, 76, 79, 83, 84, 87, 92, 95, 96, 105, 107], "larger": [10, 17, 18, 25, 27, 32, 38, 43, 48, 54, 63, 65, 106], "wrong": [10, 17, 27, 41, 73, 74, 75, 76, 77, 105, 109, 110], "modulargcd": 10, "_chinese_remainder_reconstruct": 10, "hp": 10, "hq": 10, "h_": [10, 17, 22, 32, 34], "pq": 10, "x_": [10, 29, 45, 49, 52, 57, 106], "h_p": 10, "h_q": 10, "_q": 10, "chines": [10, 43], "modulu": [10, 27, 28, 41, 43, 45, 74, 102, 110, 120], "hpq": 10, "trunc_ground": 10, "_euclidean_algorithm": 10, "m_": 10, "invert": [10, 27, 28, 41, 43, 45, 52, 105, 110, 119], "necessarili": [10, 27, 34, 36, 43, 45, 48, 52, 120], "_evaluate_ground": 10, "_func_field_modgcd_m": 10, "t_1": [10, 49], "t_k": 10, "reconstruct": [10, 43, 118], "subroutin": 10, "_func_field_modgcd_p": 10, "trial": [10, 27, 43, 52, 110], "drop": [10, 28, 34, 61, 74, 75, 76, 77, 102, 109], "mvh04": [10, 112], "itself": [10, 16, 17, 18, 24, 27, 29, 41, 43, 45, 46, 48, 59, 60, 61, 63, 65, 67, 103, 104], "t_": [10, 22], "interpol": [10, 45, 102], "desir": [10, 17, 18, 27, 29, 41, 43, 45, 46, 48, 62, 65, 67, 113, 122], "_gf_gcdex": 10, "_interpol": 10, "evalpoint": 10, "hpeval": 10, "imag": [10, 17, 47, 87, 103], "x_i": [10, 32, 34, 41, 46], "resp": [10, 52], "boolean": [10, 11, 27, 33, 34, 35, 43, 48, 49, 55, 77, 102, 103, 105, 106, 107, 110], "_minpoly_from_dens": 10, "_modgcd_p": 10, "degbound": 10, "contbound": 10, "encount": [10, 27, 34, 45, 55, 63, 67, 110], "mw00": [10, 112], "bro71": [10, 112], "_primitive_in_x0": 10, "cong": [10, 43], "_rational_function_reconstruct": 10, "fracel": [10, 74, 75], "_rational_reconstruction_func_coeff": 10, "hm": 10, "c_h": 10, "h_m": 10, "_rational_reconstruction_int_coeff": 10, "ntheori": [10, 17, 43, 45, 49, 76, 104], "integer_rational_reconstruct": [10, 43], "_to_anp_poli": 10, "_to_zz_poli": 10, "_trunc": 10, "ftrunc": 10, "func_field_modgcd": 10, "reconstuct": 10, "longer": [10, 43, 46, 48, 67, 99, 102, 103, 104, 106, 107, 108, 120, 122], "spuriou": [10, 74], "algebraic_field": [10, 28, 45, 73, 74], "modgcd": 10, "candid": [10, 43, 48, 67], "trial_divis": 10, "vhm02": [10, 112], "_gcd": 10, "_zz_heu_gcd": 10, "pure": [10, 27, 45, 46, 81, 98], "signal": [10, 43, 118], "switch": [10, 17, 18, 24, 43, 45, 83, 102], "recov": [10, 34, 49], "lf95": [10, 112], "isol": [10, 30, 45, 55, 63, 73, 102, 110], "refin": [10, 45, 63, 73, 102], "rootisol": [10, 75], "complexinterv": 10, "conj": 10, "x1": [10, 27, 29, 48, 52, 67, 106], "y1": [10, 27], "x2": [10, 27, 29, 52], "y2": [10, 27], "southwest": 10, "northeast": 10, "coordin": [10, 30, 32, 41, 45, 52, 74, 108], "rectangl": [10, 34, 45, 110], "as_tupl": 10, "south": 10, "western": 10, "corner": [10, 17, 19, 45, 52, 99], "ai": [10, 32, 43, 49, 107], "north": 10, "eastern": 10, "center": [10, 17, 25, 34, 41, 46, 47], "conjug": [10, 16, 17, 27, 31, 32, 37, 39, 41, 42, 45, 46, 52, 61, 73, 74], "is_disjoint": [10, 47, 108], "check_re_refin": 10, "re_disjoint": 10, "disjoint": [10, 16, 18, 47, 108], "bool": [10, 27, 36, 41, 44, 45, 46, 54, 55, 56, 62, 63, 67, 115], "enabl": [10, 35, 45, 46, 52, 54, 55, 103, 104, 105, 109, 110, 115, 121], "share": [10, 28, 41, 43, 63], "vertic": [10, 12, 19, 20, 41, 46, 67, 99], "realinterv": 10, "scarc": 10, "manag": [10, 27, 48, 61, 102, 105, 108], "polyopt": 10, "gen": [10, 17, 22, 23, 24, 27, 28, 45, 55, 76], "flag": [10, 17, 18, 22, 24, 27, 34, 36, 41, 43, 45, 46, 48, 49, 52, 55, 56, 61, 62, 67, 107, 110, 113, 117], "build_opt": 10, "wrt": [10, 27, 41, 45, 54, 55], "greedi": [10, 43, 45, 48], "gaussian": [10, 32, 34, 41, 45, 49, 76, 104, 110, 120], "polyerror": [10, 76, 77], "basepolynomialerror": 10, "coercionfailederror": 10, "coercion": [10, 75], "computationfailederror": 10, "func": [10, 27, 29, 32, 43, 45, 46, 48, 52, 53, 56, 64, 68, 118], "narg": [10, 27, 31, 92, 107], "exc": 10, "domainerror": [10, 76], "evaluationfailederror": 10, "exactquotientfailederror": [10, 45], "dom": [10, 28, 109], "extraneousfactorserror": 10, "extran": [10, 52, 74], "flagerror": 10, "generatorserror": [10, 41], "unsuit": 10, "generatorsneedederror": 10, "heuristicgcdfailederror": 10, "homomorphismfailederror": 10, "homomorph": 10, "isomorphismfailederror": 10, "isomprph": 10, "modulargcdfailederror": 10, "multivariatepolynomialerror": 10, "notalgebraicerror": 10, "notinvertibleerror": [10, 45], "notreversibleerror": 10, "revers": [10, 12, 16, 18, 25, 27, 30, 41, 43, 45, 46, 48, 52, 67, 102, 122], "operationnotsupportederror": 10, "optionerror": 10, "polificationfailederror": 10, "opt": [10, 48], "orig": 10, "polunomi": 10, "polynomialdivisionfailederror": 10, "polynomialerror": [10, 73, 76, 77], "refinementfailederror": 10, "unificationfailederror": 10, "unif": [10, 106], "univariatepolynomialerror": 10, "unluckyleadingcoefficienterror": 10, "unlucki": [10, 73], "fractionfield": [10, 28], "wait": 11, "http": [11, 12, 15, 16, 17, 18, 19, 20, 25, 27, 29, 30, 32, 34, 41, 43, 45, 46, 47, 48, 49, 52, 62, 63, 67, 84, 94, 97, 104, 112], "en": [11, 15, 16, 17, 18, 25, 27, 29, 30, 32, 34, 41, 43, 45, 47, 52, 63, 67], "wikipedia": [11, 15, 16, 17, 18, 25, 27, 29, 30, 32, 34, 41, 43, 45, 47, 52, 63, 67, 109], "org": [11, 15, 16, 17, 18, 25, 27, 29, 30, 32, 34, 41, 43, 45, 46, 47, 49, 52, 62, 63, 67, 84, 94, 97, 104, 112], "wiki": [11, 15, 16, 17, 18, 25, 27, 29, 30, 32, 34, 41, 43, 45, 47, 49, 52, 63, 67, 94], "mathematical_singular": 11, "z0": [11, 27], "dir": [11, 27, 77, 114], "unevalu": [11, 25, 27, 34, 43, 45, 47, 52, 76, 77, 82, 84, 102, 103, 108, 109, 110, 114, 117, 123], "bidirect": [11, 109, 114], "doit": [11, 25, 27, 29, 30, 32, 34, 45, 52, 53, 67, 74, 76, 96, 103, 109, 110, 114, 117], "maxim": [11, 17, 48, 109], "alia": [11, 19, 27, 28, 37, 40, 42, 47, 49, 57, 73, 110], "var": [11, 25, 34, 41, 46, 48, 49, 81, 92, 96, 97, 102, 104, 109], "kwarg": [11, 17, 18, 25, 27, 28, 30, 32, 36, 37, 38, 39, 41, 42, 46, 47, 48, 52, 53, 57, 62, 68, 77, 108, 109], "behavior": [11, 17, 27, 32, 44, 45, 46, 48, 68, 76, 103, 104, 106, 108, 109, 122], "big": [11, 12, 27, 43, 74, 77, 96, 106, 109, 110, 114], "sup": [11, 45, 46, 47], "privid": 11, "intuit": [11, 27, 52], "thought": [11, 27, 52], "proport": [11, 17, 74], "as_leading_term": [11, 27, 74, 76], "membership": [11, 23, 24], "big_o_not": 11, "inclus": [11, 25, 47, 52], "x0": [11, 27, 43, 48, 52, 67, 102, 106, 114], "notion": [11, 73, 77], "residue_": 11, "28complex_analysi": 11, "29": [11, 16, 17, 18, 27, 29, 30, 41, 43, 47, 103, 119], "residue_theorem": 11, "graycod": 12, "kw_arg": [12, 20, 60, 61], "hamiltonian": 12, "cube": [12, 17, 19, 30, 49, 112], "edg": [12, 19, 20, 46, 67], "whose": [12, 16, 18, 25, 27, 37, 42, 43, 45, 48, 52, 53, 61, 65], "hamilton": 12, "visit": [12, 17, 27, 29, 67], "vertex": [12, 20], "3d": [12, 43, 75, 82, 102, 104, 108], "110": [12, 27], "010": 12, "011": 12, "111": 12, "101": [12, 43], "sequenti": [12, 30], "delet": [12, 41, 42, 73, 78, 119], "absent": 12, "applic": [12, 17, 19, 27, 34, 41, 43, 45, 46, 48, 54, 63, 67, 112, 123], "manner": [12, 32, 49, 52], "nijenhui": 12, "wilf": [12, 112], "1978": [12, 112], "combinatori": [12, 18, 25, 27, 31, 32, 33, 69, 122], "academ": [12, 112], "press": [12, 18, 49, 112], "knuth": [12, 18, 65, 107, 112], "2011": [12, 18, 43, 102, 103], "art": [12, 18, 46, 65, 107], "vol": [12, 18, 32, 41, 65, 103], "addison": [12, 18, 43, 112], "weslei": [12, 18, 43, 112], "generate_grai": 12, "0000": 12, "0011": [12, 21], "0010": 12, "0110": 12, "0111": 12, "0101": 12, "0100": 12, "1100": [12, 75], "1101": [12, 75], "1111": 12, "1110": 12, "1010": 12, "1011": 12, "1001": 12, "referenc": [12, 16, 43], "rank": [12, 16, 17, 18, 20, 21, 22, 41, 57, 60, 61, 102, 109], "skip": [12, 27, 41, 43, 52, 55, 106, 109], "dimens": [12, 41, 45, 46, 54, 57, 60, 61, 63, 106, 108, 110, 112], "distanc": [12, 18, 107], "among": [12, 18, 45, 52, 57, 59, 61], "reflect": [12, 15, 18, 27, 48, 102, 106], "brgc": 12, "6th": [12, 43], "famili": [12, 34, 104], "statweb": 12, "stanford": 12, "edu": [12, 17, 43, 49, 52, 112], "susan": [12, 112], "s208": 12, "node12": 12, "unrank": [12, 16, 17, 18, 20], "classmethod": [12, 16, 18, 20, 21, 27, 31, 32, 37, 41, 42, 45, 46, 47], "own": [12, 17, 27, 46, 48, 52, 65, 68, 115], "00010": 12, "random_bitstr": 12, "random": [12, 16, 17, 18, 24, 27, 40, 41, 43, 71, 102, 104, 110], "bitlist": [12, 21], "gray_to_bin": 12, "endian": 12, "encod": [12, 18, 24, 33, 65, 67, 118], "bin_to_grai": 12, "get_subset_from_bitstr": 12, "bitstr": 12, "graycode_subset": 12, "group_construct": [13, 15], "directproduct": [13, 15], "permut": [13, 14, 15, 19, 22, 23, 24, 29, 32, 33, 41, 45, 49, 57, 61, 67, 103, 104, 107], "gn": 13, "cyclicgroup": [13, 15, 17], "perm_group": [13, 17, 23, 24], "permutationgroup": [13, 15, 17, 23, 24], "partit": [14, 17, 29, 33, 43, 65, 66, 103, 107, 109, 110], "group": [14, 18, 19, 22, 23, 24, 29, 33, 43, 45, 48, 52, 54, 61, 67, 104, 105, 110], "polyhedron": [14, 17, 33], "prufer": [14, 33, 104], "grai": [14, 21, 33, 104], "canonic": [14, 27, 33, 61, 73, 103, 105], "named_group": 15, "symmetricgroup": [15, 17, 23, 24], "cycl": [15, 17, 18, 24, 29, 43, 67, 103, 109], "transposit": [15, 18, 30, 38, 41], "is_group": [15, 17], "24": [15, 18, 19, 27, 32, 41, 43, 45, 49, 52, 65, 85, 114, 119], "generate_schreier_sim": [15, 17], "af": [15, 17, 23], "dihedralgroup": [15, 17, 23, 24], "alternatinggroup": [15, 17, 23], "symmetric_group": 15, "generators_and_rel": 15, "cyclic": [15, 18, 19, 43, 61], "dihedr": [15, 18], "d_n": 15, "symmetri": [15, 19, 22, 32, 41, 52, 59, 61], "gon": 15, "rotat": [15, 17, 19, 27, 41, 52, 67, 82, 103, 108], "bab": 15, "generate_dimino": [15, 17], "perm": [15, 18, 19, 24, 29, 41, 57], "cyclic_form": [15, 18, 19], "dihedral_group": 15, "altern": [15, 17, 18, 30, 32, 38, 42, 46, 104, 109], "odd": [15, 18, 27, 29, 30, 32, 36, 43, 76, 77], "len": [15, 16, 17, 18, 22, 24, 27, 29, 32, 46, 48, 52, 60, 67, 108], "is_even": [15, 17, 18, 27, 74], "armstrong": 15, "abeliangroup": 15, "cyclic_ord": 15, "abelian": [15, 17], "print_cycl": [15, 17, 18, 22, 24], "groupprop": [15, 17], "subwiki": [15, 17], "structure_theorem_for_finitely_generated_abelian_group": 15, "abstract": [16, 32, 33, 38, 61, 63, 102], "union": [16, 17, 24, 47, 103, 109, 110], "iter": [16, 17, 18, 21, 22, 27, 29, 32, 33, 37, 43, 45, 46, 47, 48, 49, 54, 55, 56, 57, 59, 62, 63, 65, 66, 73, 75, 102, 103, 108, 109], "multiset_partit": [16, 29, 67], "rg": 16, "restrict": [16, 32, 41, 55, 107], "block": [16, 17, 40, 41, 43, 49, 100, 104, 106, 109], "member": [16, 17, 60], "from_rg": 16, "abcd": [16, 19], "cbead": 16, "sort_kei": [16, 27, 52, 67, 109], "ti": [16, 18, 27, 67], "broken": [16, 46, 52, 67, 85, 109, 110], "rang": [16, 17, 18, 20, 22, 27, 29, 30, 32, 37, 41, 42, 43, 45, 47, 48, 52, 57, 60, 61, 67, 76, 102, 107, 108, 110, 113, 122], "default_sort_kei": [16, 27, 59, 67, 106], "integerpartit": [16, 67], "summand": [16, 25], "partition_": 16, "28number_theori": 16, "as_dict": [16, 45, 73], "as_ferr": 16, "char": 16, "ferrer": 16, "diagram": [16, 118], "next_lex": [16, 18], "lexic": 16, "prev_lex": 16, "random_integer_partit": 16, "seed": [16, 17, 41, 43], "practic": [16, 17, 27, 59], "85": [16, 29, 43], "rgs_gener": 16, "unrestrict": [16, 103], "26": [16, 27, 43, 49, 84, 109], "37": [16, 43, 49], "77": [16, 43, 46, 63, 120], "151": 16, "rgs_enum": 16, "superset": [16, 21, 47, 48, 108], "assert": [16, 17, 18, 52, 53], "rgs_unrank": 16, "rgs_rank": 16, "pn": 17, "suppli": [17, 18, 27, 43, 52, 62, 67, 68, 107], "decor": [17, 27, 32, 33, 66, 67, 69, 73, 83, 95], "motion": [17, 52, 104], "front": [17, 27, 28, 45, 48, 61], "bottom": [17, 27, 45, 46, 110], "face": [17, 19, 106], "2x2": 17, "rubik": 17, "19": [17, 27, 32, 41, 43, 62, 97, 112], "21": [17, 27, 29, 41, 43, 46, 52, 55, 57, 108, 122], "18": [17, 18, 29, 32, 41, 42, 43, 46, 47, 48, 49, 52, 54, 57, 61, 75, 107, 112, 120], "3674160": 17, "pgroup": [17, 19], "reset": [17, 19, 26, 64], "Or": [17, 27, 36, 48, 103, 110], "p10": 17, "make_perm": 17, "holt": [17, 24], "eick": [17, 24], "brien": [17, 24], "handbook": [17, 24, 32, 104, 112], "seress": 17, "schreier_vector": 17, "nielsen_transform": 17, "product_replacement_algorithm": 17, "frank": [17, 18], "celler": 17, "charl": 17, "leedham": 17, "green": 17, "scott": 17, "murrai": 17, "alic": 17, "niemey": 17, "block_": 17, "28permutation_group_theori": 17, "web": [17, 43, 49, 111], "archiv": [17, 43, 49, 111], "20170105021515": 17, "www": [17, 18, 32, 41, 43, 46, 48, 49, 52, 67, 112], "algorithmist": 17, "80": [17, 27, 34, 41, 43], "php": [17, 32, 43, 49], "union_find": 17, "multiply_transitive_group": 17, "center_": 17, "28group_theori": 17, "centralizer_and_norm": 17, "derived_subgroup": 17, "nilpotent_group": 17, "math": [17, 27, 32, 43, 46, 52, 53, 62, 63, 68, 85, 103, 110, 112, 113, 117], "colost": 17, "hulpk": 17, "cgt": 17, "cgtnote": 17, "pdf": [17, 29, 43, 48, 49, 52, 67, 109, 112], "__contains__": 17, "act": [17, 18, 22, 27, 36, 104, 106], "n1": [17, 27, 49], "n2": [17, 27, 49], "__new__": [17, 27, 118], "dup": 17, "_union_find_merg": 17, "parent": [17, 27, 65], "not_rep": 17, "atkinson": 17, "suggest": [17, 34, 43], "83": 17, "87": [17, 30, 109], "side": [17, 18, 27, 34, 41, 46, 53, 59, 63, 77, 104, 106, 114], "effect": [17, 19, 27, 34, 41, 52, 113], "due": [17, 27, 35, 46, 49, 53, 71, 122], "minimal_block": 17, "_union_find_rep": 17, "compress": 17, "alter": [17, 27], "schreier": [17, 22, 24, 104], "b_k": [17, 24, 29, 32], "concept": [17, 45, 46, 59], "strong": [17, 22, 23, 24, 43, 61], "depth": [17, 46, 67, 109, 110], "89": [17, 24, 112], "55": [17, 29, 41, 49], "57": [17, 43, 112], "coset": [17, 22], "strong_gen": [17, 23, 24], "basic_transvers": [17, 24], "basic_orbit": [17, 24], "basic_stabil": 17, "baseswap": 17, "po": [17, 36, 41], "transvers": [17, 22, 24], "strong_gens_distr": [17, 24], "swap": [17, 19, 37, 41, 42, 119], "consecut": [17, 22, 25, 27, 29, 48], "la": 17, "vega": 17, "determinist": 17, "orbit": [17, 24, 104], "testutil": [17, 23, 24], "_verify_bsg": [17, 23, 24], "schreier_sim": [17, 23, 24], "bsg": [17, 22, 24, 61], "s1": [17, 25, 45, 61, 67], "102": [17, 41, 109], "103": [17, 109], "98": [17, 52, 55, 75], "mistak": 17, "pseudocod": 17, "beta_": 17, "langl": 17, "rangl": 17, "foral": [17, 25], "zg": 17, "gz": 17, "central": [17, 23, 49], "subgroup": [17, 18, 22, 23, 24, 43, 104], "c_g": 17, "sg": [17, 61], "proper": [17, 27, 34, 43, 47, 52, 57, 62, 63, 108], "outsid": [17, 27, 32, 41, 48, 52, 114], "is_subgroup": 17, "subgroup_search": 17, "hgh": 17, "closur": [17, 23, 47, 110], "drawn": 17, "resiz": 17, "necessari": [17, 18, 27, 36, 45, 48, 52, 53, 57, 61, 63, 67, 73, 107], "elem": 17, "coset_factor": 17, "factor_index": 17, "_basic_orbit": 17, "confirm": [17, 43, 52], "u1": [17, 52], "u2": [17, 52], "tr": [17, 46, 104], "_strip": [17, 24], "coset_rank": 17, "coset_unrank": 17, "compris": [17, 41, 45], "derived_seri": 17, "g_0": [17, 49], "g_1": [17, 45, 49, 52], "g_2": [17, 52], "g_i": 17, "g_k": 17, "dimino": 17, "tetrahedron": [17, 19], "axiom": 17, "doy": 17, "sc": 17, "is_abelian": 17, "is_alt_sym": [17, 24], "ep": [17, 25], "05": 17, "_random_prec": 17, "mont": [17, 104], "carlo": [17, 104, 112], "incorrect": [17, 27, 43, 65, 73, 74, 75, 76, 77, 109, 110], "nontrivi": [17, 27, 43, 52, 104, 122], "transit": 17, "81": [17, 41, 112], "82": 17, "226": 17, "227": 17, "_check_cycles_alt_sym": [17, 24], "is_nilpot": [17, 41], "nilpot": [17, 41, 105, 110], "solvabl": [17, 49, 52, 105], "lower_central_seri": 17, "is_solv": 17, "is_norm": [17, 28, 74], "gr": [17, 112], "is_primit": [17, 28, 75], "action": [17, 27, 45, 48, 74, 102], "cardin": [17, 18, 21, 108], "badli": 17, "offer": [17, 65], "produc": [17, 27, 46, 52, 53, 65, 67, 74, 103, 109, 121, 122], "random_stab": 17, "hope": 17, "g3": 17, "s3": 17, "s5": 17, "c7": 17, "is_transit": 17, "is_trivi": 17, "randomli": [17, 43], "cba": 17, "max_div": 17, "siev": [17, 43], "nonempti": 17, "gb": 17, "translat": [17, 27, 46, 52, 62, 63, 67, 68, 82, 105], "thing": [17, 18, 27, 33, 36, 41, 47, 48, 52, 59, 102, 108, 113, 114, 115, 119, 122], "p_": [17, 22, 27, 49, 52, 57, 61], "normal_closur": [17, 23], "yx": 17, "73": [17, 27, 43, 52], "random_pr": 17, "74": 17, "orb": 17, "orbit_transvers": 17, "orbit_rep": 17, "send": [17, 27, 30, 41, 43, 52], "79": [17, 18, 109], "rep": [17, 22, 27, 28, 45, 48], "lowest": [17, 22, 43], "pointwise_stabil": 17, "increment": [17, 18, 19, 25, 104], "pointwis": [17, 24], "p_k": [17, 43], "p_i": [17, 22, 43], "p20": 17, "stab": 17, "schreier_sims_increment": [17, 24], "obviou": [17, 25, 49, 117], "segment": [17, 52, 99], "gen_count": 17, "_random_pr_init": 17, "attribut": [17, 18, 27, 32, 38, 41, 48, 60, 61, 62, 64, 68, 73, 74, 75, 76, 96, 107, 108, 110, 113, 118], "_random_gen": 17, "repeat": [17, 20, 25, 27, 32, 34, 41, 42, 43, 44, 46, 59, 60, 62, 67, 76, 109], "b_r": 17, "h_1": [17, 22], "unchang": [17, 18, 27, 34, 41, 45, 48, 113], "90": [17, 24, 27, 32, 41, 46, 48, 63, 109], "93": [17, 112], "schreier_sims_random": [17, 24], "consec_succ": 17, "consec": 17, "_succ": 17, "97": [17, 41, 43, 73, 112], "sift": [17, 24, 67], "amend": 17, "unsuccess": [17, 24], "accordingli": 17, "halt": 17, "signifi": [17, 45], "g_t": 17, "prop": 17, "init_subgroup": 17, "prune": 17, "callabl": [17, 46, 48, 62, 63, 67, 68], "supergroup": 17, "sought": [17, 43, 48], "def": [17, 27, 29, 31, 36, 41, 43, 44, 45, 46, 48, 67, 68], "prop_even": 17, "lenghti": 17, "care": [17, 27, 34, 41, 48, 49, 52, 59, 61, 62, 113, 122], "attent": [17, 30, 68], "114": [17, 109], "117": 17, "book": [17, 30, 104], "clariti": 17, "exponenti": [17, 22, 27, 29, 31, 33, 34, 41, 43, 44, 48, 52, 55, 74, 75, 76, 77, 104, 110], "terribl": 17, "crucial": [17, 25], "frequent": [17, 108], "transitivity_degre": 17, "fold": [17, 27, 46, 48], "a_k": 17, "arrang": [18, 37, 49, 76], "reorder": [18, 25, 45, 52, 74], "themselv": [18, 24, 27, 43, 47, 61, 65, 67], "commonli": [18, 29, 32, 34, 52], "bracket": [18, 46, 61, 76, 102, 109], "conveni": [18, 27, 29, 32, 34, 36, 46, 47, 48, 55, 59, 60, 62, 68, 111, 114], "economi": 18, "singleton": [18, 33, 36, 75, 83, 108, 110], "caution": [18, 27, 30, 48], "__call__": [18, 109], "syntax": [18, 27, 34, 35, 44, 46, 48, 73, 76, 87, 97, 102, 105, 108, 109, 114, 117, 121], "instanti": [18, 27, 28, 74, 104, 108], "trigger": [18, 76], "indexerror": [18, 41, 45, 74, 109, 110], "ok": [18, 52], "prohibit": [18, 19], "autos": 18, "varieti": [18, 27, 45, 104, 108], "watch": 18, "prefer": [18, 25, 27, 32, 43, 48, 52, 63, 68, 117], "array_form": [18, 19], "econom": [18, 67], "biject": [18, 20], "locat": [18, 27, 41, 43, 48, 108], "hard": [18, 43, 46, 52, 55], "full_cyclic_form": 18, "rmul": 18, "unrank_lex": 18, "zo42": 18, "from_sequ": 18, "skiena": 18, "discret": [18, 32, 43, 52, 74, 105], "graph": [18, 32, 46, 60, 67, 102], "mathematica": [18, 33, 44, 80, 104, 110, 121], "ma": [18, 112], "1990": [18, 112], "1st": [18, 43, 52, 53, 108], "ed": [18, 32], "wendi": 18, "myrvold": 18, "ruskei": 18, "2001": [18, 112], "inf": [18, 41, 45, 47, 52, 110], "lett": 18, "septemb": [18, 65, 112], "281": 18, "284": 18, "doi": [18, 112], "1016": [18, 75, 112], "s0020": 18, "0190": 18, "00141": 18, "kreher": 18, "stinson": 18, "crc": [18, 112], "1999": [18, 42], "graham": [18, 29, 30, 43], "patashnik": 18, "foundat": [18, 112], "scienc": [18, 41, 112, 114], "2nd": [18, 43, 52, 57, 67, 104, 108], "1994": [18, 112], "lehmer_cod": 18, "_array_form": 18, "rubric": 18, "ascent": 18, "ie": [18, 83], "descent": 18, "min": [18, 22, 29, 31, 41, 52, 67, 74, 102, 110], "atom": [18, 27, 36, 41, 46, 60, 83, 102, 104, 110], "fg": [18, 52], "gf": [18, 28], "commutes_with": [18, 61], "cycle_structur": 18, "stirl": [18, 31, 67, 74], "from_inversion_vector": 18, "lambda": [18, 37, 38, 41, 42, 43, 45, 46, 47, 48, 52, 54, 57, 67, 68, 82, 84, 108, 109], "get_adjacency_dist": 18, "adjac": [18, 45, 67], "metric": [18, 22, 48, 52, 61], "count": [18, 25, 27, 29, 43, 47, 48, 61, 65, 67, 74, 102, 107], "job": [18, 46], "n_adj": 18, "quantiti": [18, 27, 32, 48, 108], "reev": 18, "colin": [18, 109], "landscap": 18, "annal": 18, "research": [18, 48], "86": 18, "473": [18, 110], "490": 18, "josephu": 18, "get_precedence_matrix": 18, "get_precedence_dist": 18, "get_adjacency_matrix": 18, "get_positional_dist": 18, "inversion_vector": 18, "lesser": 18, "lie": [18, 50], "lehmer": 18, "ith": [18, 43, 103], "variat": [18, 27, 52, 77], "eng": 18, "chula": 18, "ac": [18, 48, 49], "prabha": 18, "teach": 18, "algo": 18, "algo2008": 18, "inv": [18, 41, 42], "htm": [18, 32, 43, 49, 112], "is_empti": 18, "is_singleton": 18, "is_ident": 18, "is_odd": [18, 27], "shuffl": 18, "stop": [18, 27, 43, 52], "3rd": [18, 43, 57, 73], "012345": 18, "345": 18, "34": [18, 29, 48, 49], "253": [18, 109], "2531": 18, "25314": 18, "253140": 18, "flavius_josephu": 18, "josephus_problem": 18, "trim": [18, 83, 102], "unmov": 18, "trail": [18, 43, 45, 70], "mul_inv": 18, "next_nonlex": 18, "nonlex": 18, "rank_nonlex": 18, "unrank_nonlex": 18, "next_trotterjohnson": 18, "trotter": 18, "johnson": 18, "rank_trotterjohnson": 18, "unrank_trotterjohnson": 18, "pariti": 18, "_af_par": 18, "underli": [18, 24, 27, 37, 41, 54], "inv_perm": 18, "enforc": [18, 106], "operand": [18, 27, 109], "typeerror": [18, 27, 37, 39, 42, 73, 74, 75, 76, 77, 106, 107, 109, 110], "rmul_with_af": 18, "ascend": [18, 67, 75], "join": [18, 27, 41, 42, 46, 48, 52, 67], "transposition_": 18, "28mathemat": [18, 27, 47], "dict": [18, 35, 41, 43, 44, 45, 46, 48, 49, 52, 53, 54, 55, 56, 59, 67, 74, 84, 96, 110, 123], "flexibl": [18, 27], "rh": [18, 27, 41, 42, 46], "truncat": [18, 74], "__iter__": [18, 27, 48], "redefin": [18, 27], "sn": [18, 25], "cn": 18, "dn": 18, "s2": [18, 45, 61, 67], "klein": 18, "embed": [18, 106], "s4": 18, "polyhedr": 19, "psg": 19, "platon": 19, "solid": 19, "tetrahedr": 19, "octahedr": 19, "icosahedr": 19, "docstr": [19, 27, 33, 34, 43, 48, 52, 53, 60, 64, 70, 73, 74, 99, 100, 104, 108, 109, 110], "mathworld": [19, 20, 27, 29, 30, 32, 43, 47, 49], "wolfram": [19, 20, 27, 29, 30, 32, 43, 46, 47, 48, 49], "polyhedralgroup": 19, "polyhedra": 19, "valid": [19, 25, 27, 29, 41, 43, 48, 49, 52, 104, 109, 110, 122], "physic": [19, 43, 65, 100, 102, 104, 106, 107, 108, 109, 112, 122], "letter": [19, 27, 41, 43, 46, 67, 114], "shadow": 19, "h5": 19, "isomorph": [20, 45, 102], "heinz": [20, 112], "caylei": 20, "labeledtre": 20, "node": [20, 27, 34, 46, 59, 65, 67, 118], "connect": [20, 52, 105, 120], "beyond": [20, 48], "tree_repr": 20, "prufer_rank": 20, "prev": 20, "36": [20, 29, 34, 41, 43, 45, 49, 52, 109], "35": [20, 29, 34, 41, 43, 49, 52, 119], "prufer_repr": 20, "highest": [20, 45, 49], "record": 20, "to_pruf": 20, "778": 20, "779": 20, "777": 20, "1296": [20, 77], "to_tre": 20, "hamberg": 20, "erlend": 20, "2010": [20, 53, 101, 105, 112], "06": [20, 71], "compact": [20, 45, 65], "next_binari": 21, "prev_binari": 21, "bitlist_from_subset": 21, "subset_from_bitlist": 21, "superset_s": 21, "iterate_binari": 21, "iterate_graycod": 21, "prev_grai": 21, "next_grai": 21, "next_lexicograph": 21, "prev_lexicograph": 21, "rank_binari": 21, "unrank_binari": 21, "rank_grai": 21, "unrank_grai": 21, "rank_lexicograph": 21, "43": [21, 43], "super_set": 21, "subset_indic": 21, "ksubset": 21, "itertool": [21, 29, 67], "tensor_can": [22, 61], "msym": 22, "contravari": [22, 41, 61], "covari": [22, 41, 61, 104], "d0": 22, "d1": 22, "base_i": 22, "gens_i": 22, "sym_i": 22, "failur": [22, 43, 73, 74, 101, 109, 110], "canonicalize_na": 22, "slower": [22, 41, 42], "exchang": [22, 41], "compon": [22, 27, 34, 45, 60, 61, 65, 104], "anticommut": [22, 61, 102], "canonical_fre": 22, "slot": [22, 60, 61], "tensor_gen": 22, "list_free_indic": 22, "sym": [22, 27, 29, 46, 48, 49, 67], "double_coset_can_rep": 22, "reintroduc": 22, "antisymmetr": [22, 41, 61], "d2": 22, "ord": [22, 41], "t_c": 22, "base2a": 22, "gens2a": 22, "get_symmetric_group_sg": [22, 61], "t0": 22, "t1": [22, 49, 61], "a_m": 22, "_a": [22, 32, 45], "_b": [22, 32], "base_f": 22, "gens_f": 22, "base1": 22, "gens1": 22, "base_a": 22, "gens_a": 22, "bsgs_direct_product": 22, "sgen": 22, "s_transvers": 22, "butler": [22, 61], "portug": [22, 61], "computation": [22, 55, 62], "slow": [22, 27, 34, 46, 48, 52, 62, 73, 74, 75, 76, 77, 96, 106, 110, 113, 122], "absenc": 22, "opposit": [22, 41, 122], "ind": [22, 61], "Being": 22, "d3": 22, "a0": 22, "a1": [22, 41, 43, 57], "a2": [22, 41, 43, 57], "a3": [22, 41], "a4": 22, "a5": 22, "_af_rmul": 22, "p0": [22, 52], "sublist": 22, "dbase": 22, "recomput": 22, "tab": [22, 76], "s_i": [22, 34], "h_i": 22, "p_j": 22, "s_0": 22, "id": [22, 30], "d_0": 22, "h_0": 22, "sx": 22, "trace": [22, 38, 41, 46, 57, 59, 104, 109, 110], "h_n": [22, 32, 34], "tab1": 22, "assign": [22, 26, 36, 41, 46, 55, 61, 63, 108], "get_transvers": 22, "antisym": [22, 61], "anti": [22, 34, 41], "base2": 22, "gens2": 22, "_cmp_perm_list": 23, "hashabl": [23, 67], "ls1": 23, "ls2": 23, "_naive_list_centr": 23, "brute": [23, 49], "serv": [23, 27, 31, 52, 53, 70, 116], "_verify_centr": 23, "centr": 23, "_verify_normal_closur": 23, "_base_ord": 24, "base_ord": 24, "backtrack": [24, 104], "108": [24, 43, 109], "132": [24, 29], "_distribute_gens_by_bas": 24, "_strong_gens_from_distr": 24, "_orbits_transversals_from_bsg": 24, "_handle_precomputed_bsg": 24, "transversals_onli": 24, "across": [24, 25, 46, 65, 66, 67, 106], "_remove_gen": 24, "new_gen": 24, "outlin": [24, 34], "95": [24, 43, 46, 52, 63, 112], "implicit": [24, 27, 44, 52, 55, 60, 62, 63, 104, 110], "retriev": [24, 48, 61, 110], "stage": [25, 33], "recurr": [25, 29, 33, 41, 48, 50, 52, 55, 69, 74, 75, 109, 110, 116], "plai": [25, 49, 113, 117], "annihil": [25, 27], "word": [25, 27, 30, 36, 48, 49, 52, 63, 108], "is_hypergeometr": [25, 27, 110], "rf": [25, 29], "ff": [25, 29, 77], "speci": [25, 27], "rise": [25, 29, 32, 48, 52], "fall": [25, 29, 46, 49, 53], "previous": [25, 48, 103, 105, 106, 108], "nonlinear": [25, 55, 95], "hypersimp": [25, 27, 33], "karr": [25, 105, 112], "kar81": [25, 112], "especi": [25, 48, 52, 100, 113, 114], "seemingli": 25, "nonsens": 25, "eval_integr": 25, "magnitud": [25, 27, 32, 76], "28333333333333": 25, "sstr": [25, 46, 61, 109], "full_prec": [25, 46], "26629073187415": 25, "0175000000000000": 25, "nonzero": [25, 27, 30, 41, 74], "remaind": [25, 27, 28, 43, 45, 52, 112, 120], "findrecur": [25, 109], "sum_k": [25, 57], "doubli": [25, 43], "sister": [25, 109], "celin": [25, 109], "petkovvsekwz97": [25, 54, 112], "ch": [25, 41, 42, 49], "reverse_ord": 25, "selector": [25, 48], "mix": [25, 27, 41, 46, 59, 61, 68, 75], "expr_with_intlimit": 25, "exprwithintlimit": 25, "reorder_limit": 25, "analogu": 25, "prod": [25, 76], "120": [25, 27, 29, 43, 46, 52, 109, 114], "capital_pi_not": 25, "empty_product": 25, "risingfactori": [25, 31, 32, 73], "expr_with_limit": [25, 34], "exprwithlimit": [25, 34], "as_dummi": [25, 34], "counterpart": [25, 27, 52, 114], "world": 25, "_x": [25, 48, 52, 103], "_y": 25, "underscor": [25, 27, 52], "prefix": [25, 41, 43, 49, 52, 62, 63, 67, 77], "free_symbol": [25, 27, 34, 41, 45, 73], "is_numb": [25, 27, 31, 107, 110], "renam": [25, 73, 74, 76, 80, 87, 92, 102, 106, 108, 109, 110], "change_index": [25, 106], "trafo": 25, "newvar": 25, "p3": 25, "inconsist": [25, 27, 52, 74, 75, 76, 77], "_____": 25, "gosper": [25, 102, 109], "gosper_norm": 25, "gosper_term": 25, "s_n": [25, 45], "g_n": [25, 45], "gosper_sum": [25, 110], "convert_xor": [27, 44], "coerc": 27, "inherit": [27, 31, 36, 38, 39, 46, 63, 64, 96, 104, 110], "cooper": [27, 112], "sage": [27, 90, 91, 92, 95], "09": [27, 112], "2e": 27, "leav": [27, 34, 43, 65, 113, 118], "noth": [27, 28, 34, 46, 48, 52, 55, 115], "is_integ": [27, 46, 60, 77], "is_real": [27, 30, 31, 41, 74, 102, 106, 108], "45": [27, 29, 43, 45, 49, 76, 109], "sympifyerror": 27, "sympif": [27, 67, 108], "load": 27, "bitcount": 27, "improperli": 27, "unbound": [27, 60, 108], "recogn": [27, 48, 60, 75, 102], "namespac": [27, 49, 52, 53, 63, 68, 74, 117], "exec": 27, "greek": [27, 43, 44, 46], "clash": [27, 41], "privat": [27, 63, 73, 110], "_clash1": 27, "_clash2": 27, "multi": [27, 46, 103, 104, 109], "_clash": 27, "convers": [27, 60, 62], "denest": [27, 33, 45, 67, 80, 104], "ast": [27, 35, 80, 97, 109, 110], "autosimplif": [27, 48], "dure": [27, 41, 43, 48, 73, 109, 115], "_diofant_": 27, "subclass": [27, 36, 46, 62, 63, 68, 73, 74, 102, 104, 106, 107], "runtim": [27, 109, 110], "mylist1": 27, "global": [27, 44, 47, 49, 52, 53, 63, 102, 104, 109], "mylist": 27, "mylist2": 27, "xxx": [27, 34, 41], "machineri": [27, 68], "is_": [27, 109], "default_assumpt": 27, "defined_fact": 27, "is_algebra": 27, "is_prim": 27, "is_posit": [27, 74, 83, 113], "context": [27, 36, 102, 105, 108, 117], "obj": [27, 45], "_assumpt": 27, "getter": 27, "managedproperti": 27, "kw": 27, "metaclass": 27, "style": [27, 46, 104, 109], "stdfactkb": 27, "factkb": 27, "specialis": 27, "built": [27, 28, 30, 46, 65, 67, 102, 105, 117, 121], "kind": [27, 29, 32, 34, 41, 45, 47, 52, 53, 55, 67, 74, 102, 114, 122], "as_properti": 27, "check_assumpt": [27, 110], "conclud": [27, 32, 55, 56], "make_properti": 27, "automag": 27, "maxsiz": 27, "immut": [27, 33, 37, 40, 41, 42, 57, 74, 83, 104, 109, 113, 119], "class_kei": [27, 31, 67], "cot": [27, 31, 32, 44, 46, 76, 109], "truli": [27, 110], "zoo": [27, 29, 30, 32, 48, 77, 87, 107, 109, 110], "implicitli": 27, "scan": 27, "appliedundef": 27, "swallow": 27, "queri": [27, 48, 102, 109], "visual": [27, 43, 48, 101, 105], "deep": [27, 30, 36, 41, 45, 48, 104, 106], "is_evalu": 27, "expess": 27, "xreplac": [27, 41, 42], "q_": [27, 49, 52], "rcall": 27, "simul": 27, "abus": [27, 61], "travers": [27, 33, 43, 45, 65, 67], "simultan": [27, 43, 110, 113], "fashion": [27, 67, 118], "target": [27, 43, 48, 63], "succe": [27, 36, 43], "receiv": [27, 43, 60], "tan": [27, 29, 31, 34, 44, 46, 48, 52, 68, 76, 77, 108, 122], "newtyp": 27, "is_mul": [27, 84], "trigonometr": [27, 31, 33, 34, 52, 77, 87, 98, 100, 104, 108, 110, 115, 116], "definedfunct": 27, "destin": [27, 63], "forbid": [27, 73], "unspecifi": [27, 73], "foo": [27, 46, 73, 76, 109], "op": [27, 48, 67], "tie": [27, 67], "delai": [27, 67], "unord": [27, 43, 67], "unsort": 27, "liter": [27, 36, 44, 48, 60, 104, 115, 118], "333333333333333333333": 27, "333333333333333": [27, 113], "wildcard": [27, 35, 48, 117], "evalfmixin": [27, 76], "occurr": [27, 43, 48], "within": [27, 36, 38, 41, 43, 47, 52, 62, 67, 76], "valueerror": [27, 34, 41, 67, 76, 110, 119], "invalid": [27, 74, 76, 104, 109, 110], "preorder_travers": [27, 118], "pre": [27, 42, 48, 106, 118], "That": [27, 30, 52, 62, 63, 67, 120, 122], "descend": [27, 63, 67], "breadth": [27, 67], "children": [27, 65, 67, 118], "subtre": [27, 65, 67], "pt": 27, "mechan": [27, 104, 107, 108], "singletonregistri": 27, "addition": [27, 46, 113], "registri": 27, "class_nam": 27, "mysingleton": 27, "creation": [27, 41, 46, 60, 63, 83, 102, 107], "superclass": [27, 38, 106], "metaprogram": 27, "shouldn": [27, 102], "worri": 27, "comparison": [27, 36, 41, 54, 67, 74, 75, 76, 106, 109, 110], "primari": [27, 36, 63], "singletonwithmanagedproperti": 27, "experiment": [27, 48, 108], "adjoint": [27, 31, 37, 39, 41, 105], "transpos": [27, 31, 37, 38, 39, 41, 49, 57, 104, 110, 119], "hermit": [27, 30, 34, 41, 45, 105, 109], "args_cnc": 27, "cset": 27, "warn": [27, 46, 52, 55, 56, 63, 67, 99, 108, 120], "split_1": 27, "maintain": [27, 52, 65], "explicitli": [27, 30, 38, 45, 48, 52, 103, 104, 108, 115], "suppress": [27, 44], "as_base_exp": [27, 67, 76], "as_coeff_add": [27, 102, 105], "as_coeff_mul": [27, 102, 105], "dep": [27, 52], "individu": [27, 47, 52], "head": [27, 61, 104, 118], "as_two_term": 27, "as_independ": [27, 83, 103], "as_coeff_expon": 27, "as_coeffici": [27, 102], "as_poli": [27, 45, 77], "coeff_monomi": [27, 45], "coeff": [27, 45, 48, 52, 54, 61, 74, 75, 83, 102, 104, 122], "polytool": [27, 45, 75, 110], "as_coefficients_dict": 27, "defaultdict": [27, 67, 110], "inquiri": 27, "as_content_primit": [27, 41, 45, 110], "radic": [27, 45, 48, 55, 104, 110], "121": [27, 43], "as_expr": [27, 41, 45, 102], "separatevar": [27, 33, 52], "noncommut": [27, 74, 83, 105], "as_add": 27, "n3": 27, "_eval_as_leading_term": 27, "as_numer_denom": [27, 100], "stub": 27, "as_ordered_factor": [27, 67], "as_ordered_term": [27, 67, 103], "as_powers_dict": 27, "lost": 27, "as_real_imag": [27, 30, 122], "confus": [27, 29, 36, 101, 109, 110, 114], "as_term": 27, "aseri": [27, 76, 109], "hir": 27, "hierarch": 27, "earli": [27, 33, 43, 49, 122], "nicer": [27, 105], "tri": [27, 32, 34, 46, 48, 52, 53, 90], "induc": [27, 41], "majorli": 27, "overal": [27, 54, 73, 75, 110], "till": [27, 52], "asymptotic_expans": 27, "canonical_vari": [27, 110], "0_": 27, "distribute_order_term": [27, 48], "combsimp": [27, 29, 104, 122], "compute_leading_term": 27, "logx": 27, "could_extract_minus_sign": 27, "failing_express": [27, 37, 39], "did": [27, 34, 76, 117], "power_bas": [27, 41], "power_exp": [27, 41], "multinomi": [27, 41, 43], "extract_addit": 27, "toward": [27, 32], "extract_multipl": [27, 107], "extract_branch_factor": 27, "allow_half": 27, "geto": 27, "getn": 27, "algebraic_numb": 27, "is_algebraic_expr": [27, 105], "is_rational_funct": 27, "algebraic_express": 27, "is_commut": [27, 34, 67, 96], "is_compar": [27, 110], "is_complex": [27, 109], "is_composit": 27, "composite_numb": 27, "is_const": 27, "constanc": 27, "conclus": 27, "perhap": [27, 43, 63], "decis": [27, 30, 34, 63, 73], "test_expr": 27, "failing_numb": 27, "parity_": 27, "is_extended_r": [27, 74], "extended_real_number_lin": 27, "is_finit": [27, 74, 108], "is_imaginari": [27, 74, 109], "imaginary_numb": 27, "is_infinit": [27, 108], "isfinit": 27, "is_irr": 27, "irrational_numb": 27, "is_neg": [27, 74, 83], "negative_numb": 27, "is_noninteg": 27, "aren": 27, "is_nonneg": [27, 74], "nonneg": [27, 29, 49], "is_nonposit": [27, 74], "nonposit": 27, "is_nonzero": [27, 74, 76, 108], "is_zero": [27, 41, 45, 74, 109], "hit": [27, 71, 118], "is_polar": 27, "polar_lift": [27, 31, 32, 48], "is_polynomi": [27, 77], "prime_numb": [27, 43], "is_rat": 27, "rational_funct": 27, "real_numb": 27, "is_transcendent": 27, "transcendent": [27, 32, 34, 55, 84, 105, 109], "transcendental_numb": 27, "xlim": 27, "nseri": [27, 84, 85, 96, 102], "innermost": 27, "cross": [27, 41, 49, 107], "disadvantag": 27, "append": [27, 42, 63], "shorter": [27, 63], "_eval_nseri": 27, "powsimp": [27, 30, 74, 99, 122], "never": [27, 34, 43, 45, 46, 104], "radsimp": [27, 33], "ratsimp": [27, 33, 102], "removeo": [27, 46, 114], "72": [27, 43, 109], "builtin": [27, 46, 47, 73, 80, 106], "isinst": [27, 38, 46, 48, 59, 63, 84], "lazi": 27, "measur": [27, 30, 37, 41, 45, 47, 48, 103, 109, 122], "taylor_term": [27, 30], "previous_term": [27, 30], "taylor": [27, 30, 45, 52, 110], "trigsimp": [27, 41, 77, 105, 122], "placehold": 27, "overrid": [27, 44, 46, 60, 63, 102], "whatev": [27, 48, 52, 53, 104], "didn": [27, 34, 41, 43], "ambigu": [27, 48, 59], "temporari": [27, 62], "comma": [27, 61], "whitespac": 27, "delimit": [27, 46, 109], "colon": 27, "x3": [27, 29, 52], "x4": [27, 29], "x5": [27, 29], "x6": 27, "x7": 27, "x8": 27, "x9": 27, "x50": 27, "x51": 27, "y0": [27, 52], "y3": 27, "y4": 27, "null": 27, "xa": 27, "xb": 27, "xc": 27, "parenthes": [27, 44, 46, 59, 110], "disambigu": 27, "x01": 27, "x02": 27, "x11": 27, "x12": 27, "00": [27, 49, 112], "surround": [27, 109], "space": [27, 44, 65, 74, 102, 106, 108, 112], "escap": [27, 46], "backslash": [27, 46], "despit": 27, "undefinedfunct": [27, 46, 62, 67, 68], "inject": [27, 28, 45, 61], "recommend": [27, 52, 60, 108], "cofactor": [27, 28, 41, 45], "dp": [27, 28, 32, 41, 64, 74, 110], "captur": [27, 77], "100000000000000000000": 27, "1e20": 27, "00000000000000e": 27, "23456789123456789": 27, "23456789123457": 27, "00100": 27, "figur": [27, 34, 46], "12e": 27, "012": 27, "e2": [27, 34, 41, 43], "0e": 27, "6000": [27, 110], "600e": 27, "inexact": 27, "approx": [27, 34], "099609": 27, "12500": 27, "12500000000000000000": 27, "disallow": [27, 48, 106, 110], "appar": 27, "closest": 27, "5404319552844595": 27, "29999999999999998890": 27, "30000000000000000000": 27, "_mpf_": 27, "prec": [27, 28, 48, 110], "_prec": 27, "4915": 27, "70": [27, 34, 41, 49, 70, 113], "307": [27, 109], "ceil": [27, 31, 43, 46, 76, 108, 109, 110], "epsilon_eq": 27, "floor": [27, 31, 46, 75, 76, 110], "mpmath": [27, 32, 41, 47, 64, 68, 73, 80, 85, 94, 98, 99, 100, 101, 102, 103, 107, 108], "unprejud": 27, "3602879701896397": 27, "18014398509481984": 27, "roughli": [27, 52], "limit_denomin": 27, "75": 27, "use_tri": [27, 43], "use_rho": [27, 43], "use_pm1": [27, 43], "factorint": [27, 43, 45, 65, 101], "cheap": [27, 43], "disabl": [27, 35, 43, 45, 46, 48, 52, 102, 109], "max_denomin": 27, "1000000": [27, 94], "141592653589793": [27, 113], "311": [27, 43, 110], "99": [27, 41, 43, 109], "approximation_interv": 27, "number_cl": 27, "modular_multiplicative_invers": 27, "extended_euclidean_algorithm": 27, "1_": 27, "28number": 27, "88": [27, 109, 112], "921_": 27, "one_half": 27, "loos": 27, "ieee": 27, "754": 27, "counter": [27, 30], "constrast": 27, "affin": [27, 106], "topolog": [27, 67, 102], "compactif": 27, "tild": 27, "undetermin": [27, 45, 52, 54, 77, 102, 110], "phase": [27, 34, 108], "718281828": 27, "napier": 27, "e_": 27, "28mathematical_const": 27, "imaginary_unit": 27, "141592654": 27, "circumfer": 27, "diamet": 27, "area": 27, "mascheroni": [27, 32], "5772157": 27, "recur": 27, "harmon": [27, 31, 43, 92, 102, 105], "ln": [27, 30, 46, 77], "93mascheroni_const": 27, "91596559": 27, "27s_constant": 27, "golden_ratio": 27, "oscil": [27, 74, 102], "zero_to_the_power_of_zero": 27, "indeterminate_form": 27, "raw": [27, 45, 48], "as_coef_mul": 27, "flatten": [27, 47, 67, 68, 102, 107], "consequ": [27, 41], "4596": 27, "compound": [27, 33, 104], "5728": 27, "suspect": [27, 43], "5706": 27, "consider": [27, 49, 52], "moot": 27, "as_coef_add": 27, "extract_leading_ord": 27, "commutative_part": 27, "noncommutative_part": 27, "order_symbol": 27, "subprocess": [27, 62], "dividend": 27, "lh": [27, 46, 109], "rop": 27, "dispatch": [27, 46], "appropri": [27, 30, 41, 45, 46, 48, 49, 52, 60, 63, 83], "validrelationaloper": 27, "as_set": [27, 107], "prioriti": [27, 68], "relationship": [27, 29, 34, 43, 48], "truth": [27, 36, 41, 105, 106], "unknown": [27, 52, 53, 54, 83, 106, 110, 113, 123], "prevent": [27, 43, 45, 46, 48, 107, 117], "boolalg": [27, 36, 102], "_eval_eq": 27, "intent": [27, 63], "client": [27, 65], "e1": [27, 32], "litter": 27, "oddbal": 27, "minor": [27, 41, 46], "caveat": 27, "succinctli": 27, "coupl": [27, 41, 100, 101, 104], "nativ": [27, 45], "silent": [27, 62], "e3": 27, "e4": 27, "e5": 27, "e6": 27, "e7": 27, "e8": 27, "consol": [27, 35, 121], "annoy": 27, "succinct": 27, "occasion": 27, "tempt": 27, "mdarg": 27, "vsin": 27, "vdiff": 27, "shortcut": [27, 37, 46, 47, 48, 102], "naturals0": [27, 47], "carri": [27, 68], "_eval_deriv": [27, 110], "conserv": [27, 67], "136": 27, "_diff_wrt": 27, "temporarili": 27, "strang": [27, 76, 110], "motiv": 27, "lagrang": [27, 45, 49, 107], "unambigu": [27, 52], "meant": [27, 28, 32, 34, 43, 47, 48, 53], "surpris": [27, 115], "reader": [27, 65, 116], "_xi_1": [27, 53], "doit_numer": 27, "zeroth": 27, "legaci": 27, "v5_2": 27, "infunct": 27, "algebraiccomput": 27, "myfunc": [27, 31, 68], "honour": [27, 31], "eval": [27, 30, 31, 32, 45, 46, 63, 107, 121], "elif": [27, 31], "_eval_is_r": [27, 31], "fdiff": [27, 30, 31], "argindex": [27, 30, 31], "subject": 27, "trig": [27, 34, 45, 46, 48], "meta": [27, 52, 53], "catch": [27, 52], "_eval_expand_complex": 27, "shut": [27, 45], "unwant": [27, 68], "alphabet": [27, 49, 63, 120], "expand_hint": 27, "_eval_expand_hint": [27, 104], "respons": [27, 46, 63, 104], "furthermor": [27, 36, 117], "unexpect": [27, 110], "attributeerror": [27, 41, 76, 77, 109, 110], "rebuild": [27, 45], "metahint": 27, "myclass": 27, "_eval_expand_doubl": 27, "pop": [27, 49], "angleformula": 27, "virtual": [27, 116], "isn": [27, 34, 68, 117], "negat": [27, 36], "horner": [27, 45, 102], "untouch": 27, "mixin": 27, "tini": 27, "subresult": [27, 45, 99, 112], "maxprec": 27, "291": 27, "framework": [27, 60, 63, 97, 99, 102], "slice": [27, 37, 41, 45, 48, 57, 107, 119], "tuple_count": 27, "afterward": 27, "behav": [27, 30, 32, 43, 45, 47, 48, 57], "view": [27, 52, 61, 63, 65, 68, 80], "reimplement": [27, 99, 109], "wide": [27, 35, 41, 45, 46, 90], "notiter": 27, "as_int": 27, "is_sequ": [27, 103], "generatortyp": 27, "almost": [27, 28, 39, 52, 65, 95, 103, 113, 122], "isprimit": 27, "_gcd_term": 27, "terms_gcd": [27, 45, 107], "usefulli": 28, "alias": 28, "dtype": [28, 41], "convert_from": 28, "frac_field": [28, 77], "from_expr": [28, 45, 73], "get_exact": 28, "poly_r": [28, 73], "to_expr": [28, 73], "k1": [28, 43], "rr": [28, 109], "tol": [28, 45, 71], "cc": [28, 76], "alg": [28, 109], "__truediv__": 28, "exquo": [28, 45], "commutativ": [28, 73, 74, 76], "__divmod__": [28, 73], "__floordiv__": 28, "__mod__": 28, "simpledomain": 28, "compositedomain": 28, "characteristiczero": [28, 73, 77], "integermodr": [28, 76], "finitefield": [28, 73, 74], "finite_field": 28, "finite_r": 28, "rationalfield": [28, 74], "algebraicfield": [28, 73, 75], "ext": 28, "realalgebraicfield": [28, 73, 74], "complexalgebraicfield": [28, 73], "eject": [28, 45, 74], "univarpolynomialr": [28, 75], "dispersionset": [28, 45, 75], "dispers": [28, 45, 75, 107, 109, 112], "fp": 28, "gp": [28, 52], "mw94": [28, 112], "koe98": [28, 112], "abr71": [28, 112], "man93": [28, 112], "realfield": 28, "53": [28, 41], "almosteq": [28, 75], "to_rat": 28, "complexfield": [28, 76], "expressiondomain": 28, "pythonfinitefield": 28, "gmpyfinitefield": 28, "pythoninteg": [28, 45], "gmpyinteg": 28, "pythonrationalfield": 28, "gmpyrationalfield": 28, "modularinteg": 28, "galoisfieldel": 28, "galoi": 28, "k_sym": 29, "b_n": 29, "binom": [29, 43], "incomplet": [29, 32, 103, 105], "x_2": [29, 45, 49], "dotsc": 29, "j_1": [29, 57], "j_2": 29, "dotsb": 29, "2j_2": 29, "3j_2": 29, "877": 29, "4140": 29, "21147": 29, "115975": 29, "846749014511809332450147": 29, "bell_numb": 29, "bellnumb": 29, "bellpolynomi": 29, "nth": [29, 30, 32, 43, 48, 52, 73, 84, 110], "66": [29, 41, 46], "1000001": 29, "bernoulli_numb": 29, "bernoulli_polynomi": 29, "bernoullinumb": 29, "bernoullipolynomi": 29, "expand_func": [29, 32, 45, 73, 76, 103, 122], "6435": 29, "pascal": [29, 43], "triangl": [29, 41, 43, 104], "diagon": [29, 38, 41, 42, 67, 73, 100, 102, 119], "4th": [29, 43], "c_n": [29, 32, 52], "429": [29, 46], "1430": 29, "4862": 29, "polygamma": [29, 32, 105, 109, 110], "39764993382373624267": 29, "020884341620842555705": 29, "catalan_numb": 29, "catalannumb": 29, "gammabetaerf": [29, 32, 48], "geomet": 29, "mathcircl": 29, "e_n": 29, "61": [29, 43], "1385": 29, "euler_numb": 29, "eulernumb": 29, "alternating_permut": 29, "alternatingpermut": 29, "swing": 29, "fastest": [29, 34, 67], "5040": 29, "derang": [29, 103], "cach": [29, 33, 65, 76, 82, 83, 95, 96, 102, 108, 109], "elsewher": 29, "44": [29, 43, 109], "gamma_funct": [29, 32], "uppergamma": [29, 32], "double_factori": 29, "f_z": 29, "fibonacci_numb": 29, "fibonaccinumb": 29, "137": 29, "205": [29, 109, 112], "144": 29, "5269": 29, "3600": 29, "_k": [29, 32], "761": [29, 73], "280": [29, 109], "83711": 29, "27720": 29, "30247": 29, "9900": 29, "40": [29, 32, 41, 43], "983697455232980674869851942390639915940": 29, "digamma": [29, 32, 73], "offset": [29, 32], "harmonic_numb": 29, "harmonicnumb": 29, "harmonicnumber2": 29, "l_0": [29, 61], "47": [29, 41, 43], "76": [29, 43, 45, 52], "lucas_numb": 29, "lucasnumb": 29, "pochhamm": [29, 48], "unsign": [29, 48], "274": 29, "225": [29, 43, 112], "511": 29, "9330": 29, "34105": 29, "42525": 29, "22827": 29, "5880": 29, "750": 29, "stirling_numbers_of_the_first_kind": 29, "stirling_numbers_of_the_second_kind": 29, "707106781186548": 30, "radian": [30, 41, 104], "complex_conjug": 30, "unbranched_argu": 30, "trigonometric_funct": 30, "dlmf": [30, 32], "nist": [30, 32], "gov": [30, 32], "elementaryfunct": 30, "trigonometryangl": 30, "cosin": [30, 32, 34, 45, 75], "tangent": [30, 52], "cotang": 30, "secant": 30, "cosec": 30, "arcsin": [30, 46, 115], "inverse_trigonometric_funct": 30, "arc": 30, "arcco": [30, 46, 115], "ultim": 30, "asex": 30, "arcsec": 30, "arctan": [30, 46, 68], "arccot": 30, "arccsc": 30, "quadrant": 30, "role": 30, "clock": 30, "angl": [30, 32, 104, 107, 122], "arctan2": 30, "567": [30, 110], "ceilingfunct": 30, "floorfunct": 30, "bi": [30, 32, 52, 76, 107], "classic": [30, 32, 104, 106], "lambert": [30, 34], "multivalu": 30, "w_k": 30, "635564016364870": 30, "34747534407696": 30, "41624341514535": 30, "lambert_w_funct": 30, "cond": [30, 34], "nan": [30, 48, 74, 104, 107, 109, 114], "othewis": 30, "piecewise_fold": 30, "conflict": [30, 43, 61, 63], "task": [30, 103, 114], "supremum": [30, 47], "directed_complete_partial_ord": 30, "lattice_": 30, "28order": 30, "principl": [30, 41, 43], "rootof": [30, 45, 52, 55, 73, 74, 77, 82, 102, 109, 110], "rootoftool": [30, 45], "integer_nthroot": [30, 43], "square_root": 30, "root_of_un": 30, "principal_valu": 30, "cuberoot": 30, "presenc": [30, 52, 59], "eq": [30, 34, 45, 46, 48, 49, 52, 53, 54, 55, 62, 63, 67, 73, 74, 76, 84, 103, 105, 109, 110, 115, 117, 123], "powdenest": [30, 122], "periodic_argu": 31, "sec": [31, 34, 46, 109, 122], "csc": [31, 44, 46, 109], "aco": [31, 52, 109, 110, 115], "asec": [31, 108], "acot": [31, 109], "acsc": [31, 108], "atan2": [31, 83], "hyperbol": [31, 32, 33, 48, 82, 87, 104, 122], "hyperbolicfunct": 31, "coth": [31, 46, 48, 108], "sech": 31, "csch": 31, "asinh": 31, "acosh": [31, 77], "acoth": [31, 77], "roundfunct": 31, "lambertw": [31, 76, 109], "piecewis": [31, 32, 33, 34, 46, 77, 97, 100, 102, 104, 105, 108, 109, 110, 114], "exprcondpair": 31, "miscellan": [31, 33, 66], "identityfunct": 31, "real_root": [31, 45, 77, 110], "bell": [31, 67, 103], "bernoulli": [31, 32, 54, 76, 99], "catalan": 31, "subfactori": 31, "factorial2": [31, 109], "fallingfactori": 31, "luca": 31, "diracdelta": [31, 34, 74, 103, 105], "heavisid": [31, 34, 105], "bessel": [31, 34, 45, 48, 102, 103, 117], "airi": [31, 34, 107], "spline": [31, 102], "ellipt": [31, 105], "orthogon": [31, 33, 41, 102, 105, 109], "spheric": [31, 45, 92, 102, 105, 117], "delta_funct": [32, 34], "sum_i": 32, "is_simpl": 32, "tensor_funct": [32, 104], "kroneckerdelta": [32, 104, 105, 109], "deltafunct": [32, 34], "heaviside_step_funct": 32, "mirror": 32, "288037795340032417959588909060233922890": 32, "49801566811835604271": 32, "15494982830181068512": 32, "lowergamma": 32, "loggamma": 32, "trigamma": 32, "beta_funct": 32, "gammafunct": 32, "17805383034794561964694160130": 32, "65092319930185633889": 32, "8724366472624298171": 32, "loggammafunct": 32, "meromorph": 32, "19093197": 32, "5173168": 32, "ni": 32, "polygamma_funct": 32, "polygammafunct": 32, "polygamma2": 32, "digamma_funct": 32, "digammafunct": 32, "trigamma_funct": 32, "trigammafunct": 32, "int_x": 32, "_1f_1": 32, "xt": 32, "dt": [32, 52], "expint": [32, 104], "incomplete_gamma_funct": 32, "upper_incomplete_gamma_funct": 32, "abramowitz": 32, "milton": 32, "stegun": 32, "iren": 32, "1965": 32, "chapter": [32, 43], "gamma2": 32, "gamma3": 32, "exponential_integr": 32, "relation_with_other_funct": 32, "lower_incomplete_gamma_funct": 32, "eulerian": 32, "02671848900111377452242355235388489324562": 32, "2112723729365330143": 32, "7655283165378005676": 32, "betafunct": 32, "error_funct": 32, "gauss": [32, 34, 105], "999999984582742099719981147840": 32, "1296959": 32, "73071763923152794095062": 32, "complementari": 32, "erf2": 32, "erfinv": 32, "erfcinv": [32, 77], "erf2inv": 32, "0000000154172579002800188521596734869": 32, "5648024145755525987042919132": 32, "995322265018952734162069256367": 32, "179143454621292": 32, "inverse_funct": 32, "inverseerf": 32, "inverseerfc": 32, "inverseerf2": 32, "fresnelintegr": 32, "overlin": 32, "bar": [32, 46], "343415678363698242195300815958": 32, "fresnel_integr": 32, "john": [32, 49, 52, 112], "wrench": 32, "jr": 32, "vicki": 32, "allei": 32, "488253406075340754500223503357": 32, "background": 32, "carefulli": 32, "understood": 32, "219383934395520": 32, "21938393439552": 32, "14159265358979": [32, 113], "peopl": [32, 103], "sfu": 32, "ca": [32, 46], "cbm": 32, "aand": 32, "page_228": 32, "nu": [32, 34, 46, 48], "int_1": 32, "postiv": 32, "expintegral": 32, "04516378011749278484458888919": 32, "0652795784357498247001125598": 32, "08346052231061726610939702133": 32, "soldner": 32, "findroot": 32, "45136923488338": 32, "logarithmic_integr": 32, "logarithmicintegr": 32, "soldnersconst": 32, "92242131492155809316615998938": 32, "antideriv": [32, 34], "bewar": 32, "trigonometric_integr": 32, "somewhat": [32, 34], "besselbas": 32, "besselj": [32, 48, 76, 117], "laurent": [32, 76], "j_n": 32, "jn": [32, 45, 117], "bess": [32, 48], "besselk": [32, 75], "luke": [32, 112], "1969": [32, 112], "volum": [32, 41, 49, 52, 65, 112], "bessel_funct": 32, "typefunct": 32, "yn": 32, "iz": 32, "hankel1": 32, "hankel": [32, 34], "iy_": 32, "hankel2": 32, "hankelh1": 32, "hankelh2": 32, "2z": 32, "orthopoli": [32, 45], "spherical_bessel_fn": [32, 45], "y_n": [32, 49], "jn_zero": 32, "besseljzero": 32, "scipi": [32, 62, 74], "spherical_jn": [32, 74], "newton": [32, 95], "7635": 32, "095": 32, "323": [32, 109], "515": 32, "airybas": 32, "airyai": [32, 107], "airyaiprim": [32, 107], "22740742820168557599192443603787379946077222541710": 32, "airybi": [32, 107, 109], "airybiprim": [32, 107], "airy_funct": 32, "encyclopediaofmath": 32, "airyfunct": 32, "41230258795639848808323405461146104203453483447240": 32, "61825902074169104140626429133247528291577794512415": 32, "27879516692116952268509756941098324140300059345163": 32, "bspline": 32, "bspline_basi": 32, "knot": 32, "0th": 32, "cubic": [32, 45, 55, 76, 100, 110], "bspline_basis_set": 32, "zeta_funct": 32, "hurwitz": 32, "admit": [32, 52], "circumst": [32, 117], "lerch": [32, 104], "transcend": [32, 104], "lerchphi": [32, 104], "dirichlet_eta": 32, "polylog": [32, 104, 110], "hurwitz_zeta_funct": 32, "famou": [32, 43, 49], "dirichlet": 32, "20205690315959": 32, "dirichlet_eta_funct": 32, "dirichletetafunct": 32, "polylogarithm": [32, 104], "sheet": 32, "phi_0": 32, "ze": 32, "bateman": 32, "erd\u00e9lyi": 32, "1953": 32, "york": [32, 112], "mcgraw": 32, "hill": [32, 106], "lerch_transcend": 32, "diverg": [32, 108], "pprint": [32, 41, 43, 46, 48, 52, 53, 74, 96, 110, 121], "parametr": [32, 49, 76, 77, 104, 106, 109], "generalized_hypergeometric_funct": 32, "convergence_stat": 32, "radius_of_converg": 32, "radiu": 32, "anywher": [32, 67, 70], "barn": 32, "resembl": [32, 60, 111], "confusingli": 32, "tradition": 32, "super": [32, 46], "script": [32, 62, 81, 99], "__1": 32, "__": [32, 34, 46, 60], "subvector": 32, "aother": 32, "bm": 32, "bother": 32, "allow_hyp": [32, 48], "subsum": 32, "meijer_g": 32, "region": [32, 34, 52, 104], "elliptic_integr": 32, "elliptic_k": 32, "tfrac": [32, 52], "50923695405127": 32, "625146415202697": 32, "128": [32, 43, 46, 112], "ellipticintegr": 32, "elliptick": 32, "elliptic_f": 32, "909449841483": 32, "74720545502474": 32, "ellipticf": 32, "elliptic_": 32, "512": 32, "55203744279187": 32, "290764986058437": 32, "991052601328069": 32, "81879421395609": 32, "elliptice2": 32, "elliptic": 32, "elliptic_pi": 32, "50232379629182": 32, "760939574180767": 32, "29136443417283": 32, "32555634906645": 32, "ellipticpi3": 32, "ellipticpi": 32, "p_n": [32, 34], "weight": [32, 34, 48, 105], "chebyshevu": 32, "chebyshevt": 32, "chebyshevt_root": 32, "chebyshevu_root": 32, "assoc_legendr": 32, "assoc_laguerr": 32, "jacobi_poli": [32, 45], "gegenbauer_poli": [32, 45], "chebyshevt_poli": [32, 45], "chebyshevu_poli": [32, 45], "hermite_poli": [32, 45], "legendre_poli": [32, 45], "laguerre_poli": [32, 45], "jacobi_polynomi": 32, "jacobipolynomi": 32, "jacobip": 32, "jacobi_norm": 32, "normilz": 32, "p_m": 32, "delta_": 32, "gegenbauer_polynomi": 32, "gegenbauerpolynomi": 32, "gegenbauerc3": 32, "chebyshev_polynomi": 32, "chebyshevpolynomialofthefirstkind": 32, "chebyshevpolynomialofthesecondkind": 32, "u_n": [32, 34], "chebyshev_root": 32, "kth": [32, 43], "legendre_polynomi": 32, "legendrepolynomi": 32, "legendrep": 32, "legendrep2": 32, "associated_legendre_polynomi": 32, "hermite_polynomi": 32, "hermitepolynomi": 32, "hermiteh": 32, "l_n": [32, 34], "laguerre_polynomi": 32, "laguerrepolynomi": 32, "laguerrel": 32, "laguerrel3": 32, "associatedlaguerrepolynomi": 32, "spherical_harmon": 32, "ynm": 32, "ynm_c": 32, "znm": 32, "sphericalharmon": 32, "sphericalharmonici": 32, "z_n": 32, "eijk": 32, "levi": [32, 61, 85], "civita": [32, 61, 85], "compat": [32, 33, 41, 59, 61, 63], "levicivita": [32, 41, 105], "eval_levicivita": 32, "pseudotensor": 32, "kroneck": [32, 61, 85, 104, 106], "kronecker_delta": 32, "indices_contain_equal_inform": 32, "fermi": 32, "above_fermi": 32, "below_fermi": 32, "is_above_fermi": 32, "is_below_fermi": 32, "is_only_below_fermi": 32, "is_only_above_fermi": 32, "killable_index": 32, "regard": [32, 56, 77], "preferred_index": 32, "subdirectori": 33, "stabl": [33, 41, 67, 73], "sympifi": [33, 36, 67, 80, 82, 102, 103, 106, 110], "atomicexpr": [33, 102], "mul": [33, 34, 41, 43, 45, 46, 48, 53, 59, 73, 74, 76, 77, 83, 84, 94, 96, 105, 106, 118], "multidimension": [33, 112], "exprtool": [33, 45], "printer": [33, 35, 41, 60, 62, 63, 68, 74, 77, 80, 83, 99, 102, 107, 108, 109, 110, 116], "prettyprint": 33, "ccodeprint": [33, 108], "lambdaprint": 33, "latexprint": 33, "mathmlprint": 33, "pythonprint": 33, "reprprint": 33, "strprinter": [33, 41], "dotprint": [33, 121], "nthroot": 33, "besselsimp": [33, 105], "hypersimilar": 33, "posifi": 33, "logcombin": [33, 52, 100, 102, 122], "subexpres": 33, "epath": [33, 102], "od": [33, 50, 53, 54, 55, 73, 74, 76, 77, 99, 100, 101, 102, 103, 105, 108, 109, 110], "pde": [33, 50, 52, 99, 105], "dim": [33, 58, 61, 109], "codegen": [33, 62, 66, 73, 108, 109], "enum": [33, 66, 107], "memoiz": [33, 65, 66], "randomis": [33, 66], "vast": [34, 45, 100], "tediou": 34, "happili": [34, 59], "nonelementari": [34, 105], "mellin_transform": 34, "sensibl": 34, "strip": [34, 43, 70], "fourier": [34, 75, 102, 104], "bilater": 34, "auxiliari": 34, "mellintransform": 34, "integraltransform": 34, "nocond": 34, "inverse_mellin_transform": 34, "laplace_transform": [34, 76], "fourier_transform": 34, "hankel_transform": 34, "inverse_hankel_transform": 34, "vice": [34, 43, 110], "versa": [34, 43, 110], "inversemellintransform": 34, "st": 34, "laplacetransform": 34, "inverse_laplace_transform": 34, "singularit": 34, "inverselaplacetransform": 34, "unitari": 34, "frequenc": 34, "fouriertransform": 34, "inverse_fourier_transform": 34, "sine_transform": 34, "inverse_sine_transform": 34, "cosine_transform": 34, "inverse_cosine_transform": 34, "inversefouriertransform": 34, "sinetransform": 34, "inversesinetransform": 34, "cosinetransform": 34, "inversecosinetransform": 34, "hankeltransform": 34, "ht": 34, "inversehankeltransform": 34, "risch": [34, 82, 87, 105, 114], "norman": [34, 87], "huge": [34, 43, 106], "whittak": 34, "improp": [34, 76, 109, 110], "entail": 34, "delic": 34, "albeit": 34, "eventu": [34, 63, 103, 104], "_eval_integr": 34, "nonelementaryintegr": [34, 105], "proven": [34, 43], "meijerint": [34, 104], "moder": 34, "slowest": 34, "irrespect": [34, 49], "deltaintegr": 34, "couldn": [34, 52, 53], "rationaltool": [34, 45], "ratint": [34, 99], "bro05": [34, 112], "ratint_logpart": 34, "ratint_ratpart": 34, "lazard": [34, 112], "rioboo": 34, "trager": [34, 102], "q_i": 34, "horowitz": 34, "ostrogradski": 34, "heurisch": [34, 105], "retri": [34, 43], "degree_offset": 34, "unnecessary_permut": 34, "manuel": [34, 112], "bronstein": [34, 45, 54, 112], "poor": 34, "man": [34, 89, 112], "toplevel": 34, "preprocess": 34, "bro": [34, 112], "heurisch_wrapp": 34, "reevalu": 34, "trigonometri": [34, 82], "trigintegr": 34, "wikibook": 34, "integration_techniqu": 34, "as_sum": 34, "midpoint": 34, "trapezoid": 34, "rectangle_method": 34, "averag": [34, 43, 83, 84, 96], "trapexoid": 34, "730": 34, "809": 34, "int_a": 34, "quadrat": [34, 43, 45, 49, 52, 76, 106, 108, 110], "uvar": 34, "ui": [34, 53], "accomplish": 34, "_compute_transform": 34, "_as_integr": 34, "integraltransformerror": 34, "_name": 34, "_collapse_extra": 34, "needev": 34, "function_vari": 34, "transform_vari": 34, "gauss_legendr": 34, "n_digit": 34, "legendr": [34, 43, 45, 49, 105], "w_i": [34, 45, 52], "7746": 34, "55556": 34, "88889": 34, "86114": [34, 45], "33998": [34, 45], "34785": 34, "65215": 34, "gauss_laguerr": 34, "gauss_gen_laguerr": 34, "gauss_hermit": 34, "gauss_chebyshev_t": 34, "gauss_chebyshev_u": 34, "gauss_jacobi": 34, "gaussian_quadratur": 34, "laguerr": [34, 45, 105, 109], "l_": 34, "41577": 34, "2943": 34, "2899": 34, "71109": 34, "27852": 34, "010389": 34, "22285": 34, "1889": 34, "9927": 34, "7751": 34, "8375": 34, "983": [34, 75], "45896": 34, "417": [34, 48], "11337": 34, "010399": 34, "00026102": 34, "9855e": 34, "93laguerre_quadratur": 34, "2247": 34, "29541": 34, "1816": 34, "3506": 34, "3358": 34, "43608": 34, "00453": 34, "15707": 34, "72463": 34, "hermite_quadratur": 34, "19016": 34, "7845": 34, "5253": 34, "4493": 34, "31413": 34, "00906": 34, "97851": 34, "9904": 34, "3193": 34, "712": 34, "53087": 34, "67721": 34, "11895": 34, "0023152": 34, "86602": 34, "0472": 34, "96593": 34, "70711": 34, "25882": 34, "5236": 34, "93gauss_quadratur": 34, "3927": 34, "7854": 34, "90097": 34, "62349": 34, "22252": 34, "084489": 34, "27433": 34, "42658": 34, "jacobi": [34, 43, 45, 105], "7063": 34, "0973": 34, "33795": 34, "87174": 34, "5917": 34, "2093": 34, "050584": 34, "22169": 34, "39439": 34, "93jacobi_quadratur": 34, "boilerpl": 35, "environ": [35, 46, 76, 81, 108], "plain": [35, 45, 46], "\u03b8": 35, "grevlex": [35, 45, 46, 67, 120], "automaticsymbol": 35, "floatration": [35, 110], "integerdivisionwrapp": [35, 110], "unicode_identifi": 35, "booleantru": [36, 77, 110], "shorthand": [36, 47], "bitwis": 36, "rememb": [36, 41, 46, 48, 57], "thumb": 36, "asid": [36, 52, 53, 117], "doubt": 36, "quot": [36, 46, 70, 74], "ye": [36, 52], "greet": 36, "booleanfals": 36, "xor": [36, 44, 74, 102], "rest": [36, 39, 103, 116], "nand": 36, "ITE": [36, 102, 110], "claus": [36, 77], "disjunct": [36, 105], "to_cnf": 36, "cnf": 36, "simplest": [36, 41, 43, 48, 52, 77, 105, 122], "is_cnf": 36, "to_dnf": [36, 105], "dnf": 36, "is_dnf": [36, 105], "is_nnf": 36, "to_nnf": 36, "nnf": 36, "simplify_log": [36, 105], "sop": [36, 112], "proposit": 36, "sentenc": 36, "dpll2": 36, "all_model": 36, "unsatisfi": 36, "use_model": 36, "unsat": 36, "mutablematrix": [37, 40], "mutabledensematrix": [37, 41], "densematrix": [37, 41, 42], "column": [37, 41, 42, 46, 52, 107, 110, 119], "applyfunc": [37, 41, 42, 57], "as_immut": [37, 42], "as_mut": [37, 38, 39, 42], "ey": [37, 38, 39, 40, 41, 42, 57, 119], "reshap": [37, 42, 57, 74, 116], "col": [37, 38, 41, 42, 73], "tolist": [37, 42, 57], "col_op": [37, 42], "functor": [37, 42], "row_op": [37, 42], "col_swap": [37, 42, 119], "row_swap": [37, 42, 119], "copyin_list": 37, "copyin_matrix": 37, "fill": [37, 41, 42, 70], "zip_row_op": [37, 42], "count_op": [37, 41, 48, 67, 122], "immutabledensematrix": [37, 39], "hermitian": [37, 39, 41, 42], "matrixsymbol": [38, 46, 104, 110], "matrixexpr": [38, 39, 110], "matadd": 38, "matmul": [38, 109], "as_explicit": 38, "immutablematrix": [38, 40, 41, 42, 68, 104, 108, 110, 119], "elementwis": [38, 41, 57, 102], "matpow": 38, "mat": [38, 46], "functionmatrix": 38, "lamda": [38, 46, 47], "sparsematrix": [38, 41, 42, 48, 102], "lazili": 38, "342923500": 38, "zeromatrix": 38, "blockmatrix": [38, 104], "submatric": [38, 41], "block_collaps": 38, "blockdiagmatrix": 38, "mission": 39, "bridg": 39, "tension": 39, "safeti": 39, "freeli": 39, "matrixbas": [40, 42, 55], "immutablesparsematrix": 40, "abil": [41, 52, 105, 117], "quick": [41, 43, 55, 68, 110], "diag": [41, 119], "learn": [41, 62, 72], "readili": 41, "m2": [41, 43, 49, 52, 57, 61], "96": [41, 109, 110, 112], "150": [41, 49, 119], "del": [41, 61, 65, 108, 119], "v1": [41, 76], "v2": 41, "v3": 41, "dot": [41, 46, 105, 109, 116], "glue": 41, "m1": [41, 43, 49, 52, 57, 61], "row_join": [41, 42], "m3": [41, 49, 57], "col_join": [41, 42], "ll": 41, "3x3": 41, "det": [41, 74, 84, 109, 119], "lu": [41, 105], "qr": [41, 100, 102], "qrdecomposit": 41, "lusolv": 41, "cheat": 41, "soln": [41, 42], "gram": 41, "schmidt": 41, "out1": 41, "gramschmidt": 41, "out2": 41, "63": [41, 43], "1692": 41, "353": 41, "1551": 41, "706": 41, "423": 41, "38": [41, 43, 49, 109], "6707": 41, "spot": 41, "norm": [41, 42, 45, 103, 109], "eigenvalu": [41, 109, 117, 119], "eigenvector": [41, 119], "nullspac": [41, 119], "dirac": [41, 102], "ldldecomposit": [41, 42], "ldl": [41, 42, 102], "choleski": [41, 42, 102], "ludecomposit": 41, "ldlsolv": 41, "lower_triangular_solv": 41, "upper_triangular_solv": 41, "cholesky_solv": [41, 42], "diagonal_solv": 41, "qrsolv": 41, "pinv_solv": 41, "iszerofunc": 41, "_iszero": 41, "ludecomposition_simpl": 41, "ludecompositionff": 41, "pa": 41, "zhou": 41, "jeffrei": [41, 48], "frontier": [41, 47], "china": 41, "67": [41, 109], "2008": [41, 46, 80, 81, 82, 83, 84, 85, 94, 95, 96, 97], "lu_solv": 41, "qr_solv": 41, "triangular": [41, 102], "51": [41, 43], "167": [41, 109], "68": [41, 43, 49, 109], "41": [41, 43, 49, 119], "69": [41, 65], "175": [41, 112], "58": [41, 42, 61], "158": 41, "33": [41, 46], "educ": 41, "adjug": 41, "berkowitz": [41, 84], "cofactormatrix": 41, "semi": [41, 43], "charpoli": [41, 119], "processor": 41, "acm": [41, 52, 112], "1984": 41, "147": [41, 109], "keber": 41, "bezout": 41, "tech": 41, "mpi": [41, 47], "006": 41, "saarbr\u00fccken": 41, "berkowitz_det": 41, "berkowitz_minor": 41, "berkowitz_charpoli": 41, "berkowitz_eigenv": 41, "purepoli": [41, 45, 73, 119], "_lambda": 41, "minorentri": 41, "minormatrix": 41, "col_insert": [41, 42, 119], "mti": 41, "insert": [41, 44, 70, 110, 119], "row_insert": [41, 42, 119], "bott": [41, 42], "concaten": 41, "condition_numb": [41, 110], "singular_valu": 41, "relax": [41, 44], "multiply_elementwis": 41, "bareiss": [41, 74], "det_barei": 41, "det_lu": 41, "det_lu_decomposit": 41, "det_bareiss": 41, "todo": [41, 46, 60], "sff": 41, "hong": 41, "lee": 41, "david": [41, 112], "saunder": 41, "journal": [41, 48, 65, 112], "1995": [41, 48, 112], "393": [41, 49], "402": 41, "issn": 41, "0747": [41, 112], "7171": [41, 110, 112], "sciencedirect": [41, 112], "articl": [41, 112], "pii": [41, 112], "s074771718571022x": 41, "suit": [41, 45, 98], "reals_onli": 41, "is_diagon": 41, "is_diagonaliz": 41, "dual": 41, "anti_symmetr": 41, "speak": 41, "eigenv": [41, 110, 117, 119], "eigen": 41, "eigenvect": [41, 119], "tripl": [41, 70], "tidi": [41, 98], "artifact": 41, "rowslist": [41, 42], "colslist": [41, 42], "get_diag_block": 41, "decoupl": 41, "hstack": [41, 74], "horizont": [41, 46, 52], "adj": 41, "inverse_lu": 41, "inverse_g": 41, "inverse_adj": 41, "inv_mod": 41, "cof": 41, "is_anti_symmetr": 41, "wouldn": 41, "is_low": 41, "is_upp": [41, 74], "clear_subproduct": 41, "diagonaliz": [41, 106, 109, 119], "subproduct": 41, "is_hermitian": [41, 42, 74], "is_lower_hessenberg": 41, "hessenberg": 41, "superdiagon": 41, "is_upper_hessenberg": 41, "is_squar": [41, 43, 74, 110], "is_symbol": 41, "is_symmetr": [41, 42], "subdiagon": 41, "vacuou": 41, "jacobian": [41, 99], "vectori": 41, "hessian": 41, "wronskian": [41, 52, 74], "jordan_cel": [41, 74, 109], "calc_transform": 41, "cell": 41, "jcell": 41, "jordan_form": [41, 74, 119], "key2bound": 41, "key2ij": 41, "hadamard": [41, 102], "200": [41, 43, 98], "300": [41, 43, 103], "geometr": [41, 74, 76, 83, 99, 104, 106, 107, 119], "frobeniu": 41, "fro": 41, "sing": 41, "spectral": 41, "span": [41, 46, 119], "permutebkwd": 41, "permutefwd": 41, "pinv": 41, "moor": 41, "penros": 41, "pseudoinvers": 41, "penrose_pseudoinvers": 41, "arbitrary_matrix": 41, "underdetermin": [41, 55, 105], "wn_m": 41, "Will": 41, "_w0_0": 41, "_w1_0": 41, "_w2_0": 41, "59": [41, 52], "obtaining_all_solutions_of_a_linear_system": 41, "print_nonzero": 41, "symb": [41, 46], "xx": 41, "rref": [41, 55, 109, 119], "echelon": [41, 119], "pivot": [41, 119], "solve_least_squar": [41, 42], "xy": [41, 42, 122], "rowstart": 41, "rowend": 41, "rowsep": 41, "colsep": 41, "vec": [41, 99], "stack": [41, 46, 65, 119], "vech": [41, 99], "check_symmetri": 41, "reliabl": [41, 52, 88, 114], "vstack": [41, 74], "matrixerror": 41, "shapeerror": 41, "nonsquarematrixerror": 41, "classof": 41, "contagi": 41, "matrix_multiply_elementwis": 41, "band": 41, "pad": 41, "kern": 41, "hpad": 41, "vpad": 41, "varlist": 41, "constraint": 41, "dy": [41, 46, 49, 52, 53, 114], "hessian_matrix": 41, "vlist": 41, "orthonorm": 41, "93schmidt_process": 41, "fn": [41, 45], "casoratian": 41, "ly": 41, "kernel": [41, 54], "rsolve_hyp": [41, 54, 84, 109], "randmatrix": 41, "percent": [41, 45], "percentag": [41, 43], "65": [41, 43], "62": 41, "list2numpi": [41, 82], "matrix2numpi": 41, "symarrai": [41, 101, 102], "ndarrai": [41, 61], "prefix_i1_i2_": 41, "prepend": [41, 61], "_2": 41, "a_0": [41, 49, 52, 57], "a_0_0": 41, "a_0_1": 41, "a_0_2": 41, "a_1_0": 41, "a_1_1": 41, "a_1_2": 41, "a_0_0_0": 41, "a_0_0_1": 41, "a_0_1_0": 41, "a_0_1_1": 41, "a_0_2_0": 41, "a_0_2_1": 41, "a_1_0_0": 41, "a_1_0_1": 41, "a_1_1_0": 41, "a_1_1_1": 41, "a_1_2_0": 41, "a_1_2_1": 41, "rot_axis1": 41, "rot_axis2": 41, "rot_axis3": 41, "a2idx": 41, "mutablesparsematrix": 42, "augment": [42, 55], "beneath": 42, "sparsematrixbas": 42, "rl": 42, "_smat": 42, "col_list": 42, "row_list": 42, "liupc": 42, "liu": [42, 112], "jeroen": 42, "van": [42, 112], "grondel": 42, "sparsiti": 42, "nnz": 42, "row_structure_symbolic_choleski": 42, "factoror": 42, "scalar_multipli": 42, "dynam": [43, 65], "eratosthen": 43, "_list": 43, "extend_to_no": 43, "primerang": 43, "cycle_length": 43, "nmax": 43, "detect": [43, 46, 52, 53, 57, 67, 73, 76], "brent": [43, 65], "floyd": 43, "cycle_detect": 43, "nextprim": 43, "prevprim": 43, "utm": 43, "glossari": 43, "xpage": 43, "bertrandspostul": 43, "primetest": 43, "isprim": [43, 101], "primepi": 43, "twin": 43, "bertrand": 43, "brocard": 43, "gap": 43, "occupi": [43, 61], "randprim": 43, "primori": 43, "argu": 43, "211": [43, 52, 112], "primefactor": 43, "149": 43, "postul": 43, "assur": 43, "s_postul": 43, "factor_": [43, 45, 49], "antidivisor_count": 43, "antidivisor": 43, "oei": 43, "a066272": 43, "divisor_count": 43, "totient": [43, 110], "margin": 43, "a066272a": 43, "core_t": 43, "core_2": 43, "m_i": 43, "cubefre": 43, "free_integ": 43, "squarefree_cor": 43, "9424": 43, "1178": 43, "379238": 43, "square_factor": 43, "20130629014824": 43, "mayer": 43, "dial": 43, "pipex": 43, "divisor_sigma": 43, "sigma_k": 43, "m_ik": 43, "divisor_funct": 43, "39": [43, 109], "56": [43, 45], "stackoverflow": 43, "1010381": 43, "2000": [43, 102, 112], "65537": 43, "perfect": [43, 49, 117], "1407633717262338957430697921446883": 43, "991": 43, "202916782076162456022877024859": 43, "4200": 43, "pow": [43, 46, 48, 73, 74, 76, 77, 94, 103, 107, 109, 110, 118, 121], "1764": 43, "toggl": 43, "pollard": [43, 112], "ahead": 43, "12345678910111213141516": 43, "2507191691": 43, "1231026625769": 43, "progress": [43, 63], "smoothness_p": 43, "factorrat": 43, "rat": 43, "987": 43, "250": [43, 49], "perfect_pow": 43, "pollard_pm1": 43, "1234": [43, 49, 77], "likelihood": 43, "mumber": 43, "constitut": 43, "site": [43, 108, 112], "1009": [43, 75], "256": [43, 46], "am": 43, "255": [43, 109], "exce": [43, 61], "crack": 43, "21477639576571": 43, "4410317": 43, "1787": 43, "4869863": 43, "2434931": 43, "617": 43, "reach": [43, 45, 52, 108], "1786": 43, "worst": [43, 52], "scenario": 43, "divisisor": 43, "realist": 43, "nearli": 43, "richard": [43, 112], "crandal": 43, "carl": [43, 65], "pomer": [43, 65], "2005": [43, 112], "perspect": [43, 63], "springer": [43, 112], "edit": [43, 112], "236": 43, "238": 43, "20150716201437": 43, "washington": 43, "spring": 43, "ent": 43, "node81": 43, "20170830055619": 43, "toronto": 43, "yuvalf": 43, "pollard_rho": 43, "max_step": 43, "upon": [43, 52, 60, 62, 110, 122], "leader": 43, "16843009": 43, "2048": [43, 46], "32767": 43, "4d": 43, "2489": 43, "1482": 43, "285": [43, 112], "leadup": 43, "bad": [43, 77, 109, 110], "229": 43, "231": [43, 112], "123456": 43, "643": [43, 73], "10000000001": 43, "99009901": 43, "sm": 43, "psm": 43, "govern": 43, "10431": 43, "annot": [43, 46], "np": [43, 62], "crt": 43, "moduli": 43, "u_i": 43, "639985": 43, "912285": 43, "954": 43, "1224": 43, "solve_congru": [43, 104], "crt1": 43, "4536": 43, "252": 43, "756": 43, "crt2": 43, "mm": 43, "wan81": [43, 112], "remainder_modulus_pair": 43, "mi": 43, "quicker": 43, "105": [43, 45, 49], "zip": [43, 45, 65], "symmetric_residu": 43, "binomial_coeffici": 43, "k2": 43, "kn": 43, "84": [43, 109], "binomial_coefficients_list": 43, "multinomial_coeffici": 43, "km": 43, "c_kn": 43, "k_m": 43, "multinomial_coefficients_iter": 43, "_tupl": 43, "precomput": 43, "m53": 43, "m33": 43, "partitions_": 43, "npartit": 43, "hardi": 43, "rademach": 43, "1958": 43, "partitionfunctionp": 43, "primal": 43, "prep": 43, "mersenneforum": 43, "showpost": 43, "110896": 43, "pseudoprim": [43, 101], "safe": [43, 59], "miller": 43, "rabin": 43, "46": 43, "mr": 43, "wit": 43, "135": 43, "138": 43, "threshold": 43, "93rabin_primality_test": 43, "deterministic_vari": 43, "1373651": 43, "479001599": 43, "residue_ntheori": 43, "discrete_log": [43, 74], "prime_ord": 43, "babi": [43, 67], "giant": 43, "pohlig": 43, "hellman": 43, "discretelogarithm": 43, "mvv97": [43, 112], "is_nthpow_residu": [43, 110], "hackman": 43, "2009": [43, 98, 99, 100, 112], "is_primitive_root": 43, "said": [43, 52], "n_order": 43, "is_quad_residu": 43, "legendre_symbol": 43, "jacobi_symbol": 43, "genfrac": 43, "alpha_1": 43, "alpha_2": 43, "alpha_k": 43, "nonresidu": 43, "mobiu": 43, "m\u00f6biu": 43, "fermion": [43, 102], "c3": [43, 52], "b6bius_funct": 43, "thoma": [43, 112], "koshi": 43, "nthroot_mod": [43, 110], "all_root": [43, 45, 73, 110], "109": [43, 49, 112], "primitive_root": 43, "stein": 43, "quadratic_residu": 43, "sqrt_mod": 43, "sqrt_mod_it": 43, "continued_fract": 43, "continued_fraction_converg": 43, "continued_fraction_iter": 43, "333": 43, "106": [43, 95], "103993": 43, "33102": 43, "104348": 43, "33215": 43, "208341": 43, "66317": 43, "292": [43, 109, 112], "continued_fraction_period": 43, "surd": [43, 48, 74], "irrat": [43, 45, 73, 74, 108, 110, 117], "continued_fraction_reduc": 43, "periodic_continued_fract": 43, "rosen": 43, "379": [43, 45], "381": 43, "januari": [43, 112], "1992": [43, 112], "157": [43, 112], "233": [43, 52, 112], "718281835": 43, "287": 43, "egyptian_fract": 43, "egyptian": [43, 108], "jewett": 43, "takenouchi": 43, "golomb": 43, "3192": 43, "234": 43, "1118": [43, 76], "2580": 43, "seldom": 43, "blow": 43, "exhibit": 43, "singli": 43, "tendenc": 43, "1921": 43, "golumb": 43, "1962": 43, "propos": 43, "bleicher": 43, "1972": 43, "420": [43, 49, 110], "363": 43, "140": [43, 109], "574": 43, "2788": 43, "6460": 43, "11590": 43, "33062": 43, "113820": 43, "greedy_algorithm_for_egyptian_fract": 43, "ic": 43, "uci": 43, "eppstein": 43, "numth": 43, "egypt": 43, "ami": 43, "uni": [43, 67], "eszterhazi": 43, "hu": 43, "upload": 43, "finalpdf": 43, "ami_42_from129to134": 43, "sympy_pars": 44, "parse_expr": 44, "local_dict": 44, "lambda_not": 44, "auto_symbol": [44, 109], "auto_numb": 44, "global_dict": 44, "token": [44, 109], "standard_transform": 44, "implicit_multiplication_appl": 44, "stringify_expr": 44, "eval_expr": 44, "maxima": [44, 82], "parse_maxima": 44, "name_dict": 44, "datatyp": [44, 63], "split_symbol": 44, "xyz": [44, 102, 103], "implicit_multipl": 44, "split_symbols_custom": 44, "predic": [44, 96, 102, 105], "can_split": 44, "unsplitt": 44, "_token_splitt": 44, "implicit_appl": 44, "function_exponenti": 44, "10sin": 44, "3xyz": 44, "dedic": [45, 63], "friendli": [45, 63, 72, 96], "groebnerbasi": [45, 110, 120], "independent_set": [45, 110], "kw88": [45, 112], "q_1": [45, 49], "q_n": 45, "set_ord": [45, 73], "fglm": [45, 73], "grlex": [45, 46, 67], "lt": [45, 84, 103, 110], "ec": 45, "em": 45, "et": [45, 48, 83], "tc": 45, "all_coeff": 45, "mess": [45, 52], "clear_denom": 45, "monom": [45, 75], "cff": 45, "cfg": 45, "count_root": [45, 73], "x_j": 45, "exquo_ground": 45, "factor_list": [45, 73, 75, 110], "free_symbols_in_domain": 45, "from_dict": 45, "from_list": [45, 75], "from_poli": 45, "get_modulu": 45, "has_only_gen": 45, "spec": 45, "is_cyclotom": 45, "cyclotom": [45, 102], "is_ground": 45, "is_homogen": 45, "is_irreduc": 45, "is_linear": 45, "is_multivari": 45, "is_on": [45, 73], "is_quadrat": 45, "is_squarefre": [45, 73], "is_term": [45, 74], "is_univari": 45, "nroot": [45, 103], "maxstep": 45, "cleanup": [45, 96, 99, 100, 109], "rerun": 45, "73205080756888": 45, "73205080756887729352744634151": 45, "quo_ground": 45, "rat_clear_denom": 45, "retract": 45, "recalcul": 45, "got": [45, 74, 75, 110, 117, 118], "set_domain": 45, "set_modulu": 45, "sqf_list": [45, 73, 74], "sqf_norm": [45, 73], "sa": [45, 104], "sqf_part": [45, 73], "termwis": 45, "400": [45, 84, 110], "to_exact": 45, "to_field": 45, "to_r": 45, "trunc": 45, "mode": [45, 46, 96], "buc01": [45, 112], "polysi": [45, 55], "solve_poly_system": [45, 55, 74, 110], "mod_invers": [45, 110], "parallel_poly_from_expr": 45, "destruct": 45, "sqf": [45, 49, 74, 76, 102, 120], "gcd_term": 45, "factor_term": [45, 48], "polyfunc": 45, "horner_schem": 45, "equispac": 45, "i_1": [45, 57], "i_2": 45, "i_n": [45, 57], "viet": [45, 102], "r1": 45, "r2": [45, 46, 48], "construct_domain": 45, "field_isomorph": [45, 73], "primitive_el": [45, 73, 110], "ynt89": [45, 112], "arw96": [45, 112], "itermonomi": 45, "gradedlexord": 45, "grade": 45, "reversedgradedlexord": 45, "eval_r": 45, "rootsum": [45, 94, 96, 102], "polyroot": 45, "quartic": [45, 55, 100, 105], "unread": 45, "casu": 45, "irreducibili": 45, "cubic_equ": 45, "trigonometric_and_hyperbolic_solut": 45, "benchmark": [45, 97], "specialpoli": 45, "cyclotomic_poli": 45, "interpolating_poli": 45, "random_poli": 45, "swinnerton_dyer_poli": 45, "swinnerton": [45, 102], "dyer": [45, 102], "symmetric_poli": 45, "gegenbau": 45, "heroic": 45, "interior": [45, 47, 107], "complement": [45, 47, 108, 109, 110], "partfrac": 45, "undertermin": 45, "readabl": [45, 46, 103, 117], "_w": [45, 77], "apart_list": 45, "assemble_partfrac_list": 45, "quadrupl": 45, "bunch": 45, "moment": [45, 49], "pfd": 45, "bs93": [45, 112], "partial_list": 45, "reassembl": 45, "pfda": 45, "subsystem": [46, 83], "driver": [46, 62], "adequ": 46, "emptyprint": 46, "latex": [46, 74, 75, 77, 80, 96, 99, 100, 103, 105, 106, 107, 109, 110, 116, 117], "mathml": [46, 74, 99, 100, 110], "repr": [46, 116, 118], "qualiti": [46, 99, 109], "spread": [46, 65], "great": [46, 49, 104], "inconveni": 46, "patch": [46, 83, 89, 98], "nevertheless": 46, "printmethod": 46, "_print_": 46, "expr_class": 46, "hierarchi": 46, "_print": 46, "_print_rat": 46, "_print_numb": 46, "_print_atom": 46, "_print_bas": 46, "infrastructur": [46, 53, 105], "_print_foo": 46, "_print_bar": 46, "_print_funct": 46, "_print_sin": 46, "_print_tan": 46, "resort": 46, "overload": 46, "customstrprint": 46, "_print_deriv": 46, "noqa": [46, 63], "n802": 46, "mystr": 46, "doprint": 46, "set_global_set": 46, "stringpict": 46, "pretty_symbologi": 46, "render": [46, 103, 121], "prettyform": 46, "eas": 46, "2d": [46, 49, 80, 82, 91, 104, 116, 117], "hline": 46, "vline": 46, "ascii": [46, 110, 121], "prettifi": 46, "num_column": 46, "width": [46, 80], "ccode": [46, 63, 74], "assign_to": 46, "fab": 46, "_ccode": 46, "indent_cod": 46, "user_funct": [46, 74], "functionclass": [46, 68], "argument_test": 46, "cfunction_str": 46, "cfunction_format": 46, "derefer": 46, "dereferenc": 46, "symbols_to_declar": 46, "not_supported_funct": 46, "code_text": 46, "0l": 46, "custom_funct": 46, "exp2": 46, "ternari": [46, 49, 106], "lack": 46, "thrown": 46, "len_i": 46, "indexedbas": [46, 59, 60, 62, 108], "idx": [46, 59, 60, 62], "fcode": 46, "awai": 46, "burden": 46, "tweak": 46, "source_format": 46, "2003": [46, 49, 112], "0d0": 46, "floor1": 46, "floor2": 46, "fcodeprint": 46, "_fcode": 46, "cmplx": 46, "conjg": 46, "715": 46, "65536": 46, "32768": 46, "1024": [46, 75], "mandatori": [46, 62], "inlin": [46, 63], "71828182845905d0": 46, "14159265358979d0": 46, "718281828459045235360287d0": 46, "141592653589793238462643d0": 46, "869604401089358618834491d0": 46, "mygamma": 46, "readi": [46, 91], "past": [46, 99, 121], "instruct": [46, 62, 63], "iii": [46, 52], "mcodeprint": 46, "_mcode": 46, "mathematica_cod": [46, 73], "lambdarepr": 46, "_diofantstr": 46, "usabl": 46, "accepted_latex_funct": 46, "_latex": 46, "amsmath": 46, "itex": 46, "emit": 46, "fold_frac_pow": 46, "fold_func_bracket": 46, "fold_short_frac": 46, "long_frac_ratio": 46, "dr": [46, 52], "mul_symbol": 46, "inv_trig_styl": 46, "abbrevi": [46, 57], "mat_str": 46, "smallmatrix": [46, 117], "mat_delim": 46, "symbol_nam": 46, "info": [46, 52, 53], "w3": 46, "mathml2": 46, "chapter4": 46, "markup": 46, "mathml3": 46, "_mathml": 46, "mathml_tag": 46, "srepr": [46, 109], "_diofantrepr": 46, "fallback": [46, 83], "reprifi": 46, "sep": [46, 53, 87], "sstrrepr": 46, "hook": [46, 104], "sy": [46, 80, 102, 115], "displayhook": 46, "split_super_sub": 46, "superscript": [46, 96, 99], "a_x": 46, "var_sub1__sup_sub2": 46, "sub1": 46, "sub2": 46, "assignmenterror": 46, "necess": 46, "pretty_use_unicod": 46, "greek_lett": 46, "iota": 46, "kappa": 46, "omicron": 46, "upsilon": 46, "xobj": 46, "spatial": 46, "vobj": 46, "height": 46, "hobj": 46, "xsym": 46, "symbologi": 46, "pretty_atom": 46, "atom_nam": 46, "pretty_symbol": 46, "symb_nam": 46, "stylis": 46, "draw": [46, 92], "_print_meijerg": 46, "_print_hyp": 46, "jurjen": 46, "bo": 46, "hate": 46, "spammer": 46, "me": 46, "pietjepuk314": 46, "ku": 46, "oc": 46, "oohai": 46, "jason": 46, "gedg": 46, "email": 46, "my": 46, "mun": 46, "terminal_str": 46, "baselin": [46, 74], "pictur": 46, "paren": 46, "ifascii_nougli": 46, "line_break": 46, "multilin": 46, "terminal_width": 46, "bind": 46, "wider": [46, 108], "color": [46, 97], "blue": 46, "ellips": [46, 74, 83, 102, 107], "black": 46, "maxdepth": 46, "labelfunc": 46, "arrow": 46, "leaf": [46, 118], "digraph": 46, "bgcolor": 46, "rankdir": 46, "td": 46, "finiteset": [47, 77, 103, 104, 108, 109, 110], "emptyset": [47, 109], "boundari": [47, 52, 54, 76, 107], "neighborhood": 47, "outer": [47, 59, 102, 106], "rim": 47, "right_open": 47, "univers": [47, 49, 54, 108, 110, 115], "universalset": [47, 74, 104, 110], "infimum": 47, "is_clos": 47, "disjoint_set": 47, "is_open": 47, "is_proper_subset": [47, 108], "is_proper_superset": [47, 108], "is_subset": [47, 108], "left_open": 47, "is_superset": [47, 108], "isdisjoint": 47, "issubset": 47, "issuperset": 47, "lebesgu": 47, "powerset": [47, 108], "power_set": 47, "symmetric_differ": 47, "imageset": [47, 106, 107, 108, 109], "fancyset": 47, "ropen": 47, "lopen": 47, "interval_": 47, "as_rel": [47, 103], "is_left_unbound": 47, "is_right_unbound": 47, "finite_set": 47, "overlap": 47, "union_": 47, "28set_theori": 47, "constitu": 47, "intersection_": 47, "productset": [47, 103, 104, 108, 110], "cartesian": [47, 67, 102, 103, 108, 109], "coin": 47, "cartesian_product": 47, "complementset": 47, "empty_set": 47, "universal_set": [47, 108], "base_set": 47, "square_iter": 47, "extendedr": [47, 75], "nonetheless": [48, 52], "intellig": [48, 52, 122], "unmodifi": 48, "shortest": [48, 52, 67, 107], "feel": [48, 52], "my_measur": 48, "discourag": 48, "max_len": 48, "koepf": [48, 112], "399": 48, "nfloat": [48, 110], "restor": [48, 106, 108], "eq_x": 48, "max_term": 48, "violat": 48, "polish": [48, 93, 94], "r5": 48, "signsimp": 48, "predict": 48, "magic": [48, 102], "behind": [48, 52], "scene": 48, "expand_power_bas": [48, 122], "wild": [48, 67, 78, 83, 96], "w1": 48, "incorpor": 48, "rcollect": 48, "r3": [48, 103], "unset": 48, "analyz": [48, 60], "forward": [48, 102], "trigsimp_groebn": [48, 109], "al": [48, 83], "wherev": 48, "rv": 48, "ctr1": 48, "ctr2": 48, "ctr3": 48, "ctr4": 48, "rfdz": 48, "ph": 48, "noe": 48, "fileadmin": 48, "mathematik_upload": 48, "acdca": 48, "destime2006": 48, "des_contrib": 48, "autoexpand": 48, "won": [48, 52, 67, 102], "bb": 48, "bb1": 48, "be1": 48, "bb2": 48, "be2": 48, "bei": 48, "collaps": 48, "outermost": [48, 59], "familiar": [48, 103], "prefactor": 48, "02": [48, 112], "0005": 48, "max_it": 48, "watson": 48, "ibm": 48, "fagin": 48, "symb85": 48, "rich": [48, 75, 110, 112], "cybertest": 48, "cov": 48, "notimplementederror": [48, 52, 53, 74, 76, 77, 109], "focu": 48, "commun": [48, 52], "cbrt": 48, "cse_main": 48, "postprocess": 48, "numbered_symbol": [48, 52, 67], "stream": [48, 67], "preprocessor": [48, 63], "postprocessor": 48, "extern": [48, 62, 97, 103], "predefin": [48, 61, 89, 93], "machin": [48, 52, 95, 113], "reduced_expr": 48, "opportun": 48, "opt_sub": 48, "hyperegeometr": 48, "traversaltool": 48, "epathtool": 48, "grammar": 48, "ebnf": 48, "za": 48, "xml": 48, "xpath": 48, "emul": [48, 57, 104], "hasattr": [48, 64], "mathematician": 49, "live": [49, 73, 104], "citi": 49, "father": 49, "mark": [49, 108, 112], "studi": 49, "a_1x_1": 49, "a_2x_2": 49, "a_nx_n": 49, "bxy": [49, 106], "cy": [49, 106], "cz": [49, 106], "dxy": [49, 106], "eyz": [49, 106], "fzx": [49, 106], "pythagorean": [49, 106], "t2": [49, 61], "t3": 49, "t4": 49, "t5": 49, "easiest": [49, 113, 118], "3y": 49, "t_0": 49, "m_0": 49, "m_1": 49, "4ac": 49, "parameter": 49, "y_1": 49, "y_2": 49, "9369318": 49, "920": 49, "5y": 49, "bmatrix": 49, "aforement": 49, "providean": 49, "eqyptian": 49, "thorough": 49, "thilinaatsympi": 49, "wordpress": 49, "andreescu": 49, "titu": 49, "andrica": 49, "dorin": 49, "cucurezeanu": 49, "ion": 49, "onlin": [49, 67], "diophantineequ": 49, "20181231080858": 49, "alpertron": 49, "20180831180321": 49, "jpr2718": 49, "ax2p": 49, "param": 49, "_dict": 49, "binary_quadrat": 49, "cubic_thu": 49, "general_pythagorean": 49, "general_sum_of_even_pow": 49, "general_sum_of_squar": 49, "homogeneous_general_quadrat": 49, "homogeneous_ternary_quadrat": 49, "homogeneous_ternary_quadratic_norm": 49, "inhomogeneous_general_quadrat": 49, "inhomogeneous_ternary_quadrat": 49, "t_2": 49, "bivari": 49, "pell": 49, "lmm": 49, "13y": 49, "986": 49, "49299": 49, "1570": 49, "robertson": 49, "juli": [49, 112], "2004": [49, 112], "20180831180333": 49, "nitaj": 49, "de": [49, 52, 67], "numbertheori": 49, "signed_permut": [49, 67, 110], "676": 49, "884": 49, "3xy": 49, "2y": [49, 52, 117], "fxy": 49, "gyz": 49, "hxz": 49, "lattic": 49, "conic": 49, "cremona": 49, "rusin": 49, "2x_": 49, "m4": 49, "8m": 49, "2345": 49, "proofwiki": 49, "integer_as_sum_of_three_squar": 49, "throw": [49, 68, 74, 109], "stopiter": [49, 109], "44542": 49, "207": 49, "schorn": 49, "3456": 49, "48": [49, 109, 114], "1294585930293": 49, "2161": 49, "1137796": 49, "1729": 49, "permute_sign": [49, 67, 110], "sum_of_pow": 49, "evenli": 49, "contit": 49, "reject": [49, 110], "var_t": 49, "q_0": 49, "six": 49, "ur": 49, "dv": 49, "vr": 49, "124": 49, "7729": 49, "1410": 49, "363263": 49, "2700": 49, "30916": 49, "695610": 49, "5400": 49, "15458": 49, "resolut": 49, "nigel": 49, "smart": [49, 52], "london": [49, 112], "societi": [49, 112], "student": [49, 103, 104], "cambridg": 49, "1998": [49, 112], "satisif": [49, 52], "301": [49, 112], "w_0": 49, "y_0": [49, 52], "4x": 49, "7y": 49, "5x": [49, 95], "eprint": 49, "nottingham": 49, "uk": [49, 112], "kvxefz87": 49, "az": 49, "mordel": 49, "sq": 49, "legrang": 49, "csusm": 49, "aitken_html": 49, "fxz": 49, "reduce_inequ": [51, 55, 75, 76, 109, 110], "init": [52, 54, 74, 112], "classifi": [52, 53, 56], "autodetect": [52, 53], "classif": [52, 53], "ode_ord": [52, 53, 56], "deutil": [52, 53, 56], "best_hint": 52, "all_integr": [52, 53], "_integr": [52, 53], "hang": [52, 53, 73, 74, 75, 76, 77, 109, 110], "imposs": [52, 53, 76], "unevaluat": 52, "tip": [52, 53], "test_od": 52, "c1": [52, 54, 61, 123], "c2": [52, 54, 61], "ode_": 52, "hintnam": [52, 53], "classify_sysod": 52, "ode_hintnam": 52, "tough": 52, "nth_linear_homogeneous_constant_coeff_integr": 52, "ordin": 52, "nth_linear": 52, "indep": 52, "spell": 52, "indep_div_dep": 52, "undetermined_coeffici": 52, "_best": 52, "separable_integr": 52, "1st_linear_integr": 52, "1st_homogeneous_coeff_subs_indep_div_dep_integr": 52, "1st_homogeneous_coeff_subs_dep_div_indep_integr": 52, "nth_linear_constant_coeff_variation_of_parameters_integr": 52, "sol": [52, 53, 56, 104], "solve_for_func": [52, 53], "ode_1st_homogeneous_coeff_subs_dep_div_indep": 52, "ode_1st_homogeneous_coeff_subs_indep_div_dep": 52, "varepsilon": 52, "curv": 52, "genform": [52, 53], "optimis": 52, "starrett": 52, "dai": 52, "nth_linear_euler_eq_homogen": 52, "nth_linear_euler_eq_nonhomogeneous_undetermined_coeffici": 52, "nth_linear_euler_eq_nonhomogeneous_variation_of_paramet": 52, "1st_exact_integr": [52, 109], "bernoulli_integr": 52, "almost_linear_integr": 52, "linear_coefficients_integr": 52, "separable_reduced_integr": 52, "nth_linear_euler_eq_nonhomogeneous_variation_of_parameters_integr": 52, "liouville_integr": 52, "empir": 52, "overridden": 52, "symbolnam": 52, "startnumb": 52, "endnumb": 52, "renumb": 52, "c4": 52, "absorpt": 52, "assist": [52, 104], "rare": 52, "ode_sol_simpl": 52, "trysolv": 52, "sola": 52, "solb": 52, "listofsolut": 52, "eq1": 52, "eq2": 52, "ode_1st_exact": 52, "inert": 52, "exact_differential_equ": 52, "tp63": [52, 112], "ode_1st_homogeneous_coeff_best": 52, "ode_1st_homogeneous_coeff_best_integr": 52, "homogeneous_differential_equ": 52, "u_1": 52, "u_2": 52, "ode_1st_linear": 52, "linear_differential_equ": 52, "order_equation_with_variable_coeffici": 52, "92": [52, 112], "ode_bernoulli": 52, "ode_separ": 52, "bernoulli_differential_equ": 52, "ode_liouvil": 52, "________________": 52, "gb73": [52, 112], "maplesoft": 52, "mapl": 52, "aspx": 52, "odeadvisor": 52, "ode_riccati_special_minus2": 52, "riccati": [52, 103], "__________________": 52, "eqworld": 52, "ipmnet": 52, "ru": 52, "ode0106": 52, "ode0123": 52, "ode_nth_linear_constant_coeff_homogen": 52, "c5": 52, "nth_linear_constant_coeff_homogeneous_integr": 52, "sollist": 52, "nonhomogeneous_equation_with_constant_coeffici": 52, "ode_nth_linear_constant_coeff_undetermined_coeffici": 52, "method_of_undetermined_coeffici": 52, "221": 52, "ode_nth_linear_constant_coeff_variation_of_paramet": 52, "y_i": 52, "cramer": 52, "inhomogen": [52, 54, 74, 109], "variation_of_paramet": 52, "rearrang": [52, 116], "caught": 52, "fault": 52, "ode_almost_linear": 52, "joel": 52, "mose": 52, "stormi": 52, "decad": 52, "august": [52, 65], "1971": [52, 112], "558": 52, "ode_linear_coeffici": 52, "ode_separable_reduc": 52, "ode_lie_group": [52, 110], "subsitut": [52, 110], "ode_1st_power_seri": 52, "travi": [52, 74], "walker": 52, "ode_2nd_power_series_ordinari": 52, "lamar": 52, "seriessolut": 52, "sim16": [52, 112], "176": 52, "184": 52, "ode_2nd_power_series_regular": 52, "q0": 52, "indici": 52, "720": [52, 67], "lie_heuristic_abaco1_simpl": 52, "comp": 52, "factoris": 52, "cheb": 52, "terrab": 52, "duart": 52, "da": 52, "mota": 52, "lie_heuristic_abaco1_product": 52, "roch": 52, "lie_heuristic_bivari": 52, "327": 52, "329": [52, 112], "lie_heuristic_chi": 52, "fourth": [52, 112], "satisifi": 52, "lie_heuristic_abaco2_similar": 52, "yy": 52, "lie_heuristic_function_sum": 52, "lie_heuristic_abaco2_unique_unknown": 52, "lie_heuristic_linear": 52, "fx": [52, 53], "gy": 52, "bh": 52, "impract": 52, "_linear_2eq_order1_type3": 52, "_linear_2eq_order1_type4": 52, "_linear_2eq_order1_type5": 52, "au": 52, "bv": 52, "_linear_2eq_order1_type6": 52, "_linear_2eq_order1_type7": 52, "fgp": 52, "ag": 52, "bg": 52, "_linear_2eq_order2_type1": 52, "bc": 52, "4bc": 52, "lambda_1": 52, "lambda_2": 52, "lambda_3": 52, "lambda_4": 52, "bt": 52, "2bk": 52, "kt": 52, "2b": 52, "bk": 52, "kx": 52, "_linear_2eq_order2_type2": 52, "_linear_2eq_order2_type3": 52, "pendulum": 52, "earth": 52, "4b": 52, "_linear_2eq_order2_type5": 52, "categori": [52, 109], "atv": 52, "btu": 52, "_linear_2eq_order2_type6": 52, "k_2": 52, "z_2": 52, "_linear_2eq_order2_type7": 52, "_linear_2eq_order2_type8": 52, "_linear_2eq_order2_type9": 52, "d_2": 52, "k_4": 52, "_linear_2eq_order2_type11": 52, "_linear_3eq_order1_type4": 52, "a_3": 52, "b_3": 52, "sysode_linear_neq_order1": 52, "match_": 52, "mass": 52, "hnorsettw14": [52, 112], "_nonlinear_2eq_order1_type1": 52, "_nonlinear_2eq_order1_type2": 52, "_nonlinear_2eq_order1_type3": 52, "autonom": 52, "_nonlinear_2eq_order1_type4": 52, "fir": 52, "_nonlinear_2eq_order1_type5": 52, "clairaut": 52, "straight": 52, "envelop": 52, "_nonlinear_3eq_order1_type1": 52, "enspac": 52, "sysod": 52, "sode0401": 52, "_nonlinear_3eq_order1_type2": 52, "sode0402": 52, "_handle_integr": 52, "philosophi": 52, "gather": [52, 108], "unhind": 52, "hack": [52, 80, 109, 110], "wolphramalpha": 52, "detool": 52, "resourc": [52, 62], "hint_integr": 52, "alphanumer": 52, "lowercas": [52, 114], "capit": 52, "defeat": 52, "guidelin": 52, "cleaner": 52, "_undetermined_coefficients_match": 52, "hinder": 52, "matching_hint": 52, "matchdict": 52, "rst": [52, 74, 77, 109], "src": 52, "directori": [52, 62, 78, 90, 98], "bypass": 52, "lastli": 52, "1st_homogeneous_coeff": 52, "your_hint": 52, "xfail": 52, "platform": [52, 67, 106], "refactor": [52, 59, 65, 74, 82, 96, 99, 100, 108], "trialset": 52, "fun": 53, "uxt": 53, "uxi": 53, "solvefun": 53, "fy": 53, "test_pd": 53, "pde_hintnam": 53, "ux": 53, "allhint": 53, "1st_linear_constant_coeff_homogen": 53, "_preprocess": [53, 56], "hasn": 53, "inabl": 53, "df": 53, "viktor": 53, "grigoryan": 53, "124a": 53, "1st_linear_constant_coeff_integr": 53, "du": 53, "dsolv": [53, 54, 55, 73, 74, 77, 108, 109, 110, 117, 123], "heavili": 53, "inspir": 53, "pde_hint": 53, "rsolv": [54, 55, 74, 75, 109, 110, 123], "seek": [54, 104], "dissimilar": 54, "abramov": [54, 112], "alembertian": 54, "petkovvsek92": [54, 112], "rsolve_poli": [54, 84], "sophist": 54, "invent": 54, "petkov\u0161ek": 54, "abpetkovvsek95": [54, 112], "rsolve_ratio": 54, "revis": [54, 112], "1989": [54, 112], "adapt": [54, 67, 74, 76, 96, 111], "abr95": [54, 112], "minsolve_linear_system": 55, "nx": 55, "checksol": [55, 56, 110], "quintic": 55, "solve_linear": 55, "solve_linear_system": [55, 109], "overdetermin": 55, "degener": [55, 73], "solve_surd_system": 55, "inconclus": 56, "_desolv": 56, "immutabledensendimarrai": 57, "tomatrix": 57, "j_m": 57, "otim": 57, "tensorproduct": [57, 104], "i_a": 57, "i_b": 57, "tensorcontract": 57, "derive_by_arrai": [57, 110], "nm": 57, "sum_m": 57, "immutablesparsendimarrai": 57, "mutabledensendimarrai": [57, 74], "mutablesparsendimarrai": [57, 74], "permutedim": [57, 110], "contraction_ax": 57, "index_method": 59, "indexconformanceexceptionerror": 59, "get_contraction_structur": [59, 60], "deeper": 59, "deepest": 59, "parenthesi": 59, "nested_contract": 59, "contact": 59, "get_indic": [59, 60, 61], "gracefulli": [59, 108], "held": [59, 118], "______": 60, "stem": 60, "dim1": 60, "dim2": 60, "pedant": 60, "qwerti": 60, "indexexceptionerror": 60, "broadcast": [60, 62, 104, 108], "syntact": 60, "sugar": [60, 73, 112], "_tensormanag": 61, "comm": 61, "set_comm": 61, "tensormanag": 61, "comm_i2symbol": 61, "comm_symbols2i": 61, "get_comm": 61, "gh": 61, "lorentz": 61, "tensorindextyp": 61, "i0": 61, "i1": 61, "i2": 61, "i3": 61, "i4": 61, "tensor_indic": 61, "tensorhead": 61, "gcomm": 61, "ghcomm": 61, "canon_bp": 61, "eps_dim": 61, "dummy_fmt": 61, "character": [61, 103], "metric_nam": 61, "metric_antisym": 61, "tensortyp": 61, "dim_ep": 61, "riemannian": 61, "geometri": [61, 75, 77, 83, 86, 102, 104, 108, 110], "spinor": 61, "tensorindex": 61, "su": 61, "is_up": 61, "einstein": 61, "_dummy_fmt": 61, "sym1": 61, "tensorsymmetri": 61, "_i0": 61, "_i1": 61, "typ": 61, "monoterm": 61, "multiterm": 61, "sym2": 61, "young": 61, "tableaux": 61, "tableau": 61, "index_typ": 61, "repetit": [61, 67], "matrix_behavior": 61, "electromagnet": 61, "ez": 61, "e_x": 61, "e_z": 61, "b_x": 61, "b_y": 61, "b_z": 61, "cast": 61, "momentum": [61, 102, 104], "px": 61, "pz": 61, "p_x": 61, "p_y": 61, "p_z": 61, "tensexpr": 61, "tensadd": [61, 110], "tensmul": [61, 110], "ipos1": 61, "ipos2": 61, "icomp1": 61, "icomp2": 61, "nameless": 61, "get_matrix": 61, "free_arg": 61, "addend": 61, "contract_metr": 61, "contract_al": 61, "from_tids_list": 61, "tids_list": 61, "tid": 61, "ea": 61, "eb": 61, "_tid": 61, "fun_ev": 61, "index_tupl": 61, "old_index": 61, "new_index": 61, "substitute_indic": 61, "nonrep": 61, "ipo": 61, "icomp": 61, "dum": 61, "ext_rank": 61, "is_canon_bp": 61, "m0": 61, "collid": 61, "perm2tensor": 61, "sorted_compon": 61, "tensor_mul": 61, "riemann_cyclic_replac": 61, "t_r": 61, "riemann_cycl": 61, "cadabra": 61, "tandem": 62, "matvec": 62, "backend": [62, 103, 108], "codewrapp": 62, "filenam": [62, 63, 105], "distutil": [62, 77, 110], "fwrap": 62, "swig": 62, "goal": 62, "button": [62, 78], "binary_cal": 62, "binary_funct": 62, "_imp_": [62, 68, 74], "invok": 62, "190": 62, "primarili": [62, 65], "repeatedli": 62, "ufunc": [62, 108, 113], "intact": 62, "tempdir": 62, "codewraperror": 62, "filepath": 62, "cythoncodewrapp": 62, "dump_pyx": 62, "header": [62, 63], "basenam": [62, 63], "dummywrapp": 62, "f2pycodewrapp": 62, "ufuncifycodewrapp": 62, "dump_c": [62, 63], "f95": [62, 63], "mute": 62, "debug": 62, "auxillari": 62, "link": [62, 65, 74, 103], "function_nam": 62, "diofant_express": 62, "binary_func": 62, "symfunc": [62, 68], "implemented_funct": [62, 68], "ndimension": 62, "arang": 62, "f_fortran": 62, "f401": 63, "workflow": 63, "stuff": [63, 70, 73, 102], "fortran77": 63, "fortran90": 63, "octav": [63, 73, 108, 109], "matlab": [63, 73, 108], "mileston": [63, 73, 74, 75, 76, 77, 109, 110], "unsurmount": 63, "tackl": 63, "pyf": 63, "gsl": 63, "intermedi": 63, "cse": [63, 106, 116], "rigor": 63, "inputoutput": 63, "beforehand": 63, "gcc": 63, "tcc": 63, "libtcc": 63, "date": 63, "hostnam": 63, "sha1": 63, "ccodegen": [63, 74], "preprocessor_stat": 63, "dump_h": 63, "guard": 63, "get_prototyp": 63, "prototyp": 63, "codegenerror": 63, "function_prototyp": 63, "dump_cod": 63, "argument_sequ": 63, "global_var": 63, "outputargu": 63, "pointer": 63, "inputargu": 63, "inoutargu": 63, "to_fil": 63, "cname": 63, "fname": 63, "pynam": 63, "octnam": 63, "fcodegen": 63, "f90": 63, "dump_f95": 63, "get_interfac": 63, "octavecodegen": 63, "name_expr": 63, "dump_m": 63, "result_var": 63, "returnvalu": 63, "local_var": 63, "result_vari": 63, "ot": 63, "unnam": 63, "insensit": 63, "agument": 63, "c_name": 63, "c_code": 63, "h_name": 63, "c_header": 63, "f_result": 63, "ifndef": 63, "project__test__h": 63, "endif": 63, "myfcn": 63, "fcn2": 63, "myfcn_result": 63, "void": 63, "f_name": 63, "f_code": 63, "get_default_datatyp": 63, "make_routin": [63, 108], "agnost": 63, "mixtur": [63, 109], "fcn": 63, "result_": 63, "out_": 63, "examin": 63, "conserve_mpmath_dp": 64, "finish": 64, "mp": 64, "doctest_depends_on": 64, "disable_view": 64, "metadata": 64, "no_attrs_in_subclass": 64, "multiset": [65, 67, 103, 107], "multiset_partitions_taocp": 65, "vistor": 65, "visitor": 65, "frame": 65, "pstack": 65, "lpart": 65, "topmost": 65, "partcompon": 65, "peek": 65, "unpredict": 65, "certainli": 65, "accumul": 65, "abb": [65, 67], "list_visitor": 65, "factoring_visitor": 65, "multisetpartitiontravers": 65, "5m": [65, 107], "count_partit": 65, "127750": 65, "686": 65, "4a": [65, 103], "donald": [65, 112], "oppenheim": 65, "factorisatio": 65, "numerorum": 65, "canfield": 65, "paul": [65, 112], "erd\u0151": 65, "1983": 65, "yorgei": 65, "monad": 65, "explor": 65, "acceler": [65, 91], "persist": 65, "288716": 65, "child": 65, "decrement": 65, "dramat": 65, "hypothet": 65, "borrow": 65, "overflow": 65, "importantli": 65, "coalesc": 65, "_rang": 65, "someon": [65, 116], "stretch": 65, "brain": 65, "histogram": 65, "enum_al": 65, "enum_larg": 65, "lb": 65, "enum_smal": 65, "enum_rang": 65, "ub": 65, "exercis": 65, "cantor_product": [67, 109], "robin": 67, "consumpt": 67, "islic": 67, "common_prefix": 67, "common_suffix": 67, "rev": 67, "unaffect": 67, "filter_symbol": 67, "myop": 67, "kog": 67, "informatik": 67, "hamburg": 67, "mein": 67, "python_trick": 67, "has_dup": 67, "has_varieti": 67, "minlex": 67, "is_set": 67, "11010011000": 67, "00011010011": 67, "00011001011": 67, "mississippi": 67, "multiset_combin": 67, "abi": 67, "bby": 67, "abracadabra": 67, "banana": 67, "165": 67, "nt": 67, "multiset_permut": 67, "aab": 67, "aba": 67, "baa": 67, "resolv": [67, 76], "_node": 67, "undecor": 67, "ineffici": [67, 77], "breaker": 67, "collis": 67, "wast": 67, "criteria": 67, "ordered_partit": [67, 110], "jeromekelleh": 67, "net": 67, "jerom": 67, "kelleh": 67, "barri": 67, "sullivan": 67, "arxiv": [67, 112], "0909": 67, "2331v2": 67, "mnemon": 67, "kept": 67, "_same_": 67, "activest": 67, "recip": 67, "218332": 67, "tim": 67, "peter": [67, 112], "postorder_travers": [67, 118], "postord": 67, "rotate_left": 67, "rotate_right": 67, "gt": [67, 84, 103], "keyfunc": 67, "dl": [67, 112], "squenc": 67, "longest": 67, "topological_sort": 67, "________": [67, 122], "acycl": 67, "unflatten": 67, "uniq": 67, "dat": 67, "workaround": 68, "afunc": 68, "lam_f": 68, "lambdastr": 68, "dummifi": 68, "unpack": [68, 90], "__flatten_args__": 68, "use_imp": 68, "18503986326": 68, "18503986": 68, "29100619": 68, "8559934": 68, "my_cool_funct": 68, "cool": 68, "val": 68, "recurrence_memo": 69, "memo": 69, "specfun": 69, "misc": 70, "fillded": 70, "dedent": 70, "randtest": 71, "random_complex_numb": 71, "verify_derivative_numer": 71, "verify_numer": 71, "consult": 72, "backward": [72, 102], "incompat": 72, "summar": 72, "jan": [73, 75, 80, 81, 82], "2019": 73, "619": 73, "631": 73, "763": 73, "tower": 73, "653": 73, "669": 73, "630": 73, "748": 73, "thank": [73, 74, 75, 76, 103, 104, 109, 110], "kalevi": [73, 74, 75], "suominen": [73, 74, 75], "review": [73, 74, 75], "integer_digit": 73, "765": 73, "622": 73, "762": 73, "633": 73, "658": 73, "741": 73, "768": 73, "673": 73, "478": 73, "dmf": 73, "620": 73, "fracfield": 73, "get_field": 73, "polyr": 73, "621": 73, "get_r": 73, "624": 73, "627": 73, "628": 73, "anp": 73, "to_number_field": 73, "realnumb": 73, "636": 73, "of_typ": 73, "unify_with_symbol": 73, "has_characteristiczero": 73, "704": 73, "637": 73, "is_unit": 73, "from_": 73, "from_diof": 73, "to_diof": 73, "algebraicnumb": [73, 110], "distributedmodul": 73, "648": 73, "654": 73, "666": 73, "dummy_eq": 73, "var1": 73, "val1": 73, "var2": 73, "val2": 73, "667": 73, "anymor": [73, 75, 83, 84, 106, 108], "679": 73, "theano": [73, 105], "681": 73, "684": 73, "688": 73, "row_del": 73, "col_del": 73, "697": 73, "itercoeff": 73, "itermonom": 73, "iterterm": 73, "listcoeff": 73, "listmonom": 73, "listterm": 73, "const": [73, 110], "imul_num": 73, "add_ground": 73, "sub_ground": 73, "mul_ground": 73, "sqr": 73, "factor_list_includ": 73, "revert": 73, "gff": 73, "gff_list": 73, "sqf_list_includ": 73, "homogeneous_ord": 73, "701": 73, "732": 73, "717": 73, "727": 73, "747": 73, "532": 73, "is_sqf": 73, "724": 73, "has_r": 73, "is_r": 73, "print_mathml": 73, "submodul": [73, 76, 104, 109, 110], "769": 73, "771": 73, "623": 73, "minpoly_method": 73, "655": 73, "659": 73, "661": 73, "668": 73, "670": 73, "625": 73, "__delitem__": 73, "691": 73, "gmpy2": [73, 109], "mpz": [73, 76], "694": 73, "fallback_gcd_zz_method": 73, "721": 73, "gcd_aa_method": 73, "726": 73, "stat": [73, 77, 104, 105], "cachetool": [73, 109], "647": 73, "setuptools_scm": 73, "725": 73, "739": 73, "14384": 73, "14393": 73, "14414": 73, "13886": 73, "14220": 73, "7724": 73, "5850": 73, "14494": 73, "14389": 73, "14291": 73, "14590": 73, "14645": 73, "14294": 73, "idempot": 73, "14721": 73, "14293": 73, "14380": 73, "14442": 73, "14759": 73, "dup_isolate_real_roots_list": 73, "14738": 73, "dup_count_complex_root": 73, "14782": 73, "14791": 73, "14793": 73, "14811": 73, "14822": 73, "14820": 73, "14831": 73, "14476": 73, "14885": 73, "15055": 73, "15056": 73, "get_numbered_const": 73, "6938": 73, "8945": 73, "15146": 73, "5934": 73, "8210": 73, "11775": 73, "unorder": 73, "7047": 73, "15323": 73, "15344": 73, "12602": 73, "5595": 73, "5602": 73, "5555": 73, "15407": 73, "15311": 73, "11668": 73, "rid": [73, 109], "bare": 73, "4511": 73, "15474": 73, "15502": 73, "15520": 73, "5th": 73, "15539": 73, "15561": 73, "divmod": [73, 104], "15574": 73, "12695": 73, "dead": 73, "densearith": 73, "densetool": 73, "densesolv": 73, "5428": 73, "14337": 73, "8818": 73, "9544": 73, "15798": 73, "unus": [73, 75, 77], "15810": 73, "apr": [74, 84, 98], "2020": 74, "785": 74, "gabriel": 74, "orisaka": 74, "919": 74, "pickl": [74, 75, 98], "972": 74, "795": 74, "940": 74, "910": 74, "galoistool": 74, "957": 74, "971": 74, "964": 74, "euclidtool": 74, "port": [74, 75, 76, 97, 103], "994": 74, "775": 74, "780": 74, "787": 74, "seterr": 74, "794": 74, "dmp": 74, "ring_seri": 74, "820": 74, "828": 74, "834": 74, "975": 74, "797": 74, "851": 74, "is_antihermitian": 74, "873": 74, "print_python": 74, "print_ccod": 74, "891": 74, "896": 74, "generate_oriented_forest": 74, "kbin": 74, "ibin": 74, "903": 74, "numexpr": [74, 108, 109], "numexprprint": 74, "deferredvector": 74, "905": 74, "export": [74, 110], "921": 74, "dict_merg": 74, "generate_bel": [74, 107], "967": 74, "977": 74, "has_assoc_field": 74, "is_symbolicdomain": 74, "is_expressiondomain": 74, "drop_to_ground": 74, "misspel": 74, "barei": 74, "866": 74, "nth_power_roots_poli": 74, "ground_root": 74, "refine_root": 74, "ltrim": 74, "max_norm": 74, "l1_norm": 74, "996": 74, "788": 74, "francesco": [74, 110], "bonazzi": [74, 110], "aa_factor_method": 74, "844": 74, "893": 74, "jame": 74, "cotton": 74, "927": 74, "968": 74, "sphinxcontrib": 74, "bibtex": 74, "766": 74, "887": 74, "flake8": [74, 75, 77, 109, 110], "928": 74, "982": 74, "15943": 74, "12163": 74, "matematica": 74, "11642": 74, "15984": 74, "7337": 74, "11600": 74, "16038": 74, "15553": 74, "11581": 74, "11976": 74, "11275": 74, "11841": 74, "\u03b3": [74, 114, 122], "11926": 74, "11855": 74, "11955": 74, "11502": 74, "11435": 74, "12200": 74, "9123": 74, "12177": 74, "8129": 74, "9983": 74, "11726": 74, "pde_separ": 74, "11981": 74, "12092": 74, "10472": 74, "11959": 74, "11944": 74, "11732": 74, "12178": 74, "10681": 74, "11078": 74, "11877": 74, "wrongli": [74, 109], "10211": 74, "11806": 74, "incorrectli": [74, 76, 77, 109], "12325": 74, "dmp_integrate_in": 74, "16222": 74, "100000000": [74, 75], "15413": 74, "16432": 74, "16431": 74, "16530": 74, "16562": 74, "16589": 74, "16714": 74, "16774": 74, "17034": 74, "isqrt": 74, "17044": 74, "10996": 74, "15282": 74, "16722": 74, "15673": 74, "sphere": 74, "17380": 74, "17431": 74, "17492": 74, "17555": 74, "is_extended_posit": 74, "extended_r": [74, 109], "17556": 74, "17453": 74, "_eval_is_": 74, "17719": 74, "plot_implicit": [74, 108, 109], "12386": 74, "12369": 74, "17792": 74, "17789": 74, "intermitt": 74, "17841": 74, "17847": 74, "17982": 74, "9244": 74, "nonhomogen": 74, "15946": 74, "16635": 74, "14312": 74, "8859": 74, "9204": 74, "14779": 74, "18008": 74, "8810": 74, "18118": 74, "6599": 74, "18176": 74, "18306": 74, "8695": 74, "18378": 74, "18384": 74, "18399": 74, "18452": 74, "18470": 74, "18482": 74, "18499": 74, "18501": 74, "18508": 74, "18507": 74, "18707": 74, "18751": 74, "18749": 74, "berlekamp": [74, 102], "18895": 74, "18894": 74, "sring": [74, 75], "18531": 74, "14806": 74, "friend": 74, "18874": 74, "16620": 74, "18997": 74, "18992": 74, "19026": 74, "12303": 74, "entiti": [74, 104], "11986": 74, "12361": 74, "12452": 74, "tall": 74, "19070": 74, "16971": 74, "2021": [75, 76], "1032": 75, "motzkin": 75, "1063": 75, "876": 75, "sqfreetool": 75, "factortool": 75, "1015": 75, "1018": 75, "1019": 75, "1020": 75, "1021": 75, "nowher": 75, "1030": 75, "1031": 75, "1035": 75, "1067": 75, "1092": 75, "katja": 75, "sophi": 75, "hotz": 75, "vring": 75, "vfield": 75, "to_dens": 75, "degree_list": 75, "is_mon": 75, "1036": 75, "1051": [75, 112], "1039": 75, "poly_from_expr": 75, "gcd_list": 75, "lcm_list": 75, "1037": 75, "1057": 75, "1086": 75, "1053": [75, 112], "1105": 75, "deflat": 75, "1108": 75, "1046": 75, "1074": 75, "19630": 75, "19076": 75, "19670": 75, "19755": 75, "19760": 75, "19770": 75, "19766": 75, "19774": 75, "19988": 75, "lose": [75, 110], "14874": 75, "19991": 75, "10666": 75, "20163": 75, "9479": 75, "20365": 75, "20360": 75, "20389": 75, "20391": 75, "simplex": 75, "19161": 75, "20397": 75, "19196": 75, "20491": 75, "notebook": [75, 121], "20490": 75, "20484": 75, "20485": 75, "20487": 75, "puiseux": 75, "20610": 75, "generatorsneed": [75, 109], "20617": 75, "20640": 75, "20704": 75, "nov": [76, 91, 97, 108, 109], "musser": 76, "1132": 76, "853": 76, "andr\u00e9": 76, "roberg": 76, "1114": 76, "polyconfig": 76, "1115": 76, "diofant_debug": 76, "cpython": [76, 77, 109], "5cae972": 76, "1123": 76, "1124": 76, "igcd": 76, "ilcm": 76, "1125": 76, "similari": 76, "1131": 76, "1140": 76, "lseri": [76, 102], "1146": 76, "protect": 76, "1033": 76, "1138": 76, "1159": 76, "plot": [76, 77, 78, 80, 81, 82, 83, 87, 102, 103, 104, 108, 109, 110], "1175": 76, "1162": 76, "1060": 76, "20861": 76, "20874": 76, "20902": 76, "20941": 76, "20973": 76, "20985": 76, "plynomi": 76, "21031": 76, "21034": 76, "21038": 76, "21041": 76, "21063": 76, "21075": 76, "21091": 76, "19590": 76, "21121": 76, "21107": 76, "21132": 76, "21180": 76, "21167": 76, "21029": 76, "20697": 76, "20578": 76, "20444": 76, "19453": 76, "19442": 76, "11667": 76, "21202": 76, "recursionerror": [76, 77], "21227": 76, "21263": 76, "21334": 76, "21342": 76, "21319": 76, "21341": 76, "21024": 76, "coercionfail": 76, "21396": 76, "21410": 76, "keyerror": [76, 110], "21437": 76, "21460": 76, "21466": 76, "21166": 76, "21486": 76, "21530": 76, "21549": 76, "21557": 76, "21550": 76, "21177": 76, "21245": 76, "fuction": 76, "11833": 76, "mayb": [76, 110], "9127": 76, "askevenhandl": 76, "21606": 76, "notimpl": [76, 110], "21641": 76, "21651": 76, "20461": 76, "13029": 76, "21711": 76, "21721": 76, "21716": 76, "isympi": [76, 83, 84, 87, 89, 90, 91, 93, 96, 102, 103, 104], "21741": 76, "21756": 76, "21760": 76, "21761": 76, "notalgebra": 76, "21430": 76, "21766": 76, "21773": 76, "21785": 76, "21812": 76, "jupyt": 76, "lab": 76, "21814": 76, "21176": 76, "21852": 76, "21859": 76, "sp": 76, "21882": 76, "21890": 76, "nonlinsolv": [76, 110], "21888": 76, "5822": 76, "19745": 76, "weird": 76, "9358": 76, "21905": 76, "21938": 76, "21984": 76, "21999": 76, "22020": 76, "22051": 76, "22058": 76, "solveset": 76, "22073": 76, "22093": 76, "heuristicgcdfail": [76, 77], "luck": [76, 77], "22155": 76, "22220": 76, "22248": 76, "forev": [76, 110], "22294": 76, "22322": 76, "22334": 76, "22400": 76, "22435": 76, "1214": 77, "1218": 77, "1232": 77, "1047": 77, "1192": 77, "to_mpi": 77, "1194": 77, "bool_map": 77, "posform": [77, 105], "sopform": [77, 105], "04ea41a220": 77, "be319badf5": 77, "1235": 77, "finite_diff": [77, 108], "1271": 77, "1274": 77, "diffgeom": [77, 104], "1281": 77, "1276": 77, "line_integr": 77, "1283": 77, "1284": 77, "postfix": 77, "1282": 77, "1290": 77, "1209": 77, "1215": 77, "1268": 77, "22487": 77, "22493": 77, "22558": 77, "22837": 77, "22836": 77, "22788": 77, "unevlu": 77, "22863": 77, "22862": 77, "22893": 77, "22878": 77, "22982": 77, "22986": 77, "14433": 77, "23069": 77, "19639": 77, "23086": 77, "23156": 77, "reciproc": 77, "23174": 77, "gf_edf_zassenhau": 77, "21409": 77, "22673": 77, "12531": 77, "6322": 77, "22583": 77, "23202": 77, "__ne__": [77, 84], "23223": 77, "23224": 77, "23231": 77, "14387": 77, "impress": 77, "8166": 77, "14502": 77, "18492": 77, "23266": 77, "7391": 77, "23287": 77, "11496": 77, "3663": 77, "23299": 77, "23319": 77, "7rc1": 77, "5539": 77, "23425": 77, "classify_od": 77, "23432": 77, "8433": 77, "13750": 77, "23497": 77, "23562": 77, "23585": 77, "23596": 77, "23605": 77, "23637": 77, "23479": 77, "22605": 77, "23677": 77, "23836": 77, "23845": 77, "23855": 77, "linsolv": 77, "24067": 77, "24127": 77, "23702": 77, "23707": 77, "24210": 77, "24225": 77, "24266": 77, "24331": 77, "23766": 77, "24360": 77, "24346": 77, "20913": 77, "9671406556917067856609794": 77, "24386": 77, "sigmoid": 77, "24390": 77, "24461": 77, "24543": 77, "calc": 77, "6326": 77, "24684": 77, "6822": 77, "24477": 77, "aug": [78, 79, 86, 96], "10x": [78, 92], "100x": [78, 83], "speedup": [78, 83, 95, 106, 108], "wildfunct": 78, "colormap": 78, "mous": 78, "zoom": 78, "preview": [80, 105, 106], "pngview": 80, "pdfview": 80, "dviview": 80, "pyglet": [80, 81, 89, 92, 100, 103, 109], "parser": [80, 82], "texmac": 80, "readm": [80, 104], "thirdparti": 80, "box": 82, "idiom": [82, 88], "mar": [83, 101], "sympifyit": 83, "unari": [83, 110], "silli": 83, "reus": 83, "is_dummi": 83, "experi": 83, "subs_dict": [83, 84], "tangent_lin": 83, "assoti": 83, "recognit": [83, 102], "__int__": 83, "basicmeth": 83, "clean": [83, 101, 106], "__nonzero__": 84, "8x": [84, 96], "bailei": 84, "borwein": 84, "plouff": 84, "hexidecim": 84, "oseri": 84, "pickabl": 85, "limit_seri": 85, "tarbal": [86, 104], "polici": [86, 89], "complexinfin": 87, "oct": [88, 89, 90, 104], "applylog": 88, "facil": [88, 104], "_arg": 88, "bin": [89, 97, 101, 104, 109], "_sage_": 90, "sit": 90, "dec": [92, 93, 100, 106], "_eval_appli": 92, "ylm": 92, "singlevaluedfunct": 92, "nofarg": 92, "0beta2": 92, "jul": [94, 95, 99, 103, 105], "rootsof": 94, "spedup": 94, "thread": 95, "msolv": 95, "130": 96, "noarithmeth": 96, "norelmeth": 96, "relmeth": 96, "arithmeth": 96, "gone": 96, "python2": 97, "jython": 97, "qnew": 97, "buildbot": 97, "regularli": 97, "i386": 97, "amd64": 97, "architectur": 97, "bench": 97, "greatli": [97, 107, 122], "protocol": 98, "vastli": 98, "upgrad": 99, "ga": [99, 104], "convex_hul": 99, "eval_pow": 99, "tsolv": 99, "guess_solve_strategi": 99, "complaint": 99, "dpll": [99, 102], "print_mul": 99, "4381": 99, "print_add": 99, "fabian": 100, "runner": 100, "aaron": [100, 105, 109], "nsolv": [100, 110], "rootfind": 100, "cluster": [100, 101], "wick": [100, 102], "usr": 101, "matplotlib": [101, 104, 110], "runtest": 101, "quantiz": [101, 102], "jun": 102, "6aecdb7": 102, "31c9aa4": 102, "3acac67": 102, "4b75dae": 102, "fa1206": 102, "103b928": 102, "45c9b22": 102, "8870c8b": 102, "b348b30": 102, "ff65e9f": 102, "891e4d": 102, "310a585": 102, "b097b01": 102, "08482bf": 102, "b8fbd59": 102, "33d8cdb": 102, "7eb81c9": 102, "88bf187": 102, "f800f95": 102, "1027408": 102, "d8c8768": 102, "75c8d2d": 102, "b9c2a9a": 102, "8d235c7": 102, "6d560f3": 102, "dad03dd": 102, "6ccf20c": 102, "dc728d6": 102, "2f17684": 102, "3004db8": 102, "37a58f1": 102, "a72d188": 102, "0d98945": 102, "f638fcf": 102, "d521c7f": 102, "548120b": 102, "f6f74e6": 102, "b1c49cd": 102, "3527b64": 102, "dc327fe": 102, "e920870": 102, "a8f20e6": 102, "d4dbbb5": 102, "9769d49": 102, "496f08f": 102, "f3e432": 102, "4c88be6": 102, "41502d7": 102, "gnu": 102, "38e1683": 102, "afb3886": 102, "22c4061": 102, "wester": 102, "1c23792": 102, "17e8f1f": 102, "60fbff4": 102, "5df77f5": 102, "7de602c": 102, "950969b": 102, "70353e9": 102, "bd0be06": 102, "425e225": 102, "quantum": [102, 104], "bra": 102, "ket": [102, 104], "dagger": 102, "hilbert": 102, "qubit": [102, 104], "gate": 102, "grover": 102, "qft": 102, "shor": 102, "circuit": 102, "circuitplot": 102, "inclu": 102, "anihil": 102, "boson": 102, "secondqu": [102, 104], "angular": [102, 104], "spin": [102, 103], "hydrogen": 102, "wave": 102, "schroeding": 102, "energi": 102, "1d": 102, "wigner": [102, 103], "clebsch": 102, "gordan": 102, "nd": 102, "7c0b857": 102, "53f0e1a": 102, "d1dd6a3": 102, "handler": 102, "f3bee7a": 102, "sat": 102, "2d96329": 102, "acfbe75": 102, "0f187e5": 102, "5888024": 102, "sum2": 102, "ef1f6a7": 102, "965aa91": 102, "verb": 102, "053a045": 102, "4877": 102, "273f450": 102, "5102": 102, "c83c9b0": 102, "5079": 102, "d86d08f": 102, "c8661ef": 102, "5062": 102, "f6452a8": 102, "9aeb220": 102, "957745a": 102, "1ea5be8": 102, "4c269fe": 102, "6a26941": 102, "9c6bf0f": 102, "e9f4a0a": 102, "is_float": 102, "deprec": [102, 104, 105, 106, 108, 109], "abe1c49": 102, "a4ea170": 102, "polygon": [102, 104, 110], "4871": 102, "5098": 102, "5091": 102, "5086": 102, "e8cb04a": 102, "0d8d748": 102, "75734f8": 102, "fcc6b13": 102, "4ec9dc5": 102, "d4d351d": 102, "mxn": 102, "zeronm": 102, "5da0884": 102, "smatrix": 102, "acd1685": 102, "58c1dad": 102, "84f2c22": 102, "95b4321": 102, "859bb33": 102, "08b4932": 102, "a30c5a3": 102, "2c99999": 102, "5221": 102, "5223": 102, "147c142": 102, "108fb41": 102, "696139d": 102, "bf90689": 102, "d12a2aa": 102, "3542041": 102, "73fb9ac": 102, "328eaba": 102, "8455147": 102, "f8fcaa7": 102, "cart": 102, "b1b10ed": 102, "b2ce27b": 102, "c1ad905": 102, "31ed8d7": 102, "3383aa3": 102, "7ab2da2": 102, "4029": 102, "3e763a8": 102, "4475": 102, "4826": 102, "64a12a4": 102, "__abs__": 102, "max_": 102, "min_": 102, "99a271": 102, "5252": 102, "each_char": [102, 106], "a0ab479": 102, "635d89c": 102, "as_bas": 102, "e61819d": 102, "80dfe91": 102, "as_coeff_term": [102, 105], "as_coeff_factor": [102, 105], "assume_pos_r": 102, "ship": 103, "buggi": 103, "mimic": 103, "twodic": 103, "reduce_poly_inequ": 103, "involut": 103, "necklac": 103, "ari": 103, "orient": 103, "forest": 103, "taocp": 103, "innerproduct": 103, "wignerd": 103, "jzket": 103, "jx": 103, "eigenst": 103, "jxket": 103, "mathjax": 103, "entierli": 103, "browser": 103, "javascript": 103, "png": 103, "modern": 103, "older": 103, "5615": 103, "gsoc": [103, 104, 106], "vladimir": 103, "peri\u0107": 103, "retroact": 103, "author": [103, 109], "concis": 103, "saveimag": 103, "stringio": [103, 106], "outfil": 103, "2012": 104, "offici": [104, 108], "pinch": 104, "download": 104, "use2to3": 104, "pypi": 104, "nightli": 104, "replic": 104, "combinatorica": 104, "jerrum": 104, "randomsymbol": 104, "transformationset": [104, 106], "machan": 104, "constrain": 104, "bodi": 104, "densiti": 104, "entropi": 104, "fidel": 104, "reloc": 104, "folder": 104, "particip": 104, "uncoupl": 104, "agca": [104, 110], "macaulay2": 104, "sussman": 104, "wisdom": 104, "manifold": [104, 106], "dij": 104, "__float__": 104, "__complex__": 104, "idiomat": 104, "favor": [104, 105], "galgebra": [104, 109], "set_main": 104, "make_symbol": 104, "negativeinfin": 104, "gaussopt": [104, 108], "optic": [104, 108], "rai": [104, 107], "beam": 104, "centroid": 104, "sss": 104, "asa": 104, "find_unit": 104, "physci": 104, "slip": 104, "sqrtdenest": 104, "tableform": [104, 110], "aid": [104, 112, 117], "tradit": 104, "meurer": [105, 109], "summer": 105, "1970": 105, "positive_definit": 105, "hadamardproduct": 105, "matrixslic": 105, "dft": 105, "preliminari": 105, "svd": 105, "blogpost": 105, "load_ext": 105, "ipythonprint": 105, "7013": 105, "viewer": [105, 106], "7018": 105, "6477": 105, "6476": 105, "1510": 105, "enhanc": [105, 108], "1955": 105, "1823": 105, "1940": 105, "1864": 105, "1883": 105, "2109": 105, "gave": 105, "1497": 105, "1703": 105, "expintegr": 105, "1708": 105, "1712": 105, "bool_equ": 105, "2176": 105, "gen_legendr": 105, "2038": 105, "2148": 105, "descart": 105, "1947": 105, "1700": 105, "1644": 105, "iron": 105, "poisson": [105, 109], "multivector": 106, "inher": [106, 115], "scratch": 106, "viewpoint": 106, "gradient": [106, 108], "grad": 106, "cryptographi": [106, 112], "cipher": 106, "vigener": 106, "bifid": 106, "rsa": 106, "kid": 106, "regist": 106, "\u01f9ow": 106, "accross": 106, "7023": 106, "7086": 106, "3333": 106, "5769": 106, "4855": 106, "4279": 106, "5931": 106, "2510": 106, "comfort": 106, "7022": 106, "6751": 106, "cheatsheet": 106, "4820": 106, "5018": 106, "bytesio": 106, "7083": 106, "thereof": 107, "fanci": 107, "normal_lin": 107, "strike": 107, "inv_quick": 107, "det_quick": 107, "facilit": 107, "solve_univariate_inequ": 107, "2732": 107, "2862": 107, "2894": 107, "euler_equ": 107, "2431": 107, "0x0": 107, "2813": 107, "2823": 107, "2734": 107, "2606": 107, "idiff": 107, "to_matrix": 107, "dyadic": 107, "2686": 107, "2687": 107, "2728": 107, "2772": 107, "print_builtin": 107, "2683": 107, "2723": 107, "2744": 107, "grid": 108, "2427": 108, "7587": 108, "\u2124": [108, 120], "lru": 108, "7464": 108, "sympy_cache_s": 108, "fastcach": 108, "v0": 108, "newer": 108, "7737": 108, "unitsystem": 108, "stai": 108, "matur": 108, "2628": 108, "7462": 108, "7500": 108, "7989": 108, "major": 108, "codeprint": 108, "octave_cod": [108, 109], "curl": 108, "7460": 108, "kanesmethod": 108, "bundl": [108, 109], "functool": 108, "7853": [108, 109], "7891": 108, "is_bound": 108, "is_unbound": 108, "7947": 108, "is_infinitesim": 108, "7995": 108, "7996": 108, "7861": 108, "__init__": [108, 118], "saniti": 108, "8082": 108, "7622": 108, "7741": 108, "7625": 108, "7634": 108, "dioptr": 108, "7782": 108, "7752": 108, "8199": 108, "8213": 108, "2016": [109, 112], "mrvasympt": 109, "avich": 109, "dayal": 109, "cantor": 109, "276": 109, "286": 109, "macdonald": 109, "275": 109, "setuptool": 109, "__repr__": 109, "187": 109, "209": 109, "316": 109, "334": 109, "354": 109, "textbackend": 109, "sagemath": 109, "crypto": 109, "print_gtk": 109, "unbundl": 109, "141": [109, 112], "when_multipl": 109, "156": 109, "160": [109, 112], "164": 109, "115": 109, "122": 109, "201": [109, 112], "liealgebra": 109, "315": 109, "308": [109, 112], "manualintegr": 109, "279": 109, "flip": 109, "raoul": 109, "bourquin": 109, "consolid": 109, "278": 109, "298": 109, "risch_integr": 109, "337": 109, "356": 109, "numpydoc": 109, "credit": 109, "aboutu": 109, "152": 109, "212": [109, 112], "codecov": 109, "io": 109, "217": [109, 112], "pep8": 109, "214": 109, "diofant_use_cach": 109, "219": 109, "deprecationwarn": 109, "9351": 109, "9034": 109, "7927": 109, "9283": 109, "9274": 109, "geo": 109, "mult": 109, "9398": 109, "7259": 109, "9832": 109, "9053": 109, "9052": 109, "9533": 109, "9545": 109, "9652": 109, "osx": 109, "8432": 109, "9542": 109, "9326": 109, "9413": 109, "circular": 109, "8840": 109, "4898": 109, "10195": 109, "10196": 109, "10198": 109, "7917": 109, "reciprocaltrigonometricfunct": 109, "8649": 109, "5641": 109, "10258": 109, "10268": 109, "10237": 109, "10255": 109, "10290": 109, "10304": 109, "9471": 109, "9449": 109, "exceed": 109, "crash": 109, "8462": 109, "9917": 109, "7383": 109, "7098": 109, "10323": 109, "10326": 109, "10095": 109, "4187": 109, "10383": 109, "10382": 109, "10388": 109, "10391": 109, "8241": 109, "3539": 109, "7216": 109, "10503": 109, "10567": 109, "9075": 109, "10610": 109, "4173": 109, "10803": 109, "10836": 109, "9558": 109, "4949": 109, "5952": 109, "9608": 109, "10961": 109, "10976": 109, "10995": 109, "11011": 109, "scientif": [109, 112], "11062": 109, "10804": 109, "11063": 109, "9480": 109, "10497": 109, "5383": 109, "11270": 109, "5172": 109, "7055": 109, "test_rsolve_bulk": 109, "11261": 109, "11313": 109, "11290": 109, "10761": 109, "10024": 109, "7985": 109, "9637": 109, "10003": 109, "exponentialdistribut": 109, "10052": 109, "10063": 109, "10075": 109, "9823": 109, "10156": 109, "10113": 109, "10020": 109, "10240": 109, "8510": 109, "10220": 109, "10092": 109, "10161": 109, "10243": 109, "10274": 109, "10210": 109, "9539": 109, "unsupport": 109, "nonetyp": [109, 110], "11407": 109, "11413": 109, "11434": 109, "11526": 109, "11553": 109, "8045": 109, "11602": 109, "4720": 109, "11623": 109, "10292": 109, "rebuilt": 109, "6572": 109, "10134": 109, "11672": 109, "11678": 109, "11746": 109, "substit": 109, "3904": 109, "3112": 109, "9173": 109, "9808": 109, "9341": 109, "9908": 109, "unboundlocalvari": 109, "6171": 109, "9276": 109, "diagnose_import": 109, "10201": 109, "9057": 109, "segfault": 109, "11159": 109, "2839": 109, "init_sess": 109, "auto_int_to_integ": 109, "11081": 109, "10974": 109, "bom": 109, "10806": 109, "10801": 109, "9549": 109, "4231": 109, "8634": 109, "8481": 109, "pmf": 109, "9956": 109, "9747": 109, "test_piecewise_lambdifi": 109, "9634": 109, "8500": 109, "fuzzy_and": 109, "9192": 109, "7130": 109, "8514": 109, "9334": 109, "8229": 109, "8061": 109, "7872": 109, "3496": 109, "2929": 109, "8203": 109, "7649": 109, "7256": 109, "6783": 109, "5662": 109, "assocop": 109, "_eval_template_is_attr": 109, "misus": 109, "5295": 109, "4856": 109, "4555": 109, "pyflak": 109, "5773": 109, "cmp_to_kei": 109, "5484": 109, "8825": 109, "weakref": 109, "8635": 109, "8157": 109, "7599": 109, "6179": 109, "5415": 109, "2865": 109, "5907": 109, "11722": 109, "8804": 109, "10728": 109, "2018": 110, "390": 110, "chri": 110, "smith": 110, "283": 110, "461": 110, "508": 110, "519": 110, "538": 110, "573": 110, "578": 110, "487": 110, "430": 110, "448": 110, "assumption0": 110, "382": 110, "387": [110, 112], "391": 110, "solve_triangul": 110, "solve_biquadrat": 110, "389": 110, "interactive_travers": 110, "395": 110, "xring": 110, "xfield": 110, "403": 110, "jscode": 110, "404": 110, "pager_print": 110, "print_fcod": 110, "411": 110, "380": 110, "experimental_lambdifi": 110, "intervalmath": 110, "384": 110, "426": 110, "554": 110, "549": 110, "get_domain": 110, "479": 110, "510": 110, "529": 110, "534": 110, "543": 110, "solve_undetermined_coeff": 110, "557": 110, "537": 110, "577": 110, "585": 110, "is_zero_dimension": 110, "monomialop": 110, "586": 110, "argiment": 110, "596": 110, "597": 110, "pprint_try_use_unicod": 110, "605": 110, "321": 110, "433": 110, "438": 110, "553": [110, 112], "571": 110, "dae": 110, "413": 110, "414": 110, "415": 110, "428": 110, "485": 110, "563": 110, "608": 110, "609": 110, "606": 110, "408": 110, "421": 110, "comprehens": [110, 112], "plugin": 110, "isort": 110, "520": 110, "hypothesi": 110, "547": 110, "xdist": 110, "551": 110, "timeout": 110, "11879": 110, "11884": 110, "11045": 110, "7165": 110, "8733": 110, "8430": 110, "12005": 110, "11799": 110, "12018": 110, "5649": 110, "11538": 110, "12081": 110, "7214": 110, "4678": 110, "7789": 110, "8255": 110, "roots_quadrat": 110, "7138": 110, "11691": 110, "7457": 110, "multiprocess": 110, "12115": 110, "4315": 110, "6807": 110, "12114": 110, "zerodivisionerror": 110, "5169": 110, "6249": 110, "6426": 110, "test_arg": 110, "rebuil": 110, "11461": 110, "nameerror": 110, "10925": 110, "12180": 110, "5786": 110, "9607": 110, "8754": 110, "8697": 110, "higer": 110, "8694": 110, "8710": 110, "10337": 110, "9447": 110, "10305": 110, "10413": 110, "10414": 110, "10375": 110, "10433": 110, "9044": 110, "10445": 110, "10379": 110, "10633": 110, "7163": 110, "11881": 110, "11801": 110, "11911": 110, "10489": 110, "serial": 110, "10336": 110, "12375": 110, "5514": 110, "12398": 110, "12400": 110, "12221": 110, "12522": 110, "12555": 110, "12569": 110, "12578": 110, "12582": 110, "12747": 110, "12769": 110, "12942": 110, "12238": 110, "4269": 110, "13081": 110, "13078": 110, "13098": 110, "13312": 110, "13111": 110, "10488": 110, "9706": 110, "10740": 110, "10592": 110, "7858": 110, "5412": 110, "10710": 110, "10810": 110, "10867": 110, "10782": 110, "10719": 110, "10680": 110, "10701": 110, "10770": 110, "10773": 110, "13332": 110, "13382": 110, "13403": 110, "13416": 110, "13462": 110, "13501": 110, "13536": 110, "13545": 110, "arithemet": 110, "13460": 110, "13071": 110, "13575": 110, "13629": 110, "13645": 110, "7067": 110, "python3": 110, "11378": 110, "10999": 110, "diop": 110, "holzer": 110, "11000": 110, "power_represent": 110, "11026": 110, "8943": 110, "11016": 110, "9538": 110, "11049": 110, "11021": 110, "11050": 110, "13853": 110, "13849": 110, "9366": 110, "13914": 110, "14000": 110, "11099": 110, "8257": 110, "11198": 110, "10784": 110, "window": 110, "10897": 110, "10963": 110, "10931": 110, "2799": 110, "11090": 110, "11207": 110, "9135": 110, "10829": 110, "10816": 110, "10886": 110, "10157": 110, "needs_bracket": 110, "10972": 110, "10044": 110, "10395": 110, "10641": 110, "10821": 110, "9296": 110, "9630": 110, "12792": 110, "12506": 110, "13115": 110, "13149": 110, "14117": 110, "14159": 110, "dup_isolate_complex_roots_sqf": 110, "11122": 110, "11418": 110, "misclassif": 110, "9862": 110, "11525": 110, "11530": 110, "11559": 110, "11547": 110, "11306": 110, "2866": 110, "11351": 110, "reduced_toti": 110, "14289": 110, "changelog": 111, "yu": 112, "brychkov": 112, "prudnikov": 112, "marichev": 112, "gordon": 112, "breach": 112, "ussr": 112, "324": 112, "330": 112, "0041555371900280": 112, "0041": 112, "5553": 112, "71": 112, "90028": 112, "ation": 112, "olut": 112, "inear": 112, "iffer": 112, "quation": 112, "olynomi": 112, "oeffici": 112, "issac": 112, "roceed": 112, "nternat": 112, "ymposium": 112, "ymbolic": 112, "lgebraic": 112, "omput": 112, "289": 112, "ny": 112, "usa": 112, "1145": 112, "220346": 112, "220383": 112, "marko": 112, "petkov": 112, "\u0161": 112, "ek": 112, "perat": 112, "290": 112, "296": 112, "220384": 112, "william": 112, "adam": 112, "philipp": 112, "loustaunau": 112, "ntroduct": 112, "\u00f6": 112, "bner": 112, "ases": 112, "american": 112, "boston": 112, "isbn": 112, "821": 112, "83804": 112, "iyad": 112, "ajwa": 112, "zhuojun": 112, "lgorithm": 112, "icm": 112, "199502": 112, "steven": 112, "arno": 112, "robinson": 112, "ferel": 112, "wheeler": 112, "302": 112, "1996": 112, "s0022314x96900499": 112, "1006": 112, "jnth": 112, "0049": 112, "becker": 112, "volker": 112, "weispfen": 112, "graduat": 112, "verlag": 112, "1993": 112, "97971": 112, "kredel": 112, "oor": 112, "ntegrat": 112, "inria": 112, "fr": 112, "cafe": 112, "pmint": 112, "ranscendent": 112, "unction": 112, "540": 112, "21493": 112, "bruno": 112, "salvi": 112, "ull": 112, "artial": 112, "raction": 112, "ecomposit": 112, "164081": 112, "164114": 112, "uclid": 112, "reatest": 112, "ommon": 112, "ivisor": 112, "symsac": 112, "195": 112, "800204": 112, "806288": 112, "transact": 112, "237": 112, "249": 112, "355791": 112, "355795": 112, "heori": 112, "ubresult": 112, "505": 112, "514": 112, "321662": 112, "321665": 112, "hort": 112, "ystem": 112, "heorist": 112, "eurocast": 112, "georg": 112, "142": 112, "1967": 112, "citat": 112, "cfm": 112, "doid": 112, "321371": 112, "321381": 112, "cox": 112, "shea": 112, "arieti": 112, "undergradu": 112, "978": 112, "319": 112, "16720": 112, "davenport": 112, "siret": 112, "tournier": 112, "1988": 112, "204230": 112, "faug": 112, "\u00e8": 112, "gianni": 112, "mora": 112, "344": 112, "octob": 112, "s0747717183710515": 112, "jsco": 112, "alessandro": 112, "giovini": 112, "teo": 112, "gianfranco": 112, "niesi": 112, "lorenzo": 112, "robbiano": 112, "traverso": 112, "uchberg": 112, "1991": 112, "120694": 112, "120701": 112, "goldstein": 112, "braun": 112, "nasa": 112, "nation": 112, "aeronaut": 112, "administr": 112, "offic": 112, "1973": 112, "dominik": 112, "imit": 112, "anipul": 112, "phd": 112, "swiss": 112, "feder": 112, "institut": 112, "technologi": 112, "\u00fc": 112, "switzerland": 112, "hairer": 112, "\u00f8": 112, "rsett": 112, "wanner": 112, "nonstiff": 112, "9783642052330": 112, "sei": 112, "mohammad": 112, "mahdi": 112, "javadi": 112, "michael": 112, "monagan": 112, "actor": 112, "ultivari": 112, "umber": 112, "ield": 112, "199": 112, "206": 112, "1576702": 112, "1576731": 112, "ummat": 112, "erm": 112, "305": 112, "350": 112, "1981": 112, "322248": 112, "322255": 112, "rt": 112, "rogram": 112, "eminumer": 112, "1985": 112, "03822": 112, "braunschweig": 112, "dexter": 112, "kozen": 112, "landau": [112, 114], "445": 112, "456": 112, "s0747": 112, "80027": 112, "247": 112, "s0747717188800452": 112, "80045": 112, "hsin": 112, "chao": 112, "liao": 112, "fateman": 112, "valuat": 112, "240": 112, "220376": 112, "yudel": 112, "yiu": 112, "kwong": 112, "376": 112, "s0747717183710539": 112, "franci": 112, "wright": 112, "proceed": 112, "symposium": 112, "94": 112, "180": 112, "190347": 112, "190413": 112, "menez": 112, "vanston": 112, "boca": 112, "raton": 112, "florida": 112, "1997": 112, "hoeij": 112, "04": 112, "297": 112, "304": 112, "1005285": 112, "1005328": 112, "allan": 112, "wittkopf": 112, "345542": 112, "345639": 112, "bose": 112, "guiver": 112, "ypergeometr": 112, "ecurr": 112, "243": 112, "264": 112, "90038": 112, "herbert": 112, "doron": 112, "zeilberg": 112, "ak": 112, "ltd": 112, "welleslei": 112, "rutger": 112, "aeqb": 112, "kelli": 112, "roach": 112, "236869": 112, "237088": 112, "258726": 112, "258784": 112, "simmon": 112, "textbook": 112, "9781498702621": 112, "corr": 112, "1004": 112, "0084": 112, "tenenbaum": 112, "dover": 112, "1963": 112, "odular": 112, "resent": 112, "ultipl": 112, "xtension": 112, "2002": 112, "116": 112, "780506": 112, "780520": 112, "adic": 112, "nivari": 112, "800206": 112, "806398": 112, "kazuhiro": 112, "yokoyama": 112, "masayuki": 112, "noro": 112, "taku": 112, "takeshima": 112, "580": 112, "s0747717189800616": 112, "80061": 112, "aspect": 113, "deduct": 113, "is_assumpt": 113, "82842712474619": 113, "141592653589793238462643383279502884197169399375105820974944592307816": 113, "289025482222236": 113, "0919996683503752": 113, "\u2148": [113, 120, 122], "718281828459045j": 113, "roundoff": 113, "146": 113, "998334166468282": 113, "9983341664682815": 113, "84147098": 113, "45464871": 113, "04704": 113, "18920062": 113, "\u212f": [114, 117, 122, 123], "oh": 114, "\u03c0": [114, 117, 122], "rate": 114, "poleerror": 114, "newcom": 115, "coers": 115, "disprov": 115, "8284271247461903": 117, "8284271247461900976": 117, "wrote": 117, "2xy": 117, "theme": 117, "cass": 117, "sampl": 117, "whet": 117, "appetit": 117, "unclear": 117, "c\u2082": [117, 123], "c\u2081": [117, 123], "j_y": 117, "tear": 118, "dig": 118, "heavi": 118, "pdp": 119, "influenc": 120, "\u03c6": 120, "153": 120, "textual": 121, "frontend": 121, "screen": 121, "graphviz": 121, "pitfail": 122, "late": 122, "whittl": 122, "catchal": 122, "scope": 122, "expand_multinomi": 122, "expand_mul": 122, "sound": 122, "expand_trig": 122, "expand_power_exp": 122, "expand_log": 122, "expand_complex": 122, "x\u2080": 122, "x\u2081": 122, "c\u2080": 123}, "objects": {"": [[33, 0, 0, "-", "diofant"]], "diofant": [[11, 0, 0, "-", "calculus"], [26, 0, 0, "-", "config"], [27, 0, 0, "-", "core"], [28, 0, 0, "-", "domains"], [31, 0, 0, "-", "functions"], [34, 0, 0, "-", "integrals"], [35, 0, 0, "-", "interactive"], [36, 0, 0, "-", "logic"], [40, 0, 0, "-", "matrices"], [44, 0, 0, "-", "parsing"], [45, 0, 0, "-", "polys"], [46, 0, 0, "-", "printing"], [50, 0, 0, "-", "solvers"], [58, 0, 0, "-", "tensor"], [66, 0, 0, "-", "utilities"]], "diofant.calculus": [[7, 0, 0, "-", "gruntz"], [11, 0, 0, "-", "limits"], [11, 0, 0, "-", "optimization"], [11, 0, 0, "-", "order"], [11, 0, 0, "-", "residues"], [11, 0, 0, "-", "singularities"]], "diofant.calculus.gruntz": [[7, 1, 1, "", "compare"], [7, 1, 1, "", "leadterm"], [7, 1, 1, "", "limitinf"], [7, 1, 1, "", "mrv"], [7, 1, 1, "", "rewrite"], [7, 1, 1, "", "signinf"]], "diofant.calculus.limits": [[11, 2, 1, "", "Limit"], [11, 1, 1, "", "limit"]], "diofant.calculus.limits.Limit": [[11, 3, 1, "", "doit"]], "diofant.calculus.optimization": [[11, 1, 1, "", "maximize"], [11, 1, 1, "", "minimize"]], "diofant.calculus.order": [[11, 4, 1, "", "O"], [11, 2, 1, "", "Order"]], "diofant.calculus.order.Order": [[11, 3, 1, "", "contains"]], "diofant.calculus.residues": [[11, 1, 1, "", "residue"]], "diofant.calculus.singularities": [[11, 1, 1, "", "singularities"]], "diofant.combinatorics": [[18, 0, 0, "-", "generators"], [12, 0, 0, "-", "graycode"], [13, 0, 0, "-", "group_constructs"], [15, 0, 0, "-", "named_groups"], [16, 0, 0, "-", "partitions"], [17, 0, 0, "-", "perm_groups"], [18, 0, 0, "-", "permutations"], [19, 0, 0, "-", "polyhedron"], [20, 0, 0, "-", "prufer"], [21, 0, 0, "-", "subsets"], [22, 0, 0, "-", "tensor_can"], [23, 0, 0, "-", "testutil"], [24, 0, 0, "-", "util"]], "diofant.combinatorics.generators": [[18, 3, 1, "", "alternating"], [18, 3, 1, "", "cyclic"], [18, 3, 1, "", "dihedral"], [18, 3, 1, "", "symmetric"]], "diofant.combinatorics.graycode": [[12, 2, 1, "", "GrayCode"], [12, 3, 1, "", "bin_to_gray"], [12, 3, 1, "", "get_subset_from_bitstring"], [12, 3, 1, "", "gray_to_bin"], [12, 3, 1, "", "graycode_subsets"], [12, 3, 1, "", "random_bitstring"]], "diofant.combinatorics.graycode.GrayCode": [[12, 5, 1, "", "current"], [12, 3, 1, "", "generate_gray"], [12, 5, 1, "", "n"], [12, 3, 1, "", "next"], [12, 5, 1, "", "rank"], [12, 5, 1, "", "selections"], [12, 3, 1, "", "skip"], [12, 3, 1, "", "unrank"]], "diofant.combinatorics.group_constructs": [[13, 1, 1, "", "DirectProduct"]], "diofant.combinatorics.named_groups": [[15, 1, 1, "", "AbelianGroup"], [15, 1, 1, "", "AlternatingGroup"], [15, 1, 1, "", "CyclicGroup"], [15, 1, 1, "", "DihedralGroup"], [15, 1, 1, "", "SymmetricGroup"]], "diofant.combinatorics.partitions": [[16, 2, 1, "", "IntegerPartition"], [16, 2, 1, "", "Partition"], [16, 1, 1, "", "RGS_enum"], [16, 1, 1, "", "RGS_generalized"], [16, 1, 1, "", "RGS_rank"], [16, 1, 1, "", "RGS_unrank"], [16, 1, 1, "", "random_integer_partition"]], "diofant.combinatorics.partitions.IntegerPartition": [[16, 3, 1, "", "as_dict"], [16, 3, 1, "", "as_ferrers"], [16, 5, 1, "", "conjugate"], [16, 3, 1, "", "next_lex"], [16, 3, 1, "", "prev_lex"]], "diofant.combinatorics.partitions.Partition": [[16, 5, 1, "", "RGS"], [16, 3, 1, "", "from_rgs"], [16, 5, 1, "", "partition"], [16, 5, 1, "", "rank"], [16, 3, 1, "", "sort_key"]], "diofant.combinatorics.perm_groups": [[17, 2, 1, "", "PermutationGroup"]], "diofant.combinatorics.perm_groups.PermutationGroup": [[17, 3, 1, "", "__contains__"], [17, 3, 1, "", "__eq__"], [17, 3, 1, "", "__mul__"], [17, 3, 1, "", "__new__"], [17, 3, 1, "", "_union_find_merge"], [17, 3, 1, "", "_union_find_rep"], [17, 5, 1, "", "base"], [17, 3, 1, "", "baseswap"], [17, 5, 1, "", "basic_orbits"], [17, 5, 1, "", "basic_stabilizers"], [17, 5, 1, "", "basic_transversals"], [17, 3, 1, "", "center"], [17, 3, 1, "", "centralizer"], [17, 3, 1, "", "commutator"], [17, 3, 1, "", "contains"], [17, 3, 1, "", "coset_factor"], [17, 3, 1, "", "coset_rank"], [17, 3, 1, "", "coset_unrank"], [17, 5, 1, "", "degree"], [17, 3, 1, "", "derived_series"], [17, 3, 1, "", "derived_subgroup"], [17, 5, 1, "", "elements"], [17, 3, 1, "", "generate"], [17, 3, 1, "", "generate_dimino"], [17, 3, 1, "", "generate_schreier_sims"], [17, 5, 1, "", "generators"], [17, 5, 1, "", "is_abelian"], [17, 3, 1, "", "is_alt_sym"], [17, 5, 1, "", "is_nilpotent"], [17, 3, 1, "", "is_normal"], [17, 3, 1, "", "is_primitive"], [17, 5, 1, "", "is_solvable"], [17, 3, 1, "", "is_subgroup"], [17, 3, 1, "", "is_transitive"], [17, 5, 1, "", "is_trivial"], [17, 3, 1, "", "lower_central_series"], [17, 3, 1, "", "make_perm"], [17, 5, 1, "", "max_div"], [17, 3, 1, "", "minimal_block"], [17, 3, 1, "", "normal_closure"], [17, 3, 1, "", "orbit"], [17, 3, 1, "", "orbit_rep"], [17, 3, 1, "", "orbit_transversal"], [17, 3, 1, "", "orbits"], [17, 3, 1, "", "order"], [17, 3, 1, "", "pointwise_stabilizer"], [17, 3, 1, "", "random"], [17, 3, 1, "", "random_pr"], [17, 3, 1, "", "random_stab"], [17, 3, 1, "", "schreier_sims"], [17, 3, 1, "", "schreier_sims_incremental"], [17, 3, 1, "", "schreier_sims_random"], [17, 3, 1, "", "schreier_vector"], [17, 3, 1, "", "stabilizer"], [17, 5, 1, "", "strong_gens"], [17, 3, 1, "", "subgroup_search"], [17, 5, 1, "", "transitivity_degree"]], "diofant.combinatorics.permutations": [[18, 2, 1, "", "Cycle"], [18, 2, 1, "", "Permutation"], [18, 1, 1, "", "_af_parity"]], "diofant.combinatorics.permutations.Cycle": [[18, 3, 1, "", "list"]], "diofant.combinatorics.permutations.Permutation": [[18, 5, 1, "", "array_form"], [18, 3, 1, "", "ascents"], [18, 3, 1, "", "atoms"], [18, 5, 1, "", "cardinality"], [18, 3, 1, "", "commutator"], [18, 3, 1, "", "commutes_with"], [18, 5, 1, "", "cycle_structure"], [18, 5, 1, "", "cycles"], [18, 5, 1, "", "cyclic_form"], [18, 3, 1, "", "descents"], [18, 3, 1, "", "from_inversion_vector"], [18, 3, 1, "", "from_sequence"], [18, 5, 1, "", "full_cyclic_form"], [18, 3, 1, "", "get_adjacency_distance"], [18, 3, 1, "", "get_adjacency_matrix"], [18, 3, 1, "", "get_positional_distance"], [18, 3, 1, "", "get_precedence_distance"], [18, 3, 1, "", "get_precedence_matrix"], [18, 3, 1, "", "index"], [18, 3, 1, "", "inversion_vector"], [18, 3, 1, "", "inversions"], [18, 5, 1, "", "is_Empty"], [18, 5, 1, "", "is_Identity"], [18, 5, 1, "", "is_Singleton"], [18, 5, 1, "", "is_even"], [18, 5, 1, "", "is_odd"], [18, 3, 1, "", "josephus"], [18, 3, 1, "", "length"], [18, 3, 1, "", "list"], [18, 3, 1, "", "max"], [18, 3, 1, "", "min"], [18, 3, 1, "", "mul_inv"], [18, 3, 1, "", "next_lex"], [18, 3, 1, "", "next_nonlex"], [18, 3, 1, "", "next_trotterjohnson"], [18, 3, 1, "", "order"], [18, 3, 1, "", "parity"], [18, 3, 1, "", "random"], [18, 3, 1, "", "rank"], [18, 3, 1, "", "rank_nonlex"], [18, 3, 1, "", "rank_trotterjohnson"], [18, 3, 1, "", "rmul"], [18, 3, 1, "", "rmul_with_af"], [18, 3, 1, "", "runs"], [18, 3, 1, "", "signature"], [18, 5, 1, "", "size"], [18, 3, 1, "", "support"], [18, 3, 1, "", "transpositions"], [18, 3, 1, "", "unrank_lex"], [18, 3, 1, "", "unrank_nonlex"], [18, 3, 1, "", "unrank_trotterjohnson"]], "diofant.combinatorics.polyhedron": [[19, 2, 1, "", "Polyhedron"]], "diofant.combinatorics.polyhedron.Polyhedron": [[19, 5, 1, "", "array_form"], [19, 5, 1, "", "corners"], [19, 5, 1, "", "cyclic_form"], [19, 5, 1, "", "edges"], [19, 5, 1, "", "faces"], [19, 5, 1, "", "pgroup"], [19, 3, 1, "", "reset"], [19, 3, 1, "", "rotate"], [19, 5, 1, "", "size"], [19, 5, 1, "", "vertices"]], "diofant.combinatorics.prufer": [[20, 2, 1, "", "Prufer"]], "diofant.combinatorics.prufer.Prufer": [[20, 3, 1, "", "edges"], [20, 3, 1, "", "next"], [20, 5, 1, "", "nodes"], [20, 3, 1, "", "prev"], [20, 3, 1, "", "prufer_rank"], [20, 5, 1, "", "prufer_repr"], [20, 5, 1, "", "rank"], [20, 5, 1, "", "size"], [20, 3, 1, "", "to_prufer"], [20, 3, 1, "", "to_tree"], [20, 5, 1, "", "tree_repr"], [20, 3, 1, "", "unrank"]], "diofant.combinatorics.subsets": [[21, 2, 1, "", "Subset"], [21, 3, 1, "", "ksubsets"]], "diofant.combinatorics.subsets.Subset": [[21, 3, 1, "", "bitlist_from_subset"], [21, 5, 1, "", "cardinality"], [21, 3, 1, "", "iterate_binary"], [21, 3, 1, "", "iterate_graycode"], [21, 3, 1, "", "next_binary"], [21, 3, 1, "", "next_gray"], [21, 3, 1, "", "next_lexicographic"], [21, 3, 1, "", "prev_binary"], [21, 3, 1, "", "prev_gray"], [21, 3, 1, "", "prev_lexicographic"], [21, 5, 1, "", "rank_binary"], [21, 5, 1, "", "rank_gray"], [21, 5, 1, "", "rank_lexicographic"], [21, 5, 1, "", "size"], [21, 5, 1, "", "subset"], [21, 3, 1, "", "subset_from_bitlist"], [21, 3, 1, "", "subset_indices"], [21, 5, 1, "", "superset"], [21, 5, 1, "", "superset_size"], [21, 3, 1, "", "unrank_binary"], [21, 3, 1, "", "unrank_gray"]], "diofant.combinatorics.tensor_can": [[22, 1, 1, "", "bsgs_direct_product"], [22, 1, 1, "", "canonicalize"], [22, 1, 1, "", "double_coset_can_rep"], [22, 1, 1, "", "get_symmetric_group_sgs"]], "diofant.combinatorics.testutil": [[23, 1, 1, "", "_cmp_perm_lists"], [23, 1, 1, "", "_naive_list_centralizer"], [23, 1, 1, "", "_verify_bsgs"], [23, 1, 1, "", "_verify_centralizer"], [23, 1, 1, "", "_verify_normal_closure"]], "diofant.combinatorics.util": [[24, 1, 1, "", "_base_ordering"], [24, 1, 1, "", "_check_cycles_alt_sym"], [24, 1, 1, "", "_distribute_gens_by_base"], [24, 1, 1, "", "_handle_precomputed_bsgs"], [24, 1, 1, "", "_orbits_transversals_from_bsgs"], [24, 1, 1, "", "_remove_gens"], [24, 1, 1, "", "_strip"], [24, 1, 1, "", "_strong_gens_from_distr"]], "diofant.concrete.expr_with_intlimits": [[25, 2, 1, "", "ExprWithIntLimits"]], "diofant.concrete.expr_with_intlimits.ExprWithIntLimits": [[25, 3, 1, "", "change_index"], [25, 3, 1, "", "index"], [25, 3, 1, "", "reorder"], [25, 3, 1, "", "reorder_limit"]], "diofant.concrete.expr_with_limits": [[25, 2, 1, "", "ExprWithLimits"]], "diofant.concrete.expr_with_limits.ExprWithLimits": [[25, 3, 1, "", "as_dummy"], [25, 5, 1, "", "free_symbols"], [25, 5, 1, "", "function"], [25, 5, 1, "", "is_number"], [25, 5, 1, "", "limits"], [25, 5, 1, "", "variables"]], "diofant.concrete.gosper": [[25, 1, 1, "", "gosper_normal"], [25, 1, 1, "", "gosper_sum"], [25, 1, 1, "", "gosper_term"]], "diofant.concrete.products": [[25, 2, 1, "", "Product"], [25, 1, 1, "", "product"]], "diofant.concrete.products.Product": [[25, 3, 1, "", "reverse_order"]], "diofant.concrete.summations": [[25, 2, 1, "", "Sum"], [25, 1, 1, "", "summation"]], "diofant.concrete.summations.Sum": [[25, 3, 1, "", "euler_maclaurin"], [25, 3, 1, "", "findrecur"], [25, 3, 1, "", "reverse_order"]], "diofant.config": [[26, 1, 1, "", "setup"]], "diofant.core": [[27, 0, 0, "-", "add"], [27, 0, 0, "-", "assumptions"], [27, 0, 0, "-", "basic"], [27, 0, 0, "-", "cache"], [27, 0, 0, "-", "compatibility"], [27, 0, 0, "-", "containers"], [27, 0, 0, "-", "core"], [27, 0, 0, "-", "evalf"], [27, 0, 0, "-", "evaluate"], [27, 0, 0, "-", "expr"], [27, 0, 0, "-", "exprtools"], [27, 0, 0, "-", "function"], [27, 0, 0, "-", "mod"], [27, 0, 0, "-", "mul"], [27, 0, 0, "-", "multidimensional"], [27, 0, 0, "-", "numbers"], [27, 0, 0, "-", "power"], [27, 0, 0, "-", "relational"], [27, 0, 0, "-", "singleton"], [27, 0, 0, "-", "symbol"], [27, 0, 0, "-", "sympify"]], "diofant.core.add": [[27, 2, 1, "", "Add"]], "diofant.core.add.Add": [[27, 3, 1, "", "as_coeff_Add"], [27, 3, 1, "", "as_coeff_add"], [27, 3, 1, "", "as_coefficients_dict"], [27, 3, 1, "", "as_content_primitive"], [27, 3, 1, "", "as_real_imag"], [27, 3, 1, "", "as_two_terms"], [27, 3, 1, "", "class_key"], [27, 3, 1, "", "extract_leading_order"], [27, 3, 1, "", "flatten"], [27, 3, 1, "", "getO"], [27, 3, 1, "", "primitive"], [27, 3, 1, "", "removeO"]], "diofant.core.assumptions": [[27, 2, 1, "", "ManagedProperties"], [27, 2, 1, "", "StdFactKB"], [27, 1, 1, "", "as_property"], [27, 1, 1, "", "check_assumptions"], [27, 1, 1, "", "make_property"]], "diofant.core.basic": [[27, 2, 1, "", "Atom"], [27, 2, 1, "", "Basic"], [27, 2, 1, "", "preorder_traversal"]], "diofant.core.basic.Atom": [[27, 3, 1, "", "class_key"], [27, 3, 1, "", "doit"], [27, 3, 1, "", "sort_key"]], "diofant.core.basic.Basic": [[27, 5, 1, "", "args"], [27, 3, 1, "", "atoms"], [27, 3, 1, "", "class_key"], [27, 3, 1, "", "copy"], [27, 3, 1, "", "count"], [27, 3, 1, "", "count_ops"], [27, 3, 1, "", "doit"], [27, 3, 1, "", "find"], [27, 5, 1, "", "free_symbols"], [27, 5, 1, "", "func"], [27, 3, 1, "", "has"], [27, 5, 1, "", "is_evaluated"], [27, 3, 1, "", "match"], [27, 3, 1, "", "rcall"], [27, 3, 1, "", "replace"], [27, 3, 1, "", "rewrite"], [27, 3, 1, "", "sort_key"], [27, 3, 1, "", "subs"], [27, 3, 1, "", "xreplace"]], "diofant.core.basic.preorder_traversal": [[27, 3, 1, "", "skip"]], "diofant.core.cache": [[27, 1, 1, "", "cacheit"]], "diofant.core.compatibility": [[27, 2, 1, "", "NotIterable"], [27, 1, 1, "", "as_int"], [27, 1, 1, "", "is_sequence"], [27, 1, 1, "", "iterable"]], "diofant.core.containers": [[27, 2, 1, "", "Dict"], [27, 2, 1, "", "Tuple"]], "diofant.core.containers.Dict": [[27, 5, 1, "", "args"], [27, 3, 1, "", "get"], [27, 3, 1, "", "items"], [27, 3, 1, "", "keys"], [27, 3, 1, "", "values"]], "diofant.core.containers.Tuple": [[27, 3, 1, "", "index"], [27, 3, 1, "", "tuple_count"]], "diofant.core.evalf": [[27, 2, 1, "", "EvalfMixin"], [27, 1, 1, "", "N"], [27, 2, 1, "", "PrecisionExhausted"]], "diofant.core.evalf.EvalfMixin": [[27, 3, 1, "", "evalf"]], "diofant.core.evaluate": [[27, 1, 1, "", "evaluate"]], "diofant.core.expr": [[27, 2, 1, "", "AtomicExpr"], [27, 2, 1, "", "Expr"]], "diofant.core.expr.Expr": [[27, 3, 1, "", "adjoint"], [27, 3, 1, "", "apart"], [27, 3, 1, "", "args_cnc"], [27, 3, 1, "", "as_base_exp"], [27, 3, 1, "", "as_coeff_Add"], [27, 3, 1, "", "as_coeff_Mul"], [27, 3, 1, "", "as_coeff_add"], [27, 3, 1, "", "as_coeff_exponent"], [27, 3, 1, "", "as_coeff_mul"], [27, 3, 1, "", "as_coefficient"], [27, 3, 1, "", "as_coefficients_dict"], [27, 3, 1, "", "as_content_primitive"], [27, 3, 1, "", "as_expr"], [27, 3, 1, "", "as_independent"], [27, 3, 1, "", "as_leading_term"], [27, 3, 1, "", "as_numer_denom"], [27, 3, 1, "", "as_ordered_factors"], [27, 3, 1, "", "as_ordered_terms"], [27, 3, 1, "", "as_poly"], [27, 3, 1, "", "as_powers_dict"], [27, 3, 1, "", "as_real_imag"], [27, 3, 1, "", "as_terms"], [27, 3, 1, "", "aseries"], [27, 3, 1, "", "cancel"], [27, 5, 1, "", "canonical_variables"], [27, 3, 1, "", "coeff"], [27, 3, 1, "", "collect"], [27, 3, 1, "", "combsimp"], [27, 3, 1, "", "compute_leading_term"], [27, 3, 1, "", "conjugate"], [27, 3, 1, "", "could_extract_minus_sign"], [27, 3, 1, "", "count_ops"], [27, 3, 1, "", "diff"], [27, 3, 1, "", "equals"], [27, 3, 1, "", "expand"], [27, 3, 1, "", "extract_additively"], [27, 3, 1, "", "extract_branch_factor"], [27, 3, 1, "", "extract_multiplicatively"], [27, 3, 1, "", "factor"], [27, 3, 1, "", "getO"], [27, 3, 1, "", "getn"], [27, 3, 1, "", "integrate"], [27, 3, 1, "", "invert"], [27, 5, 1, "", "is_algebraic"], [27, 3, 1, "", "is_algebraic_expr"], [27, 5, 1, "", "is_commutative"], [27, 5, 1, "", "is_comparable"], [27, 5, 1, "", "is_complex"], [27, 5, 1, "", "is_composite"], [27, 3, 1, "", "is_constant"], [27, 5, 1, "", "is_even"], [27, 5, 1, "", "is_extended_real"], [27, 5, 1, "", "is_finite"], [27, 3, 1, "", "is_hypergeometric"], [27, 5, 1, "", "is_imaginary"], [27, 5, 1, "", "is_infinite"], [27, 5, 1, "", "is_integer"], [27, 5, 1, "", "is_irrational"], [27, 5, 1, "", "is_negative"], [27, 5, 1, "", "is_noninteger"], [27, 5, 1, "", "is_nonnegative"], [27, 5, 1, "", "is_nonpositive"], [27, 5, 1, "", "is_nonzero"], [27, 5, 1, "", "is_number"], [27, 5, 1, "", "is_odd"], [27, 5, 1, "", "is_polar"], [27, 3, 1, "", "is_polynomial"], [27, 5, 1, "", "is_positive"], [27, 5, 1, "", "is_prime"], [27, 5, 1, "", "is_rational"], [27, 3, 1, "", "is_rational_function"], [27, 5, 1, "", "is_real"], [27, 5, 1, "", "is_transcendental"], [27, 5, 1, "", "is_zero"], [27, 3, 1, "", "limit"], [27, 3, 1, "", "normal"], [27, 3, 1, "", "nseries"], [27, 3, 1, "", "nsimplify"], [27, 3, 1, "", "powsimp"], [27, 3, 1, "", "primitive"], [27, 3, 1, "", "radsimp"], [27, 3, 1, "", "ratsimp"], [27, 3, 1, "", "removeO"], [27, 3, 1, "", "round"], [27, 3, 1, "", "series"], [27, 3, 1, "", "simplify"], [27, 3, 1, "", "sort_key"], [27, 3, 1, "", "taylor_term"], [27, 3, 1, "", "together"], [27, 3, 1, "", "transpose"], [27, 3, 1, "", "trigsimp"]], "diofant.core.exprtools": [[27, 1, 1, "", "factor_terms"], [27, 1, 1, "", "gcd_terms"]], "diofant.core.function": [[27, 2, 1, "", "Derivative"], [27, 2, 1, "", "Function"], [27, 2, 1, "", "FunctionClass"], [27, 2, 1, "", "Lambda"], [27, 2, 1, "", "PoleError"], [27, 2, 1, "", "Subs"], [27, 2, 1, "", "WildFunction"], [27, 1, 1, "", "count_ops"], [27, 1, 1, "", "diff"], [27, 1, 1, "", "expand"], [27, 1, 1, "", "expand_complex"], [27, 1, 1, "", "expand_func"], [27, 1, 1, "", "expand_log"], [27, 1, 1, "", "expand_mul"], [27, 1, 1, "", "expand_multinomial"], [27, 1, 1, "", "expand_power_base"], [27, 1, 1, "", "expand_power_exp"], [27, 1, 1, "", "expand_trig"], [27, 1, 1, "", "nfloat"]], "diofant.core.function.Derivative": [[27, 3, 1, "", "doit"], [27, 3, 1, "", "doit_numerically"], [27, 5, 1, "", "expr"], [27, 5, 1, "", "free_symbols"], [27, 5, 1, "", "variables"]], "diofant.core.function.Function": [[27, 3, 1, "", "class_key"], [27, 3, 1, "", "fdiff"]], "diofant.core.function.FunctionClass": [[27, 5, 1, "", "nargs"]], "diofant.core.function.Lambda": [[27, 5, 1, "", "expr"], [27, 5, 1, "", "free_symbols"], [27, 5, 1, "", "variables"]], "diofant.core.function.Subs": [[27, 3, 1, "", "doit"], [27, 3, 1, "", "evalf"], [27, 5, 1, "", "expr"], [27, 5, 1, "", "free_symbols"], [27, 5, 1, "", "point"], [27, 5, 1, "", "variables"]], "diofant.core.mod": [[27, 2, 1, "", "Mod"]], "diofant.core.mul": [[27, 2, 1, "", "Mul"]], "diofant.core.mul.Mul": [[27, 3, 1, "", "as_base_exp"], [27, 3, 1, "", "as_coeff_Mul"], [27, 3, 1, "", "as_coeff_mul"], [27, 3, 1, "", "as_content_primitive"], [27, 3, 1, "", "as_ordered_factors"], [27, 3, 1, "", "as_powers_dict"], [27, 3, 1, "", "as_real_imag"], [27, 3, 1, "", "as_two_terms"], [27, 3, 1, "", "class_key"], [27, 3, 1, "", "flatten"]], "diofant.core.multidimensional": [[27, 2, 1, "", "vectorize"]], "diofant.core.numbers": [[27, 2, 1, "", "Catalan"], [27, 2, 1, "", "ComplexInfinity"], [27, 2, 1, "", "EulerGamma"], [27, 2, 1, "", "Exp1"], [27, 2, 1, "", "Float"], [27, 2, 1, "", "GoldenRatio"], [27, 2, 1, "", "Half"], [27, 2, 1, "", "ImaginaryUnit"], [27, 2, 1, "", "Infinity"], [27, 2, 1, "", "Integer"], [27, 2, 1, "", "NaN"], [27, 2, 1, "", "NegativeInfinity"], [27, 2, 1, "", "NegativeOne"], [27, 2, 1, "", "Number"], [27, 2, 1, "", "NumberSymbol"], [27, 2, 1, "", "One"], [27, 2, 1, "", "Pi"], [27, 2, 1, "", "Rational"], [27, 2, 1, "", "Zero"], [27, 1, 1, "", "integer_digits"], [27, 1, 1, "", "mod_inverse"]], "diofant.core.numbers.Float": [[27, 3, 1, "", "ceiling"], [27, 3, 1, "", "epsilon_eq"], [27, 3, 1, "", "floor"], [27, 5, 1, "", "num"]], "diofant.core.numbers.Integer": [[27, 5, 1, "", "is_composite"], [27, 5, 1, "", "is_even"], [27, 5, 1, "", "is_imaginary"], [27, 5, 1, "", "is_nonzero"], [27, 5, 1, "", "is_odd"], [27, 5, 1, "", "is_prime"], [27, 5, 1, "", "is_zero"]], "diofant.core.numbers.Number": [[27, 3, 1, "", "as_coeff_Add"], [27, 3, 1, "", "as_coeff_Mul"], [27, 3, 1, "", "as_coeff_add"], [27, 3, 1, "", "as_coeff_mul"], [27, 3, 1, "", "class_key"], [27, 3, 1, "", "cofactors"], [27, 3, 1, "", "gcd"], [27, 3, 1, "", "is_constant"], [27, 3, 1, "", "lcm"], [27, 3, 1, "", "sort_key"]], "diofant.core.numbers.NumberSymbol": [[27, 3, 1, "", "approximation_interval"]], "diofant.core.numbers.Rational": [[27, 3, 1, "", "as_content_primitive"], [27, 3, 1, "", "factors"], [27, 3, 1, "", "gcd"], [27, 3, 1, "", "lcm"], [27, 3, 1, "", "limit_denominator"]], "diofant.core.power": [[27, 2, 1, "", "Pow"], [27, 1, 1, "", "integer_nthroot"]], "diofant.core.power.Pow": [[27, 3, 1, "", "as_base_exp"], [27, 3, 1, "", "as_content_primitive"], [27, 3, 1, "", "as_real_imag"], [27, 5, 1, "", "base"], [27, 3, 1, "", "class_key"], [27, 5, 1, "", "exp"]], "diofant.core.relational": [[27, 4, 1, "", "Eq"], [27, 2, 1, "", "Equality"], [27, 4, 1, "", "Ge"], [27, 2, 1, "", "GreaterThan"], [27, 4, 1, "", "Gt"], [27, 4, 1, "", "Le"], [27, 2, 1, "", "LessThan"], [27, 4, 1, "", "Lt"], [27, 4, 1, "", "Ne"], [27, 4, 1, "", "Rel"], [27, 2, 1, "", "Relational"], [27, 2, 1, "", "StrictGreaterThan"], [27, 2, 1, "", "StrictLessThan"], [27, 2, 1, "", "Unequality"]], "diofant.core.relational.Relational": [[27, 3, 1, "", "as_set"], [27, 5, 1, "", "canonical"], [27, 3, 1, "", "equals"], [27, 5, 1, "", "lhs"], [27, 5, 1, "", "reversed"], [27, 5, 1, "", "rhs"]], "diofant.core.singleton": [[27, 6, 1, "", "S"], [27, 2, 1, "", "Singleton"], [27, 2, 1, "", "SingletonRegistry"], [27, 2, 1, "", "SingletonWithManagedProperties"]], "diofant.core.symbol": [[27, 2, 1, "", "Dummy"], [27, 2, 1, "", "Symbol"], [27, 2, 1, "", "Wild"], [27, 1, 1, "", "symbols"], [27, 1, 1, "", "var"]], "diofant.core.symbol.Dummy": [[27, 3, 1, "", "class_key"], [27, 3, 1, "", "sort_key"]], "diofant.core.sympify": [[27, 1, 1, "", "sympify"]], "diofant.domains": [[28, 2, 1, "", "AlgebraicField"], [28, 2, 1, "", "ComplexAlgebraicField"], [28, 2, 1, "", "ComplexField"], [28, 2, 1, "", "ExpressionDomain"], [28, 2, 1, "", "FiniteField"], [28, 2, 1, "", "IntegerModRing"], [28, 2, 1, "", "IntegerRing"], [28, 2, 1, "", "RationalField"], [28, 2, 1, "", "RealAlgebraicField"], [28, 2, 1, "", "RealField"]], "diofant.domains.AlgebraicField": [[28, 3, 1, "", "algebraic_field"]], "diofant.domains.ComplexField": [[28, 3, 1, "", "almosteq"]], "diofant.domains.ExpressionDomain": [[28, 2, 1, "", "Expression"], [28, 4, 1, "", "dtype"]], "diofant.domains.IntegerRing": [[28, 5, 1, "", "field"], [28, 3, 1, "", "finite_field"], [28, 3, 1, "", "finite_ring"]], "diofant.domains.RationalField": [[28, 3, 1, "", "algebraic_field"]], "diofant.domains.RealField": [[28, 3, 1, "", "almosteq"], [28, 3, 1, "", "to_rational"]], "diofant.domains.characteristiczero": [[28, 2, 1, "", "CharacteristicZero"]], "diofant.domains.compositedomain": [[28, 2, 1, "", "CompositeDomain"]], "diofant.domains.compositedomain.CompositeDomain": [[28, 3, 1, "", "inject"]], "diofant.domains.domain": [[28, 2, 1, "", "Domain"]], "diofant.domains.domain.Domain": [[28, 3, 1, "", "convert"], [28, 3, 1, "", "convert_from"], [28, 3, 1, "", "frac_field"], [28, 3, 1, "", "from_expr"], [28, 3, 1, "", "get_exact"], [28, 3, 1, "", "poly_ring"], [28, 3, 1, "", "to_expr"], [28, 3, 1, "", "unify"]], "diofant.domains.field": [[28, 2, 1, "", "Field"]], "diofant.domains.field.Field": [[28, 3, 1, "", "div"], [28, 3, 1, "", "exquo"], [28, 5, 1, "", "field"], [28, 3, 1, "", "gcd"], [28, 3, 1, "", "quo"], [28, 3, 1, "", "rem"]], "diofant.domains.finitefield": [[28, 2, 1, "", "GMPYFiniteField"], [28, 2, 1, "", "GaloisFieldElement"], [28, 2, 1, "", "ModularInteger"], [28, 2, 1, "", "PythonFiniteField"]], "diofant.domains.finitefield.ModularInteger": [[28, 5, 1, "", "is_primitive"]], "diofant.domains.integerring": [[28, 2, 1, "", "GMPYIntegerRing"], [28, 2, 1, "", "PythonIntegerRing"]], "diofant.domains.rationalfield": [[28, 2, 1, "", "GMPYRationalField"], [28, 2, 1, "", "PythonRationalField"]], "diofant.domains.ring": [[28, 2, 1, "", "CommutativeRing"]], "diofant.domains.ring.CommutativeRing": [[28, 5, 1, "", "characteristic"], [28, 3, 1, "", "cofactors"], [28, 3, 1, "", "div"], [28, 3, 1, "", "exquo"], [28, 3, 1, "", "half_gcdex"], [28, 3, 1, "", "invert"], [28, 3, 1, "", "is_normal"], [28, 3, 1, "", "lcm"], [28, 3, 1, "", "quo"], [28, 3, 1, "", "rem"], [28, 5, 1, "", "ring"]], "diofant.domains.simpledomain": [[28, 2, 1, "", "SimpleDomain"]], "diofant.domains.simpledomain.SimpleDomain": [[28, 3, 1, "", "inject"]], "diofant.functions.combinatorial.factorials": [[29, 2, 1, "", "FallingFactorial"], [29, 2, 1, "", "RisingFactorial"], [29, 2, 1, "", "binomial"], [29, 2, 1, "", "factorial"], [29, 2, 1, "", "factorial2"], [29, 2, 1, "", "subfactorial"]], "diofant.functions.combinatorial.numbers": [[29, 2, 1, "", "bell"], [29, 2, 1, "", "bernoulli"], [29, 2, 1, "", "catalan"], [29, 2, 1, "", "euler"], [29, 2, 1, "", "fibonacci"], [29, 2, 1, "", "harmonic"], [29, 2, 1, "", "lucas"], [29, 1, 1, "", "stirling"]], "diofant.functions.elementary.complexes": [[30, 2, 1, "", "Abs"], [30, 2, 1, "", "adjoint"], [30, 2, 1, "", "arg"], [30, 2, 1, "", "conjugate"], [30, 2, 1, "", "im"], [30, 2, 1, "", "periodic_argument"], [30, 2, 1, "", "polar_lift"], [30, 2, 1, "", "principal_branch"], [30, 2, 1, "", "re"], [30, 2, 1, "", "sign"], [30, 2, 1, "", "transpose"]], "diofant.functions.elementary.complexes.Abs": [[30, 3, 1, "", "fdiff"]], "diofant.functions.elementary.complexes.im": [[30, 3, 1, "", "as_real_imag"]], "diofant.functions.elementary.complexes.re": [[30, 3, 1, "", "as_real_imag"]], "diofant.functions.elementary.exponential": [[30, 2, 1, "", "LambertW"], [30, 1, 1, "", "exp"], [30, 2, 1, "", "exp_polar"], [30, 2, 1, "", "log"]], "diofant.functions.elementary.exponential.LambertW": [[30, 3, 1, "", "fdiff"]], "diofant.functions.elementary.exponential.exp_polar": [[30, 5, 1, "", "exp"]], "diofant.functions.elementary.exponential.log": [[30, 3, 1, "", "as_real_imag"], [30, 3, 1, "", "fdiff"], [30, 3, 1, "", "inverse"]], "diofant.functions.elementary.hyperbolic": [[30, 2, 1, "", "HyperbolicFunction"], [30, 2, 1, "", "acosh"], [30, 2, 1, "", "acoth"], [30, 2, 1, "", "asinh"], [30, 2, 1, "", "atanh"], [30, 2, 1, "", "cosh"], [30, 2, 1, "", "coth"], [30, 2, 1, "", "csch"], [30, 2, 1, "", "sech"], [30, 2, 1, "", "sinh"], [30, 2, 1, "", "tanh"]], "diofant.functions.elementary.hyperbolic.acosh": [[30, 3, 1, "", "inverse"]], "diofant.functions.elementary.hyperbolic.acoth": [[30, 3, 1, "", "inverse"]], "diofant.functions.elementary.hyperbolic.asinh": [[30, 3, 1, "", "inverse"]], "diofant.functions.elementary.hyperbolic.atanh": [[30, 3, 1, "", "inverse"]], "diofant.functions.elementary.hyperbolic.coth": [[30, 3, 1, "", "inverse"]], "diofant.functions.elementary.hyperbolic.csch": [[30, 3, 1, "", "fdiff"], [30, 3, 1, "", "taylor_term"]], "diofant.functions.elementary.hyperbolic.sinh": [[30, 3, 1, "", "as_real_imag"], [30, 3, 1, "", "fdiff"], [30, 3, 1, "", "inverse"], [30, 3, 1, "", "taylor_term"]], "diofant.functions.elementary.hyperbolic.tanh": [[30, 3, 1, "", "inverse"]], "diofant.functions.elementary.integers": [[30, 2, 1, "", "RoundFunction"], [30, 2, 1, "", "ceiling"], [30, 2, 1, "", "floor"]], "diofant.functions.elementary.miscellaneous": [[30, 2, 1, "", "IdentityFunction"], [30, 2, 1, "", "Max"], [30, 2, 1, "", "Min"], [30, 1, 1, "", "real_root"], [30, 1, 1, "", "root"], [30, 1, 1, "", "sqrt"]], "diofant.functions.elementary.piecewise": [[30, 2, 1, "", "ExprCondPair"], [30, 2, 1, "", "Piecewise"], [30, 1, 1, "", "piecewise_fold"]], "diofant.functions.elementary.piecewise.ExprCondPair": [[30, 5, 1, "", "cond"], [30, 5, 1, "", "expr"]], "diofant.functions.elementary.piecewise.Piecewise": [[30, 3, 1, "", "doit"]], "diofant.functions.elementary.trigonometric": [[30, 2, 1, "", "acos"], [30, 2, 1, "", "acot"], [30, 2, 1, "", "acsc"], [30, 2, 1, "", "asec"], [30, 2, 1, "", "asin"], [30, 2, 1, "", "atan"], [30, 2, 1, "", "atan2"], [30, 2, 1, "", "cos"], [30, 2, 1, "", "cot"], [30, 2, 1, "", "csc"], [30, 2, 1, "", "sec"], [30, 2, 1, "", "sin"], [30, 2, 1, "", "tan"]], "diofant.functions.elementary.trigonometric.acos": [[30, 3, 1, "", "inverse"]], "diofant.functions.elementary.trigonometric.acot": [[30, 3, 1, "", "inverse"]], "diofant.functions.elementary.trigonometric.acsc": [[30, 3, 1, "", "inverse"]], "diofant.functions.elementary.trigonometric.asec": [[30, 3, 1, "", "inverse"]], "diofant.functions.elementary.trigonometric.asin": [[30, 3, 1, "", "inverse"]], "diofant.functions.elementary.trigonometric.atan": [[30, 3, 1, "", "inverse"]], "diofant.functions.elementary.trigonometric.cot": [[30, 3, 1, "", "inverse"]], "diofant.functions.elementary.trigonometric.tan": [[30, 3, 1, "", "inverse"]], "diofant.functions.special": [[32, 0, 0, "-", "bessel"], [32, 0, 0, "-", "beta_functions"], [32, 0, 0, "-", "elliptic_integrals"], [32, 0, 0, "-", "error_functions"], [32, 0, 0, "-", "gamma_functions"], [32, 0, 0, "-", "polynomials"], [32, 0, 0, "-", "zeta_functions"]], "diofant.functions.special.bessel": [[32, 2, 1, "", "AiryBase"], [32, 2, 1, "", "BesselBase"], [32, 2, 1, "", "airyai"], [32, 2, 1, "", "airyaiprime"], [32, 2, 1, "", "airybi"], [32, 2, 1, "", "airybiprime"], [32, 2, 1, "", "besseli"], [32, 2, 1, "", "besselj"], [32, 2, 1, "", "besselk"], [32, 2, 1, "", "bessely"], [32, 2, 1, "", "hankel1"], [32, 2, 1, "", "hankel2"], [32, 2, 1, "", "jn"], [32, 1, 1, "", "jn_zeros"], [32, 2, 1, "", "yn"]], "diofant.functions.special.bessel.BesselBase": [[32, 5, 1, "", "argument"], [32, 5, 1, "", "order"]], "diofant.functions.special.beta_functions": [[32, 2, 1, "", "beta"]], "diofant.functions.special.bsplines": [[32, 1, 1, "", "bspline_basis"], [32, 1, 1, "", "bspline_basis_set"]], "diofant.functions.special.delta_functions": [[32, 2, 1, "", "DiracDelta"], [32, 2, 1, "", "Heaviside"]], "diofant.functions.special.delta_functions.DiracDelta": [[32, 3, 1, "", "is_simple"], [32, 3, 1, "", "simplify"]], "diofant.functions.special.elliptic_integrals": [[32, 2, 1, "", "elliptic_e"], [32, 2, 1, "", "elliptic_f"], [32, 2, 1, "", "elliptic_k"], [32, 2, 1, "", "elliptic_pi"]], "diofant.functions.special.error_functions": [[32, 2, 1, "", "Chi"], [32, 2, 1, "", "Ci"], [32, 1, 1, "", "E1"], [32, 2, 1, "", "Ei"], [32, 2, 1, "", "FresnelIntegral"], [32, 2, 1, "", "Li"], [32, 2, 1, "", "Shi"], [32, 2, 1, "", "Si"], [32, 2, 1, "", "erf"], [32, 2, 1, "", "erf2"], [32, 2, 1, "", "erf2inv"], [32, 2, 1, "", "erfc"], [32, 2, 1, "", "erfcinv"], [32, 2, 1, "", "erfi"], [32, 2, 1, "", "erfinv"], [32, 2, 1, "", "expint"], [32, 2, 1, "", "fresnelc"], [32, 2, 1, "", "fresnels"], [32, 2, 1, "", "li"]], "diofant.functions.special.gamma_functions": [[32, 1, 1, "", "digamma"], [32, 2, 1, "", "gamma"], [32, 2, 1, "", "loggamma"], [32, 2, 1, "", "lowergamma"], [32, 2, 1, "", "polygamma"], [32, 1, 1, "", "trigamma"], [32, 2, 1, "", "uppergamma"]], "diofant.functions.special.hyper": [[32, 2, 1, "", "hyper"], [32, 2, 1, "", "meijerg"]], "diofant.functions.special.hyper.hyper": [[32, 5, 1, "", "ap"], [32, 5, 1, "", "argument"], [32, 5, 1, "", "bq"], [32, 5, 1, "", "convergence_statement"], [32, 5, 1, "", "eta"], [32, 5, 1, "", "radius_of_convergence"]], "diofant.functions.special.hyper.meijerg": [[32, 5, 1, "", "an"], [32, 5, 1, "", "aother"], [32, 5, 1, "", "ap"], [32, 5, 1, "", "argument"], [32, 5, 1, "", "bm"], [32, 5, 1, "", "bother"], [32, 5, 1, "", "bq"], [32, 5, 1, "", "delta"], [32, 3, 1, "", "get_period"], [32, 3, 1, "", "integrand"], [32, 5, 1, "", "nu"]], "diofant.functions.special.polynomials": [[32, 2, 1, "", "assoc_laguerre"], [32, 2, 1, "", "assoc_legendre"], [32, 2, 1, "", "chebyshevt"], [32, 2, 1, "", "chebyshevt_root"], [32, 2, 1, "", "chebyshevu"], [32, 2, 1, "", "chebyshevu_root"], [32, 2, 1, "", "gegenbauer"], [32, 2, 1, "", "hermite"], [32, 2, 1, "", "jacobi"], [32, 1, 1, "", "jacobi_normalized"], [32, 2, 1, "", "laguerre"], [32, 2, 1, "", "legendre"]], "diofant.functions.special.spherical_harmonics": [[32, 2, 1, "", "Ynm"], [32, 1, 1, "", "Ynm_c"], [32, 2, 1, "", "Znm"]], "diofant.functions.special.tensor_functions": [[32, 1, 1, "", "Eijk"], [32, 2, 1, "", "KroneckerDelta"], [32, 2, 1, "", "LeviCivita"], [32, 1, 1, "", "eval_levicivita"]], "diofant.functions.special.tensor_functions.KroneckerDelta": [[32, 3, 1, "", "eval"], [32, 5, 1, "", "indices_contain_equal_information"], [32, 5, 1, "", "is_above_fermi"], [32, 5, 1, "", "is_below_fermi"], [32, 5, 1, "", "is_only_above_fermi"], [32, 5, 1, "", "is_only_below_fermi"], [32, 5, 1, "", "killable_index"], [32, 5, 1, "", "preferred_index"]], "diofant.functions.special.zeta_functions": [[32, 2, 1, "", "dirichlet_eta"], [32, 2, 1, "", "lerchphi"], [32, 2, 1, "", "polylog"], [32, 2, 1, "", "zeta"]], "diofant.integrals.deltafunctions": [[34, 1, 1, "", "deltaintegrate"]], "diofant.integrals.heurisch": [[34, 1, 1, "", "components"], [34, 1, 1, "", "heurisch"], [34, 1, 1, "", "heurisch_wrapper"]], "diofant.integrals.integrals": [[34, 2, 1, "", "Integral"], [34, 1, 1, "", "integrate"]], "diofant.integrals.integrals.Integral": [[34, 3, 1, "", "as_sum"], [34, 3, 1, "", "doit"], [34, 5, 1, "", "free_symbols"], [34, 6, 1, "", "is_commutative"], [34, 3, 1, "", "transform"]], "diofant.integrals": [[6, 0, 0, "-", "meijerint_doc"], [34, 0, 0, "-", "quadrature"], [34, 0, 0, "-", "transforms"]], "diofant.integrals.quadrature": [[34, 1, 1, "", "gauss_chebyshev_t"], [34, 1, 1, "", "gauss_chebyshev_u"], [34, 1, 1, "", "gauss_gen_laguerre"], [34, 1, 1, "", "gauss_hermite"], [34, 1, 1, "", "gauss_jacobi"], [34, 1, 1, "", "gauss_laguerre"], [34, 1, 1, "", "gauss_legendre"]], "diofant.integrals.rationaltools": [[34, 1, 1, "", "ratint"], [34, 1, 1, "", "ratint_logpart"], [34, 1, 1, "", "ratint_ratpart"]], "diofant.integrals.transforms": [[34, 2, 1, "", "CosineTransform"], [34, 2, 1, "", "FourierTransform"], [34, 2, 1, "", "HankelTransform"], [34, 2, 1, "", "IntegralTransform"], [34, 2, 1, "", "InverseCosineTransform"], [34, 2, 1, "", "InverseFourierTransform"], [34, 2, 1, "", "InverseHankelTransform"], [34, 2, 1, "", "InverseLaplaceTransform"], [34, 2, 1, "", "InverseMellinTransform"], [34, 2, 1, "", "InverseSineTransform"], [34, 2, 1, "", "LaplaceTransform"], [34, 2, 1, "", "MellinTransform"], [34, 2, 1, "", "SineTransform"], [34, 1, 1, "", "cosine_transform"], [34, 1, 1, "", "fourier_transform"], [34, 1, 1, "", "hankel_transform"], [34, 1, 1, "", "inverse_cosine_transform"], [34, 1, 1, "", "inverse_fourier_transform"], [34, 1, 1, "", "inverse_hankel_transform"], [34, 1, 1, "", "inverse_laplace_transform"], [34, 1, 1, "", "inverse_mellin_transform"], [34, 1, 1, "", "inverse_sine_transform"], [34, 1, 1, "", "laplace_transform"], [34, 1, 1, "", "mellin_transform"], [34, 1, 1, "", "sine_transform"]], "diofant.integrals.transforms.IntegralTransform": [[34, 3, 1, "", "doit"], [34, 5, 1, "", "free_symbols"], [34, 5, 1, "", "function"], [34, 5, 1, "", "function_variable"], [34, 5, 1, "", "transform_variable"]], "diofant.integrals.trigonometry": [[34, 1, 1, "", "trigintegrate"]], "diofant.interactive": [[35, 0, 0, "-", "printing"], [35, 0, 0, "-", "session"]], "diofant.interactive.printing": [[35, 1, 1, "", "init_printing"]], "diofant.interactive.session": [[35, 2, 1, "", "AutomaticSymbols"], [35, 2, 1, "", "FloatRationalizer"], [35, 2, 1, "", "IntegerDivisionWrapper"], [35, 1, 1, "", "unicode_identifiers"]], "diofant.logic.boolalg": [[36, 2, 1, "", "And"], [36, 2, 1, "", "BooleanFalse"], [36, 2, 1, "", "BooleanTrue"], [36, 2, 1, "", "Equivalent"], [36, 2, 1, "", "ITE"], [36, 2, 1, "", "Implies"], [36, 2, 1, "", "Nand"], [36, 2, 1, "", "Nor"], [36, 2, 1, "", "Not"], [36, 2, 1, "", "Or"], [36, 2, 1, "", "Xor"], [36, 1, 1, "", "is_cnf"], [36, 1, 1, "", "is_dnf"], [36, 1, 1, "", "is_nnf"], [36, 1, 1, "", "simplify_logic"], [36, 1, 1, "", "to_cnf"], [36, 1, 1, "", "to_dnf"], [36, 1, 1, "", "to_nnf"]], "diofant.logic.inference": [[36, 1, 1, "", "satisfiable"]], "diofant.matrices": [[40, 2, 1, "", "Matrix"], [37, 0, 0, "-", "dense"], [38, 0, 0, "-", "expressions"], [39, 0, 0, "-", "immutable"], [41, 0, 0, "-", "matrices"], [42, 0, 0, "-", "sparse"]], "diofant.matrices.dense": [[37, 2, 1, "", "DenseMatrix"], [41, 1, 1, "", "GramSchmidt"], [37, 2, 1, "", "MutableDenseMatrix"], [37, 4, 1, "", "MutableMatrix"], [41, 1, 1, "", "casoratian"], [41, 1, 1, "", "diag"], [41, 1, 1, "", "eye"], [41, 1, 1, "", "hessian"], [41, 1, 1, "", "jordan_cell"], [41, 1, 1, "", "list2numpy"], [41, 1, 1, "", "matrix2numpy"], [41, 1, 1, "", "matrix_multiply_elementwise"], [41, 1, 1, "", "ones"], [41, 1, 1, "", "randMatrix"], [41, 1, 1, "", "rot_axis1"], [41, 1, 1, "", "rot_axis2"], [41, 1, 1, "", "rot_axis3"], [41, 1, 1, "", "symarray"], [41, 1, 1, "", "wronskian"], [41, 1, 1, "", "zeros"]], "diofant.matrices.dense.DenseMatrix": [[37, 3, 1, "", "__getitem__"], [37, 3, 1, "", "__mul__"], [37, 3, 1, "", "applyfunc"], [37, 3, 1, "", "as_immutable"], [37, 3, 1, "", "as_mutable"], [37, 3, 1, "", "equals"], [37, 3, 1, "", "eye"], [37, 3, 1, "", "reshape"], [37, 3, 1, "", "tolist"], [37, 3, 1, "", "zeros"]], "diofant.matrices.dense.MutableDenseMatrix": [[37, 3, 1, "", "col_op"], [37, 3, 1, "", "col_swap"], [37, 3, 1, "", "copyin_list"], [37, 3, 1, "", "copyin_matrix"], [37, 3, 1, "", "fill"], [37, 3, 1, "", "row_op"], [37, 3, 1, "", "row_swap"], [37, 3, 1, "", "simplify"], [37, 3, 1, "", "zip_row_op"]], "diofant.matrices.expressions": [[38, 2, 1, "", "FunctionMatrix"], [38, 2, 1, "", "Identity"], [38, 2, 1, "", "Inverse"], [38, 2, 1, "", "MatAdd"], [38, 2, 1, "", "MatMul"], [38, 2, 1, "", "MatPow"], [38, 2, 1, "", "MatrixExpr"], [38, 2, 1, "", "MatrixSymbol"], [38, 2, 1, "", "Trace"], [38, 2, 1, "", "Transpose"], [38, 2, 1, "", "ZeroMatrix"], [38, 0, 0, "-", "blockmatrix"]], "diofant.matrices.expressions.MatrixExpr": [[38, 5, 1, "", "T"], [38, 3, 1, "", "as_explicit"], [38, 3, 1, "", "as_mutable"], [38, 3, 1, "", "equals"]], "diofant.matrices.expressions.blockmatrix": [[38, 2, 1, "", "BlockDiagMatrix"], [38, 2, 1, "", "BlockMatrix"], [38, 1, 1, "", "block_collapse"]], "diofant.matrices.expressions.blockmatrix.BlockMatrix": [[38, 3, 1, "", "transpose"]], "diofant.matrices.immutable": [[39, 2, 1, "", "ImmutableMatrix"], [42, 2, 1, "", "ImmutableSparseMatrix"]], "diofant.matrices.immutable.ImmutableMatrix": [[39, 5, 1, "", "C"], [39, 3, 1, "", "adjoint"], [39, 3, 1, "", "as_mutable"], [39, 3, 1, "", "conjugate"], [39, 3, 1, "", "diff"], [39, 3, 1, "", "equals"], [39, 3, 1, "", "integrate"], [39, 3, 1, "", "limit"]], "diofant.matrices.immutable.ImmutableSparseMatrix": [[42, 3, 1, "", "subs"], [42, 3, 1, "", "xreplace"]], "diofant.matrices.matrices": [[41, 2, 1, "", "MatrixBase"], [41, 2, 1, "", "MatrixError"], [41, 2, 1, "", "NonSquareMatrixError"], [41, 2, 1, "", "ShapeError"], [41, 1, 1, "", "a2idx"], [41, 1, 1, "", "classof"]], "diofant.matrices.matrices.MatrixBase": [[41, 5, 1, "", "C"], [41, 5, 1, "", "D"], [41, 5, 1, "", "H"], [41, 3, 1, "", "LDLdecomposition"], [41, 3, 1, "", "LDLsolve"], [41, 3, 1, "", "LUdecomposition"], [41, 3, 1, "", "LUdecompositionFF"], [41, 3, 1, "", "LUdecomposition_Simple"], [41, 3, 1, "", "LUsolve"], [41, 3, 1, "", "QRdecomposition"], [41, 3, 1, "", "QRsolve"], [41, 5, 1, "", "T"], [41, 3, 1, "", "add"], [41, 3, 1, "", "adjoint"], [41, 3, 1, "", "adjugate"], [41, 3, 1, "", "atoms"], [41, 3, 1, "", "berkowitz"], [41, 3, 1, "", "berkowitz_charpoly"], [41, 3, 1, "", "berkowitz_det"], [41, 3, 1, "", "berkowitz_eigenvals"], [41, 3, 1, "", "berkowitz_minors"], [41, 3, 1, "", "charpoly"], [41, 3, 1, "", "cholesky"], [41, 3, 1, "", "cholesky_solve"], [41, 3, 1, "", "cofactor"], [41, 3, 1, "", "cofactorMatrix"], [41, 3, 1, "", "col_insert"], [41, 3, 1, "", "col_join"], [41, 3, 1, "", "condition_number"], [41, 3, 1, "", "conjugate"], [41, 3, 1, "", "copy"], [41, 3, 1, "", "cross"], [41, 3, 1, "", "det"], [41, 3, 1, "", "det_LU_decomposition"], [41, 3, 1, "", "det_bareiss"], [41, 3, 1, "", "diagonal_solve"], [41, 3, 1, "", "diagonalize"], [41, 3, 1, "", "diff"], [41, 3, 1, "", "dot"], [41, 3, 1, "", "dual"], [41, 3, 1, "", "eigenvals"], [41, 3, 1, "", "eigenvects"], [41, 3, 1, "", "evalf"], [41, 3, 1, "", "exp"], [41, 3, 1, "", "expand"], [41, 3, 1, "", "extract"], [41, 5, 1, "", "free_symbols"], [41, 3, 1, "", "get_diag_blocks"], [41, 3, 1, "", "has"], [41, 3, 1, "", "hstack"], [41, 3, 1, "", "integrate"], [41, 3, 1, "", "inv"], [41, 3, 1, "", "inv_mod"], [41, 3, 1, "", "inverse_ADJ"], [41, 3, 1, "", "inverse_GE"], [41, 3, 1, "", "inverse_LU"], [41, 3, 1, "", "is_anti_symmetric"], [41, 3, 1, "", "is_diagonal"], [41, 3, 1, "", "is_diagonalizable"], [41, 5, 1, "", "is_hermitian"], [41, 5, 1, "", "is_lower"], [41, 5, 1, "", "is_lower_hessenberg"], [41, 3, 1, "", "is_nilpotent"], [41, 5, 1, "", "is_square"], [41, 3, 1, "", "is_symbolic"], [41, 3, 1, "", "is_symmetric"], [41, 5, 1, "", "is_upper"], [41, 5, 1, "", "is_upper_hessenberg"], [41, 5, 1, "", "is_zero"], [41, 3, 1, "", "jacobian"], [41, 3, 1, "", "jordan_cells"], [41, 3, 1, "", "jordan_form"], [41, 3, 1, "", "key2bounds"], [41, 3, 1, "", "key2ij"], [41, 3, 1, "", "limit"], [41, 3, 1, "", "lower_triangular_solve"], [41, 3, 1, "", "minorEntry"], [41, 3, 1, "", "minorMatrix"], [41, 3, 1, "", "multiply"], [41, 3, 1, "", "multiply_elementwise"], [41, 3, 1, "", "norm"], [41, 3, 1, "", "normalized"], [41, 3, 1, "", "nullspace"], [41, 3, 1, "", "permuteBkwd"], [41, 3, 1, "", "permuteFwd"], [41, 3, 1, "", "pinv"], [41, 3, 1, "", "pinv_solve"], [41, 3, 1, "", "print_nonzero"], [41, 3, 1, "", "project"], [41, 3, 1, "", "rank"], [41, 3, 1, "", "replace"], [41, 3, 1, "", "row_insert"], [41, 3, 1, "", "row_join"], [41, 3, 1, "", "rref"], [41, 5, 1, "", "shape"], [41, 3, 1, "", "simplify"], [41, 3, 1, "", "singular_values"], [41, 3, 1, "", "solve_least_squares"], [41, 3, 1, "", "subs"], [41, 3, 1, "", "table"], [41, 3, 1, "", "trace"], [41, 3, 1, "", "transpose"], [41, 3, 1, "", "upper_triangular_solve"], [41, 3, 1, "", "values"], [41, 3, 1, "", "vec"], [41, 3, 1, "", "vech"], [41, 3, 1, "", "vstack"], [41, 3, 1, "", "xreplace"]], "diofant.matrices.sparse": [[42, 2, 1, "", "MutableSparseMatrix"], [42, 4, 1, "", "SparseMatrix"], [42, 2, 1, "", "SparseMatrixBase"]], "diofant.matrices.sparse.MutableSparseMatrix": [[42, 3, 1, "", "col_join"], [42, 3, 1, "", "col_op"], [42, 3, 1, "", "col_swap"], [42, 3, 1, "", "fill"], [42, 3, 1, "", "row_join"], [42, 3, 1, "", "row_op"], [42, 3, 1, "", "row_swap"], [42, 3, 1, "", "zip_row_op"]], "diofant.matrices.sparse.SparseMatrixBase": [[42, 5, 1, "", "CL"], [42, 3, 1, "", "LDLdecomposition"], [42, 5, 1, "", "RL"], [42, 3, 1, "", "add"], [42, 3, 1, "", "applyfunc"], [42, 3, 1, "", "as_immutable"], [42, 3, 1, "", "as_mutable"], [42, 3, 1, "", "cholesky"], [42, 3, 1, "", "col_list"], [42, 3, 1, "", "extract"], [42, 3, 1, "", "eye"], [42, 3, 1, "", "has"], [42, 5, 1, "", "is_hermitian"], [42, 3, 1, "", "is_symmetric"], [42, 3, 1, "", "liupc"], [42, 3, 1, "", "multiply"], [42, 3, 1, "", "nnz"], [42, 3, 1, "", "reshape"], [42, 3, 1, "", "row_list"], [42, 3, 1, "", "row_structure_symbolic_cholesky"], [42, 3, 1, "", "scalar_multiply"], [42, 3, 1, "", "solve"], [42, 3, 1, "", "solve_least_squares"], [42, 3, 1, "", "tolist"], [42, 3, 1, "", "zeros"]], "diofant.ntheory": [[43, 0, 0, "-", "continued_fraction"], [43, 0, 0, "-", "egyptian_fraction"], [43, 0, 0, "-", "factor_"], [43, 0, 0, "-", "generate"], [43, 0, 0, "-", "modular"], [43, 0, 0, "-", "multinomial"], [43, 0, 0, "-", "partitions_"], [43, 0, 0, "-", "primetest"], [43, 0, 0, "-", "residue_ntheory"]], "diofant.ntheory.continued_fraction": [[43, 1, 1, "", "continued_fraction_convergents"], [43, 1, 1, "", "continued_fraction_iterator"], [43, 1, 1, "", "continued_fraction_periodic"], [43, 1, 1, "", "continued_fraction_reduce"]], "diofant.ntheory.egyptian_fraction": [[43, 1, 1, "", "egyptian_fraction"]], "diofant.ntheory.factor_": [[43, 1, 1, "", "antidivisor_count"], [43, 1, 1, "", "antidivisors"], [43, 1, 1, "", "core"], [43, 1, 1, "", "divisor_count"], [43, 2, 1, "", "divisor_sigma"], [43, 1, 1, "", "divisors"], [43, 1, 1, "", "factorint"], [43, 1, 1, "", "factorrat"], [43, 1, 1, "", "multiplicity"], [43, 1, 1, "", "perfect_power"], [43, 1, 1, "", "pollard_pm1"], [43, 1, 1, "", "pollard_rho"], [43, 1, 1, "", "primefactors"], [43, 1, 1, "", "smoothness"], [43, 1, 1, "", "smoothness_p"], [43, 1, 1, "", "square_factor"], [43, 2, 1, "", "totient"], [43, 1, 1, "", "trailing"]], "diofant.ntheory.generate": [[43, 2, 1, "", "Sieve"], [43, 1, 1, "", "cycle_length"], [43, 1, 1, "", "nextprime"], [43, 1, 1, "", "prevprime"], [43, 1, 1, "", "prime"], [43, 1, 1, "", "primepi"], [43, 1, 1, "", "primerange"], [43, 1, 1, "", "primorial"], [43, 1, 1, "", "randprime"]], "diofant.ntheory.generate.Sieve": [[43, 3, 1, "", "extend"], [43, 3, 1, "", "extend_to_no"], [43, 3, 1, "", "primerange"], [43, 3, 1, "", "search"]], "diofant.ntheory.modular": [[43, 1, 1, "", "crt"], [43, 1, 1, "", "crt1"], [43, 1, 1, "", "crt2"], [43, 1, 1, "", "integer_rational_reconstruction"], [43, 1, 1, "", "solve_congruence"], [43, 1, 1, "", "symmetric_residue"]], "diofant.ntheory.multinomial": [[43, 1, 1, "", "binomial_coefficients"], [43, 1, 1, "", "binomial_coefficients_list"], [43, 1, 1, "", "multinomial_coefficients"], [43, 1, 1, "", "multinomial_coefficients_iterator"]], "diofant.ntheory.partitions_": [[43, 1, 1, "", "npartitions"]], "diofant.ntheory.primetest": [[43, 1, 1, "", "is_square"], [43, 1, 1, "", "isprime"], [43, 1, 1, "", "mr"]], "diofant.ntheory.residue_ntheory": [[43, 1, 1, "", "discrete_log"], [43, 1, 1, "", "is_nthpow_residue"], [43, 1, 1, "", "is_primitive_root"], [43, 1, 1, "", "is_quad_residue"], [43, 1, 1, "", "jacobi_symbol"], [43, 1, 1, "", "legendre_symbol"], [43, 2, 1, "", "mobius"], [43, 1, 1, "", "n_order"], [43, 1, 1, "", "nthroot_mod"], [43, 1, 1, "", "primitive_root"], [43, 1, 1, "", "quadratic_residues"], [43, 1, 1, "", "sqrt_mod"], [43, 1, 1, "", "sqrt_mod_iter"]], "diofant.parsing.mathematica": [[44, 1, 1, "", "mathematica"]], "diofant.parsing.maxima": [[44, 1, 1, "", "parse_maxima"]], "diofant.parsing.sympy_parser": [[44, 1, 1, "", "auto_number"], [44, 1, 1, "", "auto_symbol"], [44, 1, 1, "", "convert_xor"], [44, 1, 1, "", "eval_expr"], [44, 1, 1, "", "function_exponentiation"], [44, 1, 1, "", "implicit_application"], [44, 1, 1, "", "implicit_multiplication"], [44, 1, 1, "", "implicit_multiplication_application"], [44, 1, 1, "", "parse_expr"], [44, 1, 1, "", "rationalize"], [44, 1, 1, "", "split_symbols"], [44, 1, 1, "", "split_symbols_custom"], [44, 6, 1, "", "standard_transformations"], [44, 1, 1, "", "stringify_expr"]], "diofant.polys": [[45, 0, 0, "-", "constructor"], [10, 0, 0, "-", "euclidtools"], [10, 0, 0, "-", "factorization_alg_field"], [10, 0, 0, "-", "factortools"], [10, 0, 0, "-", "groebnertools"], [10, 0, 0, "-", "modulargcd"], [45, 0, 0, "-", "monomials"], [45, 0, 0, "-", "numberfields"], [45, 0, 0, "-", "orderings"], [45, 0, 0, "-", "orthopolys"], [45, 0, 0, "-", "partfrac"], [10, 0, 0, "-", "polyerrors"], [45, 0, 0, "-", "polyfuncs"], [10, 0, 0, "-", "polyoptions"], [45, 0, 0, "-", "polyroots"], [45, 0, 0, "-", "polytools"], [45, 0, 0, "-", "rationaltools"], [10, 0, 0, "-", "rootisolation"], [45, 0, 0, "-", "rootoftools"], [45, 0, 0, "-", "specialpolys"], [10, 0, 0, "-", "sqfreetools"]], "diofant.polys.constructor": [[45, 1, 1, "", "construct_domain"]], "diofant.polys.euclidtools._GCD": [[10, 3, 1, "", "_zz_heu_gcd"]], "diofant.polys.factorization_alg_field": [[10, 1, 1, "", "_alpha_to_z"], [10, 1, 1, "", "_denominator"], [10, 1, 1, "", "_diophantine"], [10, 1, 1, "", "_diophantine_univariate"], [10, 1, 1, "", "_distinct_prime_divisors"], [10, 1, 1, "", "_div"], [10, 1, 1, "", "_extended_euclidean_algorithm"], [10, 1, 1, "", "_factor"], [10, 1, 1, "", "_hensel_lift"], [10, 1, 1, "", "_leading_coeffs"], [10, 1, 1, "", "_monic_associate"], [10, 1, 1, "", "_padic_lift"], [10, 1, 1, "", "_sqf_p"], [10, 1, 1, "", "_subs_ground"], [10, 1, 1, "", "_test_evaluation_points"], [10, 1, 1, "", "_test_prime"], [10, 1, 1, "", "_z_to_alpha"], [10, 1, 1, "", "efactor"]], "diofant.polys.fields": [[10, 2, 1, "", "FracElement"], [28, 2, 1, "", "FractionField"]], "diofant.polys.fields.FracElement": [[10, 3, 1, "", "compose"], [10, 3, 1, "", "diff"]], "diofant.polys.groebnertools": [[10, 1, 1, "", "buchberger"], [10, 1, 1, "", "cp_key"], [10, 1, 1, "", "critical_pair"], [10, 1, 1, "", "f5_reduce"], [10, 1, 1, "", "f5b"], [10, 1, 1, "", "groebner"], [10, 1, 1, "", "groebner_gcd"], [10, 1, 1, "", "groebner_lcm"], [10, 1, 1, "", "is_groebner"], [10, 1, 1, "", "is_minimal"], [10, 1, 1, "", "is_rewritable_or_comparable"], [10, 1, 1, "", "lbp_cmp"], [10, 1, 1, "", "lbp_key"], [10, 1, 1, "", "lbp_mul_term"], [10, 1, 1, "", "lbp_sub"], [10, 1, 1, "", "matrix_fglm"], [10, 1, 1, "", "red_groebner"], [10, 1, 1, "", "s_poly"], [10, 1, 1, "", "sig_cmp"], [10, 1, 1, "", "sig_key"], [10, 1, 1, "", "sig_mult"], [10, 1, 1, "", "spoly"]], "diofant.polys.modulargcd": [[10, 1, 1, "", "_chinese_remainder_reconstruction"], [10, 1, 1, "", "_euclidean_algorithm"], [10, 1, 1, "", "_evaluate_ground"], [10, 1, 1, "", "_func_field_modgcd_m"], [10, 1, 1, "", "_func_field_modgcd_p"], [10, 1, 1, "", "_gf_gcdex"], [10, 1, 1, "", "_interpolate"], [10, 1, 1, "", "_minpoly_from_dense"], [10, 1, 1, "", "_modgcd_p"], [10, 1, 1, "", "_primitive_in_x0"], [10, 1, 1, "", "_rational_function_reconstruction"], [10, 1, 1, "", "_rational_reconstruction_func_coeffs"], [10, 1, 1, "", "_rational_reconstruction_int_coeffs"], [10, 1, 1, "", "_to_ANP_poly"], [10, 1, 1, "", "_to_ZZ_poly"], [10, 1, 1, "", "_trunc"], [10, 1, 1, "", "func_field_modgcd"], [10, 1, 1, "", "modgcd"], [10, 1, 1, "", "trial_division"]], "diofant.polys.monomials": [[45, 2, 1, "", "Monomial"], [45, 1, 1, "", "itermonomials"]], "diofant.polys.monomials.Monomial": [[45, 3, 1, "", "as_expr"], [45, 3, 1, "", "divides"], [45, 3, 1, "", "gcd"], [45, 3, 1, "", "lcm"]], "diofant.polys.numberfields": [[45, 1, 1, "", "field_isomorphism"], [45, 1, 1, "", "minimal_polynomial"], [10, 1, 1, "", "minpoly_groebner"], [45, 1, 1, "", "primitive_element"]], "diofant.polys.orderings": [[45, 2, 1, "", "GradedLexOrder"], [45, 2, 1, "", "LexOrder"], [45, 2, 1, "", "ReversedGradedLexOrder"]], "diofant.polys.orthopolys": [[45, 1, 1, "", "chebyshevt_poly"], [45, 1, 1, "", "chebyshevu_poly"], [45, 1, 1, "", "gegenbauer_poly"], [45, 1, 1, "", "hermite_poly"], [45, 1, 1, "", "jacobi_poly"], [45, 1, 1, "", "laguerre_poly"], [45, 1, 1, "", "legendre_poly"], [45, 1, 1, "", "spherical_bessel_fn"]], "diofant.polys.partfrac": [[45, 1, 1, "", "apart"], [45, 1, 1, "", "apart_list"], [45, 1, 1, "", "assemble_partfrac_list"]], "diofant.polys.polyerrors": [[10, 7, 1, "", "BasePolynomialError"], [10, 7, 1, "", "CoercionFailedError"], [10, 7, 1, "", "ComputationFailedError"], [10, 7, 1, "", "DomainError"], [10, 7, 1, "", "EvaluationFailedError"], [10, 7, 1, "", "ExactQuotientFailedError"], [10, 7, 1, "", "ExtraneousFactorsError"], [10, 7, 1, "", "FlagError"], [10, 7, 1, "", "GeneratorsError"], [10, 7, 1, "", "GeneratorsNeededError"], [10, 7, 1, "", "HeuristicGCDFailedError"], [10, 7, 1, "", "HomomorphismFailedError"], [10, 7, 1, "", "IsomorphismFailedError"], [10, 7, 1, "", "ModularGCDFailedError"], [10, 7, 1, "", "MultivariatePolynomialError"], [10, 7, 1, "", "NotAlgebraicError"], [10, 7, 1, "", "NotInvertibleError"], [10, 7, 1, "", "NotReversibleError"], [10, 7, 1, "", "OperationNotSupportedError"], [10, 7, 1, "", "OptionError"], [10, 7, 1, "", "PolificationFailedError"], [10, 7, 1, "", "PolynomialDivisionFailedError"], [10, 7, 1, "", "PolynomialError"], [10, 7, 1, "", "RefinementFailedError"], [10, 7, 1, "", "UnificationFailedError"], [10, 7, 1, "", "UnivariatePolynomialError"], [10, 7, 1, "", "UnluckyLeadingCoefficientError"]], "diofant.polys.polyfuncs": [[45, 1, 1, "", "horner"], [45, 1, 1, "", "interpolate"], [45, 1, 1, "", "symmetrize"], [45, 1, 1, "", "viete"]], "diofant.polys.polyoptions": [[10, 2, 1, "", "Options"], [10, 2, 1, "", "Order"]], "diofant.polys.polyoptions.Options": [[10, 3, 1, "", "clone"]], "diofant.polys.polyroots": [[45, 1, 1, "", "roots"]], "diofant.polys.polytools": [[45, 2, 1, "", "GroebnerBasis"], [45, 1, 1, "", "LC"], [45, 1, 1, "", "LM"], [45, 1, 1, "", "LT"], [45, 2, 1, "", "Poly"], [45, 2, 1, "", "PurePoly"], [45, 1, 1, "", "cancel"], [45, 1, 1, "", "cofactors"], [45, 1, 1, "", "compose"], [45, 1, 1, "", "content"], [45, 1, 1, "", "count_roots"], [45, 1, 1, "", "decompose"], [45, 1, 1, "", "degree"], [45, 1, 1, "", "discriminant"], [45, 1, 1, "", "div"], [45, 1, 1, "", "exquo"], [45, 1, 1, "", "factor"], [45, 1, 1, "", "factor_list"], [45, 1, 1, "", "gcd"], [45, 1, 1, "", "gcdex"], [45, 1, 1, "", "groebner"], [45, 1, 1, "", "half_gcdex"], [45, 1, 1, "", "invert"], [45, 1, 1, "", "lcm"], [45, 1, 1, "", "monic"], [45, 1, 1, "", "nroots"], [45, 1, 1, "", "parallel_poly_from_expr"], [45, 1, 1, "", "primitive"], [45, 1, 1, "", "quo"], [45, 1, 1, "", "real_roots"], [45, 1, 1, "", "reduced"], [45, 1, 1, "", "rem"], [45, 1, 1, "", "resultant"], [45, 1, 1, "", "sqf"], [45, 1, 1, "", "sqf_list"], [45, 1, 1, "", "sqf_norm"], [45, 1, 1, "", "sqf_part"], [45, 1, 1, "", "subresultants"], [45, 1, 1, "", "terms_gcd"], [45, 1, 1, "", "trunc"]], "diofant.polys.polytools.GroebnerBasis": [[45, 3, 1, "", "contains"], [45, 5, 1, "", "dimension"], [45, 5, 1, "", "independent_sets"], [45, 3, 1, "", "reduce"], [45, 3, 1, "", "set_order"]], "diofant.polys.polytools.Poly": [[45, 3, 1, "", "EC"], [45, 3, 1, "", "EM"], [45, 3, 1, "", "ET"], [45, 3, 1, "", "LC"], [45, 3, 1, "", "LM"], [45, 3, 1, "", "LT"], [45, 3, 1, "", "TC"], [45, 3, 1, "", "all_coeffs"], [45, 3, 1, "", "all_roots"], [45, 5, 1, "", "args"], [45, 3, 1, "", "as_dict"], [45, 3, 1, "", "as_expr"], [45, 3, 1, "", "cancel"], [45, 3, 1, "", "clear_denoms"], [45, 3, 1, "", "coeff_monomial"], [45, 3, 1, "", "coeffs"], [45, 3, 1, "", "cofactors"], [45, 3, 1, "", "compose"], [45, 3, 1, "", "content"], [45, 3, 1, "", "count_roots"], [45, 3, 1, "", "decompose"], [45, 3, 1, "", "degree"], [45, 3, 1, "", "discriminant"], [45, 3, 1, "", "dispersionset"], [45, 3, 1, "", "div"], [45, 5, 1, "", "domain"], [45, 3, 1, "", "eject"], [45, 3, 1, "", "eval"], [45, 3, 1, "", "exclude"], [45, 3, 1, "", "exquo"], [45, 3, 1, "", "exquo_ground"], [45, 3, 1, "", "factor_list"], [45, 5, 1, "", "free_symbols"], [45, 5, 1, "", "free_symbols_in_domain"], [45, 3, 1, "", "from_dict"], [45, 3, 1, "", "from_expr"], [45, 3, 1, "", "from_list"], [45, 3, 1, "", "from_poly"], [45, 3, 1, "", "gcd"], [45, 3, 1, "", "gcdex"], [45, 5, 1, "", "gen"], [45, 3, 1, "", "get_modulus"], [45, 3, 1, "", "half_gcdex"], [45, 3, 1, "", "has_only_gens"], [45, 3, 1, "", "inject"], [45, 3, 1, "", "integrate"], [45, 3, 1, "", "invert"], [45, 5, 1, "", "is_cyclotomic"], [45, 5, 1, "", "is_ground"], [45, 5, 1, "", "is_homogeneous"], [45, 5, 1, "", "is_irreducible"], [45, 5, 1, "", "is_linear"], [45, 5, 1, "", "is_multivariate"], [45, 5, 1, "", "is_one"], [45, 5, 1, "", "is_quadratic"], [45, 5, 1, "", "is_squarefree"], [45, 5, 1, "", "is_term"], [45, 5, 1, "", "is_univariate"], [45, 5, 1, "", "is_zero"], [45, 3, 1, "", "lcm"], [45, 3, 1, "", "length"], [45, 3, 1, "", "monic"], [45, 3, 1, "", "monoms"], [45, 3, 1, "", "new"], [45, 3, 1, "", "nroots"], [45, 3, 1, "", "per"], [45, 3, 1, "", "primitive"], [45, 3, 1, "", "quo"], [45, 3, 1, "", "quo_ground"], [45, 3, 1, "", "rat_clear_denoms"], [45, 3, 1, "", "real_roots"], [45, 3, 1, "", "rem"], [45, 3, 1, "", "reorder"], [45, 3, 1, "", "replace"], [45, 3, 1, "", "resultant"], [45, 3, 1, "", "retract"], [45, 3, 1, "", "root"], [45, 3, 1, "", "set_domain"], [45, 3, 1, "", "set_modulus"], [45, 3, 1, "", "shift"], [45, 3, 1, "", "slice"], [45, 3, 1, "", "sqf_list"], [45, 3, 1, "", "sqf_norm"], [45, 3, 1, "", "sqf_part"], [45, 3, 1, "", "subresultants"], [45, 3, 1, "", "terms"], [45, 3, 1, "", "terms_gcd"], [45, 3, 1, "", "termwise"], [45, 3, 1, "", "to_exact"], [45, 3, 1, "", "to_field"], [45, 3, 1, "", "to_ring"], [45, 3, 1, "", "total_degree"], [45, 3, 1, "", "trunc"], [45, 3, 1, "", "unify"]], "diofant.polys.polytools.PurePoly": [[45, 5, 1, "", "free_symbols"]], "diofant.polys.rationaltools": [[45, 1, 1, "", "together"]], "diofant.polys.rings": [[10, 2, 1, "", "PolyElement"], [28, 2, 1, "", "PolynomialRing"], [10, 1, 1, "", "ring"]], "diofant.polys.rings.PolyElement": [[10, 3, 1, "", "__add__"], [10, 3, 1, "", "__eq__"], [10, 3, 1, "", "__getitem__"], [10, 3, 1, "", "__mul__"], [10, 3, 1, "", "__pow__"], [10, 3, 1, "", "__rmul__"], [10, 3, 1, "", "__rsub__"], [10, 3, 1, "", "__sub__"], [10, 4, 1, "", "__weakref__"], [10, 3, 1, "", "cancel"], [10, 3, 1, "", "compose"], [10, 3, 1, "", "content"], [10, 3, 1, "", "copy"], [10, 3, 1, "", "degree"], [10, 3, 1, "", "diff"], [10, 3, 1, "", "discriminant"], [10, 3, 1, "", "div"], [10, 3, 1, "", "gcdex"], [10, 3, 1, "", "integrate"], [10, 3, 1, "", "leading_expv"], [10, 3, 1, "", "leading_term"], [10, 3, 1, "", "monic"], [10, 3, 1, "", "prem"], [10, 3, 1, "", "primitive"], [10, 3, 1, "", "resultant"], [10, 3, 1, "", "subresultants"], [10, 3, 1, "", "tail_degree"], [10, 3, 1, "", "total_degree"]], "diofant.polys.rings.PolynomialRing": [[28, 3, 1, "", "drop"], [28, 3, 1, "", "eject"], [28, 5, 1, "", "field"], [28, 3, 1, "", "gcdex"], [28, 3, 1, "", "half_gcdex"], [28, 3, 1, "", "index"]], "diofant.polys.rootisolation": [[10, 2, 1, "", "ComplexInterval"], [10, 2, 1, "", "RealInterval"]], "diofant.polys.rootisolation.ComplexInterval": [[10, 3, 1, "", "as_tuple"], [10, 5, 1, "", "ax"], [10, 5, 1, "", "ay"], [10, 5, 1, "", "bx"], [10, 5, 1, "", "by"], [10, 5, 1, "", "center"], [10, 3, 1, "", "conjugate"], [10, 3, 1, "", "is_disjoint"], [10, 3, 1, "", "refine"]], "diofant.polys.rootisolation.RealInterval": [[10, 5, 1, "", "a"], [10, 3, 1, "", "as_tuple"], [10, 5, 1, "", "b"], [10, 5, 1, "", "center"], [10, 3, 1, "", "is_disjoint"], [10, 3, 1, "", "refine"]], "diofant.polys.rootoftools": [[45, 2, 1, "", "RootOf"], [45, 2, 1, "", "RootSum"]], "diofant.polys.rootoftools.RootOf": [[45, 3, 1, "", "all_roots"], [45, 3, 1, "", "eval_rational"], [45, 5, 1, "", "interval"], [45, 3, 1, "", "real_roots"], [45, 3, 1, "", "refine"]], "diofant.polys.rootoftools.RootSum": [[45, 3, 1, "", "new"]], "diofant.polys.specialpolys": [[45, 1, 1, "", "cyclotomic_poly"], [45, 1, 1, "", "interpolating_poly"], [45, 1, 1, "", "random_poly"], [45, 1, 1, "", "swinnerton_dyer_poly"], [45, 1, 1, "", "symmetric_poly"]], "diofant.polys.univar": [[10, 2, 1, "", "UnivarPolyElement"], [28, 2, 1, "", "UnivarPolynomialRing"]], "diofant.polys.univar.UnivarPolyElement": [[10, 3, 1, "", "decompose"], [10, 3, 1, "", "half_gcdex"], [10, 3, 1, "", "sturm"]], "diofant.polys.univar.UnivarPolynomialRing": [[28, 3, 1, "", "dispersionset"]], "diofant.printing": [[46, 0, 0, "-", "ccode"], [46, 0, 0, "-", "codeprinter"], [46, 0, 0, "-", "conventions"], [46, 0, 0, "-", "fcode"], [46, 0, 0, "-", "lambdarepr"], [46, 0, 0, "-", "latex"], [46, 0, 0, "-", "mathematica"], [46, 0, 0, "-", "mathml"], [46, 0, 0, "-", "precedence"], [46, 0, 0, "-", "printer"], [46, 0, 0, "-", "python"], [46, 0, 0, "-", "repr"], [46, 0, 0, "-", "str"]], "diofant.printing.ccode": [[46, 2, 1, "", "CCodePrinter"], [46, 1, 1, "", "ccode"]], "diofant.printing.ccode.CCodePrinter": [[46, 3, 1, "", "indent_code"], [46, 4, 1, "", "printmethod"]], "diofant.printing.codeprinter": [[46, 7, 1, "", "AssignmentError"], [46, 2, 1, "", "CodePrinter"]], "diofant.printing.codeprinter.CodePrinter": [[46, 4, 1, "", "printmethod"]], "diofant.printing.conventions": [[46, 1, 1, "", "split_super_sub"]], "diofant.printing.dot": [[46, 1, 1, "", "dotprint"]], "diofant.printing.fcode": [[46, 2, 1, "", "FCodePrinter"], [46, 1, 1, "", "fcode"]], "diofant.printing.fcode.FCodePrinter": [[46, 3, 1, "", "indent_code"], [46, 4, 1, "", "printmethod"]], "diofant.printing.lambdarepr": [[46, 2, 1, "", "LambdaPrinter"], [46, 1, 1, "", "lambdarepr"]], "diofant.printing.lambdarepr.LambdaPrinter": [[46, 4, 1, "", "printmethod"]], "diofant.printing.latex": [[46, 2, 1, "", "LatexPrinter"], [46, 6, 1, "", "accepted_latex_functions"], [46, 1, 1, "", "latex"]], "diofant.printing.latex.LatexPrinter": [[46, 4, 1, "", "printmethod"]], "diofant.printing.mathematica": [[46, 2, 1, "", "MCodePrinter"], [46, 1, 1, "", "mathematica_code"]], "diofant.printing.mathematica.MCodePrinter": [[46, 3, 1, "", "doprint"], [46, 4, 1, "", "printmethod"]], "diofant.printing.mathml": [[46, 2, 1, "", "MathMLPrinter"], [46, 1, 1, "", "mathml"]], "diofant.printing.mathml.MathMLPrinter": [[46, 3, 1, "", "doprint"], [46, 3, 1, "", "mathml_tag"], [46, 4, 1, "", "printmethod"]], "diofant.printing.pretty": [[46, 0, 0, "-", "pretty"], [46, 0, 0, "-", "pretty_symbology"], [46, 0, 0, "-", "stringpict"]], "diofant.printing.pretty.pretty": [[46, 2, 1, "", "PrettyPrinter"], [46, 1, 1, "", "pprint"], [46, 1, 1, "", "pretty"], [46, 1, 1, "", "pretty_print"]], "diofant.printing.pretty.pretty_symbology": [[46, 1, 1, "", "G"], [46, 1, 1, "", "U"], [46, 1, 1, "", "annotated"], [46, 1, 1, "", "g"], [46, 6, 1, "", "greek_letters"], [46, 1, 1, "", "hobj"], [46, 1, 1, "", "pretty_atom"], [46, 1, 1, "", "pretty_symbol"], [46, 1, 1, "", "pretty_use_unicode"], [46, 1, 1, "", "vobj"], [46, 1, 1, "", "xobj"], [46, 1, 1, "", "xsym"]], "diofant.printing.pretty.stringpict": [[46, 2, 1, "", "prettyForm"], [46, 2, 1, "", "stringPict"]], "diofant.printing.pretty.stringpict.stringPict": [[46, 3, 1, "", "above"], [46, 3, 1, "", "below"], [46, 3, 1, "", "height"], [46, 3, 1, "", "left"], [46, 3, 1, "", "next"], [46, 3, 1, "", "parens"], [46, 3, 1, "", "render"], [46, 3, 1, "", "right"], [46, 3, 1, "", "stack"], [46, 3, 1, "", "terminal_width"], [46, 3, 1, "", "width"]], "diofant.printing.printer": [[46, 2, 1, "", "Printer"]], "diofant.printing.printer.Printer": [[46, 3, 1, "", "_print"], [46, 3, 1, "", "doprint"], [46, 4, 1, "", "printmethod"], [46, 3, 1, "", "set_global_settings"]], "diofant.printing.repr": [[46, 2, 1, "", "ReprPrinter"], [46, 1, 1, "", "srepr"]], "diofant.printing.repr.ReprPrinter": [[46, 3, 1, "", "emptyPrinter"], [46, 4, 1, "", "printmethod"], [46, 3, 1, "", "reprify"]], "diofant.printing.str": [[46, 2, 1, "", "StrPrinter"], [46, 1, 1, "", "sstr"], [46, 1, 1, "", "sstrrepr"]], "diofant.printing.str.StrPrinter": [[46, 4, 1, "", "printmethod"]], "diofant.sets": [[47, 0, 0, "-", "fancysets"], [47, 0, 0, "-", "sets"]], "diofant.sets.fancysets": [[47, 2, 1, "", "ExtendedReals"], [47, 2, 1, "", "ImageSet"], [47, 2, 1, "", "Integers"], [47, 2, 1, "", "Naturals"], [47, 2, 1, "", "Naturals0"], [47, 2, 1, "", "Range"], [47, 2, 1, "", "Rationals"], [47, 2, 1, "", "Reals"]], "diofant.sets.sets": [[47, 2, 1, "", "Complement"], [47, 2, 1, "", "EmptySet"], [47, 2, 1, "", "FiniteSet"], [47, 2, 1, "", "Intersection"], [47, 2, 1, "", "Interval"], [47, 2, 1, "", "ProductSet"], [47, 2, 1, "", "Set"], [47, 2, 1, "", "Union"], [47, 2, 1, "", "UniversalSet"], [47, 1, 1, "", "imageset"]], "diofant.sets.sets.Complement": [[47, 3, 1, "", "reduce"]], "diofant.sets.sets.FiniteSet": [[47, 3, 1, "", "as_relational"]], "diofant.sets.sets.Intersection": [[47, 3, 1, "", "as_relational"], [47, 3, 1, "", "reduce"]], "diofant.sets.sets.Interval": [[47, 3, 1, "", "Lopen"], [47, 3, 1, "", "Ropen"], [47, 3, 1, "", "as_relational"], [47, 5, 1, "", "end"], [47, 5, 1, "", "inf"], [47, 5, 1, "", "is_left_unbounded"], [47, 5, 1, "", "is_right_unbounded"], [47, 5, 1, "", "left"], [47, 5, 1, "", "left_open"], [47, 3, 1, "", "open"], [47, 5, 1, "", "right"], [47, 5, 1, "", "right_open"], [47, 5, 1, "", "start"], [47, 5, 1, "", "sup"]], "diofant.sets.sets.Set": [[47, 5, 1, "", "boundary"], [47, 5, 1, "", "closure"], [47, 3, 1, "", "complement"], [47, 3, 1, "", "contains"], [47, 5, 1, "", "inf"], [47, 5, 1, "", "interior"], [47, 3, 1, "", "intersection"], [47, 5, 1, "", "is_closed"], [47, 3, 1, "", "is_disjoint"], [47, 5, 1, "", "is_open"], [47, 3, 1, "", "is_proper_subset"], [47, 3, 1, "", "is_proper_superset"], [47, 3, 1, "", "is_subset"], [47, 3, 1, "", "is_superset"], [47, 3, 1, "", "isdisjoint"], [47, 3, 1, "", "issubset"], [47, 3, 1, "", "issuperset"], [47, 5, 1, "", "measure"], [47, 3, 1, "", "powerset"], [47, 5, 1, "", "sup"], [47, 3, 1, "", "symmetric_difference"], [47, 3, 1, "", "union"]], "diofant.sets.sets.Union": [[47, 3, 1, "", "as_relational"], [47, 3, 1, "", "reduce"]], "diofant.simplify": [[48, 0, 0, "-", "combsimp"], [48, 0, 0, "-", "cse_main"], [48, 0, 0, "-", "epathtools"], [48, 0, 0, "-", "fu"], [48, 0, 0, "-", "hyperexpand"], [8, 0, 0, "-", "hyperexpand_doc"], [48, 0, 0, "-", "powsimp"], [48, 0, 0, "-", "radsimp"], [48, 0, 0, "-", "ratsimp"], [48, 0, 0, "-", "sqrtdenest"], [48, 0, 0, "-", "traversaltools"], [48, 0, 0, "-", "trigsimp"]], "diofant.simplify.combsimp": [[48, 1, 1, "", "combsimp"]], "diofant.simplify.cse_main": [[48, 1, 1, "", "cse"], [48, 1, 1, "", "opt_cse"], [48, 1, 1, "", "tree_cse"]], "diofant.simplify.epathtools": [[48, 2, 1, "", "EPath"], [48, 1, 1, "", "epath"]], "diofant.simplify.epathtools.EPath": [[48, 3, 1, "", "apply"], [48, 3, 1, "", "select"]], "diofant.simplify.fu": [[48, 1, 1, "", "fu"]], "diofant.simplify.hyperexpand": [[8, 1, 1, "", "add_formulae"], [48, 1, 1, "", "hyperexpand"]], "diofant.simplify.powsimp": [[48, 1, 1, "", "powdenest"], [48, 1, 1, "", "powsimp"]], "diofant.simplify.radsimp": [[48, 1, 1, "", "collect"], [48, 1, 1, "", "collect_const"], [48, 1, 1, "", "collect_sqrt"], [48, 1, 1, "", "fraction"], [48, 1, 1, "", "rad_rationalize"], [48, 1, 1, "", "radsimp"], [48, 1, 1, "", "rcollect"]], "diofant.simplify.ratsimp": [[48, 1, 1, "", "ratsimp"]], "diofant.simplify.simplify": [[48, 1, 1, "", "besselsimp"], [48, 1, 1, "", "hypersimilar"], [48, 1, 1, "", "hypersimp"], [48, 1, 1, "", "logcombine"], [48, 1, 1, "", "nsimplify"], [48, 1, 1, "", "nthroot"], [48, 1, 1, "", "posify"], [48, 1, 1, "", "separatevars"], [48, 1, 1, "", "simplify"]], "diofant.simplify.sqrtdenest": [[48, 1, 1, "", "sqrtdenest"], [48, 1, 1, "", "unrad"]], "diofant.simplify.traversaltools": [[48, 1, 1, "", "use"]], "diofant.simplify.trigsimp": [[48, 1, 1, "", "futrig"], [48, 1, 1, "", "trigsimp"]], "diofant.solvers": [[56, 0, 0, "-", "deutils"], [49, 0, 0, "-", "diophantine"], [51, 0, 0, "-", "inequalities"], [52, 0, 0, "-", "ode"], [53, 0, 0, "-", "pde"], [55, 0, 0, "-", "polysys"], [54, 0, 0, "-", "recurr"], [55, 0, 0, "-", "solvers"], [56, 0, 0, "-", "utils"]], "diofant.solvers.deutils": [[56, 1, 1, "", "ode_order"]], "diofant.solvers.diophantine": [[49, 1, 1, "", "PQa"], [49, 1, 1, "", "base_solution_linear"], [49, 1, 1, "", "classify_diop"], [49, 1, 1, "", "cornacchia"], [49, 1, 1, "", "descent"], [49, 1, 1, "", "diop_DN"], [49, 1, 1, "", "diop_bf_DN"], [49, 1, 1, "", "diop_general_pythagorean"], [49, 1, 1, "", "diop_general_sum_of_even_powers"], [49, 1, 1, "", "diop_general_sum_of_squares"], [49, 1, 1, "", "diop_linear"], [49, 1, 1, "", "diop_quadratic"], [49, 1, 1, "", "diop_solve"], [49, 1, 1, "", "diop_ternary_quadratic"], [49, 1, 1, "", "diop_ternary_quadratic_normal"], [49, 1, 1, "", "diophantine"], [49, 1, 1, "", "divisible"], [49, 1, 1, "", "equivalent"], [49, 1, 1, "", "find_DN"], [49, 1, 1, "", "gaussian_reduce"], [49, 1, 1, "", "holzer"], [49, 1, 1, "", "ldescent"], [49, 1, 1, "", "merge_solution"], [49, 1, 1, "", "parametrize_ternary_quadratic"], [49, 1, 1, "", "partition"], [49, 1, 1, "", "power_representation"], [49, 1, 1, "", "prime_as_sum_of_two_squares"], [49, 1, 1, "", "reconstruct"], [49, 1, 1, "", "sqf_normal"], [49, 1, 1, "", "square_factor"], [49, 1, 1, "", "sum_of_four_squares"], [49, 1, 1, "", "sum_of_powers"], [49, 1, 1, "", "sum_of_squares"], [49, 1, 1, "", "sum_of_three_squares"], [49, 1, 1, "", "transformation_to_DN"], [49, 1, 1, "", "transformation_to_normal"]], "diofant.solvers.inequalities": [[51, 1, 1, "", "reduce_inequalities"]], "diofant.solvers.ode": [[52, 1, 1, "", "_handle_Integral"], [52, 1, 1, "", "_linear_2eq_order1_type3"], [52, 1, 1, "", "_linear_2eq_order1_type4"], [52, 1, 1, "", "_linear_2eq_order1_type5"], [52, 1, 1, "", "_linear_2eq_order1_type6"], [52, 1, 1, "", "_linear_2eq_order1_type7"], [52, 1, 1, "", "_linear_2eq_order2_type1"], [52, 1, 1, "", "_linear_2eq_order2_type11"], [52, 1, 1, "", "_linear_2eq_order2_type2"], [52, 1, 1, "", "_linear_2eq_order2_type3"], [52, 1, 1, "", "_linear_2eq_order2_type5"], [52, 1, 1, "", "_linear_2eq_order2_type6"], [52, 1, 1, "", "_linear_2eq_order2_type7"], [52, 1, 1, "", "_linear_2eq_order2_type8"], [52, 1, 1, "", "_linear_2eq_order2_type9"], [52, 1, 1, "", "_linear_3eq_order1_type4"], [52, 1, 1, "", "_nonlinear_2eq_order1_type1"], [52, 1, 1, "", "_nonlinear_2eq_order1_type2"], [52, 1, 1, "", "_nonlinear_2eq_order1_type3"], [52, 1, 1, "", "_nonlinear_2eq_order1_type4"], [52, 1, 1, "", "_nonlinear_2eq_order1_type5"], [52, 1, 1, "", "_nonlinear_3eq_order1_type1"], [52, 1, 1, "", "_nonlinear_3eq_order1_type2"], [52, 1, 1, "", "_undetermined_coefficients_match"], [52, 6, 1, "", "allhints"], [52, 1, 1, "", "checkinfsol"], [52, 1, 1, "", "checkodesol"], [52, 1, 1, "", "classify_ode"], [52, 1, 1, "", "constant_renumber"], [52, 1, 1, "", "constantsimp"], [52, 1, 1, "", "dsolve"], [52, 1, 1, "", "homogeneous_order"], [52, 1, 1, "", "infinitesimals"], [52, 1, 1, "", "lie_heuristic_abaco1_product"], [52, 1, 1, "", "lie_heuristic_abaco1_simple"], [52, 1, 1, "", "lie_heuristic_abaco2_similar"], [52, 1, 1, "", "lie_heuristic_abaco2_unique_unknown"], [52, 1, 1, "", "lie_heuristic_bivariate"], [52, 1, 1, "", "lie_heuristic_chi"], [52, 1, 1, "", "lie_heuristic_function_sum"], [52, 1, 1, "", "lie_heuristic_linear"], [52, 1, 1, "", "ode_1st_exact"], [52, 1, 1, "", "ode_1st_homogeneous_coeff_best"], [52, 1, 1, "", "ode_1st_homogeneous_coeff_subs_dep_div_indep"], [52, 1, 1, "", "ode_1st_homogeneous_coeff_subs_indep_div_dep"], [52, 1, 1, "", "ode_1st_linear"], [52, 1, 1, "", "ode_1st_power_series"], [52, 1, 1, "", "ode_2nd_power_series_ordinary"], [52, 1, 1, "", "ode_2nd_power_series_regular"], [52, 1, 1, "", "ode_Bernoulli"], [52, 1, 1, "", "ode_Liouville"], [52, 1, 1, "", "ode_Riccati_special_minus2"], [52, 1, 1, "", "ode_almost_linear"], [52, 1, 1, "", "ode_lie_group"], [52, 1, 1, "", "ode_linear_coefficients"], [52, 1, 1, "", "ode_nth_linear_constant_coeff_homogeneous"], [52, 1, 1, "", "ode_nth_linear_constant_coeff_undetermined_coefficients"], [52, 1, 1, "", "ode_nth_linear_constant_coeff_variation_of_parameters"], [52, 1, 1, "", "ode_separable"], [52, 1, 1, "", "ode_separable_reduced"], [52, 1, 1, "", "ode_sol_simplicity"], [52, 1, 1, "", "odesimp"], [52, 1, 1, "", "sysode_linear_neq_order1"]], "diofant.solvers.pde": [[53, 1, 1, "", "checkpdesol"], [53, 1, 1, "", "classify_pde"], [53, 1, 1, "", "pde_1st_linear_constant_coeff"], [53, 1, 1, "", "pde_1st_linear_constant_coeff_homogeneous"], [53, 1, 1, "", "pde_1st_linear_variable_coeff"], [53, 1, 1, "", "pde_separate"], [53, 1, 1, "", "pde_separate_add"], [53, 1, 1, "", "pde_separate_mul"], [53, 1, 1, "", "pdsolve"]], "diofant.solvers.polysys": [[55, 1, 1, "", "solve_linear_system"], [55, 1, 1, "", "solve_poly_system"], [55, 1, 1, "", "solve_surd_system"]], "diofant.solvers.recurr": [[54, 1, 1, "", "rsolve"], [54, 1, 1, "", "rsolve_hyper"], [54, 1, 1, "", "rsolve_poly"], [54, 1, 1, "", "rsolve_ratio"]], "diofant.solvers.solvers": [[55, 1, 1, "", "minsolve_linear_system"], [55, 1, 1, "", "solve"], [55, 1, 1, "", "solve_linear"]], "diofant.solvers.utils": [[56, 1, 1, "", "checksol"]], "diofant.tensor": [[57, 0, 0, "-", "array"], [59, 0, 0, "-", "index_methods"], [60, 0, 0, "-", "indexed"], [61, 0, 0, "-", "tensor"]], "diofant.tensor.array": [[57, 2, 1, "", "Array"], [57, 2, 1, "", "ImmutableDenseNDimArray"], [57, 2, 1, "", "ImmutableSparseNDimArray"], [57, 2, 1, "", "MutableDenseNDimArray"], [57, 2, 1, "", "MutableSparseNDimArray"], [57, 1, 1, "", "derive_by_array"], [57, 1, 1, "", "permutedims"], [57, 1, 1, "", "tensorcontraction"], [57, 1, 1, "", "tensorproduct"]], "diofant.tensor.index_methods": [[59, 7, 1, "", "IndexConformanceExceptionError"], [59, 1, 1, "", "get_contraction_structure"], [59, 1, 1, "", "get_indices"]], "diofant.tensor.indexed": [[60, 2, 1, "", "Idx"], [60, 7, 1, "", "IndexExceptionError"], [60, 2, 1, "", "Indexed"], [60, 2, 1, "", "IndexedBase"]], "diofant.tensor.indexed.Idx": [[60, 5, 1, "", "label"], [60, 5, 1, "", "lower"], [60, 5, 1, "", "upper"]], "diofant.tensor.indexed.Indexed": [[60, 5, 1, "", "base"], [60, 5, 1, "", "indices"], [60, 5, 1, "", "ranges"], [60, 5, 1, "", "rank"], [60, 5, 1, "", "shape"]], "diofant.tensor.indexed.IndexedBase": [[60, 5, 1, "", "args"], [60, 5, 1, "", "label"], [60, 5, 1, "", "shape"]], "diofant.tensor.tensor": [[61, 2, 1, "", "TensAdd"], [61, 2, 1, "", "TensExpr"], [61, 2, 1, "", "TensMul"], [61, 2, 1, "", "TensorHead"], [61, 2, 1, "", "TensorIndex"], [61, 2, 1, "", "TensorIndexType"], [61, 2, 1, "", "TensorSymmetry"], [61, 2, 1, "", "TensorType"], [61, 2, 1, "", "_TensorManager"], [61, 1, 1, "", "canon_bp"], [61, 1, 1, "", "riemann_cyclic"], [61, 1, 1, "", "riemann_cyclic_replace"], [61, 1, 1, "", "tensor_indices"], [61, 1, 1, "", "tensor_mul"], [61, 1, 1, "", "tensorsymmetry"]], "diofant.tensor.tensor.TensAdd": [[61, 3, 1, "", "canon_bp"], [61, 3, 1, "", "contract_metric"], [61, 3, 1, "", "from_TIDS_list"], [61, 3, 1, "", "fun_eval"], [61, 3, 1, "", "substitute_indices"]], "diofant.tensor.tensor.TensExpr": [[61, 3, 1, "", "get_matrix"]], "diofant.tensor.tensor.TensMul": [[61, 3, 1, "", "canon_bp"], [61, 3, 1, "", "contract_metric"], [61, 3, 1, "", "fun_eval"], [61, 3, 1, "", "get_indices"], [61, 3, 1, "", "perm2tensor"], [61, 3, 1, "", "sorted_components"], [61, 3, 1, "", "split"]], "diofant.tensor.tensor.TensorHead": [[61, 3, 1, "", "commutes_with"]], "diofant.tensor.tensor._TensorManager": [[61, 3, 1, "", "clear"], [61, 3, 1, "", "comm_i2symbol"], [61, 3, 1, "", "comm_symbols2i"], [61, 3, 1, "", "get_comm"], [61, 3, 1, "", "set_comm"], [61, 3, 1, "", "set_comms"]], "diofant.utilities": [[62, 0, 0, "-", "autowrap"], [63, 0, 0, "-", "codegen"], [64, 0, 0, "-", "decorator"], [65, 0, 0, "-", "enumerative"], [67, 0, 0, "-", "iterables"], [68, 0, 0, "-", "lambdify"], [69, 0, 0, "-", "memoization"], [70, 0, 0, "-", "misc"], [71, 0, 0, "-", "randtest"]], "diofant.utilities.autowrap": [[62, 7, 1, "", "CodeWrapError"], [62, 2, 1, "", "CodeWrapper"], [62, 2, 1, "", "CythonCodeWrapper"], [62, 2, 1, "", "DummyWrapper"], [62, 2, 1, "", "F2PyCodeWrapper"], [62, 2, 1, "", "UfuncifyCodeWrapper"], [62, 1, 1, "", "autowrap"], [62, 1, 1, "", "binary_function"], [62, 1, 1, "", "ufuncify"]], "diofant.utilities.autowrap.CythonCodeWrapper": [[62, 3, 1, "", "dump_pyx"]], "diofant.utilities.autowrap.UfuncifyCodeWrapper": [[62, 3, 1, "", "dump_c"]], "diofant.utilities.codegen": [[63, 2, 1, "", "Argument"], [63, 2, 1, "", "CCodeGen"], [63, 2, 1, "", "CodeGen"], [63, 2, 1, "", "DataType"], [63, 2, 1, "", "FCodeGen"], [63, 2, 1, "", "InputArgument"], [63, 2, 1, "", "OctaveCodeGen"], [63, 2, 1, "", "OutputArgument"], [63, 2, 1, "", "Result"], [63, 2, 1, "", "Routine"], [63, 1, 1, "", "codegen"], [63, 1, 1, "", "get_default_datatype"], [63, 1, 1, "", "make_routine"]], "diofant.utilities.codegen.CCodeGen": [[63, 3, 1, "", "dump_c"], [63, 3, 1, "", "dump_h"], [63, 3, 1, "", "get_prototype"]], "diofant.utilities.codegen.CodeGen": [[63, 3, 1, "", "dump_code"], [63, 3, 1, "", "routine"], [63, 3, 1, "", "write"]], "diofant.utilities.codegen.FCodeGen": [[63, 3, 1, "", "dump_f95"], [63, 3, 1, "", "dump_h"], [63, 3, 1, "", "get_interface"]], "diofant.utilities.codegen.OctaveCodeGen": [[63, 3, 1, "", "dump_m"], [63, 3, 1, "", "routine"]], "diofant.utilities.codegen.Routine": [[63, 5, 1, "", "result_variables"], [63, 5, 1, "", "variables"]], "diofant.utilities.decorator": [[64, 1, 1, "", "conserve_mpmath_dps"], [64, 1, 1, "", "doctest_depends_on"], [64, 2, 1, "", "no_attrs_in_subclass"]], "diofant.utilities.enumerative": [[65, 2, 1, "", "MultisetPartitionTraverser"], [65, 1, 1, "", "factoring_visitor"], [65, 1, 1, "", "list_visitor"], [65, 1, 1, "", "multiset_partitions_taocp"]], "diofant.utilities.enumerative.MultisetPartitionTraverser": [[65, 3, 1, "", "count_partitions"], [65, 3, 1, "", "enum_all"], [65, 3, 1, "", "enum_large"], [65, 3, 1, "", "enum_range"], [65, 3, 1, "", "enum_small"]], "diofant.utilities.iterables": [[67, 1, 1, "", "cantor_product"], [67, 1, 1, "", "common_prefix"], [67, 1, 1, "", "common_suffix"], [67, 1, 1, "", "default_sort_key"], [67, 1, 1, "", "filter_symbols"], [67, 1, 1, "", "flatten"], [67, 1, 1, "", "group"], [67, 1, 1, "", "has_dups"], [67, 1, 1, "", "has_variety"], [67, 1, 1, "", "minlex"], [67, 1, 1, "", "multiset"], [67, 1, 1, "", "multiset_combinations"], [67, 1, 1, "", "multiset_partitions"], [67, 1, 1, "", "multiset_permutations"], [67, 1, 1, "", "numbered_symbols"], [67, 1, 1, "", "ordered"], [67, 1, 1, "", "ordered_partitions"], [67, 1, 1, "", "partitions"], [67, 1, 1, "", "permute_signs"], [67, 1, 1, "", "postorder_traversal"], [67, 1, 1, "", "rotate_left"], [67, 1, 1, "", "rotate_right"], [67, 1, 1, "", "runs"], [67, 1, 1, "", "sift"], [67, 1, 1, "", "signed_permutations"], [67, 1, 1, "", "subsets"], [67, 1, 1, "", "topological_sort"], [67, 1, 1, "", "unflatten"], [67, 1, 1, "", "uniq"]], "diofant.utilities.lambdify": [[68, 1, 1, "", "implemented_function"], [68, 1, 1, "", "lambdastr"], [68, 1, 1, "", "lambdify"]], "diofant.utilities.memoization": [[69, 1, 1, "", "recurrence_memo"]], "diofant.utilities.misc": [[70, 1, 1, "", "filldedent"]], "diofant.utilities.randtest": [[71, 1, 1, "", "random_complex_number"], [71, 1, 1, "", "verify_derivative_numerically"], [71, 1, 1, "", "verify_numerically"]], "python--m-diofant": [[1, 8, 1, "cmdoption-python-m-diofant-a", "--auto-symbols"], [1, 8, 1, "cmdoption-python-m-diofant-h", "--help"], [1, 8, 1, "cmdoption-python-m-diofant-no-ipython", "--no-ipython"], [1, 8, 1, "cmdoption-python-m-diofant-no-wrap-division", "--no-wrap-division"], [1, 8, 1, "cmdoption-python-m-diofant-a", "-a"], [1, 8, 1, "cmdoption-python-m-diofant-h", "-h"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception", "8": "std:cmdoption"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"], "8": ["std", "cmdoption", "program option"]}, "titleterms": {"about": 0, "licens": 0, "command": 1, "line": 1, "usag": 1, "python": 1, "m": 1, "diofant": [1, 3, 4, 30, 73, 74, 75, 76, 77, 109, 110], "develop": [2, 73, 74, 75, 76, 77, 109, 110], "report": 2, "issu": [2, 73, 74, 75, 76, 77, 109, 110], "contribut": 2, "code": [2, 12, 46], "rosetta": 2, "stone": 2, "version": 2, "releas": [2, 72, 111], "procedur": 2, "": 3, "document": 3, "instal": 4, "from": 4, "sourc": 4, "run": 4, "feedback": 4, "numer": [5, 34, 113], "evalu": [5, 27], "float": [5, 27], "point": 5, "number": [5, 6, 10, 27, 43, 45, 115], "accuraci": 5, "error": [5, 32], "handl": 5, "sum": [5, 114], "integr": [5, 6, 32, 34, 114], "simplif": [5, 36, 48, 122], "ufuncifi": 5, "comput": 6, "us": [6, 48], "meijer": [6, 8], "g": [6, 8], "function": [6, 8, 25, 27, 30, 31, 32, 36, 41, 44, 45, 46, 48, 49, 52, 53, 57, 115, 122], "overview": 6, "polar": 6, "branch": 6, "repres": 6, "argand": 6, "plane": 6, "tabl": [6, 8], "lookup": 6, "invers": [6, 30], "mellin": 6, "transform": [6, 34, 44], "appli": [6, 8], "theorem": 6, "The": [6, 7, 8], "condit": 6, "converg": 6, "1": [6, 79, 95, 103], "2": [6, 86, 96, 104], "laplac": 6, "how": 6, "when": 6, "thi": 6, "i": 6, "valid": 6, "exist": 6, "implement": [6, 8, 28, 46, 62, 63], "formula": [6, 8], "gruntz": 7, "algorithm": [7, 8, 10, 45], "detail": [8, 62, 63], "hypergeometr": [8, 25, 32, 48], "expans": [8, 48, 114], "notat": 8, "increment": 8, "decrement": 8, "indic": 8, "reduct": 8, "order": [8, 45], "move": 8, "around": 8, "paramet": 8, "space": 8, "oper": [8, 41, 119], "loos": 8, "end": 8, "finit": 8, "confluenc": 8, "extend": 8, "an": 8, "exampl": [8, 34], "intern": [9, 10, 34, 49], "polynomi": [10, 32, 45, 55, 120], "manipul": [10, 41, 45], "modul": [10, 49, 52, 53, 62], "spars": [10, 42], "distribut": 10, "factor": [10, 120], "classic": 10, "remaind": 10, "sequenc": [10, 20], "simplifi": [10, 48], "subresult": 10, "gr\u00f6bner": [10, 120], "basi": 10, "algebra": [10, 41, 45, 55, 119, 123], "field": [10, 45], "over": 10, "modular": 10, "gcd": [10, 120], "heurist": [10, 52], "further": 10, "tool": [10, 48], "undocu": 10, "calculu": [11, 114], "grai": 12, "group": [13, 15, 17], "constructor": [13, 45], "combinator": 14, "content": [14, 31, 40, 50, 58, 66, 116], "name": [15, 115], "partit": [16, 49, 67], "permut": [17, 18], "gener": 18, "polyhedron": 19, "prufer": 20, "subset": 21, "tensor": [22, 32, 58, 61], "canonic": 22, "test": [23, 36, 71], "util": [23, 24, 41, 56, 66], "concret": [25, 28], "mathemat": [25, 31], "term": 25, "class": [25, 37, 39, 41, 42, 46, 48, 57], "refer": [25, 33, 34, 37, 38, 39, 41, 42, 44, 49, 62, 63], "config": 26, "core": [27, 38], "sympifi": 27, "assumpt": [27, 113], "cach": 27, "cacheit": 27, "basic": [27, 41, 45, 113], "singleton": [27, 47], "expr": 27, "atomicexpr": 27, "symbol": [27, 45], "wild": 27, "dummi": 27, "var": 27, "ration": [27, 45, 122], "integ": [27, 30], "numbersymbol": 27, "mod_invers": 27, "integer_digit": 27, "zero": 27, "One": 27, "negativeon": 27, "half": 27, "nan": 27, "infin": 27, "negativeinfin": 27, "complexinfin": 27, "exp1": 27, "imaginaryunit": 27, "pi": 27, "eulergamma": 27, "catalan": [27, 29], "goldenratio": 27, "power": [27, 48, 122], "pow": 27, "integer_nthroot": 27, "mul": 27, "add": 27, "mod": 27, "relat": [27, 32], "rel": 27, "eq": 27, "ne": 27, "lt": 27, "le": 27, "gt": 27, "ge": 27, "equal": [27, 115], "greaterthan": 27, "lessthan": 27, "unequ": 27, "strictgreaterthan": 27, "strictlessthan": 27, "multidimension": 27, "vector": 27, "lambda": 27, "wildfunct": 27, "deriv": [27, 57, 114], "diff": 27, "functionclass": 27, "sub": 27, "expand": 27, "poleerror": 27, "count_op": 27, "expand_mul": 27, "expand_log": 27, "expand_func": 27, "expand_trig": 27, "expand_complex": 27, "expand_multinomi": 27, "expand_power_exp": 27, "expand_power_bas": 27, "nfloat": 27, "evalf": 27, "precisionexhaust": 27, "n": [27, 57], "contain": [27, 56], "tupl": [27, 45], "dict": 27, "compat": [27, 73, 74, 75, 76, 77, 102, 104, 105, 106, 107, 108, 109, 110], "exprtool": 27, "gcd_term": 27, "factor_term": 27, "domain": [28, 45], "abstract": 28, "element": 28, "combinatori": [29, 48], "bell": 29, "bernoulli": [29, 52], "binomi": 29, "euler": 29, "factori": 29, "subfactori": 29, "factorial2": 29, "doubl": 29, "fallingfactori": 29, "fibonacci": 29, "harmon": [29, 32], "luca": 29, "risingfactori": 29, "stirl": 29, "elementari": [30, 47], "complex": 30, "re": 30, "im": 30, "sign": 30, "ab": 30, "adjoint": 30, "arg": 30, "conjug": 30, "polar_lift": 30, "periodic_argu": 30, "principal_branch": 30, "transpos": 30, "trigonometr": [30, 32, 48, 122], "sin": 30, "co": 30, "tan": 30, "cot": 30, "sec": 30, "csc": 30, "asin": 30, "aco": 30, "asec": 30, "atan": 30, "acot": 30, "acsc": 30, "atan2": 30, "hyperbol": 30, "hyperbolicfunct": 30, "sinh": 30, "cosh": 30, "tanh": 30, "coth": 30, "sech": 30, "csch": 30, "asinh": 30, "acosh": 30, "atanh": 30, "acoth": 30, "ceil": 30, "floor": 30, "roundfunct": 30, "exponenti": [30, 32], "exp": 30, "exp_polar": 30, "lambertw": 30, "log": 30, "piecewis": 30, "exprcondpair": 30, "miscellan": [30, 70], "identityfunct": 30, "min": 30, "max": 30, "root": [30, 45, 48], "real_root": 30, "sqrt": 30, "special": [32, 45, 47, 119, 122], "diracdelta": 32, "heavisid": 32, "gamma": 32, "beta": 32, "fresnel": 32, "logarithm": [32, 122], "bessel": 32, "type": 32, "airi": 32, "b": 32, "spline": 32, "riemann": 32, "zeta": 32, "ellipt": 32, "orthogon": [32, 45], "jacobi": 32, "gegenbau": 32, "chebyshev": 32, "legendr": 32, "hermit": 32, "laguerr": 32, "spheric": 32, "api": [34, 62, 63], "interact": 35, "logic": 36, "introduct": [36, 117], "form": 36, "express": [36, 38, 118], "boolean": 36, "equival": [36, 49], "infer": 36, "dens": 37, "matric": [37, 38, 39, 40, 41, 42, 119], "matrix": [37, 38, 41], "immutablematrix": [37, 39], "block": 38, "immut": 39, "linear": [41, 52], "creat": 41, "entri": 41, "matrixbas": 41, "except": 41, "numpi": 41, "immutablesparsematrix": 42, "theori": 43, "pars": 44, "extra": 45, "monomi": 45, "encod": 45, "formal": 45, "find": 45, "partial": 45, "fraction": [45, 48], "decomposit": 45, "print": [46, 121], "printer": [46, 121], "prettyprint": 46, "ccodeprint": 46, "fortran": 46, "mathematica": 46, "lambdaprint": 46, "latexprint": 46, "mathmlprint": 46, "pythonprint": 46, "reprprint": 46, "strprinter": 46, "helper": 46, "codeprint": 46, "preced": 46, "pretti": [46, 121], "dotprint": 46, "set": 47, "compound": 47, "separatevar": 48, "nthroot": 48, "besselsimp": 48, "hypersimp": 48, "hypersimilar": 48, "nsimplifi": 48, "posifi": 48, "logcombin": 48, "radsimp": 48, "rad_ration": 48, "collect": 48, "collect_sqrt": 48, "collect_const": 48, "ratsimp": 48, "trigsimp": 48, "futrig": 48, "fu": 48, "powsimp": 48, "powdenest": 48, "combsimp": 48, "squar": [48, 120], "denest": 48, "sqrtdenest": 48, "unrad": 48, "common": 48, "subexpres": 48, "elimin": 48, "cse": [48, 122], "opt_cs": 48, "tree_cs": 48, "hyperexpand": 48, "travers": 48, "epath": 48, "diophantin": 49, "equat": [49, 54, 55, 123], "structur": 49, "tutori": [49, 116], "user": [49, 52, 53], "classify_diop": 49, "diop_solv": 49, "diop_linear": 49, "base_solution_linear": 49, "diop_quadrat": 49, "diop_dn": 49, "cornacchia": 49, "diop_bf_dn": 49, "transformation_to_dn": 49, "find_dn": 49, "diop_ternary_quadrat": 49, "descent": 49, "diop_general_pythagorean": 49, "diop_general_sum_of_squar": 49, "diop_general_sum_of_even_pow": 49, "sum_of_three_squar": 49, "sum_of_four_squar": 49, "power_represent": 49, "sum_of_squar": 49, "merge_solut": 49, "divis": [49, 120], "pqa": 49, "parametrize_ternary_quadrat": 49, "diop_ternary_quadratic_norm": 49, "ldescent": 49, "gaussian_reduc": 49, "holzer": 49, "prime_as_sum_of_two_squar": 49, "square_factor": 49, "sqf_normal": 49, "reconstruct": 49, "transformation_to_norm": 49, "solver": [50, 51, 123], "inequ": 51, "od": 52, "dsolv": 52, "classify_od": 52, "checkodesol": 52, "homogeneous_ord": 52, "infinitesim": 52, "checkinfsol": 52, "hint": [52, 53], "allhint": 52, "odesimp": 52, "constant_renumb": 52, "constantsimp": 52, "sol_simpl": 52, "1st_exact": 52, "1st_homogeneous_coeff_best": 52, "1st_homogeneous_coeff_subs_dep_div_indep": 52, "1st_homogeneous_coeff_subs_indep_div_dep": 52, "1st_linear": 52, "liouvil": 52, "riccati_special_minus2": 52, "nth_linear_constant_coeff_homogen": 52, "nth_linear_constant_coeff_undetermined_coeffici": 52, "nth_linear_constant_coeff_variation_of_paramet": 52, "separ": 52, "almost_linear": 52, "linear_coeffici": 52, "separable_reduc": 52, "lie_group": 52, "1st_power_seri": 52, "2nd_power_series_ordinari": 52, "2nd_power_series_regular": 52, "lie": 52, "abaco1_simpl": 52, "abaco1_product": 52, "bivari": 52, "chi": 52, "abaco2_similar": 52, "function_sum": 52, "abaco2_unique_unknown": 52, "system": [52, 55], "system_of_odes_linear_2eq_order1_type3": 52, "system_of_odes_linear_2eq_order1_type4": 52, "system_of_odes_linear_2eq_order1_type5": 52, "system_of_odes_linear_2eq_order1_type6": 52, "system_of_odes_linear_2eq_order1_type7": 52, "system_of_odes_linear_2eq_order2_type1": 52, "system_of_odes_linear_2eq_order2_type2": 52, "system_of_odes_linear_2eq_order2_type3": 52, "system_of_odes_linear_2eq_order2_type5": 52, "system_of_odes_linear_2eq_order2_type6": 52, "system_of_odes_linear_2eq_order2_type7": 52, "system_of_odes_linear_2eq_order2_type8": 52, "system_of_odes_linear_2eq_order2_type9": 52, "system_of_odes_linear_2eq_order2_type11": 52, "system_of_odes_linear_3eq_order1_type4": 52, "system_of_odes_linear_neq_order1_type1": 52, "system_of_odes_nonlinear_2eq_order1_type1": 52, "system_of_odes_nonlinear_2eq_order1_type2": 52, "system_of_odes_nonlinear_2eq_order1_type3": 52, "system_of_odes_nonlinear_2eq_order1_type4": 52, "system_of_odes_nonlinear_2eq_order1_type5": 52, "system_of_odes_nonlinear_3eq_order1_type1": 52, "system_of_odes_nonlinear_3eq_order1_type2": 52, "inform": [52, 53], "pde": 53, "pde_separ": 53, "pde_separate_add": 53, "pde_separate_mul": 53, "pdsolv": 53, "classify_pd": 53, "checkpdesol": 53, "method": [53, 59, 119], "pde_1st_linear_constant_coeff_homogen": 53, "pde_1st_linear_constant_coeff": 53, "pde_1st_linear_variable_coeff": 53, "recurr": [54, 123], "solv": 56, "dim": 57, "arrai": 57, "product": [57, 114], "contract": 57, "index": [60, 119], "object": 60, "autowrap": 62, "codegen": 63, "routin": 63, "decor": 64, "enum": 65, "iter": 67, "docstr": 67, "lambdifi": 68, "memoiz": 69, "randomis": 71, "note": 72, "0": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110], "10": [73, 80], "new": [73, 74, 75, 76, 77, 108, 109, 110], "featur": [73, 74, 75, 76, 77, 108, 109, 110], "major": [73, 74, 75, 76, 77, 102, 103, 104, 105, 106, 107, 109, 110], "chang": [73, 74, 75, 76, 77, 102, 103, 104, 105, 106, 107, 108, 109, 110], "break": [73, 74, 75, 76, 77, 102, 104, 105, 106, 107, 108, 109, 110], "minor": [73, 74, 75, 76, 77, 104, 105, 107, 108, 109, 110], "close": [73, 74, 75, 76, 77, 109, 110], "11": [74, 81], "12": [75, 82], "13": [76, 83], "14": [77, 84], "sympi": [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111], "5": [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 99, 107], "15": 85, "3": [87, 97, 105], "4": [88, 98, 106], "6": [90, 94, 95, 96, 97, 98, 99, 100, 101, 108], "7": [91, 101, 102, 103, 104, 105, 106, 107, 108], "8": [92, 109], "9": [93, 110], "bibliographi": 112, "substitut": 113, "limit": 114, "seri": 114, "gotcha": 115, "tree": 118, "walk": 118, "reshap": 119, "rearrang": 119, "advanc": 119, "lcm": 120, "free": 120, "base": 120, "str": 121, "repr": 121, "2d": 121, "latex": 121, "dot": 121, "differenti": 123}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinxcontrib.bibtex": 9, "sphinx": 57}, "alltitles": {"About": [[0, "about"]], "License": [[0, "license"]], "Command-Line Usage": [[1, "command-line-usage"]], "python -m diofant": [[1, "python-m-diofant"]], "Development": [[2, "development"]], "Reporting Issues": [[2, "reporting-issues"]], "Contributing Code": [[2, "contributing-code"]], "Rosetta Stone": [[2, "rosetta-stone"]], "Versioning and Release Procedure": [[2, "versioning-and-release-procedure"]], "Diofant\u2019s documentation": [[3, "diofant-s-documentation"]], "Installation": [[4, "installation"]], "From Sources": [[4, "from-sources"]], "Run Diofant": [[4, "run-diofant"]], "Feedback": [[4, "feedback"]], "Numerical evaluation": [[5, "numerical-evaluation"]], "Floating-point numbers": [[5, "floating-point-numbers"]], "Accuracy and error handling": [[5, "accuracy-and-error-handling"]], "Sums and integrals": [[5, "sums-and-integrals"]], "Numerical simplification": [[5, "numerical-simplification"]], "uFuncify": [[5, "ufuncify"]], "Computing Integrals using Meijer G-Functions": [[6, "computing-integrals-using-meijer-g-functions"]], "Overview": [[6, "overview"]], "Polar Numbers and Branched Functions": [[6, "polar-numbers-and-branched-functions"]], "Representing Branched Functions on the Argand Plane": [[6, "representing-branched-functions-on-the-argand-plane"]], "Table Lookups and Inverse Mellin Transforms": [[6, "table-lookups-and-inverse-mellin-transforms"]], "Applying the Integral Theorems": [[6, "applying-the-integral-theorems"]], "The G-Function Integration Theorems": [[6, "the-g-function-integration-theorems"]], "Conditions of Convergence for Integral (1)": [[6, "conditions-of-convergence-for-integral-1"]], "Conditions of Convergence for Integral (2)": [[6, "conditions-of-convergence-for-integral-2"]], "The Inverse Laplace Transform of a G-function": [[6, "the-inverse-laplace-transform-of-a-g-function"]], "How to compute the integral": [[6, "how-to-compute-the-integral"]], "When this computation is valid": [[6, "when-this-computation-is-valid"]], "When the integral exists": [[6, "when-the-integral-exists"]], "Implemented G-Function Formulae": [[6, "implemented-g-function-formulae"]], "The Gruntz Algorithm": [[7, "the-gruntz-algorithm"]], "Details on the Hypergeometric Function Expansion": [[8, "details-on-the-hypergeometric-function-expansion"]], "Hypergeometric Function Expansion Algorithm": [[8, "hypergeometric-function-expansion-algorithm"]], "Notation": [[8, "notation"]], "Incrementing and decrementing indices": [[8, "incrementing-and-decrementing-indices"]], "Reduction of Order": [[8, "reduction-of-order"]], "Moving Around in the Parameter Space": [[8, "moving-around-in-the-parameter-space"]], "Applying the Operators": [[8, "applying-the-operators"]], "Loose Ends": [[8, "loose-ends"]], "Meijer G-Functions of Finite Confluence": [[8, "meijer-g-functions-of-finite-confluence"]], "Extending The Hypergeometric Tables": [[8, "extending-the-hypergeometric-tables"]], "An example": [[8, "an-example"]], "Implemented Hypergeometric Formulae": [[8, "implemented-hypergeometric-formulae"]], "Internals": [[9, "internals"], [34, "internals"]], "Internals of the Polynomial Manipulation Module": [[10, "internals-of-the-polynomial-manipulation-module"]], "Manipulation of sparse, distributed polynomials": [[10, "manipulation-of-sparse-distributed-polynomials"]], "Polynomial factorization algorithms": [[10, "polynomial-factorization-algorithms"]], "Classical remainder sequence": [[10, "classical-remainder-sequence"]], "Simplified remainder sequences": [[10, "simplified-remainder-sequences"]], "Subresultant sequence": [[10, "subresultant-sequence"]], "Gr\u00f6bner basis algorithms": [[10, "grobner-basis-algorithms"]], "Algebraic number fields": [[10, "algebraic-number-fields"], [45, "module-diofant.polys.numberfields"]], "Factorization over algebraic number fields": [[10, "module-diofant.polys.factorization_alg_field"]], "Modular GCD": [[10, "module-diofant.polys.modulargcd"]], "Heuristic GCD": [[10, "heuristic-gcd"]], "Further tools": [[10, "module-diofant.polys.rootisolation"]], "Undocumented": [[10, "undocumented"]], "Calculus": [[11, "module-diofant.calculus"], [114, "calculus"]], "Gray Code": [[12, "module-diofant.combinatorics.graycode"]], "Group constructors": [[13, "module-diofant.combinatorics.group_constructs"]], "Combinatorics": [[14, "combinatorics"]], "Contents": [[14, null], [31, null], [40, null], [50, null], [58, null], [66, null], [116, null]], "Named Groups": [[15, "module-diofant.combinatorics.named_groups"]], "Partitions": [[16, "module-diofant.combinatorics.partitions"]], "Permutation Groups": [[17, "module-diofant.combinatorics.perm_groups"]], "Permutations": [[18, "module-diofant.combinatorics.permutations"]], "Generators": [[18, "module-diofant.combinatorics.generators"]], "Polyhedron": [[19, "module-diofant.combinatorics.polyhedron"]], "Prufer Sequences": [[20, "module-diofant.combinatorics.prufer"]], "Subsets": [[21, "module-diofant.combinatorics.subsets"]], "Tensor Canonicalization": [[22, "module-diofant.combinatorics.tensor_can"]], "Test Utilities": [[23, "module-diofant.combinatorics.testutil"]], "Utilities": [[24, "module-diofant.combinatorics.util"], [66, "module-diofant.utilities"]], "Concrete Mathematics": [[25, "concrete-mathematics"]], "Hypergeometric terms": [[25, "hypergeometric-terms"]], "Concrete Class Reference": [[25, "concrete-class-reference"]], "Concrete Functions Reference": [[25, "concrete-functions-reference"]], "Config": [[26, "module-diofant.config"]], "Core": [[27, "module-diofant.core"]], "sympify": [[27, "module-diofant.core.sympify"], [27, "id1"]], "assumptions": [[27, "module-diofant.core.assumptions"]], "cache": [[27, "module-diofant.core.cache"]], "cacheit": [[27, "cacheit"]], "basic": [[27, "module-diofant.core.basic"]], "core": [[27, "id2"]], "singleton": [[27, "module-diofant.core.singleton"]], "evaluate": [[27, "module-diofant.core.evaluate"]], "expr": [[27, "module-diofant.core.expr"]], "Expr": [[27, "id3"]], "AtomicExpr": [[27, "atomicexpr"]], "symbol": [[27, "module-diofant.core.symbol"]], "Symbol": [[27, "id5"]], "Wild": [[27, "wild"]], "Dummy": [[27, "dummy"]], "symbols": [[27, "symbols"]], "var": [[27, "var"]], "numbers": [[27, "module-diofant.core.numbers"]], "Number": [[27, "number"]], "Float": [[27, "float"]], "Rational": [[27, "rational"]], "Integer": [[27, "integer"]], "NumberSymbol": [[27, "numbersymbol"]], "mod_inverse": [[27, "mod-inverse"]], "integer_digits": [[27, "integer-digits"]], "Zero": [[27, "zero"]], "One": [[27, "one"]], "NegativeOne": [[27, "negativeone"]], "Half": [[27, "half"]], "NaN": [[27, "nan"]], "Infinity": [[27, "infinity"]], "NegativeInfinity": [[27, "negativeinfinity"]], "ComplexInfinity": [[27, "complexinfinity"]], "Exp1": [[27, "exp1"]], "ImaginaryUnit": [[27, "imaginaryunit"]], "Pi": [[27, "pi"]], "EulerGamma": [[27, "eulergamma"]], "Catalan": [[27, "catalan"]], "GoldenRatio": [[27, "goldenratio"]], "power": [[27, "module-diofant.core.power"]], "Pow": [[27, "pow"]], "integer_nthroot": [[27, "integer-nthroot"]], "mul": [[27, "module-diofant.core.mul"]], "Mul": [[27, "id6"]], "add": [[27, "module-diofant.core.add"]], "Add": [[27, "id7"]], "mod": [[27, "module-diofant.core.mod"]], "Mod": [[27, "id8"]], "relational": [[27, "module-diofant.core.relational"]], "Rel": [[27, "rel"]], "Eq": [[27, "eq"]], "Ne": [[27, "ne"]], "Lt": [[27, "lt"]], "Le": [[27, "le"]], "Gt": [[27, "gt"]], "Ge": [[27, "ge"]], "Relational": [[27, "id9"]], "Equality": [[27, "equality"], [115, "equality"]], "GreaterThan": [[27, "greaterthan"]], "LessThan": [[27, "lessthan"]], "Unequality": [[27, "unequality"]], "StrictGreaterThan": [[27, "strictgreaterthan"]], "StrictLessThan": [[27, "strictlessthan"]], "multidimensional": [[27, "module-diofant.core.multidimensional"]], "vectorize": [[27, "vectorize"]], "function": [[27, "module-diofant.core.function"]], "Lambda": [[27, "lambda"]], "WildFunction": [[27, "wildfunction"]], "Derivative": [[27, "derivative"]], "diff": [[27, "diff"]], "FunctionClass": [[27, "functionclass"]], "Function": [[27, "id10"]], "Subs": [[27, "subs"]], "expand": [[27, "expand"]], "PoleError": [[27, "poleerror"]], "count_ops": [[27, "count-ops"]], "expand_mul": [[27, "expand-mul"]], "expand_log": [[27, "expand-log"]], "expand_func": [[27, "expand-func"]], "expand_trig": [[27, "expand-trig"]], "expand_complex": [[27, "expand-complex"]], "expand_multinomial": [[27, "expand-multinomial"]], "expand_power_exp": [[27, "expand-power-exp"]], "expand_power_base": [[27, "expand-power-base"]], "nfloat": [[27, "nfloat"]], "evalf": [[27, "module-diofant.core.evalf"]], "PrecisionExhausted": [[27, "precisionexhausted"]], "N": [[27, "n"]], "containers": [[27, "module-diofant.core.containers"]], "Tuple": [[27, "tuple"]], "Dict": [[27, "dict"]], "compatibility": [[27, "module-diofant.core.compatibility"]], "exprtools": [[27, "module-diofant.core.exprtools"]], "gcd_terms": [[27, "gcd-terms"]], "factor_terms": [[27, "factor-terms"]], "Domains": [[28, "module-diofant.domains"]], "Abstract Domains": [[28, "abstract-domains"]], "Concrete Domains": [[28, "concrete-domains"]], "Implementation Domains": [[28, "implementation-domains"]], "Domain Elements": [[28, "domain-elements"]], "Combinatorial": [[29, "combinatorial"]], "bell": [[29, "bell"]], "bernoulli": [[29, "bernoulli"]], "binomial": [[29, "binomial"]], "catalan": [[29, "catalan"]], "euler": [[29, "euler"]], "factorial": [[29, "factorial"]], "subfactorial": [[29, "subfactorial"]], "factorial2 / double factorial": [[29, "factorial2-double-factorial"]], "FallingFactorial": [[29, "fallingfactorial"]], "fibonacci": [[29, "fibonacci"]], "harmonic": [[29, "harmonic"]], "lucas": [[29, "lucas"]], "RisingFactorial": [[29, "risingfactorial"]], "stirling": [[29, "stirling"]], "Elementary": [[30, "elementary"]], "diofant.functions.elementary.complexes": [[30, "diofant-functions-elementary-complexes"]], "re": [[30, "re"]], "im": [[30, "im"]], "sign": [[30, "sign"]], "Abs": [[30, "abs"]], "adjoint": [[30, "adjoint"]], "arg": [[30, "arg"]], "conjugate": [[30, "conjugate"]], "polar_lift": [[30, "polar-lift"]], "periodic_argument": [[30, "periodic-argument"]], "principal_branch": [[30, "principal-branch"]], "transpose": [[30, "transpose"]], "diofant.functions.elementary.trigonometric": [[30, "diofant-functions-elementary-trigonometric"]], "Trigonometric Functions": [[30, "trigonometric-functions"], [122, "trigonometric-functions"]], "sin": [[30, "sin"]], "cos": [[30, "cos"]], "tan": [[30, "tan"]], "cot": [[30, "cot"]], "sec": [[30, "sec"]], "csc": [[30, "csc"]], "Trigonometric Inverses": [[30, "trigonometric-inverses"]], "asin": [[30, "asin"]], "acos": [[30, "acos"]], "asec": [[30, "asec"]], "atan": [[30, "atan"]], "acot": [[30, "acot"]], "acsc": [[30, "acsc"]], "atan2": [[30, "atan2"]], "diofant.functions.elementary.hyperbolic": [[30, "diofant-functions-elementary-hyperbolic"]], "Hyperbolic Functions": [[30, "hyperbolic-functions"]], "HyperbolicFunction": [[30, "hyperbolicfunction"]], "sinh": [[30, "sinh"]], "cosh": [[30, "cosh"]], "tanh": [[30, "tanh"]], "coth": [[30, "coth"]], "sech": [[30, "sech"]], "csch": [[30, "csch"]], "Hyperbolic Inverses": [[30, "hyperbolic-inverses"]], "asinh": [[30, "asinh"]], "acosh": [[30, "acosh"]], "atanh": [[30, "atanh"]], "acoth": [[30, "acoth"]], "diofant.functions.elementary.integers": [[30, "diofant-functions-elementary-integers"]], "ceiling": [[30, "ceiling"]], "floor": [[30, "floor"]], "RoundFunction": [[30, "roundfunction"]], "diofant.functions.elementary.exponential": [[30, "diofant-functions-elementary-exponential"]], "exp": [[30, "exp"]], "exp_polar": [[30, "exp-polar"]], "LambertW": [[30, "lambertw"]], "log": [[30, "log"]], "diofant.functions.elementary.piecewise": [[30, "diofant-functions-elementary-piecewise"]], "ExprCondPair": [[30, "exprcondpair"]], "Piecewise": [[30, "piecewise"]], "diofant.functions.elementary.miscellaneous": [[30, "diofant-functions-elementary-miscellaneous"]], "IdentityFunction": [[30, "identityfunction"]], "Min": [[30, "min"]], "Max": [[30, "max"]], "root": [[30, "root"]], "real_root": [[30, "real-root"]], "sqrt": [[30, "sqrt"]], "Mathematical Functions": [[31, "module-diofant.functions"]], "Special": [[32, "special"]], "DiracDelta": [[32, "diracdelta"]], "Heaviside": [[32, "heaviside"]], "Gamma, Beta and related Functions": [[32, "module-diofant.functions.special.gamma_functions"]], "Error Functions and Fresnel Integrals": [[32, "module-diofant.functions.special.error_functions"]], "Exponential, Logarithmic and Trigonometric Integrals": [[32, "exponential-logarithmic-and-trigonometric-integrals"]], "Bessel Type Functions": [[32, "module-diofant.functions.special.bessel"]], "Airy Functions": [[32, "airy-functions"]], "B-Splines": [[32, "b-splines"]], "Riemann Zeta and Related Functions": [[32, "module-diofant.functions.special.zeta_functions"]], "Hypergeometric Functions": [[32, "hypergeometric-functions"]], "Elliptic integrals": [[32, "module-diofant.functions.special.elliptic_integrals"]], "Orthogonal Polynomials": [[32, "module-diofant.functions.special.polynomials"]], "Jacobi Polynomials": [[32, "jacobi-polynomials"]], "Gegenbauer Polynomials": [[32, "gegenbauer-polynomials"]], "Chebyshev Polynomials": [[32, "chebyshev-polynomials"]], "Legendre Polynomials": [[32, "legendre-polynomials"]], "Hermite Polynomials": [[32, "hermite-polynomials"]], "Laguerre Polynomials": [[32, "laguerre-polynomials"]], "Spherical Harmonics": [[32, "spherical-harmonics"]], "Tensor Functions": [[32, "tensor-functions"]], "Reference": [[33, "module-diofant"]], "Integrals": [[34, "module-diofant.integrals"], [114, "integrals"]], "Examples": [[34, "examples"]], "Integral Transforms": [[34, "module-diofant.integrals.transforms"]], "API reference": [[34, "api-reference"]], "Numeric Integrals": [[34, "numeric-integrals"]], "Interactive": [[35, "module-diofant.interactive"]], "Logic": [[36, "module-diofant.logic"]], "Introduction": [[36, "introduction"], [117, "introduction"]], "Forming logical expressions": [[36, "forming-logical-expressions"]], "Boolean functions": [[36, "boolean-functions"]], "Simplification and equivalence-testing": [[36, "simplification-and-equivalence-testing"]], "Inference": [[36, "inference"]], "Dense Matrices": [[37, "module-diofant.matrices.dense"]], "Matrix Class Reference": [[37, "matrix-class-reference"]], "ImmutableMatrix Class Reference": [[37, "immutablematrix-class-reference"], [39, "module-diofant.matrices.immutable"]], "Matrix Expressions": [[38, "module-diofant.matrices.expressions"]], "Matrix Expressions Core Reference": [[38, "matrix-expressions-core-reference"]], "Block Matrices": [[38, "block-matrices"]], "Immutable Matrices": [[39, "immutable-matrices"]], "Matrices": [[40, "module-diofant.matrices"], [119, "matrices"]], "Matrices (linear algebra)": [[41, "module-diofant.matrices.matrices"]], "Creating Matrices": [[41, "creating-matrices"]], "Basic Manipulation": [[41, "basic-manipulation"]], "Operations on entries": [[41, "operations-on-entries"]], "Linear algebra": [[41, "linear-algebra"]], "MatrixBase Class Reference": [[41, "matrixbase-class-reference"]], "Matrix Exceptions Reference": [[41, "matrix-exceptions-reference"]], "Matrix Functions Reference": [[41, "matrix-functions-reference"]], "Numpy Utility Functions Reference": [[41, "numpy-utility-functions-reference"]], "Sparse Matrices": [[42, "module-diofant.matrices.sparse"]], "ImmutableSparseMatrix Class Reference": [[42, "immutablesparsematrix-class-reference"]], "Number Theory": [[43, "module-diofant.ntheory.generate"]], "Parsing": [[44, "module-diofant.parsing"]], "Parsing Functions Reference": [[44, "parsing-functions-reference"]], "Parsing Transformations Reference": [[44, "parsing-transformations-reference"]], "Polynomials": [[45, "module-diofant.polys"], [120, "polynomials"]], "Basic polynomial manipulation functions": [[45, "module-diofant.polys.polytools"]], "Extra polynomial manipulation functions": [[45, "module-diofant.polys.polyfuncs"]], "Domain constructors": [[45, "module-diofant.polys.constructor"]], "Monomials encoded as tuples": [[45, "module-diofant.polys.monomials"]], "Orderings of monomials": [[45, "module-diofant.polys.orderings"]], "Formal manipulation of roots of polynomials": [[45, "module-diofant.polys.rootoftools"]], "Symbolic root-finding algorithms": [[45, "module-diofant.polys.polyroots"]], "Special polynomials": [[45, "module-diofant.polys.specialpolys"]], "Orthogonal polynomials": [[45, "module-diofant.polys.orthopolys"]], "Manipulation of rational functions": [[45, "module-diofant.polys.rationaltools"]], "Partial fraction decomposition": [[45, "module-diofant.polys.partfrac"]], "Printing": [[46, "module-diofant.printing"], [121, "printing"]], "Printer Class": [[46, "module-diofant.printing.printer"]], "PrettyPrinter Class": [[46, "prettyprinter-class"]], "CCodePrinter": [[46, "module-diofant.printing.ccode"]], "Fortran Printing": [[46, "fortran-printing"]], "Mathematica code printing": [[46, "module-diofant.printing.mathematica"]], "LambdaPrinter": [[46, "module-diofant.printing.lambdarepr"]], "LatexPrinter": [[46, "module-diofant.printing.latex"]], "MathMLPrinter": [[46, "module-diofant.printing.mathml"]], "PythonPrinter": [[46, "module-diofant.printing.python"]], "ReprPrinter": [[46, "module-diofant.printing.repr"]], "StrPrinter": [[46, "module-diofant.printing.str"]], "Implementation - Helper Classes/Functions": [[46, "module-diofant.printing.conventions"]], "CodePrinter": [[46, "module-diofant.printing.codeprinter"]], "Precedence": [[46, "module-diofant.printing.precedence"]], "Pretty-Printing Implementation Helpers": [[46, "module-diofant.printing.pretty.pretty_symbology"]], "dotprint": [[46, "dotprint"]], "Sets": [[47, "module-diofant.sets.sets"]], "Elementary Sets": [[47, "elementary-sets"]], "Compound Sets": [[47, "compound-sets"]], "Singleton Sets": [[47, "singleton-sets"]], "Special Sets": [[47, "module-diofant.sets.fancysets"]], "Simplify": [[48, "simplify"]], "simplify": [[48, "id1"]], "separatevars": [[48, "separatevars"]], "nthroot": [[48, "nthroot"]], "besselsimp": [[48, "besselsimp"]], "hypersimp": [[48, "hypersimp"]], "hypersimilar": [[48, "hypersimilar"]], "nsimplify": [[48, "nsimplify"]], "posify": [[48, "posify"]], "logcombine": [[48, "logcombine"]], "Radsimp": [[48, "module-diofant.simplify.radsimp"]], "radsimp": [[48, "id2"]], "rad_rationalize": [[48, "rad-rationalize"]], "collect": [[48, "collect"]], "collect_sqrt": [[48, "collect-sqrt"]], "collect_const": [[48, "collect-const"]], "fraction": [[48, "fraction"]], "Ratsimp": [[48, "module-diofant.simplify.ratsimp"]], "ratsimp": [[48, "id3"]], "Trigonometric simplification": [[48, "module-diofant.simplify.trigsimp"]], "trigsimp": [[48, "trigsimp"]], "futrig": [[48, "futrig"]], "fu": [[48, "module-diofant.simplify.fu"]], "Power simplification": [[48, "module-diofant.simplify.powsimp"]], "powsimp": [[48, "powsimp"]], "powdenest": [[48, "powdenest"]], "Combinatorial simplification": [[48, "module-diofant.simplify.combsimp"]], "combsimp": [[48, "combsimp"]], "Square Root Denest": [[48, "module-diofant.simplify.sqrtdenest"]], "sqrtdenest": [[48, "sqrtdenest"]], "unrad": [[48, "unrad"]], "Common Subexpresion Elimination": [[48, "module-diofant.simplify.cse_main"]], "cse": [[48, "cse"]], "opt_cse": [[48, "opt-cse"]], "tree_cse": [[48, "tree-cse"]], "Hypergeometric Function Expansion": [[48, "module-diofant.simplify.hyperexpand"]], "hyperexpand": [[48, "hyperexpand"]], "Traversal Tools": [[48, "module-diofant.simplify.traversaltools"]], "use": [[48, "use"]], "EPath Tools": [[48, "module-diofant.simplify.epathtools"]], "EPath class": [[48, "epath-class"]], "epath": [[48, "epath"]], "Diophantine": [[49, "module-diofant.solvers.diophantine"]], "Diophantine equations": [[49, "diophantine-equations"]], "Module structure": [[49, "module-structure"]], "Tutorial": [[49, "tutorial"], [116, "tutorial"]], "References": [[49, "references"]], "User Functions": [[49, "user-functions"], [52, "user-functions"], [53, "user-functions"]], "diophantine": [[49, "id1"]], "classify_diop": [[49, "classify-diop"]], "Internal Functions": [[49, "internal-functions"]], "diop_solve": [[49, "diop-solve"]], "diop_linear": [[49, "diop-linear"]], "base_solution_linear": [[49, "base-solution-linear"]], "diop_quadratic": [[49, "diop-quadratic"]], "diop_DN": [[49, "diop-dn"]], "cornacchia": [[49, "cornacchia"]], "diop_bf_DN": [[49, "diop-bf-dn"]], "transformation_to_DN": [[49, "transformation-to-dn"]], "find_DN": [[49, "find-dn"]], "diop_ternary_quadratic": [[49, "diop-ternary-quadratic"]], "descent": [[49, "descent"]], "diop_general_pythagorean": [[49, "diop-general-pythagorean"]], "diop_general_sum_of_squares": [[49, "diop-general-sum-of-squares"]], "diop_general_sum_of_even_powers": [[49, "diop-general-sum-of-even-powers"]], "partition": [[49, "partition"]], "sum_of_three_squares": [[49, "sum-of-three-squares"]], "sum_of_four_squares": [[49, "sum-of-four-squares"]], "power_representation": [[49, "power-representation"]], "sum_of_squares": [[49, "sum-of-squares"]], "merge_solution": [[49, "merge-solution"]], "divisible": [[49, "divisible"]], "PQa": [[49, "pqa"]], "equivalent": [[49, "equivalent"]], "parametrize_ternary_quadratic": [[49, "parametrize-ternary-quadratic"]], "diop_ternary_quadratic_normal": [[49, "diop-ternary-quadratic-normal"]], "ldescent": [[49, "ldescent"]], "gaussian_reduce": [[49, "gaussian-reduce"]], "holzer": [[49, "holzer"]], "prime_as_sum_of_two_squares": [[49, "prime-as-sum-of-two-squares"]], "square_factor": [[49, "square-factor"]], "sqf_normal": [[49, "sqf-normal"]], "reconstruct": [[49, "reconstruct"]], "transformation_to_normal": [[49, "transformation-to-normal"]], "Solvers": [[50, "module-diofant.solvers"], [123, "solvers"]], "Inequality Solvers": [[51, "module-diofant.solvers.inequalities"]], "ODE": [[52, "ode"]], "dsolve": [[52, "dsolve"]], "classify_ode": [[52, "classify-ode"]], "checkodesol": [[52, "checkodesol"]], "homogeneous_order": [[52, "homogeneous-order"]], "infinitesimals": [[52, "infinitesimals"]], "checkinfsol": [[52, "checkinfsol"]], "Hint Functions": [[52, "hint-functions"]], "allhints": [[52, "allhints"]], "odesimp": [[52, "odesimp"]], "constant_renumber": [[52, "constant-renumber"]], "constantsimp": [[52, "constantsimp"]], "sol_simplicity": [[52, "sol-simplicity"]], "1st_exact": [[52, "st-exact"]], "1st_homogeneous_coeff_best": [[52, "st-homogeneous-coeff-best"]], "1st_homogeneous_coeff_subs_dep_div_indep": [[52, "st-homogeneous-coeff-subs-dep-div-indep"]], "1st_homogeneous_coeff_subs_indep_div_dep": [[52, "st-homogeneous-coeff-subs-indep-div-dep"]], "1st_linear": [[52, "st-linear"]], "Bernoulli": [[52, "bernoulli"]], "Liouville": [[52, "liouville"]], "Riccati_special_minus2": [[52, "riccati-special-minus2"]], "nth_linear_constant_coeff_homogeneous": [[52, "nth-linear-constant-coeff-homogeneous"]], "nth_linear_constant_coeff_undetermined_coefficients": [[52, "nth-linear-constant-coeff-undetermined-coefficients"]], "nth_linear_constant_coeff_variation_of_parameters": [[52, "nth-linear-constant-coeff-variation-of-parameters"]], "separable": [[52, "separable"]], "almost_linear": [[52, "almost-linear"]], "linear_coefficients": [[52, "linear-coefficients"]], "separable_reduced": [[52, "separable-reduced"]], "lie_group": [[52, "lie-group"]], "1st_power_series": [[52, "st-power-series"]], "2nd_power_series_ordinary": [[52, "nd-power-series-ordinary"]], "2nd_power_series_regular": [[52, "nd-power-series-regular"]], "Lie heuristics": [[52, "lie-heuristics"]], "abaco1_simple": [[52, "abaco1-simple"]], "abaco1_product": [[52, "abaco1-product"]], "bivariate": [[52, "bivariate"]], "chi": [[52, "chi"]], "abaco2_similar": [[52, "abaco2-similar"]], "function_sum": [[52, "function-sum"]], "abaco2_unique_unknown": [[52, "abaco2-unique-unknown"]], "linear": [[52, "linear"]], "System of ODEs": [[52, "system-of-odes"]], "system_of_odes_linear_2eq_order1_type3": [[52, "system-of-odes-linear-2eq-order1-type3"]], "system_of_odes_linear_2eq_order1_type4": [[52, "system-of-odes-linear-2eq-order1-type4"]], "system_of_odes_linear_2eq_order1_type5": [[52, "system-of-odes-linear-2eq-order1-type5"]], "system_of_odes_linear_2eq_order1_type6": [[52, "system-of-odes-linear-2eq-order1-type6"]], "system_of_odes_linear_2eq_order1_type7": [[52, "system-of-odes-linear-2eq-order1-type7"]], "system_of_odes_linear_2eq_order2_type1": [[52, "system-of-odes-linear-2eq-order2-type1"]], "system_of_odes_linear_2eq_order2_type2": [[52, "system-of-odes-linear-2eq-order2-type2"]], "system_of_odes_linear_2eq_order2_type3": [[52, "system-of-odes-linear-2eq-order2-type3"]], "system_of_odes_linear_2eq_order2_type5": [[52, "system-of-odes-linear-2eq-order2-type5"]], "system_of_odes_linear_2eq_order2_type6": [[52, "system-of-odes-linear-2eq-order2-type6"]], "system_of_odes_linear_2eq_order2_type7": [[52, "system-of-odes-linear-2eq-order2-type7"]], "system_of_odes_linear_2eq_order2_type8": [[52, "system-of-odes-linear-2eq-order2-type8"]], "system_of_odes_linear_2eq_order2_type9": [[52, "system-of-odes-linear-2eq-order2-type9"]], "system_of_odes_linear_2eq_order2_type11": [[52, "system-of-odes-linear-2eq-order2-type11"]], "system_of_odes_linear_3eq_order1_type4": [[52, "system-of-odes-linear-3eq-order1-type4"]], "system_of_odes_linear_neq_order1_type1": [[52, "system-of-odes-linear-neq-order1-type1"]], "system_of_odes_nonlinear_2eq_order1_type1": [[52, "system-of-odes-nonlinear-2eq-order1-type1"]], "system_of_odes_nonlinear_2eq_order1_type2": [[52, "system-of-odes-nonlinear-2eq-order1-type2"]], "system_of_odes_nonlinear_2eq_order1_type3": [[52, "system-of-odes-nonlinear-2eq-order1-type3"]], "system_of_odes_nonlinear_2eq_order1_type4": [[52, "system-of-odes-nonlinear-2eq-order1-type4"]], "system_of_odes_nonlinear_2eq_order1_type5": [[52, "system-of-odes-nonlinear-2eq-order1-type5"]], "system_of_odes_nonlinear_3eq_order1_type1": [[52, "system-of-odes-nonlinear-3eq-order1-type1"]], "system_of_odes_nonlinear_3eq_order1_type2": [[52, "system-of-odes-nonlinear-3eq-order1-type2"]], "Information on the ode module": [[52, "module-diofant.solvers.ode"]], "PDE": [[53, "pde"]], "pde_separate": [[53, "pde-separate"]], "pde_separate_add": [[53, "pde-separate-add"]], "pde_separate_mul": [[53, "pde-separate-mul"]], "pdsolve": [[53, "pdsolve"]], "classify_pde": [[53, "classify-pde"]], "checkpdesol": [[53, "checkpdesol"]], "Hint Methods": [[53, "hint-methods"]], "pde_1st_linear_constant_coeff_homogeneous": [[53, "pde-1st-linear-constant-coeff-homogeneous"]], "pde_1st_linear_constant_coeff": [[53, "pde-1st-linear-constant-coeff"]], "pde_1st_linear_variable_coeff": [[53, "pde-1st-linear-variable-coeff"]], "Information on the pde module": [[53, "module-diofant.solvers.pde"]], "Recurrence Equations": [[54, "module-diofant.solvers.recurr"], [123, "recurrence-equations"]], "Algebraic equations": [[55, "module-diofant.solvers.solvers"]], "Systems of Polynomial Equations": [[55, "module-diofant.solvers.polysys"]], "Utilities for solving": [[56, "module-diofant.solvers.utils"]], "Contains": [[56, "contains"]], "N-dim array": [[57, "module-diofant.tensor.array"]], "Products and contractions": [[57, "products-and-contractions"]], "Derivatives by array": [[57, "derivatives-by-array"]], "Classes": [[57, "classes"]], "Functions": [[57, "functions"]], "Tensors": [[58, "module-diofant.tensor"]], "Methods": [[59, "module-diofant.tensor.index_methods"]], "Indexed Objects": [[60, "module-diofant.tensor.indexed"]], "Tensor": [[61, "module-diofant.tensor.tensor"]], "Autowrap Module": [[62, "autowrap-module"]], "Implementation details": [[62, "implementation-details"]], "API Reference": [[62, "module-diofant.utilities.autowrap"], [63, "module-diofant.utilities.codegen"]], "Codegen": [[63, "codegen"]], "Implementation Details": [[63, "implementation-details"]], "Routine": [[63, "routine"]], "Decorator": [[64, "module-diofant.utilities.decorator"]], "Enumerative": [[65, "module-diofant.utilities.enumerative"]], "Iterables": [[67, "iterables"]], "partitions": [[67, "partitions"]], "Docstring": [[67, "module-diofant.utilities.iterables"]], "Lambdify": [[68, "module-diofant.utilities.lambdify"]], "Memoization": [[69, "module-diofant.utilities.memoization"]], "Miscellaneous": [[70, "module-diofant.utilities.misc"]], "Randomised Testing": [[71, "module-diofant.utilities.randtest"]], "Release Notes": [[72, "release-notes"]], "Diofant 0.10": [[73, "diofant-0-10"]], "New features": [[73, "new-features"], [74, "new-features"], [75, "new-features"], [76, "new-features"], [77, "new-features"], [108, "new-features"], [109, "new-features"], [110, "new-features"]], "Major changes": [[73, "major-changes"], [74, "major-changes"], [75, "major-changes"], [76, "major-changes"], [77, "major-changes"], [103, "major-changes"], [105, "major-changes"], [106, "major-changes"], [107, "major-changes"], [109, "major-changes"], [110, "major-changes"]], "Compatibility breaks": [[73, "compatibility-breaks"], [74, "compatibility-breaks"], [75, "compatibility-breaks"], [76, "compatibility-breaks"], [77, "compatibility-breaks"], [102, "compatibility-breaks"], [104, "compatibility-breaks"], [105, "compatibility-breaks"], [106, "compatibility-breaks"], [107, "compatibility-breaks"], [108, "compatibility-breaks"], [109, "compatibility-breaks"], [110, "compatibility-breaks"]], "Minor changes": [[73, "minor-changes"], [74, "minor-changes"], [75, "minor-changes"], [76, "minor-changes"], [77, "minor-changes"], [104, "minor-changes"], [105, "minor-changes"], [107, "minor-changes"], [108, "minor-changes"], [109, "minor-changes"], [110, "minor-changes"]], "Developer changes": [[73, "developer-changes"], [74, "developer-changes"], [75, "developer-changes"], [76, "developer-changes"], [77, "developer-changes"], [109, "developer-changes"], [110, "developer-changes"]], "Issues closed": [[73, "issues-closed"], [74, "issues-closed"], [75, "issues-closed"], [76, "issues-closed"], [77, "issues-closed"], [109, "issues-closed"], [110, "issues-closed"]], "Diofant 0.11": [[74, "diofant-0-11"]], "Diofant 0.12": [[75, "diofant-0-12"]], "Diofant 0.13": [[76, "diofant-0-13"]], "Diofant 0.14": [[77, "diofant-0-14"]], "SymPy 0.5.0": [[78, "sympy-0-5-0"]], "SymPy 0.5.1": [[79, "sympy-0-5-1"]], "SymPy 0.5.10": [[80, "sympy-0-5-10"]], "SymPy 0.5.11": [[81, "sympy-0-5-11"]], "SymPy 0.5.12": [[82, "sympy-0-5-12"]], "SymPy 0.5.13": [[83, "sympy-0-5-13"]], "SymPy 0.5.14": [[84, "sympy-0-5-14"]], "SymPy 0.5.15": [[85, "sympy-0-5-15"]], "SymPy 0.5.2": [[86, "sympy-0-5-2"]], "SymPy 0.5.3": [[87, "sympy-0-5-3"]], "SymPy 0.5.4": [[88, "sympy-0-5-4"]], "SymPy 0.5.5": [[89, "sympy-0-5-5"]], "SymPy 0.5.6": [[90, "sympy-0-5-6"]], "SymPy 0.5.7": [[91, "sympy-0-5-7"]], "SymPy 0.5.8": [[92, "sympy-0-5-8"]], "SymPy 0.5.9": [[93, "sympy-0-5-9"]], "SymPy 0.6.0": [[94, "sympy-0-6-0"]], "SymPy 0.6.1": [[95, "sympy-0-6-1"]], "SymPy 0.6.2": [[96, "sympy-0-6-2"]], "SymPy 0.6.3": [[97, "sympy-0-6-3"]], "SymPy 0.6.4": [[98, "sympy-0-6-4"]], "SymPy 0.6.5": [[99, "sympy-0-6-5"]], "SymPy 0.6.6": [[100, "sympy-0-6-6"]], "SymPy 0.6.7": [[101, "sympy-0-6-7"]], "SymPy 0.7.0": [[102, "sympy-0-7-0"]], "Major Changes": [[102, "major-changes"], [104, "major-changes"]], "SymPy 0.7.1": [[103, "sympy-0-7-1"]], "SymPy 0.7.2": [[104, "sympy-0-7-2"]], "SymPy 0.7.3": [[105, "sympy-0-7-3"]], "SymPy 0.7.4": [[106, "sympy-0-7-4"]], "SymPy 0.7.5": [[107, "sympy-0-7-5"]], "SymPy 0.7.6": [[108, "sympy-0-7-6"]], "Diofant 0.8": [[109, "diofant-0-8"]], "Diofant 0.9": [[110, "diofant-0-9"]], "SymPy releases": [[111, "sympy-releases"]], "Bibliography": [[112, "bibliography"]], "Basics": [[113, "basics"]], "Assumptions": [[113, "assumptions"]], "Substitution": [[113, "substitution"]], "Numerics": [[113, "numerics"]], "Derivatives": [[114, "derivatives"]], "Sums and Products": [[114, "sums-and-products"]], "Limits": [[114, "limits"]], "Series Expansion": [[114, "series-expansion"]], "Gotchas": [[115, "gotchas"]], "Numbers": [[115, "numbers"]], "Naming of Functions": [[115, "naming-of-functions"]], "Expression Trees": [[118, "expression-trees"]], "Walking the Tree": [[118, "walking-the-tree"]], "Indexing": [[119, "indexing"]], "Reshape and Rearrange": [[119, "reshape-and-rearrange"]], "Algebraic Operations": [[119, "algebraic-operations"]], "Special Matrices": [[119, "special-matrices"]], "Advanced Methods": [[119, "advanced-methods"]], "Division": [[120, "division"]], "GCD and LCM": [[120, "gcd-and-lcm"]], "Square-free factorization": [[120, "square-free-factorization"]], "Factorization": [[120, "factorization"]], "Gr\u00f6bner bases": [[120, "grobner-bases"]], "Str": [[121, "str"]], "Repr": [[121, "repr"]], "2D Pretty Printer": [[121, "d-pretty-printer"]], "LaTeX": [[121, "latex"]], "Dot": [[121, "dot"]], "Simplification": [[122, "simplification"]], "Rational Functions": [[122, "rational-functions"]], "Powers and Logarithms": [[122, "powers-and-logarithms"]], "Special Functions": [[122, "special-functions"]], "CSE": [[122, "cse"]], "Algebraic Equations": [[123, "algebraic-equations"]], "Differential Equations": [[123, "differential-equations"]]}, "indexentries": {"--auto-symbols": [[1, "cmdoption-python-m-diofant-a"]], "--help": [[1, "cmdoption-python-m-diofant-h"]], "--no-ipython": [[1, "cmdoption-python-m-diofant-no-ipython"]], "--no-wrap-division": [[1, "cmdoption-python-m-diofant-no-wrap-division"]], "-a": [[1, "cmdoption-python-m-diofant-a"]], "-h": [[1, "cmdoption-python-m-diofant-h"]], "python--m-diofant command line option": [[1, "cmdoption-python-m-diofant-a"], [1, "cmdoption-python-m-diofant-h"], [1, "cmdoption-python-m-diofant-no-ipython"], [1, "cmdoption-python-m-diofant-no-wrap-division"]], "diofant.integrals.meijerint_doc": [[6, "module-diofant.integrals.meijerint_doc"]], "module": [[6, "module-diofant.integrals.meijerint_doc"], [7, "module-diofant.calculus.gruntz"], [8, "module-diofant.simplify.hyperexpand_doc"], [10, "module-diofant.polys.euclidtools"], [10, "module-diofant.polys.factorization_alg_field"], [10, "module-diofant.polys.factortools"], [10, "module-diofant.polys.groebnertools"], [10, "module-diofant.polys.modulargcd"], [10, "module-diofant.polys.polyerrors"], [10, "module-diofant.polys.polyoptions"], [10, "module-diofant.polys.rootisolation"], [10, "module-diofant.polys.sqfreetools"], [11, "module-diofant.calculus"], [11, "module-diofant.calculus.limits"], [11, "module-diofant.calculus.optimization"], [11, "module-diofant.calculus.order"], [11, "module-diofant.calculus.residues"], [11, "module-diofant.calculus.singularities"], [12, "module-diofant.combinatorics.graycode"], [13, "module-diofant.combinatorics.group_constructs"], [15, "module-diofant.combinatorics.named_groups"], [16, "module-diofant.combinatorics.partitions"], [17, "module-diofant.combinatorics.perm_groups"], [18, "module-diofant.combinatorics.generators"], [18, "module-diofant.combinatorics.permutations"], [19, "module-diofant.combinatorics.polyhedron"], [20, "module-diofant.combinatorics.prufer"], [21, "module-diofant.combinatorics.subsets"], [22, "module-diofant.combinatorics.tensor_can"], [23, "module-diofant.combinatorics.testutil"], [24, "module-diofant.combinatorics.util"], [26, "module-diofant.config"], [27, "module-diofant.core"], [27, "module-diofant.core.add"], [27, "module-diofant.core.assumptions"], [27, "module-diofant.core.basic"], [27, "module-diofant.core.cache"], [27, "module-diofant.core.compatibility"], [27, "module-diofant.core.containers"], [27, "module-diofant.core.core"], [27, "module-diofant.core.evalf"], [27, "module-diofant.core.evaluate"], [27, "module-diofant.core.expr"], [27, "module-diofant.core.exprtools"], [27, "module-diofant.core.function"], [27, "module-diofant.core.mod"], [27, "module-diofant.core.mul"], [27, "module-diofant.core.multidimensional"], [27, "module-diofant.core.numbers"], [27, "module-diofant.core.power"], [27, "module-diofant.core.relational"], [27, "module-diofant.core.singleton"], [27, "module-diofant.core.symbol"], [27, "module-diofant.core.sympify"], [28, "module-diofant.domains"], [31, "module-diofant.functions"], [32, "module-diofant.functions.special.bessel"], [32, "module-diofant.functions.special.beta_functions"], [32, "module-diofant.functions.special.elliptic_integrals"], [32, "module-diofant.functions.special.error_functions"], [32, "module-diofant.functions.special.gamma_functions"], [32, "module-diofant.functions.special.polynomials"], [32, "module-diofant.functions.special.zeta_functions"], [33, "module-diofant"], [34, "module-diofant.integrals"], [34, "module-diofant.integrals.quadrature"], [34, "module-diofant.integrals.transforms"], [35, "module-diofant.interactive"], [35, "module-diofant.interactive.printing"], [35, "module-diofant.interactive.session"], [36, "module-diofant.logic"], [37, "module-diofant.matrices.dense"], [38, "module-diofant.matrices.expressions"], [38, "module-diofant.matrices.expressions.blockmatrix"], [39, "module-diofant.matrices.immutable"], [40, "module-diofant.matrices"], [41, "module-diofant.matrices.matrices"], [42, "module-diofant.matrices.sparse"], [43, "module-diofant.ntheory.continued_fraction"], [43, "module-diofant.ntheory.egyptian_fraction"], [43, "module-diofant.ntheory.factor_"], [43, "module-diofant.ntheory.generate"], [43, "module-diofant.ntheory.modular"], [43, "module-diofant.ntheory.multinomial"], [43, "module-diofant.ntheory.partitions_"], [43, "module-diofant.ntheory.primetest"], [43, "module-diofant.ntheory.residue_ntheory"], [44, "module-diofant.parsing"], [45, "module-diofant.polys"], [45, "module-diofant.polys.constructor"], [45, "module-diofant.polys.monomials"], [45, "module-diofant.polys.numberfields"], [45, "module-diofant.polys.orderings"], [45, "module-diofant.polys.orthopolys"], [45, "module-diofant.polys.partfrac"], [45, "module-diofant.polys.polyfuncs"], [45, "module-diofant.polys.polyroots"], [45, "module-diofant.polys.polytools"], [45, "module-diofant.polys.rationaltools"], [45, "module-diofant.polys.rootoftools"], [45, "module-diofant.polys.specialpolys"], [46, "module-diofant.printing"], [46, "module-diofant.printing.ccode"], [46, "module-diofant.printing.codeprinter"], [46, "module-diofant.printing.conventions"], [46, "module-diofant.printing.fcode"], [46, "module-diofant.printing.lambdarepr"], [46, "module-diofant.printing.latex"], [46, "module-diofant.printing.mathematica"], [46, "module-diofant.printing.mathml"], [46, "module-diofant.printing.precedence"], [46, "module-diofant.printing.pretty.pretty"], [46, "module-diofant.printing.pretty.pretty_symbology"], [46, "module-diofant.printing.pretty.stringpict"], [46, "module-diofant.printing.printer"], [46, "module-diofant.printing.python"], [46, "module-diofant.printing.repr"], [46, "module-diofant.printing.str"], [47, "module-diofant.sets.fancysets"], [47, "module-diofant.sets.sets"], [48, "module-diofant.simplify.combsimp"], [48, "module-diofant.simplify.cse_main"], [48, "module-diofant.simplify.epathtools"], [48, "module-diofant.simplify.fu"], [48, "module-diofant.simplify.hyperexpand"], [48, "module-diofant.simplify.powsimp"], [48, "module-diofant.simplify.radsimp"], [48, "module-diofant.simplify.ratsimp"], [48, "module-diofant.simplify.sqrtdenest"], [48, "module-diofant.simplify.traversaltools"], [48, "module-diofant.simplify.trigsimp"], [49, "module-diofant.solvers.diophantine"], [50, "module-diofant.solvers"], [51, "module-diofant.solvers.inequalities"], [52, "module-diofant.solvers.ode"], [53, "module-diofant.solvers.pde"], [54, "module-diofant.solvers.recurr"], [55, "module-diofant.solvers.polysys"], [55, "module-diofant.solvers.solvers"], [56, "module-diofant.solvers.deutils"], [56, "module-diofant.solvers.utils"], [57, "module-diofant.tensor.array"], [58, "module-diofant.tensor"], [59, "module-diofant.tensor.index_methods"], [60, "module-diofant.tensor.indexed"], [61, "module-diofant.tensor.tensor"], [62, "module-diofant.utilities.autowrap"], [63, "module-diofant.utilities.codegen"], [64, "module-diofant.utilities.decorator"], [65, "module-diofant.utilities.enumerative"], [66, "module-diofant.utilities"], [67, "module-diofant.utilities.iterables"], [68, "module-diofant.utilities.lambdify"], [69, "module-diofant.utilities.memoization"], [70, "module-diofant.utilities.misc"], [71, "module-diofant.utilities.randtest"]], "compare() (in module diofant.calculus.gruntz)": [[7, "diofant.calculus.gruntz.compare"]], "diofant.calculus.gruntz": [[7, "module-diofant.calculus.gruntz"]], "leadterm() (in module diofant.calculus.gruntz)": [[7, "diofant.calculus.gruntz.leadterm"]], "limitinf() (in module diofant.calculus.gruntz)": [[7, "diofant.calculus.gruntz.limitinf"]], "mrv() (in module diofant.calculus.gruntz)": [[7, "diofant.calculus.gruntz.mrv"]], "rewrite() (in module diofant.calculus.gruntz)": [[7, "diofant.calculus.gruntz.rewrite"]], "signinf() (in module diofant.calculus.gruntz)": [[7, "diofant.calculus.gruntz.signinf"]], "add_formulae() (in module diofant.simplify.hyperexpand)": [[8, "diofant.simplify.hyperexpand.add_formulae"]], "diofant.simplify.hyperexpand_doc": [[8, "module-diofant.simplify.hyperexpand_doc"]], "basepolynomialerror": [[10, "diofant.polys.polyerrors.BasePolynomialError"]], "coercionfailederror": [[10, "diofant.polys.polyerrors.CoercionFailedError"]], "complexinterval (class in diofant.polys.rootisolation)": [[10, "diofant.polys.rootisolation.ComplexInterval"]], "computationfailederror": [[10, "diofant.polys.polyerrors.ComputationFailedError"]], "domainerror": [[10, "diofant.polys.polyerrors.DomainError"]], "evaluationfailederror": [[10, "diofant.polys.polyerrors.EvaluationFailedError"]], "exactquotientfailederror": [[10, "diofant.polys.polyerrors.ExactQuotientFailedError"]], "extraneousfactorserror": [[10, "diofant.polys.polyerrors.ExtraneousFactorsError"]], "flagerror": [[10, "diofant.polys.polyerrors.FlagError"]], "fracelement (class in diofant.polys.fields)": [[10, "diofant.polys.fields.FracElement"]], "generatorserror": [[10, "diofant.polys.polyerrors.GeneratorsError"]], "generatorsneedederror": [[10, "diofant.polys.polyerrors.GeneratorsNeededError"]], "heuristicgcdfailederror": [[10, "diofant.polys.polyerrors.HeuristicGCDFailedError"]], "homomorphismfailederror": [[10, "diofant.polys.polyerrors.HomomorphismFailedError"]], "isomorphismfailederror": [[10, "diofant.polys.polyerrors.IsomorphismFailedError"]], "modulargcdfailederror": [[10, "diofant.polys.polyerrors.ModularGCDFailedError"]], "multivariatepolynomialerror": [[10, "diofant.polys.polyerrors.MultivariatePolynomialError"]], "notalgebraicerror": [[10, "diofant.polys.polyerrors.NotAlgebraicError"]], "notinvertibleerror": [[10, "diofant.polys.polyerrors.NotInvertibleError"]], "notreversibleerror": [[10, "diofant.polys.polyerrors.NotReversibleError"]], "operationnotsupportederror": [[10, "diofant.polys.polyerrors.OperationNotSupportedError"]], "optionerror": [[10, "diofant.polys.polyerrors.OptionError"]], "options (class in diofant.polys.polyoptions)": [[10, "diofant.polys.polyoptions.Options"]], "order (class in diofant.polys.polyoptions)": [[10, "diofant.polys.polyoptions.Order"]], "polificationfailederror": [[10, "diofant.polys.polyerrors.PolificationFailedError"]], "polyelement (class in diofant.polys.rings)": [[10, "diofant.polys.rings.PolyElement"]], "polynomialdivisionfailederror": [[10, "diofant.polys.polyerrors.PolynomialDivisionFailedError"]], "polynomialerror": [[10, "diofant.polys.polyerrors.PolynomialError"]], "realinterval (class in diofant.polys.rootisolation)": [[10, "diofant.polys.rootisolation.RealInterval"]], "refinementfailederror": [[10, "diofant.polys.polyerrors.RefinementFailedError"]], "unificationfailederror": [[10, "diofant.polys.polyerrors.UnificationFailedError"]], "univarpolyelement (class in diofant.polys.univar)": [[10, "diofant.polys.univar.UnivarPolyElement"]], "univariatepolynomialerror": [[10, "diofant.polys.polyerrors.UnivariatePolynomialError"]], "unluckyleadingcoefficienterror": [[10, "diofant.polys.polyerrors.UnluckyLeadingCoefficientError"]], "__add__() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.__add__"]], "__eq__() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.__eq__"]], "__getitem__() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.__getitem__"]], "__mul__() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.__mul__"]], "__pow__() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.__pow__"]], "__rmul__() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.__rmul__"]], "__rsub__() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.__rsub__"]], "__sub__() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.__sub__"]], "__weakref__ (diofant.polys.rings.polyelement attribute)": [[10, "diofant.polys.rings.PolyElement.__weakref__"]], "_alpha_to_z() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._alpha_to_z"]], "_chinese_remainder_reconstruction() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._chinese_remainder_reconstruction"]], "_denominator() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._denominator"]], "_diophantine() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._diophantine"]], "_diophantine_univariate() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._diophantine_univariate"]], "_distinct_prime_divisors() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._distinct_prime_divisors"]], "_div() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._div"]], "_euclidean_algorithm() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._euclidean_algorithm"]], "_evaluate_ground() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._evaluate_ground"]], "_extended_euclidean_algorithm() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._extended_euclidean_algorithm"]], "_factor() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._factor"]], "_func_field_modgcd_m() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._func_field_modgcd_m"]], "_func_field_modgcd_p() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._func_field_modgcd_p"]], "_gf_gcdex() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._gf_gcdex"]], "_hensel_lift() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._hensel_lift"]], "_interpolate() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._interpolate"]], "_leading_coeffs() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._leading_coeffs"]], "_minpoly_from_dense() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._minpoly_from_dense"]], "_modgcd_p() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._modgcd_p"]], "_monic_associate() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._monic_associate"]], "_padic_lift() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._padic_lift"]], "_primitive_in_x0() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._primitive_in_x0"]], "_rational_function_reconstruction() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._rational_function_reconstruction"]], "_rational_reconstruction_func_coeffs() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._rational_reconstruction_func_coeffs"]], "_rational_reconstruction_int_coeffs() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._rational_reconstruction_int_coeffs"]], "_sqf_p() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._sqf_p"]], "_subs_ground() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._subs_ground"]], "_test_evaluation_points() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._test_evaluation_points"]], "_test_prime() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._test_prime"]], "_to_anp_poly() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._to_ANP_poly"]], "_to_zz_poly() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._to_ZZ_poly"]], "_trunc() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._trunc"]], "_z_to_alpha() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._z_to_alpha"]], "_zz_heu_gcd() (diofant.polys.euclidtools._gcd method)": [[10, "diofant.polys.euclidtools._GCD._zz_heu_gcd"]], "a (diofant.polys.rootisolation.realinterval property)": [[10, "diofant.polys.rootisolation.RealInterval.a"]], "as_tuple() (diofant.polys.rootisolation.complexinterval method)": [[10, "diofant.polys.rootisolation.ComplexInterval.as_tuple"]], "as_tuple() (diofant.polys.rootisolation.realinterval method)": [[10, "diofant.polys.rootisolation.RealInterval.as_tuple"]], "ax (diofant.polys.rootisolation.complexinterval property)": [[10, "diofant.polys.rootisolation.ComplexInterval.ax"]], "ay (diofant.polys.rootisolation.complexinterval property)": [[10, "diofant.polys.rootisolation.ComplexInterval.ay"]], "b (diofant.polys.rootisolation.realinterval property)": [[10, "diofant.polys.rootisolation.RealInterval.b"]], "buchberger() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.buchberger"]], "bx (diofant.polys.rootisolation.complexinterval property)": [[10, "diofant.polys.rootisolation.ComplexInterval.bx"]], "by (diofant.polys.rootisolation.complexinterval property)": [[10, "diofant.polys.rootisolation.ComplexInterval.by"]], "cancel() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.cancel"]], "center (diofant.polys.rootisolation.complexinterval property)": [[10, "diofant.polys.rootisolation.ComplexInterval.center"]], "center (diofant.polys.rootisolation.realinterval property)": [[10, "diofant.polys.rootisolation.RealInterval.center"]], "clone() (diofant.polys.polyoptions.options method)": [[10, "diofant.polys.polyoptions.Options.clone"]], "compose() (diofant.polys.fields.fracelement method)": [[10, "diofant.polys.fields.FracElement.compose"]], "compose() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.compose"]], "conjugate() (diofant.polys.rootisolation.complexinterval method)": [[10, "diofant.polys.rootisolation.ComplexInterval.conjugate"]], "content() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.content"]], "copy() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.copy"]], "cp_key() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.cp_key"]], "critical_pair() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.critical_pair"]], "decompose() (diofant.polys.univar.univarpolyelement method)": [[10, "diofant.polys.univar.UnivarPolyElement.decompose"]], "degree() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.degree"]], "diff() (diofant.polys.fields.fracelement method)": [[10, "diofant.polys.fields.FracElement.diff"]], "diff() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.diff"]], "diofant.polys.euclidtools": [[10, "module-diofant.polys.euclidtools"]], "diofant.polys.factorization_alg_field": [[10, "module-diofant.polys.factorization_alg_field"]], "diofant.polys.factortools": [[10, "module-diofant.polys.factortools"]], "diofant.polys.groebnertools": [[10, "module-diofant.polys.groebnertools"]], "diofant.polys.modulargcd": [[10, "module-diofant.polys.modulargcd"]], "diofant.polys.polyerrors": [[10, "module-diofant.polys.polyerrors"]], "diofant.polys.polyoptions": [[10, "module-diofant.polys.polyoptions"]], "diofant.polys.rootisolation": [[10, "module-diofant.polys.rootisolation"]], "diofant.polys.sqfreetools": [[10, "module-diofant.polys.sqfreetools"]], "discriminant() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.discriminant"]], "div() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.div"]], "efactor() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field.efactor"]], "f5_reduce() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.f5_reduce"]], "f5b() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.f5b"]], "func_field_modgcd() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd.func_field_modgcd"]], "gcdex() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.gcdex"]], "groebner() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.groebner"]], "groebner_gcd() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.groebner_gcd"]], "groebner_lcm() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.groebner_lcm"]], "half_gcdex() (diofant.polys.univar.univarpolyelement method)": [[10, "diofant.polys.univar.UnivarPolyElement.half_gcdex"]], "integrate() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.integrate"]], "is_disjoint() (diofant.polys.rootisolation.complexinterval method)": [[10, "diofant.polys.rootisolation.ComplexInterval.is_disjoint"]], "is_disjoint() (diofant.polys.rootisolation.realinterval method)": [[10, "diofant.polys.rootisolation.RealInterval.is_disjoint"]], "is_groebner() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.is_groebner"]], "is_minimal() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.is_minimal"]], "is_rewritable_or_comparable() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.is_rewritable_or_comparable"]], "lbp_cmp() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.lbp_cmp"]], "lbp_key() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.lbp_key"]], "lbp_mul_term() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.lbp_mul_term"]], "lbp_sub() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.lbp_sub"]], "leading_expv() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.leading_expv"]], "leading_term() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.leading_term"]], "matrix_fglm() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.matrix_fglm"]], "minpoly_groebner() (in module diofant.polys.numberfields)": [[10, "diofant.polys.numberfields.minpoly_groebner"]], "modgcd() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd.modgcd"]], "monic() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.monic"]], "prem() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.prem"]], "primitive() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.primitive"]], "red_groebner() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.red_groebner"]], "refine() (diofant.polys.rootisolation.complexinterval method)": [[10, "diofant.polys.rootisolation.ComplexInterval.refine"]], "refine() (diofant.polys.rootisolation.realinterval method)": [[10, "diofant.polys.rootisolation.RealInterval.refine"]], "resultant() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.resultant"]], "ring() (in module diofant.polys.rings)": [[10, "diofant.polys.rings.ring"]], "s_poly() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.s_poly"]], "sig_cmp() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.sig_cmp"]], "sig_key() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.sig_key"]], "sig_mult() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.sig_mult"]], "spoly() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.spoly"]], "sturm() (diofant.polys.univar.univarpolyelement method)": [[10, "diofant.polys.univar.UnivarPolyElement.sturm"]], "subresultants() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.subresultants"]], "tail_degree() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.tail_degree"]], "total_degree() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.total_degree"]], "trial_division() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd.trial_division"]], "limit (class in diofant.calculus.limits)": [[11, "diofant.calculus.limits.Limit"]], "o (in module diofant.calculus.order)": [[11, "diofant.calculus.order.O"]], "order (class in diofant.calculus.order)": [[11, "diofant.calculus.order.Order"]], "contains() (diofant.calculus.order.order method)": [[11, "diofant.calculus.order.Order.contains"]], "diofant.calculus": [[11, "module-diofant.calculus"]], "diofant.calculus.limits": [[11, "module-diofant.calculus.limits"]], "diofant.calculus.optimization": [[11, "module-diofant.calculus.optimization"]], "diofant.calculus.order": [[11, "module-diofant.calculus.order"]], "diofant.calculus.residues": [[11, "module-diofant.calculus.residues"]], "diofant.calculus.singularities": [[11, "module-diofant.calculus.singularities"]], "doit() (diofant.calculus.limits.limit method)": [[11, "diofant.calculus.limits.Limit.doit"]], "limit() (in module diofant.calculus.limits)": [[11, "diofant.calculus.limits.limit"]], "maximize() (in module diofant.calculus.optimization)": [[11, "diofant.calculus.optimization.maximize"]], "minimize() (in module diofant.calculus.optimization)": [[11, "diofant.calculus.optimization.minimize"]], "residue() (in module diofant.calculus.residues)": [[11, "diofant.calculus.residues.residue"]], "singularities() (in module diofant.calculus.singularities)": [[11, "diofant.calculus.singularities.singularities"]], "graycode (class in diofant.combinatorics.graycode)": [[12, "diofant.combinatorics.graycode.GrayCode"]], "bin_to_gray() (diofant.combinatorics.graycode method)": [[12, "diofant.combinatorics.graycode.bin_to_gray"]], "current (diofant.combinatorics.graycode.graycode property)": [[12, "diofant.combinatorics.graycode.GrayCode.current"]], "diofant.combinatorics.graycode": [[12, "module-diofant.combinatorics.graycode"]], "generate_gray() (diofant.combinatorics.graycode.graycode method)": [[12, "diofant.combinatorics.graycode.GrayCode.generate_gray"]], "get_subset_from_bitstring() (diofant.combinatorics.graycode method)": [[12, "diofant.combinatorics.graycode.get_subset_from_bitstring"]], "gray_to_bin() (diofant.combinatorics.graycode method)": [[12, "diofant.combinatorics.graycode.gray_to_bin"]], "graycode_subsets() (diofant.combinatorics.graycode method)": [[12, "diofant.combinatorics.graycode.graycode_subsets"]], "n (diofant.combinatorics.graycode.graycode property)": [[12, "diofant.combinatorics.graycode.GrayCode.n"]], "next() (diofant.combinatorics.graycode.graycode method)": [[12, "diofant.combinatorics.graycode.GrayCode.next"]], "random_bitstring() (diofant.combinatorics.graycode method)": [[12, "diofant.combinatorics.graycode.random_bitstring"]], "rank (diofant.combinatorics.graycode.graycode property)": [[12, "diofant.combinatorics.graycode.GrayCode.rank"]], "selections (diofant.combinatorics.graycode.graycode property)": [[12, "diofant.combinatorics.graycode.GrayCode.selections"]], "skip() (diofant.combinatorics.graycode.graycode method)": [[12, "diofant.combinatorics.graycode.GrayCode.skip"]], "unrank() (diofant.combinatorics.graycode.graycode class method)": [[12, "diofant.combinatorics.graycode.GrayCode.unrank"]], "directproduct() (in module diofant.combinatorics.group_constructs)": [[13, "diofant.combinatorics.group_constructs.DirectProduct"]], "diofant.combinatorics.group_constructs": [[13, "module-diofant.combinatorics.group_constructs"]], "abeliangroup() (in module diofant.combinatorics.named_groups)": [[15, "diofant.combinatorics.named_groups.AbelianGroup"]], "alternatinggroup() (in module diofant.combinatorics.named_groups)": [[15, "diofant.combinatorics.named_groups.AlternatingGroup"]], "cyclicgroup() (in module diofant.combinatorics.named_groups)": [[15, "diofant.combinatorics.named_groups.CyclicGroup"]], "dihedralgroup() (in module diofant.combinatorics.named_groups)": [[15, "diofant.combinatorics.named_groups.DihedralGroup"]], "symmetricgroup() (in module diofant.combinatorics.named_groups)": [[15, "diofant.combinatorics.named_groups.SymmetricGroup"]], "diofant.combinatorics.named_groups": [[15, "module-diofant.combinatorics.named_groups"]], "integerpartition (class in diofant.combinatorics.partitions)": [[16, "diofant.combinatorics.partitions.IntegerPartition"]], "partition (class in diofant.combinatorics.partitions)": [[16, "diofant.combinatorics.partitions.Partition"]], "rgs (diofant.combinatorics.partitions.partition property)": [[16, "diofant.combinatorics.partitions.Partition.RGS"]], "rgs_enum() (in module diofant.combinatorics.partitions)": [[16, "diofant.combinatorics.partitions.RGS_enum"]], "rgs_generalized() (in module diofant.combinatorics.partitions)": [[16, "diofant.combinatorics.partitions.RGS_generalized"]], "rgs_rank() (in module diofant.combinatorics.partitions)": [[16, "diofant.combinatorics.partitions.RGS_rank"]], "rgs_unrank() (in module diofant.combinatorics.partitions)": [[16, "diofant.combinatorics.partitions.RGS_unrank"]], "as_dict() (diofant.combinatorics.partitions.integerpartition method)": [[16, "diofant.combinatorics.partitions.IntegerPartition.as_dict"]], "as_ferrers() (diofant.combinatorics.partitions.integerpartition method)": [[16, "diofant.combinatorics.partitions.IntegerPartition.as_ferrers"]], "conjugate (diofant.combinatorics.partitions.integerpartition property)": [[16, "diofant.combinatorics.partitions.IntegerPartition.conjugate"]], "diofant.combinatorics.partitions": [[16, "module-diofant.combinatorics.partitions"]], "from_rgs() (diofant.combinatorics.partitions.partition class method)": [[16, "diofant.combinatorics.partitions.Partition.from_rgs"]], "next_lex() (diofant.combinatorics.partitions.integerpartition method)": [[16, "diofant.combinatorics.partitions.IntegerPartition.next_lex"]], "partition (diofant.combinatorics.partitions.partition property)": [[16, "diofant.combinatorics.partitions.Partition.partition"]], "prev_lex() (diofant.combinatorics.partitions.integerpartition method)": [[16, "diofant.combinatorics.partitions.IntegerPartition.prev_lex"]], "random_integer_partition() (in module diofant.combinatorics.partitions)": [[16, "diofant.combinatorics.partitions.random_integer_partition"]], "rank (diofant.combinatorics.partitions.partition property)": [[16, "diofant.combinatorics.partitions.Partition.rank"]], "sort_key() (diofant.combinatorics.partitions.partition method)": [[16, "diofant.combinatorics.partitions.Partition.sort_key"]], "permutationgroup (class in diofant.combinatorics.perm_groups)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup"]], "__contains__() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.__contains__"]], "__eq__() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.__eq__"]], "__mul__() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.__mul__"]], "__new__() (diofant.combinatorics.perm_groups.permutationgroup static method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.__new__"]], "_union_find_merge() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup._union_find_merge"]], "_union_find_rep() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup._union_find_rep"]], "base (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.base"]], "baseswap() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.baseswap"]], "basic_orbits (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.basic_orbits"]], "basic_stabilizers (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.basic_stabilizers"]], "basic_transversals (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.basic_transversals"]], "center() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.center"]], "centralizer() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.centralizer"]], "commutator() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.commutator"]], "contains() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.contains"]], "coset_factor() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.coset_factor"]], "coset_rank() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.coset_rank"]], "coset_unrank() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.coset_unrank"]], "degree (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.degree"]], "derived_series() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.derived_series"]], "derived_subgroup() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.derived_subgroup"]], "diofant.combinatorics.perm_groups": [[17, "module-diofant.combinatorics.perm_groups"]], "elements (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.elements"]], "generate() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.generate"]], "generate_dimino() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.generate_dimino"]], "generate_schreier_sims() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.generate_schreier_sims"]], "generators (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.generators"]], "is_abelian (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.is_abelian"]], "is_alt_sym() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.is_alt_sym"]], "is_nilpotent (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.is_nilpotent"]], "is_normal() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.is_normal"]], "is_primitive() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.is_primitive"]], "is_solvable (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.is_solvable"]], "is_subgroup() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.is_subgroup"]], "is_transitive() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.is_transitive"]], "is_trivial (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.is_trivial"]], "lower_central_series() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.lower_central_series"]], "make_perm() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.make_perm"]], "max_div (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.max_div"]], "minimal_block() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.minimal_block"]], "normal_closure() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.normal_closure"]], "orbit() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.orbit"]], "orbit_rep() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.orbit_rep"]], "orbit_transversal() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.orbit_transversal"]], "orbits() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.orbits"]], "order() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.order"]], "pointwise_stabilizer() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.pointwise_stabilizer"]], "random() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.random"]], "random_pr() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.random_pr"]], "random_stab() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.random_stab"]], "schreier_sims() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.schreier_sims"]], "schreier_sims_incremental() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.schreier_sims_incremental"]], "schreier_sims_random() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.schreier_sims_random"]], "schreier_vector() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.schreier_vector"]], "stabilizer() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.stabilizer"]], "strong_gens (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.strong_gens"]], "subgroup_search() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.subgroup_search"]], "transitivity_degree (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.transitivity_degree"]], "cycle (class in diofant.combinatorics.permutations)": [[18, "diofant.combinatorics.permutations.Cycle"]], "permutation (class in diofant.combinatorics.permutations)": [[18, "diofant.combinatorics.permutations.Permutation"]], "_af_parity() (in module diofant.combinatorics.permutations)": [[18, "diofant.combinatorics.permutations._af_parity"]], "alternating() (diofant.combinatorics.generators method)": [[18, "diofant.combinatorics.generators.alternating"]], "array_form (diofant.combinatorics.permutations.permutation property)": [[18, "diofant.combinatorics.permutations.Permutation.array_form"]], "ascents() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.ascents"]], "atoms() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.atoms"]], "cardinality (diofant.combinatorics.permutations.permutation property)": [[18, "diofant.combinatorics.permutations.Permutation.cardinality"]], "commutator() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.commutator"]], "commutes_with() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.commutes_with"]], "cycle_structure (diofant.combinatorics.permutations.permutation property)": [[18, "diofant.combinatorics.permutations.Permutation.cycle_structure"]], "cycles (diofant.combinatorics.permutations.permutation property)": [[18, "diofant.combinatorics.permutations.Permutation.cycles"]], "cyclic() (diofant.combinatorics.generators method)": [[18, "diofant.combinatorics.generators.cyclic"]], "cyclic_form (diofant.combinatorics.permutations.permutation property)": [[18, "diofant.combinatorics.permutations.Permutation.cyclic_form"]], "descents() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.descents"]], "dihedral() (diofant.combinatorics.generators method)": [[18, "diofant.combinatorics.generators.dihedral"]], "diofant.combinatorics.generators": [[18, "module-diofant.combinatorics.generators"]], "diofant.combinatorics.permutations": [[18, "module-diofant.combinatorics.permutations"]], "from_inversion_vector() (diofant.combinatorics.permutations.permutation class method)": [[18, "diofant.combinatorics.permutations.Permutation.from_inversion_vector"]], "from_sequence() (diofant.combinatorics.permutations.permutation class method)": [[18, "diofant.combinatorics.permutations.Permutation.from_sequence"]], "full_cyclic_form (diofant.combinatorics.permutations.permutation property)": [[18, "diofant.combinatorics.permutations.Permutation.full_cyclic_form"]], "get_adjacency_distance() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.get_adjacency_distance"]], "get_adjacency_matrix() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.get_adjacency_matrix"]], "get_positional_distance() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.get_positional_distance"]], "get_precedence_distance() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.get_precedence_distance"]], "get_precedence_matrix() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.get_precedence_matrix"]], "index() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.index"]], "inversion_vector() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.inversion_vector"]], "inversions() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.inversions"]], "is_empty (diofant.combinatorics.permutations.permutation property)": [[18, "diofant.combinatorics.permutations.Permutation.is_Empty"]], "is_identity (diofant.combinatorics.permutations.permutation property)": [[18, "diofant.combinatorics.permutations.Permutation.is_Identity"]], "is_singleton (diofant.combinatorics.permutations.permutation property)": [[18, "diofant.combinatorics.permutations.Permutation.is_Singleton"]], "is_even (diofant.combinatorics.permutations.permutation property)": [[18, "diofant.combinatorics.permutations.Permutation.is_even"]], "is_odd (diofant.combinatorics.permutations.permutation property)": [[18, "diofant.combinatorics.permutations.Permutation.is_odd"]], "josephus() (diofant.combinatorics.permutations.permutation class method)": [[18, "diofant.combinatorics.permutations.Permutation.josephus"]], "length() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.length"]], "list() (diofant.combinatorics.permutations.cycle method)": [[18, "diofant.combinatorics.permutations.Cycle.list"]], "list() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.list"]], "max() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.max"]], "min() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.min"]], "mul_inv() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.mul_inv"]], "next_lex() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.next_lex"]], "next_nonlex() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.next_nonlex"]], "next_trotterjohnson() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.next_trotterjohnson"]], "order() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.order"]], "parity() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.parity"]], "random() (diofant.combinatorics.permutations.permutation class method)": [[18, "diofant.combinatorics.permutations.Permutation.random"]], "rank() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.rank"]], "rank_nonlex() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.rank_nonlex"]], "rank_trotterjohnson() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.rank_trotterjohnson"]], "rmul() (diofant.combinatorics.permutations.permutation static method)": [[18, "diofant.combinatorics.permutations.Permutation.rmul"]], "rmul_with_af() (diofant.combinatorics.permutations.permutation static method)": [[18, "diofant.combinatorics.permutations.Permutation.rmul_with_af"]], "runs() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.runs"]], "signature() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.signature"]], "size (diofant.combinatorics.permutations.permutation property)": [[18, "diofant.combinatorics.permutations.Permutation.size"]], "support() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.support"]], "symmetric() (diofant.combinatorics.generators method)": [[18, "diofant.combinatorics.generators.symmetric"]], "transpositions() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.transpositions"]], "unrank_lex() (diofant.combinatorics.permutations.permutation class method)": [[18, "diofant.combinatorics.permutations.Permutation.unrank_lex"]], "unrank_nonlex() (diofant.combinatorics.permutations.permutation class method)": [[18, "diofant.combinatorics.permutations.Permutation.unrank_nonlex"]], "unrank_trotterjohnson() (diofant.combinatorics.permutations.permutation class method)": [[18, "diofant.combinatorics.permutations.Permutation.unrank_trotterjohnson"]], "polyhedron (class in diofant.combinatorics.polyhedron)": [[19, "diofant.combinatorics.polyhedron.Polyhedron"]], "array_form (diofant.combinatorics.polyhedron.polyhedron property)": [[19, "diofant.combinatorics.polyhedron.Polyhedron.array_form"]], "corners (diofant.combinatorics.polyhedron.polyhedron property)": [[19, "diofant.combinatorics.polyhedron.Polyhedron.corners"]], "cyclic_form (diofant.combinatorics.polyhedron.polyhedron property)": [[19, "diofant.combinatorics.polyhedron.Polyhedron.cyclic_form"]], "diofant.combinatorics.polyhedron": [[19, "module-diofant.combinatorics.polyhedron"]], "edges (diofant.combinatorics.polyhedron.polyhedron property)": [[19, "diofant.combinatorics.polyhedron.Polyhedron.edges"]], "faces (diofant.combinatorics.polyhedron.polyhedron property)": [[19, "diofant.combinatorics.polyhedron.Polyhedron.faces"]], "pgroup (diofant.combinatorics.polyhedron.polyhedron property)": [[19, "diofant.combinatorics.polyhedron.Polyhedron.pgroup"]], "reset() (diofant.combinatorics.polyhedron.polyhedron method)": [[19, "diofant.combinatorics.polyhedron.Polyhedron.reset"]], "rotate() (diofant.combinatorics.polyhedron.polyhedron method)": [[19, "diofant.combinatorics.polyhedron.Polyhedron.rotate"]], "size (diofant.combinatorics.polyhedron.polyhedron property)": [[19, "diofant.combinatorics.polyhedron.Polyhedron.size"]], "vertices (diofant.combinatorics.polyhedron.polyhedron property)": [[19, "diofant.combinatorics.polyhedron.Polyhedron.vertices"]], "prufer (class in diofant.combinatorics.prufer)": [[20, "diofant.combinatorics.prufer.Prufer"]], "diofant.combinatorics.prufer": [[20, "module-diofant.combinatorics.prufer"]], "edges() (diofant.combinatorics.prufer.prufer static method)": [[20, "diofant.combinatorics.prufer.Prufer.edges"]], "next() (diofant.combinatorics.prufer.prufer method)": [[20, "diofant.combinatorics.prufer.Prufer.next"]], "nodes (diofant.combinatorics.prufer.prufer property)": [[20, "diofant.combinatorics.prufer.Prufer.nodes"]], "prev() (diofant.combinatorics.prufer.prufer method)": [[20, "diofant.combinatorics.prufer.Prufer.prev"]], "prufer_rank() (diofant.combinatorics.prufer.prufer method)": [[20, "diofant.combinatorics.prufer.Prufer.prufer_rank"]], "prufer_repr (diofant.combinatorics.prufer.prufer property)": [[20, "diofant.combinatorics.prufer.Prufer.prufer_repr"]], "rank (diofant.combinatorics.prufer.prufer property)": [[20, "diofant.combinatorics.prufer.Prufer.rank"]], "size (diofant.combinatorics.prufer.prufer property)": [[20, "diofant.combinatorics.prufer.Prufer.size"]], "to_prufer() (diofant.combinatorics.prufer.prufer static method)": [[20, "diofant.combinatorics.prufer.Prufer.to_prufer"]], "to_tree() (diofant.combinatorics.prufer.prufer static method)": [[20, "diofant.combinatorics.prufer.Prufer.to_tree"]], "tree_repr (diofant.combinatorics.prufer.prufer property)": [[20, "diofant.combinatorics.prufer.Prufer.tree_repr"]], "unrank() (diofant.combinatorics.prufer.prufer class method)": [[20, "diofant.combinatorics.prufer.Prufer.unrank"]], "subset (class in diofant.combinatorics.subsets)": [[21, "diofant.combinatorics.subsets.Subset"]], "bitlist_from_subset() (diofant.combinatorics.subsets.subset class method)": [[21, "diofant.combinatorics.subsets.Subset.bitlist_from_subset"]], "cardinality (diofant.combinatorics.subsets.subset property)": [[21, "diofant.combinatorics.subsets.Subset.cardinality"]], "diofant.combinatorics.subsets": [[21, "module-diofant.combinatorics.subsets"]], "iterate_binary() (diofant.combinatorics.subsets.subset method)": [[21, "diofant.combinatorics.subsets.Subset.iterate_binary"]], "iterate_graycode() (diofant.combinatorics.subsets.subset method)": [[21, "diofant.combinatorics.subsets.Subset.iterate_graycode"]], "ksubsets() (diofant.combinatorics.subsets method)": [[21, "diofant.combinatorics.subsets.ksubsets"]], "next_binary() (diofant.combinatorics.subsets.subset method)": [[21, "diofant.combinatorics.subsets.Subset.next_binary"]], "next_gray() (diofant.combinatorics.subsets.subset method)": [[21, "diofant.combinatorics.subsets.Subset.next_gray"]], "next_lexicographic() (diofant.combinatorics.subsets.subset method)": [[21, "diofant.combinatorics.subsets.Subset.next_lexicographic"]], "prev_binary() (diofant.combinatorics.subsets.subset method)": [[21, "diofant.combinatorics.subsets.Subset.prev_binary"]], "prev_gray() (diofant.combinatorics.subsets.subset method)": [[21, "diofant.combinatorics.subsets.Subset.prev_gray"]], "prev_lexicographic() (diofant.combinatorics.subsets.subset method)": [[21, "diofant.combinatorics.subsets.Subset.prev_lexicographic"]], "rank_binary (diofant.combinatorics.subsets.subset property)": [[21, "diofant.combinatorics.subsets.Subset.rank_binary"]], "rank_gray (diofant.combinatorics.subsets.subset property)": [[21, "diofant.combinatorics.subsets.Subset.rank_gray"]], "rank_lexicographic (diofant.combinatorics.subsets.subset property)": [[21, "diofant.combinatorics.subsets.Subset.rank_lexicographic"]], "size (diofant.combinatorics.subsets.subset property)": [[21, "diofant.combinatorics.subsets.Subset.size"]], "subset (diofant.combinatorics.subsets.subset property)": [[21, "diofant.combinatorics.subsets.Subset.subset"]], "subset_from_bitlist() (diofant.combinatorics.subsets.subset class method)": [[21, "diofant.combinatorics.subsets.Subset.subset_from_bitlist"]], "subset_indices() (diofant.combinatorics.subsets.subset class method)": [[21, "diofant.combinatorics.subsets.Subset.subset_indices"]], "superset (diofant.combinatorics.subsets.subset property)": [[21, "diofant.combinatorics.subsets.Subset.superset"]], "superset_size (diofant.combinatorics.subsets.subset property)": [[21, "diofant.combinatorics.subsets.Subset.superset_size"]], "unrank_binary() (diofant.combinatorics.subsets.subset class method)": [[21, "diofant.combinatorics.subsets.Subset.unrank_binary"]], "unrank_gray() (diofant.combinatorics.subsets.subset class method)": [[21, "diofant.combinatorics.subsets.Subset.unrank_gray"]], "bsgs_direct_product() (in module diofant.combinatorics.tensor_can)": [[22, "diofant.combinatorics.tensor_can.bsgs_direct_product"]], "canonicalize() (in module diofant.combinatorics.tensor_can)": [[22, "diofant.combinatorics.tensor_can.canonicalize"]], "diofant.combinatorics.tensor_can": [[22, "module-diofant.combinatorics.tensor_can"]], "double_coset_can_rep() (in module diofant.combinatorics.tensor_can)": [[22, "diofant.combinatorics.tensor_can.double_coset_can_rep"]], "get_symmetric_group_sgs() (in module diofant.combinatorics.tensor_can)": [[22, "diofant.combinatorics.tensor_can.get_symmetric_group_sgs"]], "_cmp_perm_lists() (in module diofant.combinatorics.testutil)": [[23, "diofant.combinatorics.testutil._cmp_perm_lists"]], "_naive_list_centralizer() (in module diofant.combinatorics.testutil)": [[23, "diofant.combinatorics.testutil._naive_list_centralizer"]], "_verify_bsgs() (in module diofant.combinatorics.testutil)": [[23, "diofant.combinatorics.testutil._verify_bsgs"]], "_verify_centralizer() (in module diofant.combinatorics.testutil)": [[23, "diofant.combinatorics.testutil._verify_centralizer"]], "_verify_normal_closure() (in module diofant.combinatorics.testutil)": [[23, "diofant.combinatorics.testutil._verify_normal_closure"]], "diofant.combinatorics.testutil": [[23, "module-diofant.combinatorics.testutil"]], "_base_ordering() (in module diofant.combinatorics.util)": [[24, "diofant.combinatorics.util._base_ordering"]], "_check_cycles_alt_sym() (in module diofant.combinatorics.util)": [[24, "diofant.combinatorics.util._check_cycles_alt_sym"]], "_distribute_gens_by_base() (in module diofant.combinatorics.util)": [[24, "diofant.combinatorics.util._distribute_gens_by_base"]], "_handle_precomputed_bsgs() (in module diofant.combinatorics.util)": [[24, "diofant.combinatorics.util._handle_precomputed_bsgs"]], "_orbits_transversals_from_bsgs() (in module diofant.combinatorics.util)": [[24, "diofant.combinatorics.util._orbits_transversals_from_bsgs"]], "_remove_gens() (in module diofant.combinatorics.util)": [[24, "diofant.combinatorics.util._remove_gens"]], "_strip() (in module diofant.combinatorics.util)": [[24, "diofant.combinatorics.util._strip"]], "_strong_gens_from_distr() (in module diofant.combinatorics.util)": [[24, "diofant.combinatorics.util._strong_gens_from_distr"]], "diofant.combinatorics.util": [[24, "module-diofant.combinatorics.util"]], "exprwithintlimits (class in diofant.concrete.expr_with_intlimits)": [[25, "diofant.concrete.expr_with_intlimits.ExprWithIntLimits"]], "exprwithlimits (class in diofant.concrete.expr_with_limits)": [[25, "diofant.concrete.expr_with_limits.ExprWithLimits"]], "product (class in diofant.concrete.products)": [[25, "diofant.concrete.products.Product"]], "sum (class in diofant.concrete.summations)": [[25, "diofant.concrete.summations.Sum"]], "as_dummy() (diofant.concrete.expr_with_limits.exprwithlimits method)": [[25, "diofant.concrete.expr_with_limits.ExprWithLimits.as_dummy"]], "change_index() (diofant.concrete.expr_with_intlimits.exprwithintlimits method)": [[25, "diofant.concrete.expr_with_intlimits.ExprWithIntLimits.change_index"]], "euler_maclaurin() (diofant.concrete.summations.sum method)": [[25, "diofant.concrete.summations.Sum.euler_maclaurin"]], "findrecur() (diofant.concrete.summations.sum method)": [[25, "diofant.concrete.summations.Sum.findrecur"]], "free_symbols (diofant.concrete.expr_with_limits.exprwithlimits property)": [[25, "diofant.concrete.expr_with_limits.ExprWithLimits.free_symbols"]], "function (diofant.concrete.expr_with_limits.exprwithlimits property)": [[25, "diofant.concrete.expr_with_limits.ExprWithLimits.function"]], "gosper_normal() (in module diofant.concrete.gosper)": [[25, "diofant.concrete.gosper.gosper_normal"]], "gosper_sum() (in module diofant.concrete.gosper)": [[25, "diofant.concrete.gosper.gosper_sum"]], "gosper_term() (in module diofant.concrete.gosper)": [[25, "diofant.concrete.gosper.gosper_term"]], "index() (diofant.concrete.expr_with_intlimits.exprwithintlimits method)": [[25, "diofant.concrete.expr_with_intlimits.ExprWithIntLimits.index"]], "is_number (diofant.concrete.expr_with_limits.exprwithlimits property)": [[25, "diofant.concrete.expr_with_limits.ExprWithLimits.is_number"]], "limits (diofant.concrete.expr_with_limits.exprwithlimits property)": [[25, "diofant.concrete.expr_with_limits.ExprWithLimits.limits"]], "product() (in module diofant.concrete.products)": [[25, "diofant.concrete.products.product"]], "reorder() (diofant.concrete.expr_with_intlimits.exprwithintlimits method)": [[25, "diofant.concrete.expr_with_intlimits.ExprWithIntLimits.reorder"]], "reorder_limit() (diofant.concrete.expr_with_intlimits.exprwithintlimits method)": [[25, "diofant.concrete.expr_with_intlimits.ExprWithIntLimits.reorder_limit"]], "reverse_order() (diofant.concrete.products.product method)": [[25, "diofant.concrete.products.Product.reverse_order"]], "reverse_order() (diofant.concrete.summations.sum method)": [[25, "diofant.concrete.summations.Sum.reverse_order"]], "summation() (in module diofant.concrete.summations)": [[25, "diofant.concrete.summations.summation"]], "variables (diofant.concrete.expr_with_limits.exprwithlimits property)": [[25, "diofant.concrete.expr_with_limits.ExprWithLimits.variables"]], "diofant.config": [[26, "module-diofant.config"]], "setup() (in module diofant.config)": [[26, "diofant.config.setup"]], "add (class in diofant.core.add)": [[27, "diofant.core.add.Add"]], "atom (class in diofant.core.basic)": [[27, "diofant.core.basic.Atom"]], "atomicexpr (class in diofant.core.expr)": [[27, "diofant.core.expr.AtomicExpr"]], "basic (class in diofant.core.basic)": [[27, "diofant.core.basic.Basic"]], "catalan (class in diofant.core.numbers)": [[27, "diofant.core.numbers.Catalan"]], "complexinfinity (class in diofant.core.numbers)": [[27, "diofant.core.numbers.ComplexInfinity"]], "derivative (class in diofant.core.function)": [[27, "diofant.core.function.Derivative"]], "dict (class in diofant.core.containers)": [[27, "diofant.core.containers.Dict"]], "dummy (class in diofant.core.symbol)": [[27, "diofant.core.symbol.Dummy"]], "eq (in module diofant.core.relational)": [[27, "diofant.core.relational.Eq"]], "equality (class in diofant.core.relational)": [[27, "diofant.core.relational.Equality"]], "eulergamma (class in diofant.core.numbers)": [[27, "diofant.core.numbers.EulerGamma"]], "evalfmixin (class in diofant.core.evalf)": [[27, "diofant.core.evalf.EvalfMixin"]], "exp1 (class in diofant.core.numbers)": [[27, "diofant.core.numbers.Exp1"]], "expr (class in diofant.core.expr)": [[27, "diofant.core.expr.Expr"]], "float (class in diofant.core.numbers)": [[27, "diofant.core.numbers.Float"]], "function (class in diofant.core.function)": [[27, "diofant.core.function.Function"]], "functionclass (class in diofant.core.function)": [[27, "diofant.core.function.FunctionClass"]], "ge (in module diofant.core.relational)": [[27, "diofant.core.relational.Ge"]], "goldenratio (class in diofant.core.numbers)": [[27, "diofant.core.numbers.GoldenRatio"]], "greaterthan (class in diofant.core.relational)": [[27, "diofant.core.relational.GreaterThan"]], "gt (in module diofant.core.relational)": [[27, "diofant.core.relational.Gt"]], "half (class in diofant.core.numbers)": [[27, "diofant.core.numbers.Half"]], "imaginaryunit (class in diofant.core.numbers)": [[27, "diofant.core.numbers.ImaginaryUnit"]], "infinity (class in diofant.core.numbers)": [[27, "diofant.core.numbers.Infinity"]], "integer (class in diofant.core.numbers)": [[27, "diofant.core.numbers.Integer"]], "lambda (class in diofant.core.function)": [[27, "diofant.core.function.Lambda"]], "le (in module diofant.core.relational)": [[27, "diofant.core.relational.Le"]], "lessthan (class in diofant.core.relational)": [[27, "diofant.core.relational.LessThan"]], "lt (in module diofant.core.relational)": [[27, "diofant.core.relational.Lt"]], "managedproperties (class in diofant.core.assumptions)": [[27, "diofant.core.assumptions.ManagedProperties"]], "mod (class in diofant.core.mod)": [[27, "diofant.core.mod.Mod"]], "mul (class in diofant.core.mul)": [[27, "diofant.core.mul.Mul"]], "n() (in module diofant.core.evalf)": [[27, "diofant.core.evalf.N"]], "nan (class in diofant.core.numbers)": [[27, "diofant.core.numbers.NaN"]], "ne (in module diofant.core.relational)": [[27, "diofant.core.relational.Ne"]], "negativeinfinity (class in diofant.core.numbers)": [[27, "diofant.core.numbers.NegativeInfinity"]], "negativeone (class in diofant.core.numbers)": [[27, "diofant.core.numbers.NegativeOne"]], "notiterable (class in diofant.core.compatibility)": [[27, "diofant.core.compatibility.NotIterable"]], "number (class in diofant.core.numbers)": [[27, "diofant.core.numbers.Number"]], "numbersymbol (class in diofant.core.numbers)": [[27, "diofant.core.numbers.NumberSymbol"]], "one (class in diofant.core.numbers)": [[27, "diofant.core.numbers.One"]], "pi (class in diofant.core.numbers)": [[27, "diofant.core.numbers.Pi"]], "poleerror (class in diofant.core.function)": [[27, "diofant.core.function.PoleError"]], "pow (class in diofant.core.power)": [[27, "diofant.core.power.Pow"]], "precisionexhausted (class in diofant.core.evalf)": [[27, "diofant.core.evalf.PrecisionExhausted"]], "rational (class in diofant.core.numbers)": [[27, "diofant.core.numbers.Rational"]], "rel (in module diofant.core.relational)": [[27, "diofant.core.relational.Rel"]], "relational (class in diofant.core.relational)": [[27, "diofant.core.relational.Relational"]], "s (in module diofant.core.singleton)": [[27, "diofant.core.singleton.S"]], "singleton (class in diofant.core.singleton)": [[27, "diofant.core.singleton.Singleton"]], "singletonregistry (class in diofant.core.singleton)": [[27, "diofant.core.singleton.SingletonRegistry"]], "singletonwithmanagedproperties (class in diofant.core.singleton)": [[27, "diofant.core.singleton.SingletonWithManagedProperties"]], "stdfactkb (class in diofant.core.assumptions)": [[27, "diofant.core.assumptions.StdFactKB"]], "strictgreaterthan (class in diofant.core.relational)": [[27, "diofant.core.relational.StrictGreaterThan"]], "strictlessthan (class in diofant.core.relational)": [[27, "diofant.core.relational.StrictLessThan"]], "subs (class in diofant.core.function)": [[27, "diofant.core.function.Subs"]], "symbol (class in diofant.core.symbol)": [[27, "diofant.core.symbol.Symbol"]], "tuple (class in diofant.core.containers)": [[27, "diofant.core.containers.Tuple"]], "unequality (class in diofant.core.relational)": [[27, "diofant.core.relational.Unequality"]], "wild (class in diofant.core.symbol)": [[27, "diofant.core.symbol.Wild"]], "wildfunction (class in diofant.core.function)": [[27, "diofant.core.function.WildFunction"]], "zero (class in diofant.core.numbers)": [[27, "diofant.core.numbers.Zero"]], "adjoint() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.adjoint"]], "apart() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.apart"]], "approximation_interval() (diofant.core.numbers.numbersymbol method)": [[27, "diofant.core.numbers.NumberSymbol.approximation_interval"]], "args (diofant.core.basic.basic property)": [[27, "diofant.core.basic.Basic.args"]], "args (diofant.core.containers.dict property)": [[27, "diofant.core.containers.Dict.args"]], "args_cnc() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.args_cnc"]], "as_base_exp() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_base_exp"]], "as_base_exp() (diofant.core.mul.mul method)": [[27, "diofant.core.mul.Mul.as_base_exp"]], "as_base_exp() (diofant.core.power.pow method)": [[27, "diofant.core.power.Pow.as_base_exp"]], "as_coeff_add() (diofant.core.add.add method)": [[27, "diofant.core.add.Add.as_coeff_Add"], [27, "diofant.core.add.Add.as_coeff_add"]], "as_coeff_add() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_coeff_Add"], [27, "diofant.core.expr.Expr.as_coeff_add"]], "as_coeff_add() (diofant.core.numbers.number method)": [[27, "diofant.core.numbers.Number.as_coeff_Add"], [27, "diofant.core.numbers.Number.as_coeff_add"]], "as_coeff_mul() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_coeff_Mul"], [27, "diofant.core.expr.Expr.as_coeff_mul"]], "as_coeff_mul() (diofant.core.mul.mul method)": [[27, "diofant.core.mul.Mul.as_coeff_Mul"], [27, "diofant.core.mul.Mul.as_coeff_mul"]], "as_coeff_mul() (diofant.core.numbers.number method)": [[27, "diofant.core.numbers.Number.as_coeff_Mul"], [27, "diofant.core.numbers.Number.as_coeff_mul"]], "as_coeff_exponent() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_coeff_exponent"]], "as_coefficient() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_coefficient"]], "as_coefficients_dict() (diofant.core.add.add method)": [[27, "diofant.core.add.Add.as_coefficients_dict"]], "as_coefficients_dict() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_coefficients_dict"]], "as_content_primitive() (diofant.core.add.add method)": [[27, "diofant.core.add.Add.as_content_primitive"]], "as_content_primitive() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_content_primitive"]], "as_content_primitive() (diofant.core.mul.mul method)": [[27, "diofant.core.mul.Mul.as_content_primitive"]], "as_content_primitive() (diofant.core.numbers.rational method)": [[27, "diofant.core.numbers.Rational.as_content_primitive"]], "as_content_primitive() (diofant.core.power.pow method)": [[27, "diofant.core.power.Pow.as_content_primitive"]], "as_expr() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_expr"]], "as_independent() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_independent"]], "as_int() (in module diofant.core.compatibility)": [[27, "diofant.core.compatibility.as_int"]], "as_leading_term() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_leading_term"]], "as_numer_denom() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_numer_denom"]], "as_ordered_factors() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_ordered_factors"]], "as_ordered_factors() (diofant.core.mul.mul method)": [[27, "diofant.core.mul.Mul.as_ordered_factors"]], "as_ordered_terms() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_ordered_terms"]], "as_poly() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_poly"]], "as_powers_dict() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_powers_dict"]], "as_powers_dict() (diofant.core.mul.mul method)": [[27, "diofant.core.mul.Mul.as_powers_dict"]], "as_property() (in module diofant.core.assumptions)": [[27, "diofant.core.assumptions.as_property"]], "as_real_imag() (diofant.core.add.add method)": [[27, "diofant.core.add.Add.as_real_imag"]], "as_real_imag() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_real_imag"]], "as_real_imag() (diofant.core.mul.mul method)": [[27, "diofant.core.mul.Mul.as_real_imag"]], "as_real_imag() (diofant.core.power.pow method)": [[27, "diofant.core.power.Pow.as_real_imag"]], "as_set() (diofant.core.relational.relational method)": [[27, "diofant.core.relational.Relational.as_set"]], "as_terms() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_terms"]], "as_two_terms() (diofant.core.add.add method)": [[27, "diofant.core.add.Add.as_two_terms"]], "as_two_terms() (diofant.core.mul.mul method)": [[27, "diofant.core.mul.Mul.as_two_terms"]], "aseries() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.aseries"]], "atoms() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.atoms"]], "base (diofant.core.power.pow property)": [[27, "diofant.core.power.Pow.base"]], "cacheit() (in module diofant.core.cache)": [[27, "diofant.core.cache.cacheit"]], "cancel() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.cancel"]], "canonical (diofant.core.relational.relational property)": [[27, "diofant.core.relational.Relational.canonical"]], "canonical_variables (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.canonical_variables"]], "ceiling() (diofant.core.numbers.float method)": [[27, "diofant.core.numbers.Float.ceiling"]], "check_assumptions() (in module diofant.core.assumptions)": [[27, "diofant.core.assumptions.check_assumptions"]], "class_key() (diofant.core.add.add class method)": [[27, "diofant.core.add.Add.class_key"]], "class_key() (diofant.core.basic.atom class method)": [[27, "diofant.core.basic.Atom.class_key"]], "class_key() (diofant.core.basic.basic class method)": [[27, "diofant.core.basic.Basic.class_key"]], "class_key() (diofant.core.function.function class method)": [[27, "diofant.core.function.Function.class_key"]], "class_key() (diofant.core.mul.mul class method)": [[27, "diofant.core.mul.Mul.class_key"]], "class_key() (diofant.core.numbers.number class method)": [[27, "diofant.core.numbers.Number.class_key"]], "class_key() (diofant.core.power.pow class method)": [[27, "diofant.core.power.Pow.class_key"]], "class_key() (diofant.core.symbol.dummy class method)": [[27, "diofant.core.symbol.Dummy.class_key"]], "coeff() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.coeff"]], "cofactors() (diofant.core.numbers.number method)": [[27, "diofant.core.numbers.Number.cofactors"]], "collect() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.collect"]], "combsimp() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.combsimp"]], "compute_leading_term() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.compute_leading_term"]], "conjugate() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.conjugate"]], "copy() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.copy"]], "could_extract_minus_sign() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.could_extract_minus_sign"]], "count() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.count"]], "count_ops() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.count_ops"]], "count_ops() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.count_ops"]], "count_ops() (in module diofant.core.function)": [[27, "diofant.core.function.count_ops"]], "diff() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.diff"]], "diff() (in module diofant.core.function)": [[27, "diofant.core.function.diff"]], "diofant.core": [[27, "module-diofant.core"]], "diofant.core.add": [[27, "module-diofant.core.add"]], "diofant.core.assumptions": [[27, "module-diofant.core.assumptions"]], "diofant.core.basic": [[27, "module-diofant.core.basic"]], "diofant.core.cache": [[27, "module-diofant.core.cache"]], "diofant.core.compatibility": [[27, "module-diofant.core.compatibility"]], "diofant.core.containers": [[27, "module-diofant.core.containers"]], "diofant.core.core": [[27, "module-diofant.core.core"]], "diofant.core.evalf": [[27, "module-diofant.core.evalf"]], "diofant.core.evaluate": [[27, "module-diofant.core.evaluate"]], "diofant.core.expr": [[27, "module-diofant.core.expr"]], "diofant.core.exprtools": [[27, "module-diofant.core.exprtools"]], "diofant.core.function": [[27, "module-diofant.core.function"]], "diofant.core.mod": [[27, "module-diofant.core.mod"]], "diofant.core.mul": [[27, "module-diofant.core.mul"]], "diofant.core.multidimensional": [[27, "module-diofant.core.multidimensional"]], "diofant.core.numbers": [[27, "module-diofant.core.numbers"]], "diofant.core.power": [[27, "module-diofant.core.power"]], "diofant.core.relational": [[27, "module-diofant.core.relational"]], "diofant.core.singleton": [[27, "module-diofant.core.singleton"]], "diofant.core.symbol": [[27, "module-diofant.core.symbol"]], "diofant.core.sympify": [[27, "module-diofant.core.sympify"]], "doit() (diofant.core.basic.atom method)": [[27, "diofant.core.basic.Atom.doit"]], "doit() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.doit"]], "doit() (diofant.core.function.derivative method)": [[27, "diofant.core.function.Derivative.doit"]], "doit() (diofant.core.function.subs method)": [[27, "diofant.core.function.Subs.doit"]], "doit_numerically() (diofant.core.function.derivative method)": [[27, "diofant.core.function.Derivative.doit_numerically"]], "epsilon_eq() (diofant.core.numbers.float method)": [[27, "diofant.core.numbers.Float.epsilon_eq"]], "equals() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.equals"]], "equals() (diofant.core.relational.relational method)": [[27, "diofant.core.relational.Relational.equals"]], "evalf() (diofant.core.evalf.evalfmixin method)": [[27, "diofant.core.evalf.EvalfMixin.evalf"]], "evalf() (diofant.core.function.subs method)": [[27, "diofant.core.function.Subs.evalf"]], "evaluate() (in module diofant.core.evaluate)": [[27, "diofant.core.evaluate.evaluate"]], "exp (diofant.core.power.pow property)": [[27, "diofant.core.power.Pow.exp"]], "expand() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.expand"]], "expand() (in module diofant.core.function)": [[27, "diofant.core.function.expand"]], "expand_complex() (in module diofant.core.function)": [[27, "diofant.core.function.expand_complex"]], "expand_func() (in module diofant.core.function)": [[27, "diofant.core.function.expand_func"]], "expand_log() (in module diofant.core.function)": [[27, "diofant.core.function.expand_log"]], "expand_mul() (in module diofant.core.function)": [[27, "diofant.core.function.expand_mul"]], "expand_multinomial() (in module diofant.core.function)": [[27, "diofant.core.function.expand_multinomial"]], "expand_power_base() (in module diofant.core.function)": [[27, "diofant.core.function.expand_power_base"]], "expand_power_exp() (in module diofant.core.function)": [[27, "diofant.core.function.expand_power_exp"]], "expand_trig() (in module diofant.core.function)": [[27, "diofant.core.function.expand_trig"]], "expr (diofant.core.function.derivative property)": [[27, "diofant.core.function.Derivative.expr"]], "expr (diofant.core.function.lambda property)": [[27, "diofant.core.function.Lambda.expr"]], "expr (diofant.core.function.subs property)": [[27, "diofant.core.function.Subs.expr"]], "extract_additively() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.extract_additively"]], "extract_branch_factor() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.extract_branch_factor"]], "extract_leading_order() (diofant.core.add.add method)": [[27, "diofant.core.add.Add.extract_leading_order"]], "extract_multiplicatively() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.extract_multiplicatively"]], "factor() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.factor"]], "factor_terms() (in module diofant.core.exprtools)": [[27, "diofant.core.exprtools.factor_terms"]], "factors() (diofant.core.numbers.rational method)": [[27, "diofant.core.numbers.Rational.factors"]], "fdiff() (diofant.core.function.function method)": [[27, "diofant.core.function.Function.fdiff"]], "find() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.find"]], "flatten() (diofant.core.add.add class method)": [[27, "diofant.core.add.Add.flatten"]], "flatten() (diofant.core.mul.mul class method)": [[27, "diofant.core.mul.Mul.flatten"]], "floor() (diofant.core.numbers.float method)": [[27, "diofant.core.numbers.Float.floor"]], "free_symbols (diofant.core.basic.basic property)": [[27, "diofant.core.basic.Basic.free_symbols"]], "free_symbols (diofant.core.function.derivative property)": [[27, "diofant.core.function.Derivative.free_symbols"]], "free_symbols (diofant.core.function.lambda property)": [[27, "diofant.core.function.Lambda.free_symbols"]], "free_symbols (diofant.core.function.subs property)": [[27, "diofant.core.function.Subs.free_symbols"]], "func (diofant.core.basic.basic property)": [[27, "diofant.core.basic.Basic.func"]], "gcd() (diofant.core.numbers.number method)": [[27, "diofant.core.numbers.Number.gcd"]], "gcd() (diofant.core.numbers.rational method)": [[27, "diofant.core.numbers.Rational.gcd"]], "gcd_terms() (in module diofant.core.exprtools)": [[27, "diofant.core.exprtools.gcd_terms"]], "get() (diofant.core.containers.dict method)": [[27, "diofant.core.containers.Dict.get"]], "geto() (diofant.core.add.add method)": [[27, "diofant.core.add.Add.getO"]], "geto() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.getO"]], "getn() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.getn"]], "has() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.has"]], "index() (diofant.core.containers.tuple method)": [[27, "diofant.core.containers.Tuple.index"]], "integer_digits() (in module diofant.core.numbers)": [[27, "diofant.core.numbers.integer_digits"]], "integer_nthroot() (in module diofant.core.power)": [[27, "diofant.core.power.integer_nthroot"]], "integrate() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.integrate"]], "invert() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.invert"]], "is_algebraic (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_algebraic"]], "is_algebraic_expr() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.is_algebraic_expr"]], "is_commutative (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_commutative"]], "is_comparable (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_comparable"]], "is_complex (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_complex"]], "is_composite (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_composite"]], "is_composite (diofant.core.numbers.integer property)": [[27, "diofant.core.numbers.Integer.is_composite"]], "is_constant() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.is_constant"]], "is_constant() (diofant.core.numbers.number method)": [[27, "diofant.core.numbers.Number.is_constant"]], "is_evaluated (diofant.core.basic.basic property)": [[27, "diofant.core.basic.Basic.is_evaluated"]], "is_even (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_even"]], "is_even (diofant.core.numbers.integer property)": [[27, "diofant.core.numbers.Integer.is_even"]], "is_extended_real (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_extended_real"]], "is_finite (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_finite"]], "is_hypergeometric() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.is_hypergeometric"]], "is_imaginary (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_imaginary"]], "is_imaginary (diofant.core.numbers.integer property)": [[27, "diofant.core.numbers.Integer.is_imaginary"]], "is_infinite (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_infinite"]], "is_integer (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_integer"]], "is_irrational (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_irrational"]], "is_negative (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_negative"]], "is_noninteger (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_noninteger"]], "is_nonnegative (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_nonnegative"]], "is_nonpositive (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_nonpositive"]], "is_nonzero (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_nonzero"]], "is_nonzero (diofant.core.numbers.integer property)": [[27, "diofant.core.numbers.Integer.is_nonzero"]], "is_number (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_number"]], "is_odd (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_odd"]], "is_odd (diofant.core.numbers.integer property)": [[27, "diofant.core.numbers.Integer.is_odd"]], "is_polar (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_polar"]], "is_polynomial() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.is_polynomial"]], "is_positive (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_positive"]], "is_prime (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_prime"]], "is_prime (diofant.core.numbers.integer property)": [[27, "diofant.core.numbers.Integer.is_prime"]], "is_rational (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_rational"]], "is_rational_function() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.is_rational_function"]], "is_real (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_real"]], "is_sequence() (in module diofant.core.compatibility)": [[27, "diofant.core.compatibility.is_sequence"]], "is_transcendental (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_transcendental"]], "is_zero (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_zero"]], "is_zero (diofant.core.numbers.integer property)": [[27, "diofant.core.numbers.Integer.is_zero"]], "items() (diofant.core.containers.dict method)": [[27, "diofant.core.containers.Dict.items"]], "iterable() (in module diofant.core.compatibility)": [[27, "diofant.core.compatibility.iterable"]], "keys() (diofant.core.containers.dict method)": [[27, "diofant.core.containers.Dict.keys"]], "lcm() (diofant.core.numbers.number method)": [[27, "diofant.core.numbers.Number.lcm"]], "lcm() (diofant.core.numbers.rational method)": [[27, "diofant.core.numbers.Rational.lcm"]], "lhs (diofant.core.relational.relational property)": [[27, "diofant.core.relational.Relational.lhs"]], "limit() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.limit"]], "limit_denominator() (diofant.core.numbers.rational method)": [[27, "diofant.core.numbers.Rational.limit_denominator"]], "make_property() (in module diofant.core.assumptions)": [[27, "diofant.core.assumptions.make_property"]], "match() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.match"]], "mod_inverse() (in module diofant.core.numbers)": [[27, "diofant.core.numbers.mod_inverse"]], "nargs (diofant.core.function.functionclass property)": [[27, "diofant.core.function.FunctionClass.nargs"]], "nfloat() (in module diofant.core.function)": [[27, "diofant.core.function.nfloat"]], "normal() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.normal"]], "nseries() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.nseries"]], "nsimplify() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.nsimplify"]], "num (diofant.core.numbers.float property)": [[27, "diofant.core.numbers.Float.num"]], "point (diofant.core.function.subs property)": [[27, "diofant.core.function.Subs.point"]], "powsimp() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.powsimp"]], "preorder_traversal (class in diofant.core.basic)": [[27, "diofant.core.basic.preorder_traversal"]], "primitive() (diofant.core.add.add method)": [[27, "diofant.core.add.Add.primitive"]], "primitive() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.primitive"]], "radsimp() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.radsimp"]], "ratsimp() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.ratsimp"]], "rcall() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.rcall"]], "removeo() (diofant.core.add.add method)": [[27, "diofant.core.add.Add.removeO"]], "removeo() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.removeO"]], "replace() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.replace"]], "reversed (diofant.core.relational.relational property)": [[27, "diofant.core.relational.Relational.reversed"]], "rewrite() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.rewrite"]], "rhs (diofant.core.relational.relational property)": [[27, "diofant.core.relational.Relational.rhs"]], "round() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.round"]], "series() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.series"]], "simplify() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.simplify"]], "skip() (diofant.core.basic.preorder_traversal method)": [[27, "diofant.core.basic.preorder_traversal.skip"]], "sort_key() (diofant.core.basic.atom method)": [[27, "diofant.core.basic.Atom.sort_key"]], "sort_key() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.sort_key"]], "sort_key() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.sort_key"]], "sort_key() (diofant.core.numbers.number method)": [[27, "diofant.core.numbers.Number.sort_key"]], "sort_key() (diofant.core.symbol.dummy method)": [[27, "diofant.core.symbol.Dummy.sort_key"]], "subs() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.subs"]], "symbols() (in module diofant.core.symbol)": [[27, "diofant.core.symbol.symbols"]], "sympify() (in module diofant.core.sympify)": [[27, "diofant.core.sympify.sympify"]], "taylor_term() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.taylor_term"]], "together() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.together"]], "transpose() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.transpose"]], "trigsimp() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.trigsimp"]], "tuple_count() (diofant.core.containers.tuple method)": [[27, "diofant.core.containers.Tuple.tuple_count"]], "values() (diofant.core.containers.dict method)": [[27, "diofant.core.containers.Dict.values"]], "var() (in module diofant.core.symbol)": [[27, "diofant.core.symbol.var"]], "variables (diofant.core.function.derivative property)": [[27, "diofant.core.function.Derivative.variables"]], "variables (diofant.core.function.lambda property)": [[27, "diofant.core.function.Lambda.variables"]], "variables (diofant.core.function.subs property)": [[27, "diofant.core.function.Subs.variables"]], "vectorize (class in diofant.core.multidimensional)": [[27, "diofant.core.multidimensional.vectorize"]], "xreplace() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.xreplace"]], "algebraicfield (class in diofant.domains)": [[28, "diofant.domains.AlgebraicField"]], "characteristiczero (class in diofant.domains.characteristiczero)": [[28, "diofant.domains.characteristiczero.CharacteristicZero"]], "commutativering (class in diofant.domains.ring)": [[28, "diofant.domains.ring.CommutativeRing"]], "complexalgebraicfield (class in diofant.domains)": [[28, "diofant.domains.ComplexAlgebraicField"]], "complexfield (class in diofant.domains)": [[28, "diofant.domains.ComplexField"]], "compositedomain (class in diofant.domains.compositedomain)": [[28, "diofant.domains.compositedomain.CompositeDomain"]], "domain (class in diofant.domains.domain)": [[28, "diofant.domains.domain.Domain"]], "expressiondomain (class in diofant.domains)": [[28, "diofant.domains.ExpressionDomain"]], "expressiondomain.expression (class in diofant.domains)": [[28, "diofant.domains.ExpressionDomain.Expression"]], "field (class in diofant.domains.field)": [[28, "diofant.domains.field.Field"]], "finitefield (class in diofant.domains)": [[28, "diofant.domains.FiniteField"]], "fractionfield (class in diofant.polys.fields)": [[28, "diofant.polys.fields.FractionField"]], "gmpyfinitefield (class in diofant.domains.finitefield)": [[28, "diofant.domains.finitefield.GMPYFiniteField"]], "gmpyintegerring (class in diofant.domains.integerring)": [[28, "diofant.domains.integerring.GMPYIntegerRing"]], "gmpyrationalfield (class in diofant.domains.rationalfield)": [[28, "diofant.domains.rationalfield.GMPYRationalField"]], "galoisfieldelement (class in diofant.domains.finitefield)": [[28, "diofant.domains.finitefield.GaloisFieldElement"]], "integermodring (class in diofant.domains)": [[28, "diofant.domains.IntegerModRing"]], "integerring (class in diofant.domains)": [[28, "diofant.domains.IntegerRing"]], "modularinteger (class in diofant.domains.finitefield)": [[28, "diofant.domains.finitefield.ModularInteger"]], "polynomialring (class in diofant.polys.rings)": [[28, "diofant.polys.rings.PolynomialRing"]], "pythonfinitefield (class in diofant.domains.finitefield)": [[28, "diofant.domains.finitefield.PythonFiniteField"]], "pythonintegerring (class in diofant.domains.integerring)": [[28, "diofant.domains.integerring.PythonIntegerRing"]], "pythonrationalfield (class in diofant.domains.rationalfield)": [[28, "diofant.domains.rationalfield.PythonRationalField"]], "rationalfield (class in diofant.domains)": [[28, "diofant.domains.RationalField"]], "realalgebraicfield (class in diofant.domains)": [[28, "diofant.domains.RealAlgebraicField"]], "realfield (class in diofant.domains)": [[28, "diofant.domains.RealField"]], "simpledomain (class in diofant.domains.simpledomain)": [[28, "diofant.domains.simpledomain.SimpleDomain"]], "univarpolynomialring (class in diofant.polys.univar)": [[28, "diofant.polys.univar.UnivarPolynomialRing"]], "algebraic_field() (diofant.domains.algebraicfield method)": [[28, "diofant.domains.AlgebraicField.algebraic_field"]], "algebraic_field() (diofant.domains.rationalfield method)": [[28, "diofant.domains.RationalField.algebraic_field"]], "almosteq() (diofant.domains.complexfield method)": [[28, "diofant.domains.ComplexField.almosteq"]], "almosteq() (diofant.domains.realfield method)": [[28, "diofant.domains.RealField.almosteq"]], "characteristic (diofant.domains.ring.commutativering property)": [[28, "diofant.domains.ring.CommutativeRing.characteristic"]], "cofactors() (diofant.domains.ring.commutativering method)": [[28, "diofant.domains.ring.CommutativeRing.cofactors"]], "convert() (diofant.domains.domain.domain method)": [[28, "diofant.domains.domain.Domain.convert"]], "convert_from() (diofant.domains.domain.domain method)": [[28, "diofant.domains.domain.Domain.convert_from"]], "diofant.domains": [[28, "module-diofant.domains"]], "dispersionset() (diofant.polys.univar.univarpolynomialring method)": [[28, "diofant.polys.univar.UnivarPolynomialRing.dispersionset"]], "div() (diofant.domains.field.field method)": [[28, "diofant.domains.field.Field.div"]], "div() (diofant.domains.ring.commutativering method)": [[28, "diofant.domains.ring.CommutativeRing.div"]], "drop() (diofant.polys.rings.polynomialring method)": [[28, "diofant.polys.rings.PolynomialRing.drop"]], "dtype (diofant.domains.expressiondomain attribute)": [[28, "diofant.domains.ExpressionDomain.dtype"]], "eject() (diofant.polys.rings.polynomialring method)": [[28, "diofant.polys.rings.PolynomialRing.eject"]], "exquo() (diofant.domains.field.field method)": [[28, "diofant.domains.field.Field.exquo"]], "exquo() (diofant.domains.ring.commutativering method)": [[28, "diofant.domains.ring.CommutativeRing.exquo"]], "field (diofant.domains.integerring property)": [[28, "diofant.domains.IntegerRing.field"]], "field (diofant.domains.field.field property)": [[28, "diofant.domains.field.Field.field"]], "field (diofant.polys.rings.polynomialring property)": [[28, "diofant.polys.rings.PolynomialRing.field"]], "finite_field() (diofant.domains.integerring method)": [[28, "diofant.domains.IntegerRing.finite_field"]], "finite_ring() (diofant.domains.integerring method)": [[28, "diofant.domains.IntegerRing.finite_ring"]], "frac_field() (diofant.domains.domain.domain method)": [[28, "diofant.domains.domain.Domain.frac_field"]], "from_expr() (diofant.domains.domain.domain method)": [[28, "diofant.domains.domain.Domain.from_expr"]], "gcd() (diofant.domains.field.field method)": [[28, "diofant.domains.field.Field.gcd"]], "gcdex() (diofant.polys.rings.polynomialring method)": [[28, "diofant.polys.rings.PolynomialRing.gcdex"]], "get_exact() (diofant.domains.domain.domain method)": [[28, "diofant.domains.domain.Domain.get_exact"]], "half_gcdex() (diofant.domains.ring.commutativering method)": [[28, "diofant.domains.ring.CommutativeRing.half_gcdex"]], "half_gcdex() (diofant.polys.rings.polynomialring method)": [[28, "diofant.polys.rings.PolynomialRing.half_gcdex"]], "index() (diofant.polys.rings.polynomialring method)": [[28, "diofant.polys.rings.PolynomialRing.index"]], "inject() (diofant.domains.compositedomain.compositedomain method)": [[28, "diofant.domains.compositedomain.CompositeDomain.inject"]], "inject() (diofant.domains.simpledomain.simpledomain method)": [[28, "diofant.domains.simpledomain.SimpleDomain.inject"]], "invert() (diofant.domains.ring.commutativering method)": [[28, "diofant.domains.ring.CommutativeRing.invert"]], "is_normal() (diofant.domains.ring.commutativering method)": [[28, "diofant.domains.ring.CommutativeRing.is_normal"]], "is_primitive (diofant.domains.finitefield.modularinteger property)": [[28, "diofant.domains.finitefield.ModularInteger.is_primitive"]], "lcm() (diofant.domains.ring.commutativering method)": [[28, "diofant.domains.ring.CommutativeRing.lcm"]], "poly_ring() (diofant.domains.domain.domain method)": [[28, "diofant.domains.domain.Domain.poly_ring"]], "quo() (diofant.domains.field.field method)": [[28, "diofant.domains.field.Field.quo"]], "quo() (diofant.domains.ring.commutativering method)": [[28, "diofant.domains.ring.CommutativeRing.quo"]], "rem() (diofant.domains.field.field method)": [[28, "diofant.domains.field.Field.rem"]], "rem() (diofant.domains.ring.commutativering method)": [[28, "diofant.domains.ring.CommutativeRing.rem"]], "ring (diofant.domains.ring.commutativering property)": [[28, "diofant.domains.ring.CommutativeRing.ring"]], "to_expr() (diofant.domains.domain.domain method)": [[28, "diofant.domains.domain.Domain.to_expr"]], "to_rational() (diofant.domains.realfield method)": [[28, "diofant.domains.RealField.to_rational"]], "unify() (diofant.domains.domain.domain method)": [[28, "diofant.domains.domain.Domain.unify"]], "fallingfactorial (class in diofant.functions.combinatorial.factorials)": [[29, "diofant.functions.combinatorial.factorials.FallingFactorial"]], "risingfactorial (class in diofant.functions.combinatorial.factorials)": [[29, "diofant.functions.combinatorial.factorials.RisingFactorial"]], "bell (class in diofant.functions.combinatorial.numbers)": [[29, "diofant.functions.combinatorial.numbers.bell"]], "bernoulli (class in diofant.functions.combinatorial.numbers)": [[29, "diofant.functions.combinatorial.numbers.bernoulli"]], "binomial (class in diofant.functions.combinatorial.factorials)": [[29, "diofant.functions.combinatorial.factorials.binomial"]], "catalan (class in diofant.functions.combinatorial.numbers)": [[29, "diofant.functions.combinatorial.numbers.catalan"]], "euler (class in diofant.functions.combinatorial.numbers)": [[29, "diofant.functions.combinatorial.numbers.euler"]], "factorial (class in diofant.functions.combinatorial.factorials)": [[29, "diofant.functions.combinatorial.factorials.factorial"]], "factorial2 (class in diofant.functions.combinatorial.factorials)": [[29, "diofant.functions.combinatorial.factorials.factorial2"]], "fibonacci (class in diofant.functions.combinatorial.numbers)": [[29, "diofant.functions.combinatorial.numbers.fibonacci"]], "harmonic (class in diofant.functions.combinatorial.numbers)": [[29, "diofant.functions.combinatorial.numbers.harmonic"]], "lucas (class in diofant.functions.combinatorial.numbers)": [[29, "diofant.functions.combinatorial.numbers.lucas"]], "stirling() (in module diofant.functions.combinatorial.numbers)": [[29, "diofant.functions.combinatorial.numbers.stirling"]], "subfactorial (class in diofant.functions.combinatorial.factorials)": [[29, "diofant.functions.combinatorial.factorials.subfactorial"]], "abs (class in diofant.functions.elementary.complexes)": [[30, "diofant.functions.elementary.complexes.Abs"]], "exprcondpair (class in diofant.functions.elementary.piecewise)": [[30, "diofant.functions.elementary.piecewise.ExprCondPair"]], "hyperbolicfunction (class in diofant.functions.elementary.hyperbolic)": [[30, "diofant.functions.elementary.hyperbolic.HyperbolicFunction"]], "identityfunction (class in diofant.functions.elementary.miscellaneous)": [[30, "diofant.functions.elementary.miscellaneous.IdentityFunction"]], "lambertw (class in diofant.functions.elementary.exponential)": [[30, "diofant.functions.elementary.exponential.LambertW"]], "max (class in diofant.functions.elementary.miscellaneous)": [[30, "diofant.functions.elementary.miscellaneous.Max"]], "min (class in diofant.functions.elementary.miscellaneous)": [[30, "diofant.functions.elementary.miscellaneous.Min"]], "piecewise (class in diofant.functions.elementary.piecewise)": [[30, "diofant.functions.elementary.piecewise.Piecewise"]], "roundfunction (class in diofant.functions.elementary.integers)": [[30, "diofant.functions.elementary.integers.RoundFunction"]], "acos (class in diofant.functions.elementary.trigonometric)": [[30, "diofant.functions.elementary.trigonometric.acos"]], "acosh (class in diofant.functions.elementary.hyperbolic)": [[30, "diofant.functions.elementary.hyperbolic.acosh"]], "acot (class in diofant.functions.elementary.trigonometric)": [[30, "diofant.functions.elementary.trigonometric.acot"]], "acoth (class in diofant.functions.elementary.hyperbolic)": [[30, "diofant.functions.elementary.hyperbolic.acoth"]], "acsc (class in diofant.functions.elementary.trigonometric)": [[30, "diofant.functions.elementary.trigonometric.acsc"]], "adjoint (class in diofant.functions.elementary.complexes)": [[30, "diofant.functions.elementary.complexes.adjoint"]], "arg (class in diofant.functions.elementary.complexes)": [[30, "diofant.functions.elementary.complexes.arg"]], "as_real_imag() (diofant.functions.elementary.complexes.im method)": [[30, "diofant.functions.elementary.complexes.im.as_real_imag"]], "as_real_imag() (diofant.functions.elementary.complexes.re method)": [[30, "diofant.functions.elementary.complexes.re.as_real_imag"]], "as_real_imag() (diofant.functions.elementary.exponential.log method)": [[30, "diofant.functions.elementary.exponential.log.as_real_imag"]], "as_real_imag() (diofant.functions.elementary.hyperbolic.sinh method)": [[30, "diofant.functions.elementary.hyperbolic.sinh.as_real_imag"]], "asec (class in diofant.functions.elementary.trigonometric)": [[30, "diofant.functions.elementary.trigonometric.asec"]], "asin (class in diofant.functions.elementary.trigonometric)": [[30, "diofant.functions.elementary.trigonometric.asin"]], "asinh (class in diofant.functions.elementary.hyperbolic)": [[30, "diofant.functions.elementary.hyperbolic.asinh"]], "atan (class in diofant.functions.elementary.trigonometric)": [[30, "diofant.functions.elementary.trigonometric.atan"]], "atan2 (class in diofant.functions.elementary.trigonometric)": [[30, "diofant.functions.elementary.trigonometric.atan2"]], "atanh (class in diofant.functions.elementary.hyperbolic)": [[30, "diofant.functions.elementary.hyperbolic.atanh"]], "ceiling (class in diofant.functions.elementary.integers)": [[30, "diofant.functions.elementary.integers.ceiling"]], "cond (diofant.functions.elementary.piecewise.exprcondpair property)": [[30, "diofant.functions.elementary.piecewise.ExprCondPair.cond"]], "conjugate (class in diofant.functions.elementary.complexes)": [[30, "diofant.functions.elementary.complexes.conjugate"]], "cos (class in diofant.functions.elementary.trigonometric)": [[30, "diofant.functions.elementary.trigonometric.cos"]], "cosh (class in diofant.functions.elementary.hyperbolic)": [[30, "diofant.functions.elementary.hyperbolic.cosh"]], "cot (class in diofant.functions.elementary.trigonometric)": [[30, "diofant.functions.elementary.trigonometric.cot"]], "coth (class in diofant.functions.elementary.hyperbolic)": [[30, "diofant.functions.elementary.hyperbolic.coth"]], "csc (class in diofant.functions.elementary.trigonometric)": [[30, "diofant.functions.elementary.trigonometric.csc"]], "csch (class in diofant.functions.elementary.hyperbolic)": [[30, "diofant.functions.elementary.hyperbolic.csch"]], "doit() (diofant.functions.elementary.piecewise.piecewise method)": [[30, "diofant.functions.elementary.piecewise.Piecewise.doit"]], "exp (diofant.functions.elementary.exponential.exp_polar property)": [[30, "diofant.functions.elementary.exponential.exp_polar.exp"]], "exp() (in module diofant.functions.elementary.exponential)": [[30, "diofant.functions.elementary.exponential.exp"]], "exp_polar (class in diofant.functions.elementary.exponential)": [[30, "diofant.functions.elementary.exponential.exp_polar"]], "expr (diofant.functions.elementary.piecewise.exprcondpair property)": [[30, "diofant.functions.elementary.piecewise.ExprCondPair.expr"]], "fdiff() (diofant.functions.elementary.complexes.abs method)": [[30, "diofant.functions.elementary.complexes.Abs.fdiff"]], "fdiff() (diofant.functions.elementary.exponential.lambertw method)": [[30, "diofant.functions.elementary.exponential.LambertW.fdiff"]], "fdiff() (diofant.functions.elementary.exponential.log method)": [[30, "diofant.functions.elementary.exponential.log.fdiff"]], "fdiff() (diofant.functions.elementary.hyperbolic.csch method)": [[30, "diofant.functions.elementary.hyperbolic.csch.fdiff"]], "fdiff() (diofant.functions.elementary.hyperbolic.sinh method)": [[30, "diofant.functions.elementary.hyperbolic.sinh.fdiff"]], "floor (class in diofant.functions.elementary.integers)": [[30, "diofant.functions.elementary.integers.floor"]], "im (class in diofant.functions.elementary.complexes)": [[30, "diofant.functions.elementary.complexes.im"]], "inverse() (diofant.functions.elementary.exponential.log method)": [[30, "diofant.functions.elementary.exponential.log.inverse"]], "inverse() (diofant.functions.elementary.hyperbolic.acosh method)": [[30, "diofant.functions.elementary.hyperbolic.acosh.inverse"]], "inverse() (diofant.functions.elementary.hyperbolic.acoth method)": [[30, "diofant.functions.elementary.hyperbolic.acoth.inverse"]], "inverse() (diofant.functions.elementary.hyperbolic.asinh method)": [[30, "diofant.functions.elementary.hyperbolic.asinh.inverse"]], "inverse() (diofant.functions.elementary.hyperbolic.atanh method)": [[30, "diofant.functions.elementary.hyperbolic.atanh.inverse"]], "inverse() (diofant.functions.elementary.hyperbolic.coth method)": [[30, "diofant.functions.elementary.hyperbolic.coth.inverse"]], "inverse() (diofant.functions.elementary.hyperbolic.sinh method)": [[30, "diofant.functions.elementary.hyperbolic.sinh.inverse"]], "inverse() (diofant.functions.elementary.hyperbolic.tanh method)": [[30, "diofant.functions.elementary.hyperbolic.tanh.inverse"]], "inverse() (diofant.functions.elementary.trigonometric.acos method)": [[30, "diofant.functions.elementary.trigonometric.acos.inverse"]], "inverse() (diofant.functions.elementary.trigonometric.acot method)": [[30, "diofant.functions.elementary.trigonometric.acot.inverse"]], "inverse() (diofant.functions.elementary.trigonometric.acsc method)": [[30, "diofant.functions.elementary.trigonometric.acsc.inverse"]], "inverse() (diofant.functions.elementary.trigonometric.asec method)": [[30, "diofant.functions.elementary.trigonometric.asec.inverse"]], "inverse() (diofant.functions.elementary.trigonometric.asin method)": [[30, "diofant.functions.elementary.trigonometric.asin.inverse"]], "inverse() (diofant.functions.elementary.trigonometric.atan method)": [[30, "diofant.functions.elementary.trigonometric.atan.inverse"]], "inverse() (diofant.functions.elementary.trigonometric.cot method)": [[30, "diofant.functions.elementary.trigonometric.cot.inverse"]], "inverse() (diofant.functions.elementary.trigonometric.tan method)": [[30, "diofant.functions.elementary.trigonometric.tan.inverse"]], "log (class in diofant.functions.elementary.exponential)": [[30, "diofant.functions.elementary.exponential.log"]], "periodic_argument (class in diofant.functions.elementary.complexes)": [[30, "diofant.functions.elementary.complexes.periodic_argument"]], "piecewise_fold() (in module diofant.functions.elementary.piecewise)": [[30, "diofant.functions.elementary.piecewise.piecewise_fold"]], "polar_lift (class in diofant.functions.elementary.complexes)": [[30, "diofant.functions.elementary.complexes.polar_lift"]], "principal_branch (class in diofant.functions.elementary.complexes)": [[30, "diofant.functions.elementary.complexes.principal_branch"]], "re (class in diofant.functions.elementary.complexes)": [[30, "diofant.functions.elementary.complexes.re"]], "real_root() (in module diofant.functions.elementary.miscellaneous)": [[30, "diofant.functions.elementary.miscellaneous.real_root"]], "root() (in module diofant.functions.elementary.miscellaneous)": [[30, "diofant.functions.elementary.miscellaneous.root"]], "sec (class in diofant.functions.elementary.trigonometric)": [[30, "diofant.functions.elementary.trigonometric.sec"]], "sech (class in diofant.functions.elementary.hyperbolic)": [[30, "diofant.functions.elementary.hyperbolic.sech"]], "sign (class in diofant.functions.elementary.complexes)": [[30, "diofant.functions.elementary.complexes.sign"]], "sin (class in diofant.functions.elementary.trigonometric)": [[30, "diofant.functions.elementary.trigonometric.sin"]], "sinh (class in diofant.functions.elementary.hyperbolic)": [[30, "diofant.functions.elementary.hyperbolic.sinh"]], "sqrt() (in module diofant.functions.elementary.miscellaneous)": [[30, "diofant.functions.elementary.miscellaneous.sqrt"]], "tan (class in diofant.functions.elementary.trigonometric)": [[30, "diofant.functions.elementary.trigonometric.tan"]], "tanh (class in diofant.functions.elementary.hyperbolic)": [[30, "diofant.functions.elementary.hyperbolic.tanh"]], "taylor_term() (diofant.functions.elementary.hyperbolic.csch static method)": [[30, "diofant.functions.elementary.hyperbolic.csch.taylor_term"]], "taylor_term() (diofant.functions.elementary.hyperbolic.sinh static method)": [[30, "diofant.functions.elementary.hyperbolic.sinh.taylor_term"]], "transpose (class in diofant.functions.elementary.complexes)": [[30, "diofant.functions.elementary.complexes.transpose"]], "diofant.functions": [[31, "module-diofant.functions"]], "airybase (class in diofant.functions.special.bessel)": [[32, "diofant.functions.special.bessel.AiryBase"]], "besselbase (class in diofant.functions.special.bessel)": [[32, "diofant.functions.special.bessel.BesselBase"]], "chi (class in diofant.functions.special.error_functions)": [[32, "diofant.functions.special.error_functions.Chi"]], "ci (class in diofant.functions.special.error_functions)": [[32, "diofant.functions.special.error_functions.Ci"]], "diracdelta (class in diofant.functions.special.delta_functions)": [[32, "diofant.functions.special.delta_functions.DiracDelta"]], "e1() (in module diofant.functions.special.error_functions)": [[32, "diofant.functions.special.error_functions.E1"]], "ei (class in diofant.functions.special.error_functions)": [[32, "diofant.functions.special.error_functions.Ei"]], "eijk() (in module diofant.functions.special.tensor_functions)": [[32, "diofant.functions.special.tensor_functions.Eijk"]], "fresnelintegral (class in diofant.functions.special.error_functions)": [[32, "diofant.functions.special.error_functions.FresnelIntegral"]], "heaviside (class in diofant.functions.special.delta_functions)": [[32, "diofant.functions.special.delta_functions.Heaviside"]], "kroneckerdelta (class in diofant.functions.special.tensor_functions)": [[32, "diofant.functions.special.tensor_functions.KroneckerDelta"]], "levicivita (class in diofant.functions.special.tensor_functions)": [[32, "diofant.functions.special.tensor_functions.LeviCivita"]], "li (class in diofant.functions.special.error_functions)": [[32, "diofant.functions.special.error_functions.Li"], [32, "diofant.functions.special.error_functions.li"]], "shi (class in diofant.functions.special.error_functions)": [[32, "diofant.functions.special.error_functions.Shi"]], "si (class in diofant.functions.special.error_functions)": [[32, "diofant.functions.special.error_functions.Si"]], "ynm (class in diofant.functions.special.spherical_harmonics)": [[32, "diofant.functions.special.spherical_harmonics.Ynm"]], "ynm_c() (in module diofant.functions.special.spherical_harmonics)": [[32, "diofant.functions.special.spherical_harmonics.Ynm_c"]], "znm (class in diofant.functions.special.spherical_harmonics)": [[32, "diofant.functions.special.spherical_harmonics.Znm"]], "airyai (class in diofant.functions.special.bessel)": [[32, "diofant.functions.special.bessel.airyai"]], "airyaiprime (class in diofant.functions.special.bessel)": [[32, "diofant.functions.special.bessel.airyaiprime"]], "airybi (class in diofant.functions.special.bessel)": [[32, "diofant.functions.special.bessel.airybi"]], "airybiprime (class in diofant.functions.special.bessel)": [[32, "diofant.functions.special.bessel.airybiprime"]], "an (diofant.functions.special.hyper.meijerg property)": [[32, "diofant.functions.special.hyper.meijerg.an"]], "aother (diofant.functions.special.hyper.meijerg property)": [[32, "diofant.functions.special.hyper.meijerg.aother"]], "ap (diofant.functions.special.hyper.hyper property)": [[32, "diofant.functions.special.hyper.hyper.ap"]], "ap (diofant.functions.special.hyper.meijerg property)": [[32, "diofant.functions.special.hyper.meijerg.ap"]], "argument (diofant.functions.special.bessel.besselbase property)": [[32, "diofant.functions.special.bessel.BesselBase.argument"]], "argument (diofant.functions.special.hyper.hyper property)": [[32, "diofant.functions.special.hyper.hyper.argument"]], "argument (diofant.functions.special.hyper.meijerg property)": [[32, "diofant.functions.special.hyper.meijerg.argument"]], "assoc_laguerre (class in diofant.functions.special.polynomials)": [[32, "diofant.functions.special.polynomials.assoc_laguerre"]], "assoc_legendre (class in diofant.functions.special.polynomials)": [[32, "diofant.functions.special.polynomials.assoc_legendre"]], "besseli (class in diofant.functions.special.bessel)": [[32, "diofant.functions.special.bessel.besseli"]], "besselj (class in diofant.functions.special.bessel)": [[32, "diofant.functions.special.bessel.besselj"]], "besselk (class in diofant.functions.special.bessel)": [[32, "diofant.functions.special.bessel.besselk"]], "bessely (class in diofant.functions.special.bessel)": [[32, "diofant.functions.special.bessel.bessely"]], "beta (class in diofant.functions.special.beta_functions)": [[32, "diofant.functions.special.beta_functions.beta"]], "bm (diofant.functions.special.hyper.meijerg property)": [[32, "diofant.functions.special.hyper.meijerg.bm"]], "bother (diofant.functions.special.hyper.meijerg property)": [[32, "diofant.functions.special.hyper.meijerg.bother"]], "bq (diofant.functions.special.hyper.hyper property)": [[32, "diofant.functions.special.hyper.hyper.bq"]], "bq (diofant.functions.special.hyper.meijerg property)": [[32, "diofant.functions.special.hyper.meijerg.bq"]], "bspline_basis() (in module diofant.functions.special.bsplines)": [[32, "diofant.functions.special.bsplines.bspline_basis"]], "bspline_basis_set() (in module diofant.functions.special.bsplines)": [[32, "diofant.functions.special.bsplines.bspline_basis_set"]], "chebyshevt (class in diofant.functions.special.polynomials)": [[32, "diofant.functions.special.polynomials.chebyshevt"]], "chebyshevt_root (class in diofant.functions.special.polynomials)": [[32, "diofant.functions.special.polynomials.chebyshevt_root"]], "chebyshevu (class in diofant.functions.special.polynomials)": [[32, "diofant.functions.special.polynomials.chebyshevu"]], "chebyshevu_root (class in diofant.functions.special.polynomials)": [[32, "diofant.functions.special.polynomials.chebyshevu_root"]], "convergence_statement (diofant.functions.special.hyper.hyper property)": [[32, "diofant.functions.special.hyper.hyper.convergence_statement"]], "delta (diofant.functions.special.hyper.meijerg property)": [[32, "diofant.functions.special.hyper.meijerg.delta"]], "digamma() (in module diofant.functions.special.gamma_functions)": [[32, "diofant.functions.special.gamma_functions.digamma"]], "diofant.functions.special.bessel": [[32, "module-diofant.functions.special.bessel"]], "diofant.functions.special.beta_functions": [[32, "module-diofant.functions.special.beta_functions"]], "diofant.functions.special.elliptic_integrals": [[32, "module-diofant.functions.special.elliptic_integrals"]], "diofant.functions.special.error_functions": [[32, "module-diofant.functions.special.error_functions"]], "diofant.functions.special.gamma_functions": [[32, "module-diofant.functions.special.gamma_functions"]], "diofant.functions.special.polynomials": [[32, "module-diofant.functions.special.polynomials"]], "diofant.functions.special.zeta_functions": [[32, "module-diofant.functions.special.zeta_functions"]], "dirichlet_eta (class in diofant.functions.special.zeta_functions)": [[32, "diofant.functions.special.zeta_functions.dirichlet_eta"]], "elliptic_e (class in diofant.functions.special.elliptic_integrals)": [[32, "diofant.functions.special.elliptic_integrals.elliptic_e"]], "elliptic_f (class in diofant.functions.special.elliptic_integrals)": [[32, "diofant.functions.special.elliptic_integrals.elliptic_f"]], "elliptic_k (class in diofant.functions.special.elliptic_integrals)": [[32, "diofant.functions.special.elliptic_integrals.elliptic_k"]], "elliptic_pi (class in diofant.functions.special.elliptic_integrals)": [[32, "diofant.functions.special.elliptic_integrals.elliptic_pi"]], "erf (class in diofant.functions.special.error_functions)": [[32, "diofant.functions.special.error_functions.erf"]], "erf2 (class in diofant.functions.special.error_functions)": [[32, "diofant.functions.special.error_functions.erf2"]], "erf2inv (class in diofant.functions.special.error_functions)": [[32, "diofant.functions.special.error_functions.erf2inv"]], "erfc (class in diofant.functions.special.error_functions)": [[32, "diofant.functions.special.error_functions.erfc"]], "erfcinv (class in diofant.functions.special.error_functions)": [[32, "diofant.functions.special.error_functions.erfcinv"]], "erfi (class in diofant.functions.special.error_functions)": [[32, "diofant.functions.special.error_functions.erfi"]], "erfinv (class in diofant.functions.special.error_functions)": [[32, "diofant.functions.special.error_functions.erfinv"]], "eta (diofant.functions.special.hyper.hyper property)": [[32, "diofant.functions.special.hyper.hyper.eta"]], "eval() (diofant.functions.special.tensor_functions.kroneckerdelta class method)": [[32, "diofant.functions.special.tensor_functions.KroneckerDelta.eval"]], "eval_levicivita() (in module diofant.functions.special.tensor_functions)": [[32, "diofant.functions.special.tensor_functions.eval_levicivita"]], "expint (class in diofant.functions.special.error_functions)": [[32, "diofant.functions.special.error_functions.expint"]], "fresnelc (class in diofant.functions.special.error_functions)": [[32, "diofant.functions.special.error_functions.fresnelc"]], "fresnels (class in diofant.functions.special.error_functions)": [[32, "diofant.functions.special.error_functions.fresnels"]], "gamma (class in diofant.functions.special.gamma_functions)": [[32, "diofant.functions.special.gamma_functions.gamma"]], "gegenbauer (class in diofant.functions.special.polynomials)": [[32, "diofant.functions.special.polynomials.gegenbauer"]], "get_period() (diofant.functions.special.hyper.meijerg method)": [[32, "diofant.functions.special.hyper.meijerg.get_period"]], "hankel1 (class in diofant.functions.special.bessel)": [[32, "diofant.functions.special.bessel.hankel1"]], "hankel2 (class in diofant.functions.special.bessel)": [[32, "diofant.functions.special.bessel.hankel2"]], "hermite (class in diofant.functions.special.polynomials)": [[32, "diofant.functions.special.polynomials.hermite"]], "hyper (class in diofant.functions.special.hyper)": [[32, "diofant.functions.special.hyper.hyper"]], "indices_contain_equal_information (diofant.functions.special.tensor_functions.kroneckerdelta property)": [[32, "diofant.functions.special.tensor_functions.KroneckerDelta.indices_contain_equal_information"]], "integrand() (diofant.functions.special.hyper.meijerg method)": [[32, "diofant.functions.special.hyper.meijerg.integrand"]], "is_above_fermi (diofant.functions.special.tensor_functions.kroneckerdelta property)": [[32, "diofant.functions.special.tensor_functions.KroneckerDelta.is_above_fermi"]], "is_below_fermi (diofant.functions.special.tensor_functions.kroneckerdelta property)": [[32, "diofant.functions.special.tensor_functions.KroneckerDelta.is_below_fermi"]], "is_only_above_fermi (diofant.functions.special.tensor_functions.kroneckerdelta property)": [[32, "diofant.functions.special.tensor_functions.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (diofant.functions.special.tensor_functions.kroneckerdelta property)": [[32, "diofant.functions.special.tensor_functions.KroneckerDelta.is_only_below_fermi"]], "is_simple() (diofant.functions.special.delta_functions.diracdelta method)": [[32, "diofant.functions.special.delta_functions.DiracDelta.is_simple"]], "jacobi (class in diofant.functions.special.polynomials)": [[32, "diofant.functions.special.polynomials.jacobi"]], "jacobi_normalized() (in module diofant.functions.special.polynomials)": [[32, "diofant.functions.special.polynomials.jacobi_normalized"]], "jn (class in diofant.functions.special.bessel)": [[32, "diofant.functions.special.bessel.jn"]], "jn_zeros() (in module diofant.functions.special.bessel)": [[32, "diofant.functions.special.bessel.jn_zeros"]], "killable_index (diofant.functions.special.tensor_functions.kroneckerdelta property)": [[32, "diofant.functions.special.tensor_functions.KroneckerDelta.killable_index"]], "laguerre (class in diofant.functions.special.polynomials)": [[32, "diofant.functions.special.polynomials.laguerre"]], "legendre (class in diofant.functions.special.polynomials)": [[32, "diofant.functions.special.polynomials.legendre"]], "lerchphi (class in diofant.functions.special.zeta_functions)": [[32, "diofant.functions.special.zeta_functions.lerchphi"]], "loggamma (class in diofant.functions.special.gamma_functions)": [[32, "diofant.functions.special.gamma_functions.loggamma"]], "lowergamma (class in diofant.functions.special.gamma_functions)": [[32, "diofant.functions.special.gamma_functions.lowergamma"]], "meijerg (class in diofant.functions.special.hyper)": [[32, "diofant.functions.special.hyper.meijerg"]], "nu (diofant.functions.special.hyper.meijerg property)": [[32, "diofant.functions.special.hyper.meijerg.nu"]], "order (diofant.functions.special.bessel.besselbase property)": [[32, "diofant.functions.special.bessel.BesselBase.order"]], "polygamma (class in diofant.functions.special.gamma_functions)": [[32, "diofant.functions.special.gamma_functions.polygamma"]], "polylog (class in diofant.functions.special.zeta_functions)": [[32, "diofant.functions.special.zeta_functions.polylog"]], "preferred_index (diofant.functions.special.tensor_functions.kroneckerdelta property)": [[32, "diofant.functions.special.tensor_functions.KroneckerDelta.preferred_index"]], "radius_of_convergence (diofant.functions.special.hyper.hyper property)": [[32, "diofant.functions.special.hyper.hyper.radius_of_convergence"]], "simplify() (diofant.functions.special.delta_functions.diracdelta method)": [[32, "diofant.functions.special.delta_functions.DiracDelta.simplify"]], "trigamma() (in module diofant.functions.special.gamma_functions)": [[32, "diofant.functions.special.gamma_functions.trigamma"]], "uppergamma (class in diofant.functions.special.gamma_functions)": [[32, "diofant.functions.special.gamma_functions.uppergamma"]], "yn (class in diofant.functions.special.bessel)": [[32, "diofant.functions.special.bessel.yn"]], "zeta (class in diofant.functions.special.zeta_functions)": [[32, "diofant.functions.special.zeta_functions.zeta"]], "diofant": [[33, "module-diofant"]], "cosinetransform (class in diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.CosineTransform"]], "fouriertransform (class in diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.FourierTransform"]], "hankeltransform (class in diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.HankelTransform"]], "integral (class in diofant.integrals.integrals)": [[34, "diofant.integrals.integrals.Integral"]], "integral.is_commutative (in module diofant.integrals.integrals)": [[34, "diofant.integrals.integrals.Integral.is_commutative"]], "integraltransform (class in diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.IntegralTransform"]], "inversecosinetransform (class in diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.InverseCosineTransform"]], "inversefouriertransform (class in diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.InverseFourierTransform"]], "inversehankeltransform (class in diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.InverseHankelTransform"]], "inverselaplacetransform (class in diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.InverseLaplaceTransform"]], "inversemellintransform (class in diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.InverseMellinTransform"]], "inversesinetransform (class in diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.InverseSineTransform"]], "laplacetransform (class in diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.LaplaceTransform"]], "mellintransform (class in diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.MellinTransform"]], "sinetransform (class in diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.SineTransform"]], "as_sum() (diofant.integrals.integrals.integral method)": [[34, "diofant.integrals.integrals.Integral.as_sum"]], "components() (in module diofant.integrals.heurisch)": [[34, "diofant.integrals.heurisch.components"]], "cosine_transform() (in module diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.cosine_transform"]], "deltaintegrate() (in module diofant.integrals.deltafunctions)": [[34, "diofant.integrals.deltafunctions.deltaintegrate"]], "diofant.integrals": [[34, "module-diofant.integrals"]], "diofant.integrals.quadrature": [[34, "module-diofant.integrals.quadrature"]], "diofant.integrals.transforms": [[34, "module-diofant.integrals.transforms"]], "doit() (diofant.integrals.integrals.integral method)": [[34, "diofant.integrals.integrals.Integral.doit"]], "doit() (diofant.integrals.transforms.integraltransform method)": [[34, "diofant.integrals.transforms.IntegralTransform.doit"]], "fourier_transform() (in module diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.fourier_transform"]], "free_symbols (diofant.integrals.integrals.integral property)": [[34, "diofant.integrals.integrals.Integral.free_symbols"]], "free_symbols (diofant.integrals.transforms.integraltransform property)": [[34, "diofant.integrals.transforms.IntegralTransform.free_symbols"]], "function (diofant.integrals.transforms.integraltransform property)": [[34, "diofant.integrals.transforms.IntegralTransform.function"]], "function_variable (diofant.integrals.transforms.integraltransform property)": [[34, "diofant.integrals.transforms.IntegralTransform.function_variable"]], "gauss_chebyshev_t() (in module diofant.integrals.quadrature)": [[34, "diofant.integrals.quadrature.gauss_chebyshev_t"]], "gauss_chebyshev_u() (in module diofant.integrals.quadrature)": [[34, "diofant.integrals.quadrature.gauss_chebyshev_u"]], "gauss_gen_laguerre() (in module diofant.integrals.quadrature)": [[34, "diofant.integrals.quadrature.gauss_gen_laguerre"]], "gauss_hermite() (in module diofant.integrals.quadrature)": [[34, "diofant.integrals.quadrature.gauss_hermite"]], "gauss_jacobi() (in module diofant.integrals.quadrature)": [[34, "diofant.integrals.quadrature.gauss_jacobi"]], "gauss_laguerre() (in module diofant.integrals.quadrature)": [[34, "diofant.integrals.quadrature.gauss_laguerre"]], "gauss_legendre() (in module diofant.integrals.quadrature)": [[34, "diofant.integrals.quadrature.gauss_legendre"]], "hankel_transform() (in module diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.hankel_transform"]], "heurisch() (in module diofant.integrals.heurisch)": [[34, "diofant.integrals.heurisch.heurisch"]], "heurisch_wrapper() (in module diofant.integrals.heurisch)": [[34, "diofant.integrals.heurisch.heurisch_wrapper"]], "integrate() (in module diofant.integrals.integrals)": [[34, "diofant.integrals.integrals.integrate"]], "inverse_cosine_transform() (in module diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.inverse_cosine_transform"]], "inverse_fourier_transform() (in module diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.inverse_fourier_transform"]], "inverse_hankel_transform() (in module diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.inverse_hankel_transform"]], "inverse_laplace_transform() (in module diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.inverse_laplace_transform"]], "inverse_mellin_transform() (in module diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.inverse_mellin_transform"]], "inverse_sine_transform() (in module diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.inverse_sine_transform"]], "laplace_transform() (in module diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.laplace_transform"]], "mellin_transform() (in module diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.mellin_transform"]], "ratint() (in module diofant.integrals.rationaltools)": [[34, "diofant.integrals.rationaltools.ratint"]], "ratint_logpart() (in module diofant.integrals.rationaltools)": [[34, "diofant.integrals.rationaltools.ratint_logpart"]], "ratint_ratpart() (in module diofant.integrals.rationaltools)": [[34, "diofant.integrals.rationaltools.ratint_ratpart"]], "sine_transform() (in module diofant.integrals.transforms)": [[34, "diofant.integrals.transforms.sine_transform"]], "transform() (diofant.integrals.integrals.integral method)": [[34, "diofant.integrals.integrals.Integral.transform"]], "transform_variable (diofant.integrals.transforms.integraltransform property)": [[34, "diofant.integrals.transforms.IntegralTransform.transform_variable"]], "trigintegrate() (in module diofant.integrals.trigonometry)": [[34, "diofant.integrals.trigonometry.trigintegrate"]], "automaticsymbols (class in diofant.interactive.session)": [[35, "diofant.interactive.session.AutomaticSymbols"]], "floatrationalizer (class in diofant.interactive.session)": [[35, "diofant.interactive.session.FloatRationalizer"]], "integerdivisionwrapper (class in diofant.interactive.session)": [[35, "diofant.interactive.session.IntegerDivisionWrapper"]], "diofant.interactive": [[35, "module-diofant.interactive"]], "diofant.interactive.printing": [[35, "module-diofant.interactive.printing"]], "diofant.interactive.session": [[35, "module-diofant.interactive.session"]], "init_printing() (in module diofant.interactive.printing)": [[35, "diofant.interactive.printing.init_printing"]], "unicode_identifiers() (in module diofant.interactive.session)": [[35, "diofant.interactive.session.unicode_identifiers"]], "and (class in diofant.logic.boolalg)": [[36, "diofant.logic.boolalg.And"]], "booleanfalse (class in diofant.logic.boolalg)": [[36, "diofant.logic.boolalg.BooleanFalse"]], "booleantrue (class in diofant.logic.boolalg)": [[36, "diofant.logic.boolalg.BooleanTrue"]], "equivalent (class in diofant.logic.boolalg)": [[36, "diofant.logic.boolalg.Equivalent"]], "ite (class in diofant.logic.boolalg)": [[36, "diofant.logic.boolalg.ITE"]], "implies (class in diofant.logic.boolalg)": [[36, "diofant.logic.boolalg.Implies"]], "nand (class in diofant.logic.boolalg)": [[36, "diofant.logic.boolalg.Nand"]], "nor (class in diofant.logic.boolalg)": [[36, "diofant.logic.boolalg.Nor"]], "not (class in diofant.logic.boolalg)": [[36, "diofant.logic.boolalg.Not"]], "or (class in diofant.logic.boolalg)": [[36, "diofant.logic.boolalg.Or"]], "xor (class in diofant.logic.boolalg)": [[36, "diofant.logic.boolalg.Xor"]], "diofant.logic": [[36, "module-diofant.logic"]], "is_cnf() (in module diofant.logic.boolalg)": [[36, "diofant.logic.boolalg.is_cnf"]], "is_dnf() (in module diofant.logic.boolalg)": [[36, "diofant.logic.boolalg.is_dnf"]], "is_nnf() (in module diofant.logic.boolalg)": [[36, "diofant.logic.boolalg.is_nnf"]], "satisfiable() (in module diofant.logic.inference)": [[36, "diofant.logic.inference.satisfiable"]], "simplify_logic() (in module diofant.logic.boolalg)": [[36, "diofant.logic.boolalg.simplify_logic"]], "to_cnf() (in module diofant.logic.boolalg)": [[36, "diofant.logic.boolalg.to_cnf"]], "to_dnf() (in module diofant.logic.boolalg)": [[36, "diofant.logic.boolalg.to_dnf"]], "to_nnf() (in module diofant.logic.boolalg)": [[36, "diofant.logic.boolalg.to_nnf"]], "densematrix (class in diofant.matrices.dense)": [[37, "diofant.matrices.dense.DenseMatrix"]], "mutabledensematrix (class in diofant.matrices.dense)": [[37, "diofant.matrices.dense.MutableDenseMatrix"]], "mutablematrix (in module diofant.matrices.dense)": [[37, "diofant.matrices.dense.MutableMatrix"]], "__getitem__() (diofant.matrices.dense.densematrix method)": [[37, "diofant.matrices.dense.DenseMatrix.__getitem__"]], "__mul__() (diofant.matrices.dense.densematrix method)": [[37, "diofant.matrices.dense.DenseMatrix.__mul__"]], "applyfunc() (diofant.matrices.dense.densematrix method)": [[37, "diofant.matrices.dense.DenseMatrix.applyfunc"]], "as_immutable() (diofant.matrices.dense.densematrix method)": [[37, "diofant.matrices.dense.DenseMatrix.as_immutable"]], "as_mutable() (diofant.matrices.dense.densematrix method)": [[37, "diofant.matrices.dense.DenseMatrix.as_mutable"]], "col_op() (diofant.matrices.dense.mutabledensematrix method)": [[37, "diofant.matrices.dense.MutableDenseMatrix.col_op"]], "col_swap() (diofant.matrices.dense.mutabledensematrix method)": [[37, "diofant.matrices.dense.MutableDenseMatrix.col_swap"]], "copyin_list() (diofant.matrices.dense.mutabledensematrix method)": [[37, "diofant.matrices.dense.MutableDenseMatrix.copyin_list"]], "copyin_matrix() (diofant.matrices.dense.mutabledensematrix method)": [[37, "diofant.matrices.dense.MutableDenseMatrix.copyin_matrix"]], "diofant.matrices.dense": [[37, "module-diofant.matrices.dense"]], "equals() (diofant.matrices.dense.densematrix method)": [[37, "diofant.matrices.dense.DenseMatrix.equals"]], "eye() (diofant.matrices.dense.densematrix class method)": [[37, "diofant.matrices.dense.DenseMatrix.eye"]], "fill() (diofant.matrices.dense.mutabledensematrix method)": [[37, "diofant.matrices.dense.MutableDenseMatrix.fill"]], "reshape() (diofant.matrices.dense.densematrix method)": [[37, "diofant.matrices.dense.DenseMatrix.reshape"]], "row_op() (diofant.matrices.dense.mutabledensematrix method)": [[37, "diofant.matrices.dense.MutableDenseMatrix.row_op"]], "row_swap() (diofant.matrices.dense.mutabledensematrix method)": [[37, "diofant.matrices.dense.MutableDenseMatrix.row_swap"]], "simplify() (diofant.matrices.dense.mutabledensematrix method)": [[37, "diofant.matrices.dense.MutableDenseMatrix.simplify"]], "tolist() (diofant.matrices.dense.densematrix method)": [[37, "diofant.matrices.dense.DenseMatrix.tolist"]], "zeros() (diofant.matrices.dense.densematrix class method)": [[37, "diofant.matrices.dense.DenseMatrix.zeros"]], "zip_row_op() (diofant.matrices.dense.mutabledensematrix method)": [[37, "diofant.matrices.dense.MutableDenseMatrix.zip_row_op"]], "blockdiagmatrix (class in diofant.matrices.expressions.blockmatrix)": [[38, "diofant.matrices.expressions.blockmatrix.BlockDiagMatrix"]], "blockmatrix (class in diofant.matrices.expressions.blockmatrix)": [[38, "diofant.matrices.expressions.blockmatrix.BlockMatrix"]], "functionmatrix (class in diofant.matrices.expressions)": [[38, "diofant.matrices.expressions.FunctionMatrix"]], "identity (class in diofant.matrices.expressions)": [[38, "diofant.matrices.expressions.Identity"]], "inverse (class in diofant.matrices.expressions)": [[38, "diofant.matrices.expressions.Inverse"]], "matadd (class in diofant.matrices.expressions)": [[38, "diofant.matrices.expressions.MatAdd"]], "matmul (class in diofant.matrices.expressions)": [[38, "diofant.matrices.expressions.MatMul"]], "matpow (class in diofant.matrices.expressions)": [[38, "diofant.matrices.expressions.MatPow"]], "matrixexpr (class in diofant.matrices.expressions)": [[38, "diofant.matrices.expressions.MatrixExpr"]], "matrixsymbol (class in diofant.matrices.expressions)": [[38, "diofant.matrices.expressions.MatrixSymbol"]], "t (diofant.matrices.expressions.matrixexpr property)": [[38, "diofant.matrices.expressions.MatrixExpr.T"]], "trace (class in diofant.matrices.expressions)": [[38, "diofant.matrices.expressions.Trace"]], "transpose (class in diofant.matrices.expressions)": [[38, "diofant.matrices.expressions.Transpose"]], "zeromatrix (class in diofant.matrices.expressions)": [[38, "diofant.matrices.expressions.ZeroMatrix"]], "as_explicit() (diofant.matrices.expressions.matrixexpr method)": [[38, "diofant.matrices.expressions.MatrixExpr.as_explicit"]], "as_mutable() (diofant.matrices.expressions.matrixexpr method)": [[38, "diofant.matrices.expressions.MatrixExpr.as_mutable"]], "block_collapse() (in module diofant.matrices.expressions.blockmatrix)": [[38, "diofant.matrices.expressions.blockmatrix.block_collapse"]], "diofant.matrices.expressions": [[38, "module-diofant.matrices.expressions"]], "diofant.matrices.expressions.blockmatrix": [[38, "module-diofant.matrices.expressions.blockmatrix"]], "equals() (diofant.matrices.expressions.matrixexpr method)": [[38, "diofant.matrices.expressions.MatrixExpr.equals"]], "transpose() (diofant.matrices.expressions.blockmatrix.blockmatrix method)": [[38, "diofant.matrices.expressions.blockmatrix.BlockMatrix.transpose"]], "c (diofant.matrices.immutable.immutablematrix property)": [[39, "diofant.matrices.immutable.ImmutableMatrix.C"]], "immutablematrix (class in diofant.matrices.immutable)": [[39, "diofant.matrices.immutable.ImmutableMatrix"]], "adjoint() (diofant.matrices.immutable.immutablematrix method)": [[39, "diofant.matrices.immutable.ImmutableMatrix.adjoint"]], "as_mutable() (diofant.matrices.immutable.immutablematrix method)": [[39, "diofant.matrices.immutable.ImmutableMatrix.as_mutable"]], "conjugate() (diofant.matrices.immutable.immutablematrix method)": [[39, "diofant.matrices.immutable.ImmutableMatrix.conjugate"]], "diff() (diofant.matrices.immutable.immutablematrix method)": [[39, "diofant.matrices.immutable.ImmutableMatrix.diff"]], "diofant.matrices.immutable": [[39, "module-diofant.matrices.immutable"]], "equals() (diofant.matrices.immutable.immutablematrix method)": [[39, "diofant.matrices.immutable.ImmutableMatrix.equals"]], "integrate() (diofant.matrices.immutable.immutablematrix method)": [[39, "diofant.matrices.immutable.ImmutableMatrix.integrate"]], "limit() (diofant.matrices.immutable.immutablematrix method)": [[39, "diofant.matrices.immutable.ImmutableMatrix.limit"]], "matrix (class in diofant.matrices)": [[40, "diofant.matrices.Matrix"]], "diofant.matrices": [[40, "module-diofant.matrices"]], "c (diofant.matrices.matrices.matrixbase property)": [[41, "diofant.matrices.matrices.MatrixBase.C"]], "d (diofant.matrices.matrices.matrixbase property)": [[41, "diofant.matrices.matrices.MatrixBase.D"]], "gramschmidt() (in module diofant.matrices.dense)": [[41, "diofant.matrices.dense.GramSchmidt"]], "h (diofant.matrices.matrices.matrixbase property)": [[41, "diofant.matrices.matrices.MatrixBase.H"]], "ldldecomposition() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.LDLdecomposition"]], "ldlsolve() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.LDLsolve"]], "ludecomposition() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.LUdecomposition"]], "ludecompositionff() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.LUdecompositionFF"]], "ludecomposition_simple() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.LUdecomposition_Simple"]], "lusolve() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.LUsolve"]], "matrixbase (class in diofant.matrices.matrices)": [[41, "diofant.matrices.matrices.MatrixBase"]], "matrixerror (class in diofant.matrices.matrices)": [[41, "diofant.matrices.matrices.MatrixError"]], "nonsquarematrixerror (class in diofant.matrices.matrices)": [[41, "diofant.matrices.matrices.NonSquareMatrixError"]], "qrdecomposition() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.QRdecomposition"]], "qrsolve() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.QRsolve"]], "shapeerror (class in diofant.matrices.matrices)": [[41, "diofant.matrices.matrices.ShapeError"]], "t (diofant.matrices.matrices.matrixbase property)": [[41, "diofant.matrices.matrices.MatrixBase.T"]], "a2idx() (in module diofant.matrices.matrices)": [[41, "diofant.matrices.matrices.a2idx"]], "add() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.add"]], "adjoint() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.adjoint"]], "adjugate() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.adjugate"]], "atoms() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.atoms"]], "berkowitz() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.berkowitz"]], "berkowitz_charpoly() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.berkowitz_charpoly"]], "berkowitz_det() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.berkowitz_det"]], "berkowitz_eigenvals() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.berkowitz_eigenvals"]], "berkowitz_minors() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.berkowitz_minors"]], "casoratian() (in module diofant.matrices.dense)": [[41, "diofant.matrices.dense.casoratian"]], "charpoly() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.charpoly"]], "cholesky() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.cholesky"]], "cholesky_solve() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.cholesky_solve"]], "classof() (in module diofant.matrices.matrices)": [[41, "diofant.matrices.matrices.classof"]], "cofactor() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.cofactor"]], "cofactormatrix() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.cofactorMatrix"]], "col_insert() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.col_insert"]], "col_join() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.col_join"]], "condition_number() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.condition_number"]], "conjugate() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.conjugate"]], "copy() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.copy"]], "cross() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.cross"]], "det() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.det"]], "det_lu_decomposition() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.det_LU_decomposition"]], "det_bareiss() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.det_bareiss"]], "diag() (in module diofant.matrices.dense)": [[41, "diofant.matrices.dense.diag"]], "diagonal_solve() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.diagonal_solve"]], "diagonalize() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.diagonalize"]], "diff() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.diff"]], "diofant.matrices.matrices": [[41, "module-diofant.matrices.matrices"]], "dot() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.dot"]], "dual() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.dual"]], "eigenvals() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.eigenvals"]], "eigenvects() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.eigenvects"]], "evalf() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.evalf"]], "exp() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.exp"]], "expand() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.expand"]], "extract() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.extract"]], "eye() (in module diofant.matrices.dense)": [[41, "diofant.matrices.dense.eye"]], "free_symbols (diofant.matrices.matrices.matrixbase property)": [[41, "diofant.matrices.matrices.MatrixBase.free_symbols"]], "get_diag_blocks() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.get_diag_blocks"]], "has() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.has"]], "hessian() (in module diofant.matrices.dense)": [[41, "diofant.matrices.dense.hessian"]], "hstack() (diofant.matrices.matrices.matrixbase class method)": [[41, "diofant.matrices.matrices.MatrixBase.hstack"]], "integrate() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.integrate"]], "inv() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.inv"]], "inv_mod() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.inv_mod"]], "inverse_adj() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.inverse_ADJ"]], "inverse_ge() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.inverse_GE"]], "inverse_lu() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.inverse_LU"]], "is_anti_symmetric() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.is_anti_symmetric"]], "is_diagonal() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.is_diagonal"]], "is_diagonalizable() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.is_diagonalizable"]], "is_hermitian (diofant.matrices.matrices.matrixbase property)": [[41, "diofant.matrices.matrices.MatrixBase.is_hermitian"]], "is_lower (diofant.matrices.matrices.matrixbase property)": [[41, "diofant.matrices.matrices.MatrixBase.is_lower"]], "is_lower_hessenberg (diofant.matrices.matrices.matrixbase property)": [[41, "diofant.matrices.matrices.MatrixBase.is_lower_hessenberg"]], "is_nilpotent() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.is_nilpotent"]], "is_square (diofant.matrices.matrices.matrixbase property)": [[41, "diofant.matrices.matrices.MatrixBase.is_square"]], "is_symbolic() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.is_symbolic"]], "is_symmetric() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.is_symmetric"]], "is_upper (diofant.matrices.matrices.matrixbase property)": [[41, "diofant.matrices.matrices.MatrixBase.is_upper"]], "is_upper_hessenberg (diofant.matrices.matrices.matrixbase property)": [[41, "diofant.matrices.matrices.MatrixBase.is_upper_hessenberg"]], "is_zero (diofant.matrices.matrices.matrixbase property)": [[41, "diofant.matrices.matrices.MatrixBase.is_zero"]], "jacobian() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.jacobian"]], "jordan_cell() (in module diofant.matrices.dense)": [[41, "diofant.matrices.dense.jordan_cell"]], "jordan_cells() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.jordan_cells"]], "jordan_form() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.jordan_form"]], "key2bounds() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.key2bounds"]], "key2ij() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.key2ij"]], "limit() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.limit"]], "list2numpy() (in module diofant.matrices.dense)": [[41, "diofant.matrices.dense.list2numpy"]], "lower_triangular_solve() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.lower_triangular_solve"]], "matrix2numpy() (in module diofant.matrices.dense)": [[41, "diofant.matrices.dense.matrix2numpy"]], "matrix_multiply_elementwise() (in module diofant.matrices.dense)": [[41, "diofant.matrices.dense.matrix_multiply_elementwise"]], "minorentry() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.minorEntry"]], "minormatrix() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.minorMatrix"]], "multiply() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.multiply"]], "multiply_elementwise() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.multiply_elementwise"]], "norm() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.norm"]], "normalized() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.normalized"]], "nullspace() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.nullspace"]], "ones() (in module diofant.matrices.dense)": [[41, "diofant.matrices.dense.ones"]], "permutebkwd() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.permuteBkwd"]], "permutefwd() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.permuteFwd"]], "pinv() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.pinv"]], "pinv_solve() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.pinv_solve"]], "print_nonzero() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.print_nonzero"]], "project() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.project"]], "randmatrix() (in module diofant.matrices.dense)": [[41, "diofant.matrices.dense.randMatrix"]], "rank() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.rank"]], "replace() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.replace"]], "rot_axis1() (in module diofant.matrices.dense)": [[41, "diofant.matrices.dense.rot_axis1"]], "rot_axis2() (in module diofant.matrices.dense)": [[41, "diofant.matrices.dense.rot_axis2"]], "rot_axis3() (in module diofant.matrices.dense)": [[41, "diofant.matrices.dense.rot_axis3"]], "row_insert() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.row_insert"]], "row_join() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.row_join"]], "rref() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.rref"]], "shape (diofant.matrices.matrices.matrixbase property)": [[41, "diofant.matrices.matrices.MatrixBase.shape"]], "simplify() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.simplify"]], "singular_values() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.singular_values"]], "solve_least_squares() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.solve_least_squares"]], "subs() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.subs"]], "symarray() (in module diofant.matrices.dense)": [[41, "diofant.matrices.dense.symarray"]], "table() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.table"]], "trace() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.trace"]], "transpose() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.transpose"]], "upper_triangular_solve() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.upper_triangular_solve"]], "values() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.values"]], "vec() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.vec"]], "vech() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.vech"]], "vstack() (diofant.matrices.matrices.matrixbase class method)": [[41, "diofant.matrices.matrices.MatrixBase.vstack"]], "wronskian() (in module diofant.matrices.dense)": [[41, "diofant.matrices.dense.wronskian"]], "xreplace() (diofant.matrices.matrices.matrixbase method)": [[41, "diofant.matrices.matrices.MatrixBase.xreplace"]], "zeros() (in module diofant.matrices.dense)": [[41, "diofant.matrices.dense.zeros"]], "cl (diofant.matrices.sparse.sparsematrixbase property)": [[42, "diofant.matrices.sparse.SparseMatrixBase.CL"]], "immutablesparsematrix (class in diofant.matrices.immutable)": [[42, "diofant.matrices.immutable.ImmutableSparseMatrix"]], "ldldecomposition() (diofant.matrices.sparse.sparsematrixbase method)": [[42, "diofant.matrices.sparse.SparseMatrixBase.LDLdecomposition"]], "mutablesparsematrix (class in diofant.matrices.sparse)": [[42, "diofant.matrices.sparse.MutableSparseMatrix"]], "rl (diofant.matrices.sparse.sparsematrixbase property)": [[42, "diofant.matrices.sparse.SparseMatrixBase.RL"]], "sparsematrix (in module diofant.matrices.sparse)": [[42, "diofant.matrices.sparse.SparseMatrix"]], "sparsematrixbase (class in diofant.matrices.sparse)": [[42, "diofant.matrices.sparse.SparseMatrixBase"]], "add() (diofant.matrices.sparse.sparsematrixbase method)": [[42, "diofant.matrices.sparse.SparseMatrixBase.add"]], "applyfunc() (diofant.matrices.sparse.sparsematrixbase method)": [[42, "diofant.matrices.sparse.SparseMatrixBase.applyfunc"]], "as_immutable() (diofant.matrices.sparse.sparsematrixbase method)": [[42, "diofant.matrices.sparse.SparseMatrixBase.as_immutable"]], "as_mutable() (diofant.matrices.sparse.sparsematrixbase method)": [[42, "diofant.matrices.sparse.SparseMatrixBase.as_mutable"]], "cholesky() (diofant.matrices.sparse.sparsematrixbase method)": [[42, "diofant.matrices.sparse.SparseMatrixBase.cholesky"]], "col_join() (diofant.matrices.sparse.mutablesparsematrix method)": [[42, "diofant.matrices.sparse.MutableSparseMatrix.col_join"]], "col_list() (diofant.matrices.sparse.sparsematrixbase method)": [[42, "diofant.matrices.sparse.SparseMatrixBase.col_list"]], "col_op() (diofant.matrices.sparse.mutablesparsematrix method)": [[42, "diofant.matrices.sparse.MutableSparseMatrix.col_op"]], "col_swap() (diofant.matrices.sparse.mutablesparsematrix method)": [[42, "diofant.matrices.sparse.MutableSparseMatrix.col_swap"]], "diofant.matrices.sparse": [[42, "module-diofant.matrices.sparse"]], "extract() (diofant.matrices.sparse.sparsematrixbase method)": [[42, "diofant.matrices.sparse.SparseMatrixBase.extract"]], "eye() (diofant.matrices.sparse.sparsematrixbase class method)": [[42, "diofant.matrices.sparse.SparseMatrixBase.eye"]], "fill() (diofant.matrices.sparse.mutablesparsematrix method)": [[42, "diofant.matrices.sparse.MutableSparseMatrix.fill"]], "has() (diofant.matrices.sparse.sparsematrixbase method)": [[42, "diofant.matrices.sparse.SparseMatrixBase.has"]], "is_hermitian (diofant.matrices.sparse.sparsematrixbase property)": [[42, "diofant.matrices.sparse.SparseMatrixBase.is_hermitian"]], "is_symmetric() (diofant.matrices.sparse.sparsematrixbase method)": [[42, "diofant.matrices.sparse.SparseMatrixBase.is_symmetric"]], "liupc() (diofant.matrices.sparse.sparsematrixbase method)": [[42, "diofant.matrices.sparse.SparseMatrixBase.liupc"]], "multiply() (diofant.matrices.sparse.sparsematrixbase method)": [[42, "diofant.matrices.sparse.SparseMatrixBase.multiply"]], "nnz() (diofant.matrices.sparse.sparsematrixbase method)": [[42, "diofant.matrices.sparse.SparseMatrixBase.nnz"]], "reshape() (diofant.matrices.sparse.sparsematrixbase method)": [[42, "diofant.matrices.sparse.SparseMatrixBase.reshape"]], "row_join() (diofant.matrices.sparse.mutablesparsematrix method)": [[42, "diofant.matrices.sparse.MutableSparseMatrix.row_join"]], "row_list() (diofant.matrices.sparse.sparsematrixbase method)": [[42, "diofant.matrices.sparse.SparseMatrixBase.row_list"]], "row_op() (diofant.matrices.sparse.mutablesparsematrix method)": [[42, "diofant.matrices.sparse.MutableSparseMatrix.row_op"]], "row_structure_symbolic_cholesky() (diofant.matrices.sparse.sparsematrixbase method)": [[42, "diofant.matrices.sparse.SparseMatrixBase.row_structure_symbolic_cholesky"]], "row_swap() (diofant.matrices.sparse.mutablesparsematrix method)": [[42, "diofant.matrices.sparse.MutableSparseMatrix.row_swap"]], "scalar_multiply() (diofant.matrices.sparse.sparsematrixbase method)": [[42, "diofant.matrices.sparse.SparseMatrixBase.scalar_multiply"]], "solve() (diofant.matrices.sparse.sparsematrixbase method)": [[42, "diofant.matrices.sparse.SparseMatrixBase.solve"]], "solve_least_squares() (diofant.matrices.sparse.sparsematrixbase method)": [[42, "diofant.matrices.sparse.SparseMatrixBase.solve_least_squares"]], "subs() (diofant.matrices.immutable.immutablesparsematrix method)": [[42, "diofant.matrices.immutable.ImmutableSparseMatrix.subs"]], "tolist() (diofant.matrices.sparse.sparsematrixbase method)": [[42, "diofant.matrices.sparse.SparseMatrixBase.tolist"]], "xreplace() (diofant.matrices.immutable.immutablesparsematrix method)": [[42, "diofant.matrices.immutable.ImmutableSparseMatrix.xreplace"]], "zeros() (diofant.matrices.sparse.sparsematrixbase class method)": [[42, "diofant.matrices.sparse.SparseMatrixBase.zeros"]], "zip_row_op() (diofant.matrices.sparse.mutablesparsematrix method)": [[42, "diofant.matrices.sparse.MutableSparseMatrix.zip_row_op"]], "sieve (class in diofant.ntheory.generate)": [[43, "diofant.ntheory.generate.Sieve"]], "antidivisor_count() (in module diofant.ntheory.factor_)": [[43, "diofant.ntheory.factor_.antidivisor_count"]], "antidivisors() (in module diofant.ntheory.factor_)": [[43, "diofant.ntheory.factor_.antidivisors"]], "binomial_coefficients() (in module diofant.ntheory.multinomial)": [[43, "diofant.ntheory.multinomial.binomial_coefficients"]], "binomial_coefficients_list() (in module diofant.ntheory.multinomial)": [[43, "diofant.ntheory.multinomial.binomial_coefficients_list"]], "continued_fraction_convergents() (in module diofant.ntheory.continued_fraction)": [[43, "diofant.ntheory.continued_fraction.continued_fraction_convergents"]], "continued_fraction_iterator() (in module diofant.ntheory.continued_fraction)": [[43, "diofant.ntheory.continued_fraction.continued_fraction_iterator"]], "continued_fraction_periodic() (in module diofant.ntheory.continued_fraction)": [[43, "diofant.ntheory.continued_fraction.continued_fraction_periodic"]], "continued_fraction_reduce() (in module diofant.ntheory.continued_fraction)": [[43, "diofant.ntheory.continued_fraction.continued_fraction_reduce"]], "core() (in module diofant.ntheory.factor_)": [[43, "diofant.ntheory.factor_.core"]], "crt() (in module diofant.ntheory.modular)": [[43, "diofant.ntheory.modular.crt"]], "crt1() (in module diofant.ntheory.modular)": [[43, "diofant.ntheory.modular.crt1"]], "crt2() (in module diofant.ntheory.modular)": [[43, "diofant.ntheory.modular.crt2"]], "cycle_length() (in module diofant.ntheory.generate)": [[43, "diofant.ntheory.generate.cycle_length"]], "diofant.ntheory.continued_fraction": [[43, "module-diofant.ntheory.continued_fraction"]], "diofant.ntheory.egyptian_fraction": [[43, "module-diofant.ntheory.egyptian_fraction"]], "diofant.ntheory.factor_": [[43, "module-diofant.ntheory.factor_"]], "diofant.ntheory.generate": [[43, "module-diofant.ntheory.generate"]], "diofant.ntheory.modular": [[43, "module-diofant.ntheory.modular"]], "diofant.ntheory.multinomial": [[43, "module-diofant.ntheory.multinomial"]], "diofant.ntheory.partitions_": [[43, "module-diofant.ntheory.partitions_"]], "diofant.ntheory.primetest": [[43, "module-diofant.ntheory.primetest"]], "diofant.ntheory.residue_ntheory": [[43, "module-diofant.ntheory.residue_ntheory"]], "discrete_log() (in module diofant.ntheory.residue_ntheory)": [[43, "diofant.ntheory.residue_ntheory.discrete_log"]], "divisor_count() (in module diofant.ntheory.factor_)": [[43, "diofant.ntheory.factor_.divisor_count"]], "divisor_sigma (class in diofant.ntheory.factor_)": [[43, "diofant.ntheory.factor_.divisor_sigma"]], "divisors() (in module diofant.ntheory.factor_)": [[43, "diofant.ntheory.factor_.divisors"]], "egyptian_fraction() (in module diofant.ntheory.egyptian_fraction)": [[43, "diofant.ntheory.egyptian_fraction.egyptian_fraction"]], "extend() (diofant.ntheory.generate.sieve method)": [[43, "diofant.ntheory.generate.Sieve.extend"]], "extend_to_no() (diofant.ntheory.generate.sieve method)": [[43, "diofant.ntheory.generate.Sieve.extend_to_no"]], "factorint() (in module diofant.ntheory.factor_)": [[43, "diofant.ntheory.factor_.factorint"]], "factorrat() (in module diofant.ntheory.factor_)": [[43, "diofant.ntheory.factor_.factorrat"]], "integer_rational_reconstruction() (in module diofant.ntheory.modular)": [[43, "diofant.ntheory.modular.integer_rational_reconstruction"]], "is_nthpow_residue() (in module diofant.ntheory.residue_ntheory)": [[43, "diofant.ntheory.residue_ntheory.is_nthpow_residue"]], "is_primitive_root() (in module diofant.ntheory.residue_ntheory)": [[43, "diofant.ntheory.residue_ntheory.is_primitive_root"]], "is_quad_residue() (in module diofant.ntheory.residue_ntheory)": [[43, "diofant.ntheory.residue_ntheory.is_quad_residue"]], "is_square() (in module diofant.ntheory.primetest)": [[43, "diofant.ntheory.primetest.is_square"]], "isprime() (in module diofant.ntheory.primetest)": [[43, "diofant.ntheory.primetest.isprime"]], "jacobi_symbol() (in module diofant.ntheory.residue_ntheory)": [[43, "diofant.ntheory.residue_ntheory.jacobi_symbol"]], "legendre_symbol() (in module diofant.ntheory.residue_ntheory)": [[43, "diofant.ntheory.residue_ntheory.legendre_symbol"]], "mobius (class in diofant.ntheory.residue_ntheory)": [[43, "diofant.ntheory.residue_ntheory.mobius"]], "mr() (in module diofant.ntheory.primetest)": [[43, "diofant.ntheory.primetest.mr"]], "multinomial_coefficients() (in module diofant.ntheory.multinomial)": [[43, "diofant.ntheory.multinomial.multinomial_coefficients"]], "multinomial_coefficients_iterator() (in module diofant.ntheory.multinomial)": [[43, "diofant.ntheory.multinomial.multinomial_coefficients_iterator"]], "multiplicity() (in module diofant.ntheory.factor_)": [[43, "diofant.ntheory.factor_.multiplicity"]], "n_order() (in module diofant.ntheory.residue_ntheory)": [[43, "diofant.ntheory.residue_ntheory.n_order"]], "nextprime() (in module diofant.ntheory.generate)": [[43, "diofant.ntheory.generate.nextprime"]], "npartitions() (in module diofant.ntheory.partitions_)": [[43, "diofant.ntheory.partitions_.npartitions"]], "nthroot_mod() (in module diofant.ntheory.residue_ntheory)": [[43, "diofant.ntheory.residue_ntheory.nthroot_mod"]], "perfect_power() (in module diofant.ntheory.factor_)": [[43, "diofant.ntheory.factor_.perfect_power"]], "pollard_pm1() (in module diofant.ntheory.factor_)": [[43, "diofant.ntheory.factor_.pollard_pm1"]], "pollard_rho() (in module diofant.ntheory.factor_)": [[43, "diofant.ntheory.factor_.pollard_rho"]], "prevprime() (in module diofant.ntheory.generate)": [[43, "diofant.ntheory.generate.prevprime"]], "prime() (in module diofant.ntheory.generate)": [[43, "diofant.ntheory.generate.prime"]], "primefactors() (in module diofant.ntheory.factor_)": [[43, "diofant.ntheory.factor_.primefactors"]], "primepi() (in module diofant.ntheory.generate)": [[43, "diofant.ntheory.generate.primepi"]], "primerange() (diofant.ntheory.generate.sieve method)": [[43, "diofant.ntheory.generate.Sieve.primerange"]], "primerange() (in module diofant.ntheory.generate)": [[43, "diofant.ntheory.generate.primerange"]], "primitive_root() (in module diofant.ntheory.residue_ntheory)": [[43, "diofant.ntheory.residue_ntheory.primitive_root"]], "primorial() (in module diofant.ntheory.generate)": [[43, "diofant.ntheory.generate.primorial"]], "quadratic_residues() (in module diofant.ntheory.residue_ntheory)": [[43, "diofant.ntheory.residue_ntheory.quadratic_residues"]], "randprime() (in module diofant.ntheory.generate)": [[43, "diofant.ntheory.generate.randprime"]], "search() (diofant.ntheory.generate.sieve method)": [[43, "diofant.ntheory.generate.Sieve.search"]], "smoothness() (in module diofant.ntheory.factor_)": [[43, "diofant.ntheory.factor_.smoothness"]], "smoothness_p() (in module diofant.ntheory.factor_)": [[43, "diofant.ntheory.factor_.smoothness_p"]], "solve_congruence() (in module diofant.ntheory.modular)": [[43, "diofant.ntheory.modular.solve_congruence"]], "sqrt_mod() (in module diofant.ntheory.residue_ntheory)": [[43, "diofant.ntheory.residue_ntheory.sqrt_mod"]], "sqrt_mod_iter() (in module diofant.ntheory.residue_ntheory)": [[43, "diofant.ntheory.residue_ntheory.sqrt_mod_iter"]], "square_factor() (in module diofant.ntheory.factor_)": [[43, "diofant.ntheory.factor_.square_factor"]], "symmetric_residue() (in module diofant.ntheory.modular)": [[43, "diofant.ntheory.modular.symmetric_residue"]], "totient (class in diofant.ntheory.factor_)": [[43, "diofant.ntheory.factor_.totient"]], "trailing() (in module diofant.ntheory.factor_)": [[43, "diofant.ntheory.factor_.trailing"]], "auto_number() (in module diofant.parsing.sympy_parser)": [[44, "diofant.parsing.sympy_parser.auto_number"]], "auto_symbol() (in module diofant.parsing.sympy_parser)": [[44, "diofant.parsing.sympy_parser.auto_symbol"]], "convert_xor() (in module diofant.parsing.sympy_parser)": [[44, "diofant.parsing.sympy_parser.convert_xor"]], "diofant.parsing": [[44, "module-diofant.parsing"]], "eval_expr() (in module diofant.parsing.sympy_parser)": [[44, "diofant.parsing.sympy_parser.eval_expr"]], "function_exponentiation() (in module diofant.parsing.sympy_parser)": [[44, "diofant.parsing.sympy_parser.function_exponentiation"]], "implicit_application() (in module diofant.parsing.sympy_parser)": [[44, "diofant.parsing.sympy_parser.implicit_application"]], "implicit_multiplication() (in module diofant.parsing.sympy_parser)": [[44, "diofant.parsing.sympy_parser.implicit_multiplication"]], "implicit_multiplication_application() (in module diofant.parsing.sympy_parser)": [[44, "diofant.parsing.sympy_parser.implicit_multiplication_application"]], "mathematica() (in module diofant.parsing.mathematica)": [[44, "diofant.parsing.mathematica.mathematica"]], "parse_expr() (in module diofant.parsing.sympy_parser)": [[44, "diofant.parsing.sympy_parser.parse_expr"]], "parse_maxima() (in module diofant.parsing.maxima)": [[44, "diofant.parsing.maxima.parse_maxima"]], "rationalize() (in module diofant.parsing.sympy_parser)": [[44, "diofant.parsing.sympy_parser.rationalize"]], "split_symbols() (in module diofant.parsing.sympy_parser)": [[44, "diofant.parsing.sympy_parser.split_symbols"]], "split_symbols_custom() (in module diofant.parsing.sympy_parser)": [[44, "diofant.parsing.sympy_parser.split_symbols_custom"]], "standard_transformations (in module diofant.parsing.sympy_parser)": [[44, "diofant.parsing.sympy_parser.standard_transformations"]], "stringify_expr() (in module diofant.parsing.sympy_parser)": [[44, "diofant.parsing.sympy_parser.stringify_expr"]], "ec() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.EC"]], "em() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.EM"]], "et() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.ET"]], "gradedlexorder (class in diofant.polys.orderings)": [[45, "diofant.polys.orderings.GradedLexOrder"]], "groebnerbasis (class in diofant.polys.polytools)": [[45, "diofant.polys.polytools.GroebnerBasis"]], "lc() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.LC"]], "lc() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.LC"]], "lm() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.LM"]], "lm() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.LM"]], "lt() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.LT"]], "lt() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.LT"]], "lexorder (class in diofant.polys.orderings)": [[45, "diofant.polys.orderings.LexOrder"]], "monomial (class in diofant.polys.monomials)": [[45, "diofant.polys.monomials.Monomial"]], "poly (class in diofant.polys.polytools)": [[45, "diofant.polys.polytools.Poly"]], "purepoly (class in diofant.polys.polytools)": [[45, "diofant.polys.polytools.PurePoly"]], "reversedgradedlexorder (class in diofant.polys.orderings)": [[45, "diofant.polys.orderings.ReversedGradedLexOrder"]], "rootof (class in diofant.polys.rootoftools)": [[45, "diofant.polys.rootoftools.RootOf"]], "rootsum (class in diofant.polys.rootoftools)": [[45, "diofant.polys.rootoftools.RootSum"]], "tc() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.TC"]], "all_coeffs() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.all_coeffs"]], "all_roots() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.all_roots"]], "all_roots() (diofant.polys.rootoftools.rootof class method)": [[45, "diofant.polys.rootoftools.RootOf.all_roots"]], "apart() (in module diofant.polys.partfrac)": [[45, "diofant.polys.partfrac.apart"]], "apart_list() (in module diofant.polys.partfrac)": [[45, "diofant.polys.partfrac.apart_list"]], "args (diofant.polys.polytools.poly property)": [[45, "diofant.polys.polytools.Poly.args"]], "as_dict() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.as_dict"]], "as_expr() (diofant.polys.monomials.monomial method)": [[45, "diofant.polys.monomials.Monomial.as_expr"]], "as_expr() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.as_expr"]], "assemble_partfrac_list() (in module diofant.polys.partfrac)": [[45, "diofant.polys.partfrac.assemble_partfrac_list"]], "cancel() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.cancel"]], "cancel() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.cancel"]], "chebyshevt_poly() (in module diofant.polys.orthopolys)": [[45, "diofant.polys.orthopolys.chebyshevt_poly"]], "chebyshevu_poly() (in module diofant.polys.orthopolys)": [[45, "diofant.polys.orthopolys.chebyshevu_poly"]], "clear_denoms() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.clear_denoms"]], "coeff_monomial() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.coeff_monomial"]], "coeffs() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.coeffs"]], "cofactors() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.cofactors"]], "cofactors() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.cofactors"]], "compose() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.compose"]], "compose() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.compose"]], "construct_domain() (in module diofant.polys.constructor)": [[45, "diofant.polys.constructor.construct_domain"]], "contains() (diofant.polys.polytools.groebnerbasis method)": [[45, "diofant.polys.polytools.GroebnerBasis.contains"]], "content() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.content"]], "content() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.content"]], "count_roots() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.count_roots"]], "count_roots() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.count_roots"]], "cyclotomic_poly() (in module diofant.polys.specialpolys)": [[45, "diofant.polys.specialpolys.cyclotomic_poly"]], "decompose() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.decompose"]], "decompose() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.decompose"]], "degree() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.degree"]], "degree() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.degree"]], "dimension (diofant.polys.polytools.groebnerbasis property)": [[45, "diofant.polys.polytools.GroebnerBasis.dimension"]], "diofant.polys": [[45, "module-diofant.polys"]], "diofant.polys.constructor": [[45, "module-diofant.polys.constructor"]], "diofant.polys.monomials": [[45, "module-diofant.polys.monomials"]], "diofant.polys.numberfields": [[45, "module-diofant.polys.numberfields"]], "diofant.polys.orderings": [[45, "module-diofant.polys.orderings"]], "diofant.polys.orthopolys": [[45, "module-diofant.polys.orthopolys"]], "diofant.polys.partfrac": [[45, "module-diofant.polys.partfrac"]], "diofant.polys.polyfuncs": [[45, "module-diofant.polys.polyfuncs"]], "diofant.polys.polyroots": [[45, "module-diofant.polys.polyroots"]], "diofant.polys.polytools": [[45, "module-diofant.polys.polytools"]], "diofant.polys.rationaltools": [[45, "module-diofant.polys.rationaltools"]], "diofant.polys.rootoftools": [[45, "module-diofant.polys.rootoftools"]], "diofant.polys.specialpolys": [[45, "module-diofant.polys.specialpolys"]], "discriminant() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.discriminant"]], "discriminant() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.discriminant"]], "dispersionset() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.dispersionset"]], "div() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.div"]], "div() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.div"]], "divides() (diofant.polys.monomials.monomial method)": [[45, "diofant.polys.monomials.Monomial.divides"]], "domain (diofant.polys.polytools.poly property)": [[45, "diofant.polys.polytools.Poly.domain"]], "eject() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.eject"]], "eval() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.eval"]], "eval_rational() (diofant.polys.rootoftools.rootof method)": [[45, "diofant.polys.rootoftools.RootOf.eval_rational"]], "exclude() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.exclude"]], "exquo() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.exquo"]], "exquo() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.exquo"]], "exquo_ground() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.exquo_ground"]], "factor() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.factor"]], "factor_list() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.factor_list"]], "factor_list() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.factor_list"]], "field_isomorphism() (in module diofant.polys.numberfields)": [[45, "diofant.polys.numberfields.field_isomorphism"]], "free_symbols (diofant.polys.polytools.poly property)": [[45, "diofant.polys.polytools.Poly.free_symbols"]], "free_symbols (diofant.polys.polytools.purepoly property)": [[45, "diofant.polys.polytools.PurePoly.free_symbols"]], "free_symbols_in_domain (diofant.polys.polytools.poly property)": [[45, "diofant.polys.polytools.Poly.free_symbols_in_domain"]], "from_dict() (diofant.polys.polytools.poly class method)": [[45, "diofant.polys.polytools.Poly.from_dict"]], "from_expr() (diofant.polys.polytools.poly class method)": [[45, "diofant.polys.polytools.Poly.from_expr"]], "from_list() (diofant.polys.polytools.poly class method)": [[45, "diofant.polys.polytools.Poly.from_list"]], "from_poly() (diofant.polys.polytools.poly class method)": [[45, "diofant.polys.polytools.Poly.from_poly"]], "gcd() (diofant.polys.monomials.monomial method)": [[45, "diofant.polys.monomials.Monomial.gcd"]], "gcd() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.gcd"]], "gcd() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.gcd"]], "gcdex() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.gcdex"]], "gcdex() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.gcdex"]], "gegenbauer_poly() (in module diofant.polys.orthopolys)": [[45, "diofant.polys.orthopolys.gegenbauer_poly"]], "gen (diofant.polys.polytools.poly property)": [[45, "diofant.polys.polytools.Poly.gen"]], "get_modulus() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.get_modulus"]], "groebner() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.groebner"]], "half_gcdex() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.half_gcdex"]], "half_gcdex() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.half_gcdex"]], "has_only_gens() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.has_only_gens"]], "hermite_poly() (in module diofant.polys.orthopolys)": [[45, "diofant.polys.orthopolys.hermite_poly"]], "horner() (in module diofant.polys.polyfuncs)": [[45, "diofant.polys.polyfuncs.horner"]], "independent_sets (diofant.polys.polytools.groebnerbasis property)": [[45, "diofant.polys.polytools.GroebnerBasis.independent_sets"]], "inject() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.inject"]], "integrate() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.integrate"]], "interpolate() (in module diofant.polys.polyfuncs)": [[45, "diofant.polys.polyfuncs.interpolate"]], "interpolating_poly() (in module diofant.polys.specialpolys)": [[45, "diofant.polys.specialpolys.interpolating_poly"]], "interval (diofant.polys.rootoftools.rootof property)": [[45, "diofant.polys.rootoftools.RootOf.interval"]], "invert() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.invert"]], "invert() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.invert"]], "is_cyclotomic (diofant.polys.polytools.poly property)": [[45, "diofant.polys.polytools.Poly.is_cyclotomic"]], "is_ground (diofant.polys.polytools.poly property)": [[45, "diofant.polys.polytools.Poly.is_ground"]], "is_homogeneous (diofant.polys.polytools.poly property)": [[45, "diofant.polys.polytools.Poly.is_homogeneous"]], "is_irreducible (diofant.polys.polytools.poly property)": [[45, "diofant.polys.polytools.Poly.is_irreducible"]], "is_linear (diofant.polys.polytools.poly property)": [[45, "diofant.polys.polytools.Poly.is_linear"]], "is_multivariate (diofant.polys.polytools.poly property)": [[45, "diofant.polys.polytools.Poly.is_multivariate"]], "is_one (diofant.polys.polytools.poly property)": [[45, "diofant.polys.polytools.Poly.is_one"]], "is_quadratic (diofant.polys.polytools.poly property)": [[45, "diofant.polys.polytools.Poly.is_quadratic"]], "is_squarefree (diofant.polys.polytools.poly property)": [[45, "diofant.polys.polytools.Poly.is_squarefree"]], "is_term (diofant.polys.polytools.poly property)": [[45, "diofant.polys.polytools.Poly.is_term"]], "is_univariate (diofant.polys.polytools.poly property)": [[45, "diofant.polys.polytools.Poly.is_univariate"]], "is_zero (diofant.polys.polytools.poly property)": [[45, "diofant.polys.polytools.Poly.is_zero"]], "itermonomials() (in module diofant.polys.monomials)": [[45, "diofant.polys.monomials.itermonomials"]], "jacobi_poly() (in module diofant.polys.orthopolys)": [[45, "diofant.polys.orthopolys.jacobi_poly"]], "laguerre_poly() (in module diofant.polys.orthopolys)": [[45, "diofant.polys.orthopolys.laguerre_poly"]], "lcm() (diofant.polys.monomials.monomial method)": [[45, "diofant.polys.monomials.Monomial.lcm"]], "lcm() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.lcm"]], "lcm() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.lcm"]], "legendre_poly() (in module diofant.polys.orthopolys)": [[45, "diofant.polys.orthopolys.legendre_poly"]], "length() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.length"]], "minimal_polynomial() (in module diofant.polys.numberfields)": [[45, "diofant.polys.numberfields.minimal_polynomial"]], "monic() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.monic"]], "monic() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.monic"]], "monoms() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.monoms"]], "new() (diofant.polys.polytools.poly class method)": [[45, "diofant.polys.polytools.Poly.new"]], "new() (diofant.polys.rootoftools.rootsum class method)": [[45, "diofant.polys.rootoftools.RootSum.new"]], "nroots() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.nroots"]], "nroots() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.nroots"]], "parallel_poly_from_expr() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.parallel_poly_from_expr"]], "per() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.per"]], "primitive() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.primitive"]], "primitive() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.primitive"]], "primitive_element() (in module diofant.polys.numberfields)": [[45, "diofant.polys.numberfields.primitive_element"]], "quo() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.quo"]], "quo() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.quo"]], "quo_ground() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.quo_ground"]], "random_poly() (in module diofant.polys.specialpolys)": [[45, "diofant.polys.specialpolys.random_poly"]], "rat_clear_denoms() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.rat_clear_denoms"]], "real_roots() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.real_roots"]], "real_roots() (diofant.polys.rootoftools.rootof class method)": [[45, "diofant.polys.rootoftools.RootOf.real_roots"]], "real_roots() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.real_roots"]], "reduce() (diofant.polys.polytools.groebnerbasis method)": [[45, "diofant.polys.polytools.GroebnerBasis.reduce"]], "reduced() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.reduced"]], "refine() (diofant.polys.rootoftools.rootof method)": [[45, "diofant.polys.rootoftools.RootOf.refine"]], "rem() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.rem"]], "rem() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.rem"]], "reorder() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.reorder"]], "replace() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.replace"]], "resultant() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.resultant"]], "resultant() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.resultant"]], "retract() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.retract"]], "root() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.root"]], "roots() (in module diofant.polys.polyroots)": [[45, "diofant.polys.polyroots.roots"]], "set_domain() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.set_domain"]], "set_modulus() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.set_modulus"]], "set_order() (diofant.polys.polytools.groebnerbasis method)": [[45, "diofant.polys.polytools.GroebnerBasis.set_order"]], "shift() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.shift"]], "slice() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.slice"]], "spherical_bessel_fn() (in module diofant.polys.orthopolys)": [[45, "diofant.polys.orthopolys.spherical_bessel_fn"]], "sqf() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.sqf"]], "sqf_list() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.sqf_list"]], "sqf_list() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.sqf_list"]], "sqf_norm() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.sqf_norm"]], "sqf_norm() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.sqf_norm"]], "sqf_part() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.sqf_part"]], "sqf_part() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.sqf_part"]], "subresultants() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.subresultants"]], "subresultants() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.subresultants"]], "swinnerton_dyer_poly() (in module diofant.polys.specialpolys)": [[45, "diofant.polys.specialpolys.swinnerton_dyer_poly"]], "symmetric_poly() (in module diofant.polys.specialpolys)": [[45, "diofant.polys.specialpolys.symmetric_poly"]], "symmetrize() (in module diofant.polys.polyfuncs)": [[45, "diofant.polys.polyfuncs.symmetrize"]], "terms() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.terms"]], "terms_gcd() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.terms_gcd"]], "terms_gcd() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.terms_gcd"]], "termwise() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.termwise"]], "to_exact() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.to_exact"]], "to_field() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.to_field"]], "to_ring() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.to_ring"]], "together() (in module diofant.polys.rationaltools)": [[45, "diofant.polys.rationaltools.together"]], "total_degree() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.total_degree"]], "trunc() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.trunc"]], "trunc() (in module diofant.polys.polytools)": [[45, "diofant.polys.polytools.trunc"]], "unify() (diofant.polys.polytools.poly method)": [[45, "diofant.polys.polytools.Poly.unify"]], "viete() (in module diofant.polys.polyfuncs)": [[45, "diofant.polys.polyfuncs.viete"]], "assignmenterror": [[46, "diofant.printing.codeprinter.AssignmentError"]], "ccodeprinter (class in diofant.printing.ccode)": [[46, "diofant.printing.ccode.CCodePrinter"]], "codeprinter (class in diofant.printing.codeprinter)": [[46, "diofant.printing.codeprinter.CodePrinter"]], "fcodeprinter (class in diofant.printing.fcode)": [[46, "diofant.printing.fcode.FCodePrinter"]], "g() (in module diofant.printing.pretty.pretty_symbology)": [[46, "diofant.printing.pretty.pretty_symbology.G"], [46, "diofant.printing.pretty.pretty_symbology.g"]], "lambdaprinter (class in diofant.printing.lambdarepr)": [[46, "diofant.printing.lambdarepr.LambdaPrinter"]], "latexprinter (class in diofant.printing.latex)": [[46, "diofant.printing.latex.LatexPrinter"]], "mcodeprinter (class in diofant.printing.mathematica)": [[46, "diofant.printing.mathematica.MCodePrinter"]], "mathmlprinter (class in diofant.printing.mathml)": [[46, "diofant.printing.mathml.MathMLPrinter"]], "prettyprinter (class in diofant.printing.pretty.pretty)": [[46, "diofant.printing.pretty.pretty.PrettyPrinter"]], "printer (class in diofant.printing.printer)": [[46, "diofant.printing.printer.Printer"]], "reprprinter (class in diofant.printing.repr)": [[46, "diofant.printing.repr.ReprPrinter"]], "strprinter (class in diofant.printing.str)": [[46, "diofant.printing.str.StrPrinter"]], "u() (in module diofant.printing.pretty.pretty_symbology)": [[46, "diofant.printing.pretty.pretty_symbology.U"]], "_print() (diofant.printing.printer.printer method)": [[46, "diofant.printing.printer.Printer._print"]], "above() (diofant.printing.pretty.stringpict.stringpict method)": [[46, "diofant.printing.pretty.stringpict.stringPict.above"]], "accepted_latex_functions (in module diofant.printing.latex)": [[46, "diofant.printing.latex.accepted_latex_functions"]], "annotated() (in module diofant.printing.pretty.pretty_symbology)": [[46, "diofant.printing.pretty.pretty_symbology.annotated"]], "below() (diofant.printing.pretty.stringpict.stringpict method)": [[46, "diofant.printing.pretty.stringpict.stringPict.below"]], "ccode() (in module diofant.printing.ccode)": [[46, "diofant.printing.ccode.ccode"]], "diofant.printing": [[46, "module-diofant.printing"]], "diofant.printing.ccode": [[46, "module-diofant.printing.ccode"]], "diofant.printing.codeprinter": [[46, "module-diofant.printing.codeprinter"]], "diofant.printing.conventions": [[46, "module-diofant.printing.conventions"]], "diofant.printing.fcode": [[46, "module-diofant.printing.fcode"]], "diofant.printing.lambdarepr": [[46, "module-diofant.printing.lambdarepr"]], "diofant.printing.latex": [[46, "module-diofant.printing.latex"]], "diofant.printing.mathematica": [[46, "module-diofant.printing.mathematica"]], "diofant.printing.mathml": [[46, "module-diofant.printing.mathml"]], "diofant.printing.precedence": [[46, "module-diofant.printing.precedence"]], "diofant.printing.pretty.pretty": [[46, "module-diofant.printing.pretty.pretty"]], "diofant.printing.pretty.pretty_symbology": [[46, "module-diofant.printing.pretty.pretty_symbology"]], "diofant.printing.pretty.stringpict": [[46, "module-diofant.printing.pretty.stringpict"]], "diofant.printing.printer": [[46, "module-diofant.printing.printer"]], "diofant.printing.python": [[46, "module-diofant.printing.python"]], "diofant.printing.repr": [[46, "module-diofant.printing.repr"]], "diofant.printing.str": [[46, "module-diofant.printing.str"]], "doprint() (diofant.printing.mathematica.mcodeprinter method)": [[46, "diofant.printing.mathematica.MCodePrinter.doprint"]], "doprint() (diofant.printing.mathml.mathmlprinter method)": [[46, "diofant.printing.mathml.MathMLPrinter.doprint"]], "doprint() (diofant.printing.printer.printer method)": [[46, "diofant.printing.printer.Printer.doprint"]], "dotprint() (in module diofant.printing.dot)": [[46, "diofant.printing.dot.dotprint"]], "emptyprinter() (diofant.printing.repr.reprprinter method)": [[46, "diofant.printing.repr.ReprPrinter.emptyPrinter"]], "fcode() (in module diofant.printing.fcode)": [[46, "diofant.printing.fcode.fcode"]], "greek_letters (in module diofant.printing.pretty.pretty_symbology)": [[46, "diofant.printing.pretty.pretty_symbology.greek_letters"]], "height() (diofant.printing.pretty.stringpict.stringpict method)": [[46, "diofant.printing.pretty.stringpict.stringPict.height"]], "hobj() (in module diofant.printing.pretty.pretty_symbology)": [[46, "diofant.printing.pretty.pretty_symbology.hobj"]], "indent_code() (diofant.printing.ccode.ccodeprinter method)": [[46, "diofant.printing.ccode.CCodePrinter.indent_code"]], "indent_code() (diofant.printing.fcode.fcodeprinter method)": [[46, "diofant.printing.fcode.FCodePrinter.indent_code"]], "lambdarepr() (in module diofant.printing.lambdarepr)": [[46, "diofant.printing.lambdarepr.lambdarepr"]], "latex() (in module diofant.printing.latex)": [[46, "diofant.printing.latex.latex"]], "left() (diofant.printing.pretty.stringpict.stringpict method)": [[46, "diofant.printing.pretty.stringpict.stringPict.left"]], "mathematica_code() (in module diofant.printing.mathematica)": [[46, "diofant.printing.mathematica.mathematica_code"]], "mathml() (in module diofant.printing.mathml)": [[46, "diofant.printing.mathml.mathml"]], "mathml_tag() (diofant.printing.mathml.mathmlprinter method)": [[46, "diofant.printing.mathml.MathMLPrinter.mathml_tag"]], "next() (diofant.printing.pretty.stringpict.stringpict static method)": [[46, "diofant.printing.pretty.stringpict.stringPict.next"]], "parens() (diofant.printing.pretty.stringpict.stringpict method)": [[46, "diofant.printing.pretty.stringpict.stringPict.parens"]], "pprint() (in module diofant.printing.pretty.pretty)": [[46, "diofant.printing.pretty.pretty.pprint"]], "pretty() (in module diofant.printing.pretty.pretty)": [[46, "diofant.printing.pretty.pretty.pretty"]], "prettyform (class in diofant.printing.pretty.stringpict)": [[46, "diofant.printing.pretty.stringpict.prettyForm"]], "pretty_atom() (in module diofant.printing.pretty.pretty_symbology)": [[46, "diofant.printing.pretty.pretty_symbology.pretty_atom"]], "pretty_print() (in module diofant.printing.pretty.pretty)": [[46, "diofant.printing.pretty.pretty.pretty_print"]], "pretty_symbol() (in module diofant.printing.pretty.pretty_symbology)": [[46, "diofant.printing.pretty.pretty_symbology.pretty_symbol"]], "pretty_use_unicode() (in module diofant.printing.pretty.pretty_symbology)": [[46, "diofant.printing.pretty.pretty_symbology.pretty_use_unicode"]], "printmethod (diofant.printing.ccode.ccodeprinter attribute)": [[46, "diofant.printing.ccode.CCodePrinter.printmethod"]], "printmethod (diofant.printing.codeprinter.codeprinter attribute)": [[46, "diofant.printing.codeprinter.CodePrinter.printmethod"]], "printmethod (diofant.printing.fcode.fcodeprinter attribute)": [[46, "diofant.printing.fcode.FCodePrinter.printmethod"]], "printmethod (diofant.printing.lambdarepr.lambdaprinter attribute)": [[46, "diofant.printing.lambdarepr.LambdaPrinter.printmethod"]], "printmethod (diofant.printing.latex.latexprinter attribute)": [[46, "diofant.printing.latex.LatexPrinter.printmethod"]], "printmethod (diofant.printing.mathematica.mcodeprinter attribute)": [[46, "diofant.printing.mathematica.MCodePrinter.printmethod"]], "printmethod (diofant.printing.mathml.mathmlprinter attribute)": [[46, "diofant.printing.mathml.MathMLPrinter.printmethod"]], "printmethod (diofant.printing.printer.printer attribute)": [[46, "diofant.printing.printer.Printer.printmethod"]], "printmethod (diofant.printing.repr.reprprinter attribute)": [[46, "diofant.printing.repr.ReprPrinter.printmethod"]], "printmethod (diofant.printing.str.strprinter attribute)": [[46, "diofant.printing.str.StrPrinter.printmethod"]], "render() (diofant.printing.pretty.stringpict.stringpict method)": [[46, "diofant.printing.pretty.stringpict.stringPict.render"]], "reprify() (diofant.printing.repr.reprprinter method)": [[46, "diofant.printing.repr.ReprPrinter.reprify"]], "right() (diofant.printing.pretty.stringpict.stringpict method)": [[46, "diofant.printing.pretty.stringpict.stringPict.right"]], "set_global_settings() (diofant.printing.printer.printer class method)": [[46, "diofant.printing.printer.Printer.set_global_settings"]], "split_super_sub() (in module diofant.printing.conventions)": [[46, "diofant.printing.conventions.split_super_sub"]], "srepr() (in module diofant.printing.repr)": [[46, "diofant.printing.repr.srepr"]], "sstr() (in module diofant.printing.str)": [[46, "diofant.printing.str.sstr"]], "sstrrepr() (in module diofant.printing.str)": [[46, "diofant.printing.str.sstrrepr"]], "stack() (diofant.printing.pretty.stringpict.stringpict static method)": [[46, "diofant.printing.pretty.stringpict.stringPict.stack"]], "stringpict (class in diofant.printing.pretty.stringpict)": [[46, "diofant.printing.pretty.stringpict.stringPict"]], "terminal_width() (diofant.printing.pretty.stringpict.stringpict method)": [[46, "diofant.printing.pretty.stringpict.stringPict.terminal_width"]], "vobj() (in module diofant.printing.pretty.pretty_symbology)": [[46, "diofant.printing.pretty.pretty_symbology.vobj"]], "width() (diofant.printing.pretty.stringpict.stringpict method)": [[46, "diofant.printing.pretty.stringpict.stringPict.width"]], "xobj() (in module diofant.printing.pretty.pretty_symbology)": [[46, "diofant.printing.pretty.pretty_symbology.xobj"]], "xsym() (in module diofant.printing.pretty.pretty_symbology)": [[46, "diofant.printing.pretty.pretty_symbology.xsym"]], "complement (class in diofant.sets.sets)": [[47, "diofant.sets.sets.Complement"]], "emptyset (class in diofant.sets.sets)": [[47, "diofant.sets.sets.EmptySet"]], "extendedreals (class in diofant.sets.fancysets)": [[47, "diofant.sets.fancysets.ExtendedReals"]], "finiteset (class in diofant.sets.sets)": [[47, "diofant.sets.sets.FiniteSet"]], "imageset (class in diofant.sets.fancysets)": [[47, "diofant.sets.fancysets.ImageSet"]], "integers (class in diofant.sets.fancysets)": [[47, "diofant.sets.fancysets.Integers"]], "intersection (class in diofant.sets.sets)": [[47, "diofant.sets.sets.Intersection"]], "interval (class in diofant.sets.sets)": [[47, "diofant.sets.sets.Interval"]], "lopen() (diofant.sets.sets.interval class method)": [[47, "diofant.sets.sets.Interval.Lopen"]], "naturals (class in diofant.sets.fancysets)": [[47, "diofant.sets.fancysets.Naturals"]], "naturals0 (class in diofant.sets.fancysets)": [[47, "diofant.sets.fancysets.Naturals0"]], "productset (class in diofant.sets.sets)": [[47, "diofant.sets.sets.ProductSet"]], "range (class in diofant.sets.fancysets)": [[47, "diofant.sets.fancysets.Range"]], "rationals (class in diofant.sets.fancysets)": [[47, "diofant.sets.fancysets.Rationals"]], "reals (class in diofant.sets.fancysets)": [[47, "diofant.sets.fancysets.Reals"]], "ropen() (diofant.sets.sets.interval class method)": [[47, "diofant.sets.sets.Interval.Ropen"]], "set (class in diofant.sets.sets)": [[47, "diofant.sets.sets.Set"]], "union (class in diofant.sets.sets)": [[47, "diofant.sets.sets.Union"]], "universalset (class in diofant.sets.sets)": [[47, "diofant.sets.sets.UniversalSet"]], "as_relational() (diofant.sets.sets.finiteset method)": [[47, "diofant.sets.sets.FiniteSet.as_relational"]], "as_relational() (diofant.sets.sets.intersection method)": [[47, "diofant.sets.sets.Intersection.as_relational"]], "as_relational() (diofant.sets.sets.interval method)": [[47, "diofant.sets.sets.Interval.as_relational"]], "as_relational() (diofant.sets.sets.union method)": [[47, "diofant.sets.sets.Union.as_relational"]], "boundary (diofant.sets.sets.set property)": [[47, "diofant.sets.sets.Set.boundary"]], "closure (diofant.sets.sets.set property)": [[47, "diofant.sets.sets.Set.closure"]], "complement() (diofant.sets.sets.set method)": [[47, "diofant.sets.sets.Set.complement"]], "contains() (diofant.sets.sets.set method)": [[47, "diofant.sets.sets.Set.contains"]], "diofant.sets.fancysets": [[47, "module-diofant.sets.fancysets"]], "diofant.sets.sets": [[47, "module-diofant.sets.sets"]], "end (diofant.sets.sets.interval property)": [[47, "diofant.sets.sets.Interval.end"]], "imageset() (in module diofant.sets.sets)": [[47, "diofant.sets.sets.imageset"]], "inf (diofant.sets.sets.interval property)": [[47, "diofant.sets.sets.Interval.inf"]], "inf (diofant.sets.sets.set property)": [[47, "diofant.sets.sets.Set.inf"]], "interior (diofant.sets.sets.set property)": [[47, "diofant.sets.sets.Set.interior"]], "intersection() (diofant.sets.sets.set method)": [[47, "diofant.sets.sets.Set.intersection"]], "is_closed (diofant.sets.sets.set property)": [[47, "diofant.sets.sets.Set.is_closed"]], "is_disjoint() (diofant.sets.sets.set method)": [[47, "diofant.sets.sets.Set.is_disjoint"]], "is_left_unbounded (diofant.sets.sets.interval property)": [[47, "diofant.sets.sets.Interval.is_left_unbounded"]], "is_open (diofant.sets.sets.set property)": [[47, "diofant.sets.sets.Set.is_open"]], "is_proper_subset() (diofant.sets.sets.set method)": [[47, "diofant.sets.sets.Set.is_proper_subset"]], "is_proper_superset() (diofant.sets.sets.set method)": [[47, "diofant.sets.sets.Set.is_proper_superset"]], "is_right_unbounded (diofant.sets.sets.interval property)": [[47, "diofant.sets.sets.Interval.is_right_unbounded"]], "is_subset() (diofant.sets.sets.set method)": [[47, "diofant.sets.sets.Set.is_subset"]], "is_superset() (diofant.sets.sets.set method)": [[47, "diofant.sets.sets.Set.is_superset"]], "isdisjoint() (diofant.sets.sets.set method)": [[47, "diofant.sets.sets.Set.isdisjoint"]], "issubset() (diofant.sets.sets.set method)": [[47, "diofant.sets.sets.Set.issubset"]], "issuperset() (diofant.sets.sets.set method)": [[47, "diofant.sets.sets.Set.issuperset"]], "left (diofant.sets.sets.interval property)": [[47, "diofant.sets.sets.Interval.left"]], "left_open (diofant.sets.sets.interval property)": [[47, "diofant.sets.sets.Interval.left_open"]], "measure (diofant.sets.sets.set property)": [[47, "diofant.sets.sets.Set.measure"]], "open() (diofant.sets.sets.interval class method)": [[47, "diofant.sets.sets.Interval.open"]], "powerset() (diofant.sets.sets.set method)": [[47, "diofant.sets.sets.Set.powerset"]], "reduce() (diofant.sets.sets.complement static method)": [[47, "diofant.sets.sets.Complement.reduce"]], "reduce() (diofant.sets.sets.intersection static method)": [[47, "diofant.sets.sets.Intersection.reduce"]], "reduce() (diofant.sets.sets.union static method)": [[47, "diofant.sets.sets.Union.reduce"]], "right (diofant.sets.sets.interval property)": [[47, "diofant.sets.sets.Interval.right"]], "right_open (diofant.sets.sets.interval property)": [[47, "diofant.sets.sets.Interval.right_open"]], "start (diofant.sets.sets.interval property)": [[47, "diofant.sets.sets.Interval.start"]], "sup (diofant.sets.sets.interval property)": [[47, "diofant.sets.sets.Interval.sup"]], "sup (diofant.sets.sets.set property)": [[47, "diofant.sets.sets.Set.sup"]], "symmetric_difference() (diofant.sets.sets.set method)": [[47, "diofant.sets.sets.Set.symmetric_difference"]], "union() (diofant.sets.sets.set method)": [[47, "diofant.sets.sets.Set.union"]], "epath (class in diofant.simplify.epathtools)": [[48, "diofant.simplify.epathtools.EPath"]], "apply() (diofant.simplify.epathtools.epath method)": [[48, "diofant.simplify.epathtools.EPath.apply"]], "besselsimp() (in module diofant.simplify.simplify)": [[48, "diofant.simplify.simplify.besselsimp"]], "collect() (in module diofant.simplify.radsimp)": [[48, "diofant.simplify.radsimp.collect"]], "collect_const() (in module diofant.simplify.radsimp)": [[48, "diofant.simplify.radsimp.collect_const"]], "collect_sqrt() (in module diofant.simplify.radsimp)": [[48, "diofant.simplify.radsimp.collect_sqrt"]], "combsimp() (in module diofant.simplify.combsimp)": [[48, "diofant.simplify.combsimp.combsimp"]], "cse() (in module diofant.simplify.cse_main)": [[48, "diofant.simplify.cse_main.cse"]], "diofant.simplify.combsimp": [[48, "module-diofant.simplify.combsimp"]], "diofant.simplify.cse_main": [[48, "module-diofant.simplify.cse_main"]], "diofant.simplify.epathtools": [[48, "module-diofant.simplify.epathtools"]], "diofant.simplify.fu": [[48, "module-diofant.simplify.fu"]], "diofant.simplify.hyperexpand": [[48, "module-diofant.simplify.hyperexpand"]], "diofant.simplify.powsimp": [[48, "module-diofant.simplify.powsimp"]], "diofant.simplify.radsimp": [[48, "module-diofant.simplify.radsimp"]], "diofant.simplify.ratsimp": [[48, "module-diofant.simplify.ratsimp"]], "diofant.simplify.sqrtdenest": [[48, "module-diofant.simplify.sqrtdenest"]], "diofant.simplify.traversaltools": [[48, "module-diofant.simplify.traversaltools"]], "diofant.simplify.trigsimp": [[48, "module-diofant.simplify.trigsimp"]], "epath() (in module diofant.simplify.epathtools)": [[48, "diofant.simplify.epathtools.epath"]], "fraction() (in module diofant.simplify.radsimp)": [[48, "diofant.simplify.radsimp.fraction"]], "fu() (in module diofant.simplify.fu)": [[48, "diofant.simplify.fu.fu"]], "futrig() (in module diofant.simplify.trigsimp)": [[48, "diofant.simplify.trigsimp.futrig"]], "hyperexpand() (in module diofant.simplify.hyperexpand)": [[48, "diofant.simplify.hyperexpand.hyperexpand"]], "hypersimilar() (in module diofant.simplify.simplify)": [[48, "diofant.simplify.simplify.hypersimilar"]], "hypersimp() (in module diofant.simplify.simplify)": [[48, "diofant.simplify.simplify.hypersimp"]], "logcombine() (in module diofant.simplify.simplify)": [[48, "diofant.simplify.simplify.logcombine"]], "nsimplify() (in module diofant.simplify.simplify)": [[48, "diofant.simplify.simplify.nsimplify"]], "nthroot() (in module diofant.simplify.simplify)": [[48, "diofant.simplify.simplify.nthroot"]], "opt_cse() (in module diofant.simplify.cse_main)": [[48, "diofant.simplify.cse_main.opt_cse"]], "posify() (in module diofant.simplify.simplify)": [[48, "diofant.simplify.simplify.posify"]], "powdenest() (in module diofant.simplify.powsimp)": [[48, "diofant.simplify.powsimp.powdenest"]], "powsimp() (in module diofant.simplify.powsimp)": [[48, "diofant.simplify.powsimp.powsimp"]], "rad_rationalize() (in module diofant.simplify.radsimp)": [[48, "diofant.simplify.radsimp.rad_rationalize"]], "radsimp() (in module diofant.simplify.radsimp)": [[48, "diofant.simplify.radsimp.radsimp"]], "ratsimp() (in module diofant.simplify.ratsimp)": [[48, "diofant.simplify.ratsimp.ratsimp"]], "rcollect() (in module diofant.simplify.radsimp)": [[48, "diofant.simplify.radsimp.rcollect"]], "select() (diofant.simplify.epathtools.epath method)": [[48, "diofant.simplify.epathtools.EPath.select"]], "separatevars() (in module diofant.simplify.simplify)": [[48, "diofant.simplify.simplify.separatevars"]], "simplify() (in module diofant.simplify.simplify)": [[48, "diofant.simplify.simplify.simplify"]], "sqrtdenest() (in module diofant.simplify.sqrtdenest)": [[48, "diofant.simplify.sqrtdenest.sqrtdenest"]], "tree_cse() (in module diofant.simplify.cse_main)": [[48, "diofant.simplify.cse_main.tree_cse"]], "trigsimp() (in module diofant.simplify.trigsimp)": [[48, "diofant.simplify.trigsimp.trigsimp"]], "unrad() (in module diofant.simplify.sqrtdenest)": [[48, "diofant.simplify.sqrtdenest.unrad"]], "use() (in module diofant.simplify.traversaltools)": [[48, "diofant.simplify.traversaltools.use"]], "pqa() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.PQa"]], "base_solution_linear() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.base_solution_linear"]], "classify_diop() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.classify_diop"]], "cornacchia() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.cornacchia"]], "descent() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.descent"]], "diofant.solvers.diophantine": [[49, "module-diofant.solvers.diophantine"]], "diop_dn() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.diop_DN"]], "diop_bf_dn() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.diop_bf_DN"]], "diop_general_pythagorean() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.diop_general_pythagorean"]], "diop_general_sum_of_even_powers() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.diop_general_sum_of_even_powers"]], "diop_general_sum_of_squares() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.diop_general_sum_of_squares"]], "diop_linear() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.diop_linear"]], "diop_quadratic() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.diop_quadratic"]], "diop_solve() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.diop_solve"]], "diop_ternary_quadratic() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.diop_ternary_quadratic"]], "diop_ternary_quadratic_normal() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.diop_ternary_quadratic_normal"]], "diophantine() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.diophantine"]], "divisible() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.divisible"]], "equivalent() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.equivalent"]], "find_dn() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.find_DN"]], "gaussian_reduce() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.gaussian_reduce"]], "holzer() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.holzer"]], "ldescent() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.ldescent"]], "merge_solution() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.merge_solution"]], "parametrize_ternary_quadratic() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.parametrize_ternary_quadratic"]], "partition() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.partition"]], "power_representation() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.power_representation"]], "prime_as_sum_of_two_squares() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.prime_as_sum_of_two_squares"]], "reconstruct() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.reconstruct"]], "sqf_normal() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.sqf_normal"]], "square_factor() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.square_factor"]], "sum_of_four_squares() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.sum_of_four_squares"]], "sum_of_powers() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.sum_of_powers"]], "sum_of_squares() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.sum_of_squares"]], "sum_of_three_squares() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.sum_of_three_squares"]], "transformation_to_dn() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.transformation_to_DN"]], "transformation_to_normal() (in module diofant.solvers.diophantine)": [[49, "diofant.solvers.diophantine.transformation_to_normal"]], "diofant.solvers": [[50, "module-diofant.solvers"]], "diofant.solvers.inequalities": [[51, "module-diofant.solvers.inequalities"]], "reduce_inequalities() (in module diofant.solvers.inequalities)": [[51, "diofant.solvers.inequalities.reduce_inequalities"]], "_handle_integral() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode._handle_Integral"]], "_linear_2eq_order1_type3() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode._linear_2eq_order1_type3"]], "_linear_2eq_order1_type4() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode._linear_2eq_order1_type4"]], "_linear_2eq_order1_type5() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode._linear_2eq_order1_type5"]], "_linear_2eq_order1_type6() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode._linear_2eq_order1_type6"]], "_linear_2eq_order1_type7() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode._linear_2eq_order1_type7"]], "_linear_2eq_order2_type1() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode._linear_2eq_order2_type1"]], "_linear_2eq_order2_type11() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode._linear_2eq_order2_type11"]], "_linear_2eq_order2_type2() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode._linear_2eq_order2_type2"]], "_linear_2eq_order2_type3() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode._linear_2eq_order2_type3"]], "_linear_2eq_order2_type5() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode._linear_2eq_order2_type5"]], "_linear_2eq_order2_type6() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode._linear_2eq_order2_type6"]], "_linear_2eq_order2_type7() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode._linear_2eq_order2_type7"]], "_linear_2eq_order2_type8() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode._linear_2eq_order2_type8"]], "_linear_2eq_order2_type9() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode._linear_2eq_order2_type9"]], "_linear_3eq_order1_type4() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode._linear_3eq_order1_type4"]], "_nonlinear_2eq_order1_type1() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode._nonlinear_2eq_order1_type1"]], "_nonlinear_2eq_order1_type2() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode._nonlinear_2eq_order1_type2"]], "_nonlinear_2eq_order1_type3() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode._nonlinear_2eq_order1_type3"]], "_nonlinear_2eq_order1_type4() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode._nonlinear_2eq_order1_type4"]], "_nonlinear_2eq_order1_type5() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode._nonlinear_2eq_order1_type5"]], "_nonlinear_3eq_order1_type1() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode._nonlinear_3eq_order1_type1"]], "_nonlinear_3eq_order1_type2() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode._nonlinear_3eq_order1_type2"]], "_undetermined_coefficients_match() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode._undetermined_coefficients_match"]], "allhints (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.allhints"]], "checkinfsol() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.checkinfsol"]], "checkodesol() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.checkodesol"]], "classify_ode() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.classify_ode"]], "constant_renumber() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.constant_renumber"]], "constantsimp() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.constantsimp"]], "diofant.solvers.ode": [[52, "module-diofant.solvers.ode"]], "dsolve() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.dsolve"]], "homogeneous_order() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.homogeneous_order"]], "infinitesimals() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.infinitesimals"]], "lie_heuristic_abaco1_product() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.lie_heuristic_abaco1_product"]], "lie_heuristic_abaco1_simple() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.lie_heuristic_abaco1_simple"]], "lie_heuristic_abaco2_similar() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.lie_heuristic_abaco2_similar"]], "lie_heuristic_abaco2_unique_unknown() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.lie_heuristic_abaco2_unique_unknown"]], "lie_heuristic_bivariate() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.lie_heuristic_bivariate"]], "lie_heuristic_chi() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.lie_heuristic_chi"]], "lie_heuristic_function_sum() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.lie_heuristic_function_sum"]], "lie_heuristic_linear() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.lie_heuristic_linear"]], "ode_1st_exact() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.ode_1st_exact"]], "ode_1st_homogeneous_coeff_best() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.ode_1st_homogeneous_coeff_best"]], "ode_1st_homogeneous_coeff_subs_dep_div_indep() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.ode_1st_homogeneous_coeff_subs_dep_div_indep"]], "ode_1st_homogeneous_coeff_subs_indep_div_dep() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.ode_1st_homogeneous_coeff_subs_indep_div_dep"]], "ode_1st_linear() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.ode_1st_linear"]], "ode_1st_power_series() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.ode_1st_power_series"]], "ode_2nd_power_series_ordinary() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.ode_2nd_power_series_ordinary"]], "ode_2nd_power_series_regular() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.ode_2nd_power_series_regular"]], "ode_bernoulli() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.ode_Bernoulli"]], "ode_liouville() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.ode_Liouville"]], "ode_riccati_special_minus2() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.ode_Riccati_special_minus2"]], "ode_almost_linear() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.ode_almost_linear"]], "ode_lie_group() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.ode_lie_group"]], "ode_linear_coefficients() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.ode_linear_coefficients"]], "ode_nth_linear_constant_coeff_homogeneous() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.ode_nth_linear_constant_coeff_homogeneous"]], "ode_nth_linear_constant_coeff_undetermined_coefficients() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.ode_nth_linear_constant_coeff_undetermined_coefficients"]], "ode_nth_linear_constant_coeff_variation_of_parameters() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.ode_nth_linear_constant_coeff_variation_of_parameters"]], "ode_separable() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.ode_separable"]], "ode_separable_reduced() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.ode_separable_reduced"]], "ode_sol_simplicity() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.ode_sol_simplicity"]], "odesimp() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.odesimp"]], "sysode_linear_neq_order1() (in module diofant.solvers.ode)": [[52, "diofant.solvers.ode.sysode_linear_neq_order1"]], "checkpdesol() (in module diofant.solvers.pde)": [[53, "diofant.solvers.pde.checkpdesol"]], "classify_pde() (in module diofant.solvers.pde)": [[53, "diofant.solvers.pde.classify_pde"]], "diofant.solvers.pde": [[53, "module-diofant.solvers.pde"]], "pde_1st_linear_constant_coeff() (in module diofant.solvers.pde)": [[53, "diofant.solvers.pde.pde_1st_linear_constant_coeff"]], "pde_1st_linear_constant_coeff_homogeneous() (in module diofant.solvers.pde)": [[53, "diofant.solvers.pde.pde_1st_linear_constant_coeff_homogeneous"]], "pde_1st_linear_variable_coeff() (in module diofant.solvers.pde)": [[53, "diofant.solvers.pde.pde_1st_linear_variable_coeff"]], "pde_separate() (in module diofant.solvers.pde)": [[53, "diofant.solvers.pde.pde_separate"]], "pde_separate_add() (in module diofant.solvers.pde)": [[53, "diofant.solvers.pde.pde_separate_add"]], "pde_separate_mul() (in module diofant.solvers.pde)": [[53, "diofant.solvers.pde.pde_separate_mul"]], "pdsolve() (in module diofant.solvers.pde)": [[53, "diofant.solvers.pde.pdsolve"]], "diofant.solvers.recurr": [[54, "module-diofant.solvers.recurr"]], "rsolve() (in module diofant.solvers.recurr)": [[54, "diofant.solvers.recurr.rsolve"]], "rsolve_hyper() (in module diofant.solvers.recurr)": [[54, "diofant.solvers.recurr.rsolve_hyper"]], "rsolve_poly() (in module diofant.solvers.recurr)": [[54, "diofant.solvers.recurr.rsolve_poly"]], "rsolve_ratio() (in module diofant.solvers.recurr)": [[54, "diofant.solvers.recurr.rsolve_ratio"]], "diofant.solvers.polysys": [[55, "module-diofant.solvers.polysys"]], "diofant.solvers.solvers": [[55, "module-diofant.solvers.solvers"]], "minsolve_linear_system() (in module diofant.solvers.solvers)": [[55, "diofant.solvers.solvers.minsolve_linear_system"]], "solve() (in module diofant.solvers.solvers)": [[55, "diofant.solvers.solvers.solve"]], "solve_linear() (in module diofant.solvers.solvers)": [[55, "diofant.solvers.solvers.solve_linear"]], "solve_linear_system() (in module diofant.solvers.polysys)": [[55, "diofant.solvers.polysys.solve_linear_system"]], "solve_poly_system() (in module diofant.solvers.polysys)": [[55, "diofant.solvers.polysys.solve_poly_system"]], "solve_surd_system() (in module diofant.solvers.polysys)": [[55, "diofant.solvers.polysys.solve_surd_system"]], "checksol() (in module diofant.solvers.utils)": [[56, "diofant.solvers.utils.checksol"]], "diofant.solvers.deutils": [[56, "module-diofant.solvers.deutils"]], "diofant.solvers.utils": [[56, "module-diofant.solvers.utils"]], "ode_order() (in module diofant.solvers.deutils)": [[56, "diofant.solvers.deutils.ode_order"]], "array (class in diofant.tensor.array)": [[57, "diofant.tensor.array.Array"]], "immutabledensendimarray (class in diofant.tensor.array)": [[57, "diofant.tensor.array.ImmutableDenseNDimArray"]], "immutablesparsendimarray (class in diofant.tensor.array)": [[57, "diofant.tensor.array.ImmutableSparseNDimArray"]], "mutabledensendimarray (class in diofant.tensor.array)": [[57, "diofant.tensor.array.MutableDenseNDimArray"]], "mutablesparsendimarray (class in diofant.tensor.array)": [[57, "diofant.tensor.array.MutableSparseNDimArray"]], "derive_by_array() (in module diofant.tensor.array)": [[57, "diofant.tensor.array.derive_by_array"]], "diofant.tensor.array": [[57, "module-diofant.tensor.array"]], "permutedims() (in module diofant.tensor.array)": [[57, "diofant.tensor.array.permutedims"]], "tensorcontraction() (in module diofant.tensor.array)": [[57, "diofant.tensor.array.tensorcontraction"]], "tensorproduct() (in module diofant.tensor.array)": [[57, "diofant.tensor.array.tensorproduct"]], "diofant.tensor": [[58, "module-diofant.tensor"]], "indexconformanceexceptionerror": [[59, "diofant.tensor.index_methods.IndexConformanceExceptionError"]], "diofant.tensor.index_methods": [[59, "module-diofant.tensor.index_methods"]], "get_contraction_structure() (in module diofant.tensor.index_methods)": [[59, "diofant.tensor.index_methods.get_contraction_structure"]], "get_indices() (in module diofant.tensor.index_methods)": [[59, "diofant.tensor.index_methods.get_indices"]], "idx (class in diofant.tensor.indexed)": [[60, "diofant.tensor.indexed.Idx"]], "indexexceptionerror": [[60, "diofant.tensor.indexed.IndexExceptionError"]], "indexed (class in diofant.tensor.indexed)": [[60, "diofant.tensor.indexed.Indexed"]], "indexedbase (class in diofant.tensor.indexed)": [[60, "diofant.tensor.indexed.IndexedBase"]], "args (diofant.tensor.indexed.indexedbase property)": [[60, "diofant.tensor.indexed.IndexedBase.args"]], "base (diofant.tensor.indexed.indexed property)": [[60, "diofant.tensor.indexed.Indexed.base"]], "diofant.tensor.indexed": [[60, "module-diofant.tensor.indexed"]], "indices (diofant.tensor.indexed.indexed property)": [[60, "diofant.tensor.indexed.Indexed.indices"]], "label (diofant.tensor.indexed.idx property)": [[60, "diofant.tensor.indexed.Idx.label"]], "label (diofant.tensor.indexed.indexedbase property)": [[60, "diofant.tensor.indexed.IndexedBase.label"]], "lower (diofant.tensor.indexed.idx property)": [[60, "diofant.tensor.indexed.Idx.lower"]], "ranges (diofant.tensor.indexed.indexed property)": [[60, "diofant.tensor.indexed.Indexed.ranges"]], "rank (diofant.tensor.indexed.indexed property)": [[60, "diofant.tensor.indexed.Indexed.rank"]], "shape (diofant.tensor.indexed.indexed property)": [[60, "diofant.tensor.indexed.Indexed.shape"]], "shape (diofant.tensor.indexed.indexedbase property)": [[60, "diofant.tensor.indexed.IndexedBase.shape"]], "upper (diofant.tensor.indexed.idx property)": [[60, "diofant.tensor.indexed.Idx.upper"]], "tensadd (class in diofant.tensor.tensor)": [[61, "diofant.tensor.tensor.TensAdd"]], "tensexpr (class in diofant.tensor.tensor)": [[61, "diofant.tensor.tensor.TensExpr"]], "tensmul (class in diofant.tensor.tensor)": [[61, "diofant.tensor.tensor.TensMul"]], "tensorhead (class in diofant.tensor.tensor)": [[61, "diofant.tensor.tensor.TensorHead"]], "tensorindex (class in diofant.tensor.tensor)": [[61, "diofant.tensor.tensor.TensorIndex"]], "tensorindextype (class in diofant.tensor.tensor)": [[61, "diofant.tensor.tensor.TensorIndexType"]], "tensorsymmetry (class in diofant.tensor.tensor)": [[61, "diofant.tensor.tensor.TensorSymmetry"]], "tensortype (class in diofant.tensor.tensor)": [[61, "diofant.tensor.tensor.TensorType"]], "_tensormanager (class in diofant.tensor.tensor)": [[61, "diofant.tensor.tensor._TensorManager"]], "canon_bp() (diofant.tensor.tensor.tensadd method)": [[61, "diofant.tensor.tensor.TensAdd.canon_bp"]], "canon_bp() (diofant.tensor.tensor.tensmul method)": [[61, "diofant.tensor.tensor.TensMul.canon_bp"]], "canon_bp() (in module diofant.tensor.tensor)": [[61, "diofant.tensor.tensor.canon_bp"]], "clear() (diofant.tensor.tensor._tensormanager method)": [[61, "diofant.tensor.tensor._TensorManager.clear"]], "comm_i2symbol() (diofant.tensor.tensor._tensormanager method)": [[61, "diofant.tensor.tensor._TensorManager.comm_i2symbol"]], "comm_symbols2i() (diofant.tensor.tensor._tensormanager method)": [[61, "diofant.tensor.tensor._TensorManager.comm_symbols2i"]], "commutes_with() (diofant.tensor.tensor.tensorhead method)": [[61, "diofant.tensor.tensor.TensorHead.commutes_with"]], "contract_metric() (diofant.tensor.tensor.tensadd method)": [[61, "diofant.tensor.tensor.TensAdd.contract_metric"]], "contract_metric() (diofant.tensor.tensor.tensmul method)": [[61, "diofant.tensor.tensor.TensMul.contract_metric"]], "diofant.tensor.tensor": [[61, "module-diofant.tensor.tensor"]], "from_tids_list() (diofant.tensor.tensor.tensadd static method)": [[61, "diofant.tensor.tensor.TensAdd.from_TIDS_list"]], "fun_eval() (diofant.tensor.tensor.tensadd method)": [[61, "diofant.tensor.tensor.TensAdd.fun_eval"]], "fun_eval() (diofant.tensor.tensor.tensmul method)": [[61, "diofant.tensor.tensor.TensMul.fun_eval"]], "get_comm() (diofant.tensor.tensor._tensormanager method)": [[61, "diofant.tensor.tensor._TensorManager.get_comm"]], "get_indices() (diofant.tensor.tensor.tensmul method)": [[61, "diofant.tensor.tensor.TensMul.get_indices"]], "get_matrix() (diofant.tensor.tensor.tensexpr method)": [[61, "diofant.tensor.tensor.TensExpr.get_matrix"]], "perm2tensor() (diofant.tensor.tensor.tensmul method)": [[61, "diofant.tensor.tensor.TensMul.perm2tensor"]], "riemann_cyclic() (in module diofant.tensor.tensor)": [[61, "diofant.tensor.tensor.riemann_cyclic"]], "riemann_cyclic_replace() (in module diofant.tensor.tensor)": [[61, "diofant.tensor.tensor.riemann_cyclic_replace"]], "set_comm() (diofant.tensor.tensor._tensormanager method)": [[61, "diofant.tensor.tensor._TensorManager.set_comm"]], "set_comms() (diofant.tensor.tensor._tensormanager method)": [[61, "diofant.tensor.tensor._TensorManager.set_comms"]], "sorted_components() (diofant.tensor.tensor.tensmul method)": [[61, "diofant.tensor.tensor.TensMul.sorted_components"]], "split() (diofant.tensor.tensor.tensmul method)": [[61, "diofant.tensor.tensor.TensMul.split"]], "substitute_indices() (diofant.tensor.tensor.tensadd method)": [[61, "diofant.tensor.tensor.TensAdd.substitute_indices"]], "tensor_indices() (in module diofant.tensor.tensor)": [[61, "diofant.tensor.tensor.tensor_indices"]], "tensor_mul() (in module diofant.tensor.tensor)": [[61, "diofant.tensor.tensor.tensor_mul"]], "tensorsymmetry() (in module diofant.tensor.tensor)": [[61, "diofant.tensor.tensor.tensorsymmetry"]], "codewraperror": [[62, "diofant.utilities.autowrap.CodeWrapError"]], "codewrapper (class in diofant.utilities.autowrap)": [[62, "diofant.utilities.autowrap.CodeWrapper"]], "cythoncodewrapper (class in diofant.utilities.autowrap)": [[62, "diofant.utilities.autowrap.CythonCodeWrapper"]], "dummywrapper (class in diofant.utilities.autowrap)": [[62, "diofant.utilities.autowrap.DummyWrapper"]], "f2pycodewrapper (class in diofant.utilities.autowrap)": [[62, "diofant.utilities.autowrap.F2PyCodeWrapper"]], "ufuncifycodewrapper (class in diofant.utilities.autowrap)": [[62, "diofant.utilities.autowrap.UfuncifyCodeWrapper"]], "autowrap() (in module diofant.utilities.autowrap)": [[62, "diofant.utilities.autowrap.autowrap"]], "binary_function() (in module diofant.utilities.autowrap)": [[62, "diofant.utilities.autowrap.binary_function"]], "diofant.utilities.autowrap": [[62, "module-diofant.utilities.autowrap"]], "dump_c() (diofant.utilities.autowrap.ufuncifycodewrapper method)": [[62, "diofant.utilities.autowrap.UfuncifyCodeWrapper.dump_c"]], "dump_pyx() (diofant.utilities.autowrap.cythoncodewrapper method)": [[62, "diofant.utilities.autowrap.CythonCodeWrapper.dump_pyx"]], "ufuncify() (in module diofant.utilities.autowrap)": [[62, "diofant.utilities.autowrap.ufuncify"]], "argument (class in diofant.utilities.codegen)": [[63, "diofant.utilities.codegen.Argument"]], "ccodegen (class in diofant.utilities.codegen)": [[63, "diofant.utilities.codegen.CCodeGen"]], "codegen (class in diofant.utilities.codegen)": [[63, "diofant.utilities.codegen.CodeGen"]], "datatype (class in diofant.utilities.codegen)": [[63, "diofant.utilities.codegen.DataType"]], "fcodegen (class in diofant.utilities.codegen)": [[63, "diofant.utilities.codegen.FCodeGen"]], "inputargument (class in diofant.utilities.codegen)": [[63, "diofant.utilities.codegen.InputArgument"]], "octavecodegen (class in diofant.utilities.codegen)": [[63, "diofant.utilities.codegen.OctaveCodeGen"]], "outputargument (class in diofant.utilities.codegen)": [[63, "diofant.utilities.codegen.OutputArgument"]], "result (class in diofant.utilities.codegen)": [[63, "diofant.utilities.codegen.Result"]], "routine (class in diofant.utilities.codegen)": [[63, "diofant.utilities.codegen.Routine"]], "codegen() (in module diofant.utilities.codegen)": [[63, "diofant.utilities.codegen.codegen"]], "diofant.utilities.codegen": [[63, "module-diofant.utilities.codegen"]], "dump_c() (diofant.utilities.codegen.ccodegen method)": [[63, "diofant.utilities.codegen.CCodeGen.dump_c"]], "dump_code() (diofant.utilities.codegen.codegen method)": [[63, "diofant.utilities.codegen.CodeGen.dump_code"]], "dump_f95() (diofant.utilities.codegen.fcodegen method)": [[63, "diofant.utilities.codegen.FCodeGen.dump_f95"]], "dump_h() (diofant.utilities.codegen.ccodegen method)": [[63, "diofant.utilities.codegen.CCodeGen.dump_h"]], "dump_h() (diofant.utilities.codegen.fcodegen method)": [[63, "diofant.utilities.codegen.FCodeGen.dump_h"]], "dump_m() (diofant.utilities.codegen.octavecodegen method)": [[63, "diofant.utilities.codegen.OctaveCodeGen.dump_m"]], "get_default_datatype() (in module diofant.utilities.codegen)": [[63, "diofant.utilities.codegen.get_default_datatype"]], "get_interface() (diofant.utilities.codegen.fcodegen method)": [[63, "diofant.utilities.codegen.FCodeGen.get_interface"]], "get_prototype() (diofant.utilities.codegen.ccodegen method)": [[63, "diofant.utilities.codegen.CCodeGen.get_prototype"]], "make_routine() (in module diofant.utilities.codegen)": [[63, "diofant.utilities.codegen.make_routine"]], "result_variables (diofant.utilities.codegen.routine property)": [[63, "diofant.utilities.codegen.Routine.result_variables"]], "routine() (diofant.utilities.codegen.codegen method)": [[63, "diofant.utilities.codegen.CodeGen.routine"]], "routine() (diofant.utilities.codegen.octavecodegen method)": [[63, "diofant.utilities.codegen.OctaveCodeGen.routine"]], "variables (diofant.utilities.codegen.routine property)": [[63, "diofant.utilities.codegen.Routine.variables"]], "write() (diofant.utilities.codegen.codegen method)": [[63, "diofant.utilities.codegen.CodeGen.write"]], "conserve_mpmath_dps() (in module diofant.utilities.decorator)": [[64, "diofant.utilities.decorator.conserve_mpmath_dps"]], "diofant.utilities.decorator": [[64, "module-diofant.utilities.decorator"]], "doctest_depends_on() (in module diofant.utilities.decorator)": [[64, "diofant.utilities.decorator.doctest_depends_on"]], "no_attrs_in_subclass (class in diofant.utilities.decorator)": [[64, "diofant.utilities.decorator.no_attrs_in_subclass"]], "multisetpartitiontraverser (class in diofant.utilities.enumerative)": [[65, "diofant.utilities.enumerative.MultisetPartitionTraverser"]], "count_partitions() (diofant.utilities.enumerative.multisetpartitiontraverser method)": [[65, "diofant.utilities.enumerative.MultisetPartitionTraverser.count_partitions"]], "diofant.utilities.enumerative": [[65, "module-diofant.utilities.enumerative"]], "enum_all() (diofant.utilities.enumerative.multisetpartitiontraverser method)": [[65, "diofant.utilities.enumerative.MultisetPartitionTraverser.enum_all"]], "enum_large() (diofant.utilities.enumerative.multisetpartitiontraverser method)": [[65, "diofant.utilities.enumerative.MultisetPartitionTraverser.enum_large"]], "enum_range() (diofant.utilities.enumerative.multisetpartitiontraverser method)": [[65, "diofant.utilities.enumerative.MultisetPartitionTraverser.enum_range"]], "enum_small() (diofant.utilities.enumerative.multisetpartitiontraverser method)": [[65, "diofant.utilities.enumerative.MultisetPartitionTraverser.enum_small"]], "factoring_visitor() (in module diofant.utilities.enumerative)": [[65, "diofant.utilities.enumerative.factoring_visitor"]], "list_visitor() (in module diofant.utilities.enumerative)": [[65, "diofant.utilities.enumerative.list_visitor"]], "multiset_partitions_taocp() (in module diofant.utilities.enumerative)": [[65, "diofant.utilities.enumerative.multiset_partitions_taocp"]], "diofant.utilities": [[66, "module-diofant.utilities"]], "cantor_product() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.cantor_product"]], "common_prefix() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.common_prefix"]], "common_suffix() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.common_suffix"]], "default_sort_key() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.default_sort_key"]], "diofant.utilities.iterables": [[67, "module-diofant.utilities.iterables"]], "filter_symbols() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.filter_symbols"]], "flatten() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.flatten"]], "group() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.group"]], "has_dups() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.has_dups"]], "has_variety() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.has_variety"]], "minlex() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.minlex"]], "multiset() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.multiset"]], "multiset_combinations() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.multiset_combinations"]], "multiset_partitions() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.multiset_partitions"]], "multiset_permutations() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.multiset_permutations"]], "numbered_symbols() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.numbered_symbols"]], "ordered() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.ordered"]], "ordered_partitions() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.ordered_partitions"]], "partitions() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.partitions"]], "permute_signs() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.permute_signs"]], "postorder_traversal() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.postorder_traversal"]], "rotate_left() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.rotate_left"]], "rotate_right() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.rotate_right"]], "runs() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.runs"]], "sift() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.sift"]], "signed_permutations() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.signed_permutations"]], "subsets() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.subsets"]], "topological_sort() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.topological_sort"]], "unflatten() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.unflatten"]], "uniq() (in module diofant.utilities.iterables)": [[67, "diofant.utilities.iterables.uniq"]], "diofant.utilities.lambdify": [[68, "module-diofant.utilities.lambdify"]], "implemented_function() (in module diofant.utilities.lambdify)": [[68, "diofant.utilities.lambdify.implemented_function"]], "lambdastr() (in module diofant.utilities.lambdify)": [[68, "diofant.utilities.lambdify.lambdastr"]], "lambdify() (in module diofant.utilities.lambdify)": [[68, "diofant.utilities.lambdify.lambdify"]], "diofant.utilities.memoization": [[69, "module-diofant.utilities.memoization"]], "recurrence_memo() (in module diofant.utilities.memoization)": [[69, "diofant.utilities.memoization.recurrence_memo"]], "diofant.utilities.misc": [[70, "module-diofant.utilities.misc"]], "filldedent() (in module diofant.utilities.misc)": [[70, "diofant.utilities.misc.filldedent"]], "diofant.utilities.randtest": [[71, "module-diofant.utilities.randtest"]], "random_complex_number() (in module diofant.utilities.randtest)": [[71, "diofant.utilities.randtest.random_complex_number"]], "verify_derivative_numerically() (in module diofant.utilities.randtest)": [[71, "diofant.utilities.randtest.verify_derivative_numerically"]], "verify_numerically() (in module diofant.utilities.randtest)": [[71, "diofant.utilities.randtest.verify_numerically"]]}})