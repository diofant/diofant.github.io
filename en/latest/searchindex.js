Search.setIndex({"docnames": ["aboutus", "cli", "guide", "index", "install", "internals/evalf", "internals/g-functions", "internals/gruntz", "internals/hyperexpand", "internals/index", "internals/polys", "modules/calculus/index", "modules/combinatorics/graycode", "modules/combinatorics/group_constructs", "modules/combinatorics/index", "modules/combinatorics/named_groups", "modules/combinatorics/partitions", "modules/combinatorics/perm_groups", "modules/combinatorics/permutations", "modules/combinatorics/polyhedron", "modules/combinatorics/prufer", "modules/combinatorics/subsets", "modules/combinatorics/tensor_can", "modules/combinatorics/testutil", "modules/combinatorics/util", "modules/concrete", "modules/config", "modules/core", "modules/diffgeom", "modules/domains", "modules/functions/combinatorial", "modules/functions/elementary", "modules/functions/index", "modules/functions/special", "modules/geometry/curves", "modules/geometry/ellipses", "modules/geometry/entities", "modules/geometry/index", "modules/geometry/lines", "modules/geometry/points", "modules/geometry/polygons", "modules/geometry/utils", "modules/index", "modules/integrals", "modules/interactive", "modules/logic", "modules/matrices/dense", "modules/matrices/expressions", "modules/matrices/immutablematrices", "modules/matrices/index", "modules/matrices/matrices", "modules/matrices/sparse", "modules/ntheory", "modules/parsing", "modules/plotting", "modules/polys", "modules/printing", "modules/sets", "modules/simplify/simplify", "modules/solvers/diophantine", "modules/solvers/index", "modules/solvers/inequalities", "modules/solvers/ode", "modules/solvers/pde", "modules/solvers/recurr", "modules/solvers/solvers", "modules/solvers/utilities", "modules/stats", "modules/tensor/array", "modules/tensor/index", "modules/tensor/index_methods", "modules/tensor/indexed", "modules/tensor/tensor", "modules/utilities/autowrap", "modules/utilities/codegen", "modules/utilities/decorator", "modules/utilities/enumerative", "modules/utilities/index", "modules/utilities/iterables", "modules/utilities/lambdify", "modules/utilities/memoization", "modules/utilities/misc", "modules/utilities/randtest", "release/index", "release/notes-0.10", "release/notes-0.11", "release/notes-0.12", "release/notes-0.13", "release/notes-0.14", "release/notes-0.5.0", "release/notes-0.5.1", "release/notes-0.5.10", "release/notes-0.5.11", "release/notes-0.5.12", "release/notes-0.5.13", "release/notes-0.5.14", "release/notes-0.5.15", "release/notes-0.5.2", "release/notes-0.5.3", "release/notes-0.5.4", "release/notes-0.5.5", "release/notes-0.5.6", "release/notes-0.5.7", "release/notes-0.5.8", "release/notes-0.5.9", "release/notes-0.6.0", "release/notes-0.6.1", "release/notes-0.6.2", "release/notes-0.6.3", "release/notes-0.6.4", "release/notes-0.6.5", "release/notes-0.6.6", "release/notes-0.6.7", "release/notes-0.7.0", "release/notes-0.7.1", "release/notes-0.7.2", "release/notes-0.7.3", "release/notes-0.7.4", "release/notes-0.7.5", "release/notes-0.7.6", "release/notes-0.8", "release/notes-0.9", "release/sympy", "sources", "tutorial/basics", "tutorial/calculus", "tutorial/gotchas", "tutorial/index", "tutorial/intro", "tutorial/manipulation", "tutorial/matrices", "tutorial/polys", "tutorial/printing", "tutorial/simplification", "tutorial/solvers"], "filenames": ["aboutus.rst", "cli.rst", "guide.rst", "index.rst", "install.rst", "internals/evalf.rst", "internals/g-functions.rst", "internals/gruntz.rst", "internals/hyperexpand.rst", "internals/index.rst", "internals/polys.rst", "modules/calculus/index.rst", "modules/combinatorics/graycode.rst", "modules/combinatorics/group_constructs.rst", "modules/combinatorics/index.rst", "modules/combinatorics/named_groups.rst", "modules/combinatorics/partitions.rst", "modules/combinatorics/perm_groups.rst", "modules/combinatorics/permutations.rst", "modules/combinatorics/polyhedron.rst", "modules/combinatorics/prufer.rst", "modules/combinatorics/subsets.rst", "modules/combinatorics/tensor_can.rst", "modules/combinatorics/testutil.rst", "modules/combinatorics/util.rst", "modules/concrete.rst", "modules/config.rst", "modules/core.rst", "modules/diffgeom.rst", "modules/domains.rst", "modules/functions/combinatorial.rst", "modules/functions/elementary.rst", "modules/functions/index.rst", "modules/functions/special.rst", "modules/geometry/curves.rst", "modules/geometry/ellipses.rst", "modules/geometry/entities.rst", "modules/geometry/index.rst", "modules/geometry/lines.rst", "modules/geometry/points.rst", "modules/geometry/polygons.rst", "modules/geometry/utils.rst", "modules/index.rst", "modules/integrals.rst", "modules/interactive.rst", "modules/logic.rst", "modules/matrices/dense.rst", "modules/matrices/expressions.rst", "modules/matrices/immutablematrices.rst", "modules/matrices/index.rst", "modules/matrices/matrices.rst", "modules/matrices/sparse.rst", "modules/ntheory.rst", "modules/parsing.rst", "modules/plotting.rst", "modules/polys.rst", "modules/printing.rst", "modules/sets.rst", "modules/simplify/simplify.rst", "modules/solvers/diophantine.rst", "modules/solvers/index.rst", "modules/solvers/inequalities.rst", "modules/solvers/ode.rst", "modules/solvers/pde.rst", "modules/solvers/recurr.rst", "modules/solvers/solvers.rst", "modules/solvers/utilities.rst", "modules/stats.rst", "modules/tensor/array.rst", "modules/tensor/index.rst", "modules/tensor/index_methods.rst", "modules/tensor/indexed.rst", "modules/tensor/tensor.rst", "modules/utilities/autowrap.rst", "modules/utilities/codegen.rst", "modules/utilities/decorator.rst", "modules/utilities/enumerative.rst", "modules/utilities/index.rst", "modules/utilities/iterables.rst", "modules/utilities/lambdify.rst", "modules/utilities/memoization.rst", "modules/utilities/misc.rst", "modules/utilities/randtest.rst", "release/index.rst", "release/notes-0.10.rst", "release/notes-0.11.rst", "release/notes-0.12.rst", "release/notes-0.13.rst", "release/notes-0.14.rst", "release/notes-0.5.0.rst", "release/notes-0.5.1.rst", "release/notes-0.5.10.rst", "release/notes-0.5.11.rst", "release/notes-0.5.12.rst", "release/notes-0.5.13.rst", "release/notes-0.5.14.rst", "release/notes-0.5.15.rst", "release/notes-0.5.2.rst", "release/notes-0.5.3.rst", "release/notes-0.5.4.rst", "release/notes-0.5.5.rst", "release/notes-0.5.6.rst", "release/notes-0.5.7.rst", "release/notes-0.5.8.rst", "release/notes-0.5.9.rst", "release/notes-0.6.0.rst", "release/notes-0.6.1.rst", "release/notes-0.6.2.rst", "release/notes-0.6.3.rst", "release/notes-0.6.4.rst", "release/notes-0.6.5.rst", "release/notes-0.6.6.rst", "release/notes-0.6.7.rst", "release/notes-0.7.0.rst", "release/notes-0.7.1.rst", "release/notes-0.7.2.rst", "release/notes-0.7.3.rst", "release/notes-0.7.4.rst", "release/notes-0.7.5.rst", "release/notes-0.7.6.rst", "release/notes-0.8.rst", "release/notes-0.9.rst", "release/sympy.rst", "sources.rst", "tutorial/basics.rst", "tutorial/calculus.rst", "tutorial/gotchas.rst", "tutorial/index.rst", "tutorial/intro.rst", "tutorial/manipulation.rst", "tutorial/matrices.rst", "tutorial/polys.rst", "tutorial/printing.rst", "tutorial/simplification.rst", "tutorial/solvers.rst"], "titles": ["About", "Command-Line Usage", "Development", "Diofant\u2019s documentation", "Installation", "Numerical evaluation", "Computing Integrals using Meijer G-Functions", "The Gruntz Algorithm", "Details on the Hypergeometric Function Expansion", "Internals", "Internals of the Polynomial Manipulation Module", "Calculus", "Gray Code", "Group constructors", "Combinatorics", "Named Groups", "Partitions", "Permutation Groups", "Permutations", "Polyhedron", "Prufer Sequences", "Subsets", "Tensor Canonicalization", "Test Utilities", "Utilities", "Concrete Mathematics", "Config", "Core", "Differential Geometry", "Domains", "Combinatorial", "Elementary", "Mathematical Functions", "Special", "Curves", "Ellipses", "Entities", "Geometry", "Lines", "Points", "Polygons", "Utils", "Reference", "Integrals", "Interactive", "Logic", "Dense Matrices", "Matrix Expressions", "Immutable Matrices", "Matrices", "Matrices (linear algebra)", "Sparse Matrices", "Number Theory", "Parsing", "Plotting", "Polynomials", "Printing", "Sets", "Simplify", "Diophantine", "Solvers", "Inequality Solvers", "ODE", "PDE", "Recurrence Equations", "Algebraic equations", "Utilities for solving", "Stats", "N-dim array", "Tensors", "Methods", "Indexed Objects", "Tensor", "Autowrap Module", "Codegen", "Decorator", "Enumerative", "Utilities", "Iterables", "Lambdify", "Memoization", "Miscellaneous", "Randomised Testing", "Release Notes", "Diofant 0.10", "Diofant 0.11", "Diofant 0.12", "Diofant 0.13", "Diofant 0.14", "SymPy 0.5.0", "SymPy 0.5.1", "SymPy 0.5.10", "SymPy 0.5.11", "SymPy 0.5.12", "SymPy 0.5.13", "SymPy 0.5.14", "SymPy 0.5.15", "SymPy 0.5.2", "SymPy 0.5.3", "SymPy 0.5.4", "SymPy 0.5.5", "SymPy 0.5.6", "SymPy 0.5.7", "SymPy 0.5.8", "SymPy 0.5.9", "SymPy 0.6.0", "SymPy 0.6.1", "SymPy 0.6.2", "SymPy 0.6.3", "SymPy 0.6.4", "SymPy 0.6.5", "SymPy 0.6.6", "SymPy 0.6.7", "SymPy 0.7.0", "SymPy 0.7.1", "SymPy 0.7.2", "SymPy 0.7.3", "SymPy 0.7.4", "SymPy 0.7.5", "SymPy 0.7.6", "Diofant 0.8", "Diofant 0.9", "SymPy releases", "Bibliography", "Basics", "Calculus", "Gotchas", "Tutorial", "Introduction", "Expression Trees", "Matrices", "Polynomials", "Printing", "Simplification", "Solvers"], "terms": {"thi": [0, 1, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 99, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "python": [0, 2, 3, 4, 5, 18, 27, 29, 31, 37, 44, 45, 46, 50, 51, 52, 53, 56, 58, 62, 68, 73, 74, 76, 78, 79, 84, 85, 87, 88, 91, 93, 100, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 126, 127, 128, 132, 133], "librari": [0, 2, 3, 27, 29, 43, 74, 79, 113, 114, 115, 119, 124, 126, 127], "symbol": [0, 1, 3, 5, 7, 8, 10, 11, 25, 28, 29, 30, 31, 33, 34, 35, 37, 39, 40, 41, 42, 43, 44, 45, 47, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 82, 85, 87, 88, 94, 100, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134], "mathemat": [0, 3, 6, 18, 27, 28, 30, 31, 33, 38, 42, 45, 52, 56, 57, 59, 62, 71, 73, 74, 97, 121, 123, 124, 126, 128, 129, 133], "i": [0, 1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 78, 79, 82, 84, 85, 86, 87, 88, 93, 94, 95, 100, 103, 106, 107, 108, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134], "fork": [0, 2, 120], "sympi": [0, 2, 3, 18, 27, 79, 83, 84, 85, 86, 87, 88, 120, 121], "start": [0, 2, 3, 4, 8, 10, 12, 16, 17, 18, 22, 25, 27, 28, 33, 50, 52, 55, 56, 57, 59, 62, 68, 70, 73, 78, 81, 85, 94, 115, 127, 128], "sergei": [0, 123], "b": [0, 2, 3, 5, 6, 7, 8, 10, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 35, 37, 38, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 62, 63, 64, 67, 68, 71, 72, 75, 76, 78, 82, 85, 113, 114, 115, 117, 118, 119, 120, 121, 123, 128, 133, 134], "kirpichev": 0, "last": [0, 5, 10, 18, 22, 25, 27, 31, 35, 43, 46, 48, 50, 51, 52, 55, 56, 59, 70, 72, 74, 78, 85, 86, 109, 113, 114, 115, 116, 119, 125, 128, 129, 130], "regular": [0, 5, 15, 33, 40, 43, 52, 62, 72, 109, 124], "": [0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 16, 17, 18, 20, 22, 23, 24, 25, 27, 29, 30, 31, 33, 34, 35, 38, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 72, 73, 74, 76, 78, 79, 81, 84, 85, 86, 87, 88, 94, 100, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 133, 134], "commit": [0, 2, 113, 114, 115], "cbdd072": [0, 2], "22": [0, 5, 17, 27, 33, 52, 58, 59, 64, 85, 104, 106, 118], "feb": [0, 118, 121], "2015": [0, 123], "The": [0, 2, 3, 4, 5, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 78, 79, 85, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "git": [0, 2, 4, 113, 114, 115], "histori": [0, 2], "goe": [0, 8, 23, 27, 32, 62, 78, 88], "back": [0, 5, 6, 8, 22, 25, 31, 33, 39, 43, 52, 56, 62, 68, 115, 121, 124], "2007": [0, 52, 76, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104], "project": [0, 2, 5, 10, 38, 42, 50, 73, 74, 115, 116, 117], "wa": [0, 2, 8, 10, 16, 17, 18, 20, 27, 28, 33, 46, 52, 53, 55, 56, 58, 64, 67, 75, 78, 84, 85, 86, 89, 90, 91, 94, 95, 96, 98, 99, 102, 103, 105, 106, 107, 113, 114, 115, 117, 118, 119, 120, 128], "name": [0, 2, 6, 8, 10, 14, 19, 22, 25, 27, 28, 31, 33, 38, 42, 47, 50, 52, 53, 54, 55, 56, 58, 59, 62, 63, 67, 71, 72, 73, 74, 79, 84, 107, 114, 115, 116, 117, 121, 127, 128, 133], "after": [0, 2, 7, 10, 15, 17, 18, 22, 24, 25, 27, 28, 39, 41, 43, 50, 51, 52, 53, 56, 59, 62, 63, 68, 75, 78, 81, 86, 115, 120, 121, 124, 131, 133], "diophantu": [0, 59], "alexandria": [0, 59], "hi": [0, 59], "arithmetica": [0, 59], "one": [0, 2, 5, 6, 7, 8, 10, 11, 12, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 31, 32, 33, 35, 36, 37, 40, 41, 43, 45, 49, 50, 52, 53, 54, 55, 56, 58, 59, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 76, 78, 79, 81, 84, 85, 86, 88, 96, 101, 113, 114, 115, 116, 118, 119, 121, 124, 128, 129, 131, 133], "earliest": 0, "known": [0, 5, 8, 16, 17, 18, 27, 29, 30, 32, 33, 35, 38, 50, 52, 57, 58, 62, 63, 67, 78, 85, 94, 120], "text": [0, 6, 17, 31, 52, 56, 59, 62, 67, 123], "us": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 84, 85, 86, 87, 88, 89, 91, 94, 96, 98, 99, 102, 105, 106, 107, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "equat": [0, 6, 8, 10, 22, 25, 27, 28, 31, 33, 35, 38, 42, 50, 54, 55, 56, 58, 60, 61, 62, 63, 66, 71, 84, 85, 86, 87, 88, 95, 106, 110, 114, 115, 116, 117, 118, 119, 120, 121, 123, 126, 127, 128], "diofant": [0, 2, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "transliter": 0, "\u0434\u0438\u043e\u0444\u0430\u043d\u0442": 0, "from": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 67, 68, 70, 72, 73, 74, 75, 76, 78, 79, 81, 84, 85, 86, 87, 88, 89, 94, 103, 106, 113, 115, 116, 117, 118, 119, 120, 121, 122, 127, 128, 129, 133, 134], "russian": 0, "unless": [0, 2, 3, 10, 17, 27, 33, 39, 40, 50, 51, 55, 56, 62, 76, 78, 79, 118, 120, 125, 133], "state": [0, 2, 3, 8, 17, 24, 33, 52, 58, 76, 113, 114, 115, 119, 123], "otherwis": [0, 3, 5, 6, 10, 11, 17, 18, 22, 25, 27, 33, 34, 35, 38, 39, 40, 43, 45, 50, 52, 53, 55, 56, 58, 59, 62, 63, 65, 67, 68, 74, 78, 79, 116, 121, 125], "all": [0, 2, 5, 6, 7, 8, 10, 11, 12, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 36, 38, 39, 40, 43, 44, 45, 46, 50, 51, 52, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 78, 79, 82, 84, 85, 88, 91, 94, 96, 99, 105, 106, 107, 108, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 128, 130, 131, 133], "file": [0, 8, 28, 50, 58, 73, 74, 84, 114, 116, 118, 120], "ar": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 82, 84, 85, 86, 87, 88, 94, 95, 96, 99, 107, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134], "new": [0, 2, 3, 6, 8, 10, 17, 25, 27, 28, 33, 38, 39, 40, 50, 51, 52, 55, 56, 58, 59, 62, 64, 67, 68, 79, 83, 89, 94, 107, 110, 111, 113, 114, 115, 116, 117, 118, 123, 130], "bsd": 0, "copyright": 0, "c": [0, 3, 5, 6, 8, 10, 12, 13, 16, 17, 18, 19, 21, 22, 23, 25, 27, 29, 30, 31, 33, 34, 35, 37, 38, 40, 41, 43, 45, 46, 47, 48, 50, 51, 52, 55, 56, 57, 58, 59, 62, 63, 67, 68, 72, 73, 74, 76, 78, 82, 87, 94, 95, 100, 108, 110, 113, 119, 121, 123, 124, 128, 132, 134], "2006": [0, 50], "2022": 0, "develop": [0, 3, 4, 9, 10, 24, 42, 62, 64, 83, 116], "team": 0, "2013": [0, 116, 117], "2023": 0, "right": [0, 6, 8, 10, 11, 17, 18, 22, 27, 30, 31, 33, 40, 43, 50, 52, 56, 57, 62, 67, 74, 76, 78, 88, 110, 115, 117, 125, 128, 133], "reserv": [0, 2, 72, 74, 119], "redistribut": [0, 55], "sourc": [0, 3, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 105, 114, 122], "binari": [0, 12, 21, 27, 52, 59, 73, 76, 78, 114, 117], "form": [0, 1, 5, 6, 7, 8, 10, 17, 18, 22, 23, 25, 27, 28, 30, 31, 33, 38, 40, 42, 43, 50, 52, 55, 56, 58, 59, 62, 63, 64, 65, 67, 72, 78, 85, 88, 110, 113, 115, 116, 120, 123, 124, 128, 130, 131, 132, 133, 134], "without": [0, 5, 6, 8, 10, 27, 28, 43, 47, 50, 54, 55, 56, 58, 59, 62, 63, 66, 71, 72, 74, 78, 88, 95, 108, 110, 113, 114, 115, 116], "modif": [0, 50, 76, 87, 115], "permit": [0, 18, 28, 31, 54], "provid": [0, 2, 8, 10, 11, 16, 17, 18, 24, 27, 28, 29, 33, 34, 36, 40, 44, 45, 50, 51, 52, 53, 55, 56, 58, 62, 63, 64, 65, 67, 68, 71, 72, 73, 74, 76, 78, 79, 88, 94, 113, 115, 117, 118, 119, 125, 130, 131], "follow": [0, 1, 2, 5, 6, 7, 8, 10, 16, 17, 18, 19, 22, 25, 27, 30, 31, 32, 33, 37, 39, 43, 45, 50, 52, 54, 55, 56, 58, 59, 62, 63, 65, 66, 67, 68, 70, 71, 72, 76, 78, 114, 115, 117, 123, 125, 129], "condit": [0, 8, 17, 27, 28, 31, 33, 43, 50, 52, 56, 62, 64, 67, 71, 88, 115, 116, 119, 120, 121], "met": [0, 59, 75], "code": [0, 1, 3, 5, 6, 8, 10, 14, 17, 20, 21, 27, 28, 32, 33, 37, 42, 43, 44, 53, 58, 62, 67, 71, 73, 74, 78, 84, 85, 88, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 128, 132], "must": [0, 2, 6, 8, 10, 17, 18, 20, 22, 24, 27, 28, 30, 32, 33, 35, 40, 42, 43, 45, 46, 50, 51, 52, 54, 55, 56, 58, 62, 67, 70, 71, 74, 76, 78, 79, 116, 120, 121], "retain": [0, 18, 27, 43, 51, 53, 55, 58, 119], "abov": [0, 4, 6, 7, 8, 10, 12, 17, 18, 22, 27, 30, 33, 35, 38, 41, 43, 45, 50, 54, 56, 58, 59, 62, 64, 65, 67, 70, 71, 73, 74, 79, 113, 114, 115, 124, 126, 128, 133], "notic": [0, 8, 17, 18, 24, 27, 50, 72, 113, 114, 115, 128], "list": [0, 4, 5, 6, 8, 10, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 65, 67, 68, 70, 71, 72, 73, 74, 76, 78, 79, 84, 85, 86, 87, 88, 93, 113, 114, 115, 118, 120, 121, 123, 127, 130, 134], "disclaim": 0, "reproduc": [0, 2], "document": [0, 2, 6, 8, 9, 10, 22, 29, 31, 32, 33, 37, 42, 55, 56, 62, 74, 83, 85, 88, 95, 100, 104, 105, 110, 111, 112, 113, 115, 118, 120, 127], "other": [0, 2, 4, 5, 6, 8, 10, 11, 17, 18, 19, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 62, 63, 64, 65, 67, 68, 71, 72, 73, 74, 76, 78, 79, 85, 93, 95, 99, 113, 114, 115, 116, 117, 119, 121, 124, 126, 128, 130, 131], "materi": 0, "distribut": [0, 9, 17, 24, 27, 55, 57, 67, 72, 116, 120], "neither": [0, 7, 27, 54, 57, 62, 72, 133], "holder": [0, 27], "nor": [0, 7, 27, 45, 54, 62, 72], "its": [0, 2, 6, 10, 12, 15, 17, 18, 25, 27, 28, 29, 30, 31, 33, 35, 37, 38, 40, 43, 45, 47, 50, 52, 55, 56, 57, 58, 62, 64, 70, 71, 72, 76, 78, 115, 118, 119, 120, 123, 126, 130, 131, 132, 133], "contributor": 0, "mai": [0, 4, 5, 6, 8, 9, 10, 17, 19, 25, 27, 28, 30, 31, 33, 35, 37, 40, 41, 43, 50, 52, 54, 56, 58, 59, 62, 63, 65, 67, 68, 70, 73, 74, 76, 78, 79, 82, 96, 114, 119, 124, 126, 128, 131, 133], "endors": 0, "promot": 0, "product": [0, 5, 6, 10, 13, 15, 17, 18, 22, 25, 27, 28, 30, 38, 39, 43, 47, 50, 52, 55, 57, 58, 59, 62, 63, 67, 69, 70, 71, 72, 73, 76, 78, 85, 87, 113, 114, 115, 116, 117, 120, 127, 128, 131], "deriv": [0, 6, 8, 10, 12, 17, 28, 31, 32, 33, 35, 41, 43, 46, 48, 50, 54, 56, 58, 62, 63, 65, 69, 74, 82, 84, 85, 87, 88, 93, 94, 114, 115, 117, 118, 119, 120, 121, 127, 128, 134], "softwar": [0, 123], "specif": [0, 10, 17, 25, 27, 28, 33, 37, 50, 55, 56, 58, 59, 62, 63, 66, 74, 78, 84, 133], "prior": [0, 55, 58], "written": [0, 6, 7, 8, 15, 17, 18, 22, 27, 30, 33, 37, 52, 55, 58, 59, 62, 74, 91, 97, 117], "permiss": 0, "BY": [0, 59], "THE": 0, "AND": [0, 45], "AS": 0, "ani": [0, 2, 4, 5, 6, 7, 8, 10, 11, 16, 17, 18, 24, 25, 27, 28, 30, 31, 33, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 48, 50, 51, 52, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 71, 72, 73, 76, 78, 79, 85, 101, 113, 114, 115, 117, 118, 120, 121, 124, 128, 131, 133, 134], "express": [0, 3, 5, 6, 7, 8, 10, 11, 18, 25, 27, 28, 29, 30, 31, 33, 35, 38, 39, 42, 43, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 62, 63, 65, 67, 68, 70, 71, 72, 73, 74, 76, 78, 79, 85, 87, 88, 91, 93, 94, 101, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134], "OR": [0, 45], "impli": [0, 8, 10, 17, 29, 45, 68, 70, 71, 78, 85, 113], "warranti": 0, "includ": [0, 2, 4, 5, 8, 10, 18, 22, 27, 28, 30, 33, 37, 43, 47, 49, 50, 52, 53, 55, 56, 57, 58, 62, 63, 69, 72, 74, 76, 87, 88, 111, 113, 115, 116, 117, 118, 119, 120, 122, 125, 128, 130, 134], "BUT": 0, "NOT": [0, 73], "limit": [0, 4, 7, 10, 11, 25, 27, 28, 29, 30, 31, 33, 34, 43, 46, 48, 50, 52, 54, 56, 58, 59, 62, 71, 76, 78, 84, 85, 86, 87, 88, 95, 96, 99, 108, 110, 117, 118, 119, 120, 121, 126, 127, 128], "TO": 0, "OF": [0, 76], "merchant": 0, "fit": [0, 6, 27, 50, 51, 52, 56, 62, 81], "FOR": 0, "A": [0, 5, 6, 7, 8, 10, 12, 13, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 87, 100, 113, 114, 115, 117, 118, 119, 120, 123, 130, 132], "particular": [0, 5, 6, 8, 10, 17, 33, 36, 43, 45, 47, 50, 55, 58, 62, 64, 65, 74, 76, 121, 126], "purpos": [0, 17, 23, 27, 43, 50, 56, 62, 71, 76, 77], "IN": 0, "NO": 0, "event": [0, 67], "shall": [0, 6, 7, 8], "regent": 0, "BE": 0, "liabl": [0, 27, 45], "direct": [0, 2, 5, 8, 11, 13, 15, 17, 22, 27, 28, 31, 38, 50, 72, 78, 87, 88, 94, 110, 117, 125, 133], "indirect": 0, "incident": 0, "special": [0, 5, 6, 8, 18, 27, 30, 32, 42, 43, 50, 56, 58, 62, 63, 67, 73, 74, 78, 79, 86, 114, 115, 116, 117, 118, 123, 125, 127], "exemplari": 0, "consequenti": 0, "damag": 0, "procur": 0, "substitut": [0, 6, 7, 8, 10, 27, 33, 35, 43, 50, 58, 59, 62, 63, 64, 65, 66, 72, 79, 86, 87, 110, 114, 117, 120, 121, 127], "good": [0, 2, 4, 5, 6, 8, 27, 37, 50, 52, 56, 58, 62, 78], "servic": 0, "loss": [0, 6, 84], "data": [0, 5, 10, 17, 27, 29, 50, 51, 53, 54, 55, 58, 71, 72, 74, 76, 78, 121], "profit": 0, "busi": 0, "interrupt": 0, "howev": [0, 2, 5, 6, 7, 8, 10, 17, 22, 25, 27, 28, 30, 31, 33, 45, 50, 52, 55, 56, 58, 62, 63, 64, 73, 78, 113, 115, 128, 133], "caus": [0, 5, 27, 31, 62, 63, 65, 76, 120, 121], "ON": 0, "theori": [0, 3, 16, 17, 18, 24, 27, 30, 33, 42, 55, 57, 59, 76, 103, 115, 123, 128], "liabil": 0, "whether": [0, 10, 17, 27, 33, 37, 39, 43, 45, 50, 51, 52, 56, 57, 59, 62, 66, 68, 74, 78, 82, 85, 115, 117], "contract": [0, 28, 56, 69, 70, 71, 72, 110, 117, 121], "strict": [0, 5, 10, 17, 27, 30, 73, 121, 124, 133], "tort": 0, "neglig": 0, "aris": [0, 6, 30], "wai": [0, 6, 8, 12, 16, 17, 18, 19, 22, 27, 28, 29, 30, 40, 50, 52, 55, 56, 58, 59, 62, 63, 71, 74, 76, 78, 79, 114, 117, 119, 124, 125, 128, 129, 131, 133], "out": [0, 6, 8, 10, 17, 18, 27, 28, 30, 33, 43, 47, 50, 52, 55, 56, 58, 62, 74, 87, 93, 116, 119, 121], "even": [0, 2, 5, 6, 8, 10, 15, 17, 18, 27, 29, 30, 33, 37, 40, 43, 45, 50, 52, 56, 58, 59, 62, 73, 78, 115, 117, 125, 126, 129, 131], "IF": 0, "advis": 0, "possibl": [0, 2, 6, 10, 12, 16, 17, 18, 20, 21, 22, 27, 28, 29, 30, 31, 33, 35, 37, 39, 41, 43, 46, 50, 51, 52, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 67, 68, 72, 74, 76, 78, 79, 88, 114, 115, 120, 124, 130], "SUCH": 0, "when": [1, 2, 5, 8, 10, 12, 17, 18, 19, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 50, 51, 52, 53, 54, 55, 56, 58, 59, 62, 63, 65, 70, 71, 72, 73, 74, 78, 79, 82, 84, 85, 86, 87, 88, 94, 100, 112, 114, 116, 117, 120, 121, 124, 125, 126, 128, 129, 131, 132, 133, 134], "call": [1, 5, 6, 8, 10, 12, 13, 16, 17, 18, 24, 27, 30, 33, 35, 39, 40, 43, 44, 46, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 62, 70, 72, 73, 74, 76, 78, 79, 85, 87, 88, 113, 115, 116, 117, 118, 124, 125, 126, 128, 129, 130, 131, 133, 134], "program": [1, 2, 12, 18, 74, 76, 86, 115, 118, 121, 127], "shell": [1, 95], "just": [1, 2, 7, 8, 17, 24, 27, 28, 29, 33, 42, 43, 44, 45, 52, 56, 62, 72, 74, 84, 88, 91, 96, 114, 116, 117, 118, 120, 121, 125, 128, 130, 133], "normal": [1, 5, 10, 17, 23, 25, 27, 29, 35, 45, 48, 50, 52, 53, 56, 59, 62, 67, 113, 114, 116, 118, 133], "ipython": [1, 44, 94, 109, 114, 115, 116, 132], "you": [1, 2, 3, 4, 5, 6, 10, 18, 25, 27, 28, 31, 33, 37, 40, 42, 43, 45, 47, 48, 50, 52, 54, 55, 56, 57, 58, 59, 62, 63, 67, 70, 71, 72, 73, 74, 78, 79, 82, 113, 114, 115, 118, 119, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], "have": [1, 2, 4, 5, 6, 8, 10, 12, 17, 18, 19, 22, 24, 25, 27, 28, 29, 30, 31, 33, 35, 39, 40, 42, 43, 50, 52, 54, 55, 56, 58, 59, 62, 65, 68, 70, 72, 73, 74, 76, 78, 83, 84, 88, 96, 107, 111, 113, 114, 115, 116, 117, 119, 121, 127, 128, 129, 130, 131, 132, 133], "packag": [1, 4, 84, 101, 115, 118, 119, 120, 121], "instal": [1, 2, 3, 73, 79, 92, 101, 112, 116, 119], "add": [1, 2, 5, 8, 10, 16, 22, 39, 41, 42, 44, 47, 50, 51, 52, 54, 55, 56, 58, 59, 62, 63, 67, 70, 71, 72, 75, 79, 84, 85, 86, 87, 105, 107, 110, 113, 114, 117, 119, 120, 121, 126, 129], "default": [1, 5, 10, 11, 12, 17, 27, 28, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 76, 78, 79, 84, 85, 88, 94, 102, 105, 107, 113, 115, 117, 119, 121, 124, 128, 131, 132, 133], "import": [1, 3, 4, 5, 6, 17, 18, 22, 24, 25, 27, 28, 30, 33, 34, 40, 41, 43, 44, 45, 48, 50, 52, 53, 54, 55, 56, 58, 59, 62, 63, 64, 67, 68, 73, 74, 78, 79, 84, 90, 94, 98, 100, 113, 115, 116, 119, 121, 128, 130, 133, 134], "run": [1, 2, 3, 6, 8, 17, 18, 20, 27, 31, 44, 53, 58, 62, 63, 73, 75, 76, 78, 87, 120, 121, 126], "some": [1, 2, 4, 5, 6, 8, 10, 11, 15, 17, 18, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 43, 45, 50, 52, 53, 54, 55, 56, 58, 59, 62, 63, 67, 73, 74, 76, 77, 78, 79, 85, 91, 99, 107, 112, 114, 115, 117, 118, 120, 121, 124, 126, 131, 133], "initi": [1, 6, 8, 17, 21, 27, 28, 30, 33, 44, 53, 58, 62, 64, 74, 80, 81, 85, 86, 88, 115, 117, 120], "h": [1, 3, 6, 10, 12, 17, 22, 25, 27, 30, 33, 50, 53, 55, 57, 58, 62, 67, 68, 74, 85, 123, 134], "wrap": [1, 16, 27, 31, 44, 56, 71, 73, 115, 119, 120, 121, 126], "divis": [1, 10, 27, 29, 44, 50, 52, 55, 56, 62, 86, 87, 98, 100, 108, 113, 117, 121, 126, 127, 129], "help": [1, 6, 8, 27, 33, 43, 52, 56, 59, 62, 63, 67, 73, 74, 84, 85, 86, 133], "show": [1, 5, 6, 7, 8, 10, 18, 25, 27, 31, 32, 50, 52, 54, 55, 58, 59, 62, 65, 66, 68, 73, 74, 78, 113, 114, 115, 128, 130, 131, 132], "messag": [1, 2], "exit": [1, 52], "don": [1, 2, 6, 8, 27, 31, 38, 43, 45, 50, 52, 53, 55, 56, 58, 65, 73, 75, 78, 84, 85, 87, 88, 93, 121], "t": [1, 2, 3, 6, 8, 10, 12, 17, 18, 20, 22, 24, 25, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 43, 45, 46, 47, 50, 51, 52, 53, 55, 56, 57, 58, 59, 62, 63, 65, 66, 67, 68, 72, 73, 75, 78, 79, 81, 84, 85, 86, 87, 88, 93, 98, 113, 119, 120, 121, 123, 124, 128, 130, 131, 133, 134], "integ": [1, 3, 8, 10, 16, 17, 18, 19, 20, 22, 25, 29, 30, 32, 33, 35, 42, 43, 45, 50, 52, 53, 54, 55, 56, 57, 58, 59, 62, 67, 70, 71, 72, 74, 76, 78, 84, 85, 86, 87, 94, 113, 114, 115, 116, 119, 120, 121, 123, 124, 126, 129, 130, 131, 132, 134], "fraction": [1, 5, 10, 27, 29, 40, 42, 43, 44, 50, 52, 56, 59, 85, 86, 87, 98, 113, 116, 119, 120, 126, 133], "auto": [1, 10, 27, 54, 55, 56, 58, 62, 87, 121], "automat": [1, 5, 6, 8, 11, 18, 27, 28, 29, 30, 31, 32, 33, 39, 42, 44, 45, 52, 53, 55, 56, 58, 59, 62, 65, 71, 72, 73, 74, 84, 85, 92, 110, 113, 115, 116, 117, 119, 120, 126, 128, 132, 134], "creat": [1, 5, 6, 8, 10, 16, 18, 27, 28, 29, 31, 33, 35, 37, 38, 39, 40, 46, 47, 48, 49, 51, 53, 55, 56, 58, 62, 67, 68, 71, 72, 73, 74, 76, 79, 84, 85, 86, 87, 88, 108, 113, 114, 115, 118, 120, 124, 125, 126, 129, 130, 134], "miss": [1, 41, 44, 56, 74, 86, 88, 120, 121, 133], "If": [2, 3, 4, 5, 6, 7, 8, 10, 11, 16, 17, 18, 22, 24, 25, 27, 28, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 50, 51, 52, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 78, 79, 82, 113, 114, 116, 118, 119, 120, 124, 125, 127, 130, 131, 132, 134], "tutori": [2, 3, 4, 56, 60, 62, 88, 128, 134], "willing": 2, "assum": [2, 3, 6, 8, 10, 11, 12, 16, 17, 27, 33, 35, 41, 43, 50, 52, 56, 58, 59, 62, 63, 65, 70, 71, 72, 74, 88, 116, 117, 124, 127, 128, 134], "know": [2, 5, 6, 8, 27, 37, 38, 41, 43, 50, 52, 54, 55, 56, 58, 62, 67, 78, 88, 125, 127], "languag": [2, 31, 44, 56, 67, 73, 74, 119, 126, 127], "control": [2, 5, 6, 27, 55, 59, 78, 85, 117, 119], "system": [2, 4, 6, 10, 17, 27, 28, 29, 31, 44, 45, 50, 55, 56, 58, 60, 61, 64, 67, 73, 84, 85, 86, 88, 101, 106, 107, 111, 115, 116, 118, 119, 120, 121, 123, 124, 126, 128, 134], "adher": [2, 6, 113], "No": [2, 27, 33, 39, 45, 52, 54, 55, 58, 59, 65, 71, 76, 84, 120, 121, 124], "conduct": [2, 120], "judg": 2, "technic": [2, 27, 62, 74, 123, 129], "merit": 2, "open": [2, 4, 43, 56, 57, 119], "pleas": [2, 4, 6, 7, 10, 27, 37, 52, 57, 58, 59, 121, 123, 127, 132], "take": [2, 5, 8, 10, 13, 17, 21, 25, 27, 28, 31, 32, 33, 35, 37, 38, 39, 43, 50, 52, 54, 55, 56, 57, 58, 59, 62, 67, 71, 73, 78, 79, 84, 85, 88, 114, 117, 121, 125, 128, 129, 130, 132, 133], "step": [2, 6, 7, 8, 10, 21, 22, 25, 33, 43, 50, 52, 54, 58, 59, 62, 64, 73, 78], "search": [2, 8, 10, 17, 18, 22, 24, 27, 31, 52, 58, 63, 115], "github": [2, 4, 85], "avoid": [2, 27, 31, 33, 43, 45, 50, 53, 56, 62, 70, 72, 74, 112, 117, 128], "duplic": [2, 17, 20, 33, 52, 62, 78, 88, 120], "try": [2, 5, 6, 8, 10, 11, 25, 27, 28, 33, 35, 39, 43, 46, 48, 52, 56, 57, 58, 59, 62, 65, 66, 87, 88, 107, 112, 120, 121, 126, 132], "updat": [2, 4, 10, 27, 56, 91, 103, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121], "master": [2, 78], "your": [2, 4, 27, 43, 50, 56, 58, 62, 82, 128], "minim": [2, 10, 11, 17, 18, 22, 25, 29, 43, 50, 52, 55, 58, 59, 65, 66, 84, 113, 119, 120, 121], "exampl": [2, 3, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 78, 79, 80, 82, 87, 98, 101, 109, 112, 113, 114, 115, 116, 117, 119, 120, 125, 126, 128, 129, 130, 133], "demonstr": [2, 17, 27, 43, 52], "problem": [2, 8, 10, 12, 20, 22, 37, 52, 58, 59, 65, 76, 78, 85, 87, 88, 100, 115, 116, 120, 121, 123, 124], "relev": [2, 8, 62, 63], "detail": [2, 3, 6, 7, 9, 17, 27, 28, 30, 33, 43, 52, 54, 59, 62, 63, 71, 72, 77, 99, 111], "local": [2, 6, 27, 53, 84, 101, 120], "setup": [2, 8, 10, 26, 27, 28, 55, 73, 92, 113], "chang": [2, 5, 6, 8, 9, 10, 17, 18, 22, 25, 27, 31, 43, 50, 52, 54, 56, 58, 62, 67, 68, 79, 83, 93, 96, 123, 124, 125], "want": [2, 4, 6, 8, 12, 27, 32, 37, 40, 43, 50, 52, 54, 55, 56, 57, 58, 59, 62, 63, 67, 72, 74, 76, 78, 79, 113, 114, 124, 125, 128, 130, 131, 132, 133], "fix": [2, 8, 10, 17, 19, 22, 24, 33, 37, 54, 56, 64, 67, 72, 78, 83, 91, 92, 93, 94, 95, 97, 99, 100, 101, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121], "typo": [2, 8, 85, 121], "so": [2, 4, 5, 6, 8, 10, 11, 12, 15, 16, 17, 18, 20, 22, 24, 27, 31, 32, 33, 35, 37, 38, 39, 40, 43, 45, 47, 50, 51, 52, 53, 54, 55, 56, 58, 59, 62, 63, 64, 70, 71, 73, 76, 78, 79, 82, 95, 101, 113, 114, 115, 117, 118, 119, 126, 129, 132, 134], "expand": [2, 6, 8, 10, 28, 30, 31, 33, 43, 50, 55, 58, 62, 67, 70, 73, 88, 94, 106, 107, 110, 112, 113, 115, 117, 126, 128, 131, 133], "comment": [2, 4, 17, 56, 74, 78, 120], "work": [2, 4, 5, 6, 7, 8, 10, 19, 27, 29, 33, 42, 43, 45, 47, 50, 52, 53, 54, 55, 56, 58, 59, 62, 65, 67, 72, 73, 74, 76, 79, 83, 85, 87, 91, 93, 99, 102, 107, 108, 109, 113, 114, 115, 117, 120, 121, 128, 131, 133], "should": [2, 5, 6, 7, 8, 17, 19, 20, 22, 25, 27, 33, 37, 38, 39, 41, 43, 45, 50, 52, 53, 54, 55, 56, 58, 59, 62, 65, 67, 70, 71, 73, 74, 76, 78, 79, 83, 84, 85, 86, 87, 88, 91, 113, 114, 115, 117, 119, 120, 121, 125, 126, 133], "submit": 2, "via": [2, 6, 10, 17, 27, 30, 33, 43, 45, 52, 55, 71, 74, 85, 98, 114, 115, 119, 121, 131], "pull": [2, 27, 30, 33, 58, 62, 84, 85, 86, 87, 88, 120, 121], "request": [2, 4, 27, 40, 52, 70, 73, 84, 85, 86, 87, 88, 120, 121], "pr": [2, 10, 25, 50, 55, 87, 110, 123], "can": [2, 4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 17, 18, 19, 21, 22, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 78, 79, 84, 85, 86, 87, 91, 94, 96, 98, 105, 106, 107, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134], "soon": [2, 25, 27], "worth": 2, "discuss": [2, 17, 33, 52, 72, 76, 124], "make": [2, 4, 5, 8, 17, 25, 27, 28, 30, 31, 37, 43, 45, 50, 52, 53, 54, 55, 56, 58, 62, 63, 65, 66, 70, 73, 74, 78, 84, 85, 97, 99, 106, 110, 114, 115, 116, 119, 120, 121, 124, 128, 130, 133], "draft": 2, "intend": [2, 6, 27, 36, 53, 59, 62, 63, 64, 124], "merg": [2, 17, 18, 56, 57, 94, 107, 115], "present": [2, 10, 12, 17, 18, 20, 24, 27, 28, 50, 52, 54, 56, 59, 74, 79, 82, 118, 128], "shape": [2, 8, 40, 47, 50, 51, 54, 56, 67, 68, 70, 71, 72, 118, 130], "check": [2, 6, 8, 10, 16, 17, 18, 19, 23, 24, 25, 27, 29, 30, 33, 37, 38, 39, 43, 45, 50, 51, 52, 54, 55, 57, 58, 62, 63, 65, 66, 70, 71, 72, 74, 84, 87, 116, 119, 124], "pass": [2, 5, 11, 17, 18, 27, 31, 33, 35, 38, 39, 40, 43, 50, 53, 54, 56, 57, 58, 59, 62, 63, 68, 70, 71, 73, 74, 75, 78, 79, 108, 110, 115, 125, 132, 133, 134], "put": [2, 8, 22, 23, 27, 28, 31, 50, 55, 56, 58, 62, 72, 73, 78, 130, 133], "branch": [2, 8, 9, 30, 31, 33, 78, 82, 120, 133], "gener": [2, 4, 5, 6, 8, 10, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 35, 40, 42, 43, 45, 46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 76, 77, 78, 79, 84, 86, 87, 94, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 128, 129, 130, 131, 133], "made": [2, 20, 22, 27, 28, 34, 38, 40, 41, 43, 50, 52, 53, 55, 58, 62, 67, 74, 83, 90, 94, 96, 102, 105, 107, 113, 114, 115], "against": [2, 27, 50, 90, 120], "One": [2, 6, 7, 18, 30, 31, 39, 43, 50, 52, 55, 58, 68, 72, 115, 124, 126, 130], "logic": [2, 3, 27, 28, 42, 52, 57, 62, 85, 110, 113, 114, 115, 116, 117, 120, 121, 124, 128], "per": [2, 54, 55, 84], "short": [2, 18, 22, 31, 52, 132], "78": [2, 17, 52], "charact": [2, 6, 27, 53, 56, 62, 72, 74, 114, 120, 128, 132], "line": [2, 3, 6, 8, 17, 18, 22, 27, 28, 35, 37, 39, 40, 41, 43, 44, 50, 51, 52, 54, 56, 58, 62, 67, 73, 74, 81, 87, 91, 113, 115, 118], "summari": 2, "newlin": [2, 50, 81], "verbos": [2, 27, 52, 73, 112], "descript": [2, 27, 33, 43, 52, 54, 56, 70, 74, 76], "mention": [2, 6, 8, 17, 59, 62, 67], "close": [2, 5, 6, 25, 30, 33, 40, 43, 57, 74, 113, 114, 115, 123], "conform": [2, 27, 70, 71, 97, 100], "pep": [2, 45], "8": [2, 3, 5, 6, 8, 10, 12, 17, 18, 19, 22, 24, 27, 29, 30, 31, 33, 35, 38, 40, 43, 45, 46, 48, 50, 51, 52, 53, 55, 56, 58, 59, 62, 63, 64, 67, 68, 71, 72, 74, 76, 78, 83, 87, 98, 122, 123, 124, 125, 128, 130, 131, 133], "257": [2, 52], "flake518": [2, 88], "format": [2, 8, 52, 55, 56, 62, 83, 85, 115, 121, 132], "test": [2, 4, 8, 10, 11, 14, 17, 18, 27, 29, 35, 39, 42, 47, 50, 51, 52, 57, 59, 62, 63, 65, 66, 73, 74, 75, 76, 77, 84, 85, 86, 87, 88, 92, 106, 108, 109, 110, 111, 112, 113, 115, 120, 121, 126], "bugfix": [2, 108, 109, 112, 121], "regress": [2, 87, 88, 120], "test_issue_123": 2, "test_sympyissue_123": 2, "function": [2, 3, 5, 7, 9, 10, 11, 17, 18, 21, 22, 24, 28, 29, 30, 34, 35, 36, 37, 41, 42, 43, 44, 46, 47, 49, 51, 52, 57, 60, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 78, 79, 84, 85, 86, 87, 88, 89, 93, 94, 96, 98, 99, 103, 104, 106, 107, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 127, 128, 130, 131, 132, 134], "everi": [2, 8, 10, 15, 17, 18, 27, 39, 42, 50, 51, 52, 54, 56, 57, 58, 59, 62, 78, 127, 129, 130], "cover": [2, 9, 52, 72, 74, 115, 125, 134], "onli": [2, 5, 6, 8, 9, 10, 11, 16, 17, 18, 19, 20, 22, 24, 25, 27, 28, 30, 31, 33, 35, 36, 38, 40, 41, 43, 45, 47, 50, 51, 52, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 78, 84, 85, 94, 101, 113, 114, 115, 116, 118, 119, 121, 124, 125, 131, 133, 134], "public": [2, 10, 27, 55, 59, 84, 117, 123], "interfac": [2, 10, 27, 42, 55, 57, 73, 74, 85, 91, 103, 115, 117, 119, 120, 129], "account": [2, 58, 62, 114], "coverag": [2, 84, 85, 86, 87, 110, 120, 121], "statist": [2, 12, 33, 67, 84, 87, 115, 128], "option": [2, 4, 5, 10, 11, 17, 24, 25, 27, 31, 34, 35, 38, 39, 40, 43, 50, 52, 53, 54, 55, 56, 58, 59, 62, 63, 64, 65, 66, 67, 71, 73, 74, 78, 84, 85, 105, 106, 108, 113, 114, 115, 116, 117, 118, 119, 121, 127, 132, 133], "doctest": [2, 19, 50, 52, 62, 75, 84, 107, 109, 110, 111, 112, 120], "illustr": 2, "usag": [2, 3, 8, 10, 28, 31, 42, 50, 56, 62, 63, 68, 76, 80, 88, 115, 119], "But": [2, 8, 10, 27, 33, 50, 51, 52, 58, 59, 71, 76, 78, 119, 124, 126, 128, 129, 131, 133], "keep": [2, 5, 6, 7, 8, 22, 27, 28, 30, 33, 50, 55, 62, 85, 125], "mind": [2, 7, 27, 50], "think": [2, 4, 17, 27, 76, 126], "them": [2, 5, 6, 8, 10, 16, 17, 18, 25, 27, 28, 29, 30, 33, 36, 40, 45, 50, 52, 55, 56, 58, 59, 62, 65, 68, 72, 74, 76, 78, 118, 120, 124, 125, 126, 133], "happen": [2, 5, 27, 37, 55, 58, 87, 115, 126], "It": [2, 5, 6, 7, 8, 10, 15, 17, 18, 20, 21, 22, 23, 25, 27, 28, 30, 31, 32, 33, 35, 37, 40, 41, 43, 45, 50, 52, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 78, 79, 114, 115, 117, 118, 119, 124, 125, 126, 127, 130, 131, 133], "idea": [2, 6, 13, 17, 24, 27, 37, 43, 52, 58, 59, 62, 73, 74, 84, 133], "sure": [2, 4, 17, 27, 37, 42, 50, 62, 73, 84, 133], "exist": [2, 5, 7, 8, 10, 12, 17, 27, 35, 37, 41, 43, 50, 52, 54, 56, 57, 59, 62, 72, 87, 114, 115, 116, 117, 119, 130], "break": [2, 27, 52, 56, 78], "anyth": [2, 27, 50, 56, 58, 62, 78, 82, 126], "pytest": [2, 4, 120, 121], "To": [2, 4, 5, 6, 8, 10, 17, 22, 25, 27, 28, 30, 31, 33, 43, 45, 47, 50, 54, 55, 59, 62, 63, 68, 70, 71, 72, 73, 76, 78, 79, 82, 115, 116, 119, 124, 125, 126, 128, 130, 132, 133, 134], "also": [2, 4, 5, 6, 7, 8, 10, 11, 16, 17, 18, 25, 27, 28, 29, 30, 31, 32, 33, 37, 39, 40, 43, 45, 48, 50, 52, 54, 55, 56, 57, 58, 59, 62, 63, 64, 67, 68, 70, 71, 72, 73, 74, 76, 78, 79, 84, 85, 86, 87, 88, 94, 100, 110, 111, 113, 114, 115, 116, 117, 119, 120, 121, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134], "modul": [2, 3, 4, 8, 9, 11, 27, 30, 31, 33, 37, 41, 42, 43, 44, 45, 47, 48, 49, 50, 54, 55, 56, 60, 64, 65, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 89, 95, 97, 98, 100, 105, 108, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 124, 126, 128], "potenti": [2, 8, 37, 47, 50, 52, 62, 76, 117], "flaw": 2, "pylint": [2, 84], "do": [2, 6, 8, 10, 18, 22, 27, 28, 33, 37, 39, 40, 43, 45, 48, 50, 52, 55, 56, 57, 58, 59, 62, 63, 65, 66, 71, 72, 78, 83, 84, 86, 87, 113, 115, 117, 119, 120, 124, 125, 127, 128, 131, 133], "type": [2, 5, 8, 17, 22, 25, 27, 28, 29, 31, 32, 35, 36, 37, 38, 42, 43, 45, 47, 50, 52, 53, 54, 56, 58, 59, 62, 70, 71, 72, 73, 74, 78, 79, 84, 86, 87, 113, 114, 115, 117, 118, 120, 121, 126, 128, 133], "mypi": [2, 86], "affect": [2, 25, 27, 50, 115], "build": [2, 27, 28, 45, 55, 67, 78, 115, 120], "sphinx": [2, 31, 62, 85, 110, 114], "w": [2, 6, 7, 8, 10, 12, 27, 28, 31, 33, 43, 50, 55, 57, 58, 59, 62, 63, 78, 79, 81, 84, 85, 117, 120, 123], "html": [2, 12, 19, 20, 27, 30, 31, 33, 41, 52, 56, 57, 59, 62, 67, 73, 78], "doc": [2, 4, 59, 62, 73, 95, 105, 110, 114, 115, 121], "look": [2, 5, 8, 17, 27, 33, 42, 50, 52, 56, 58, 59, 63, 76, 78, 107, 111, 129, 133], "expect": [2, 7, 10, 13, 27, 31, 33, 37, 45, 50, 52, 58, 67, 73, 76, 78, 82, 112, 114, 120, 128, 129, 133], "could": [2, 6, 7, 8, 10, 19, 27, 37, 43, 44, 50, 56, 58, 65, 66, 67, 68, 70, 71, 84, 115, 117, 121, 126, 129], "handi": [2, 25, 27, 50, 56], "collect": [2, 8, 27, 29, 41, 43, 52, 55, 62, 67, 78, 114, 115, 117, 121, 126, 133], "here": [2, 5, 6, 8, 10, 12, 16, 17, 24, 25, 27, 29, 30, 32, 33, 41, 43, 44, 45, 46, 50, 52, 55, 56, 58, 59, 62, 64, 67, 70, 71, 73, 74, 76, 78, 83, 113, 114, 115, 119, 122, 124, 126, 127, 128, 129, 131, 134], "fact": [2, 6, 8, 10, 27, 30, 33, 52, 58, 62, 72, 116, 120, 127], "about": [2, 3, 5, 17, 18, 19, 20, 27, 31, 34, 35, 36, 37, 39, 40, 43, 50, 52, 56, 58, 59, 62, 70, 71, 73, 74, 75, 76, 83, 112, 116, 120, 124, 129, 130, 133], "explain": [2, 7, 22, 27, 33, 84], "histor": [2, 123], "convent": [2, 17, 22, 25, 27, 30, 35, 54, 56, 62, 63, 67, 72, 85, 116], "first": [2, 4, 6, 7, 8, 10, 11, 17, 18, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 35, 38, 39, 40, 41, 43, 46, 48, 50, 52, 54, 55, 56, 57, 58, 59, 62, 63, 67, 70, 74, 78, 79, 84, 85, 94, 101, 116, 120, 121, 124, 128, 129, 130, 134], "host": 2, "svn": 2, "repositori": [2, 4], "googl": [2, 54, 116], "our": [2, 6, 7, 8, 50, 59, 109, 114, 129], "ad": [2, 8, 10, 12, 27, 36, 39, 52, 53, 54, 56, 59, 62, 67, 72, 84, 85, 86, 87, 91, 92, 94, 95, 98, 103, 108, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121], "move": [2, 17, 18, 27, 40, 58, 89, 91, 105, 113, 115, 118, 119, 121], "u": [2, 6, 8, 10, 17, 22, 25, 27, 43, 46, 50, 51, 52, 54, 56, 57, 58, 59, 62, 63, 64, 67, 71, 88, 113, 114, 123, 126, 128, 129, 130], "we": [2, 5, 6, 7, 8, 10, 11, 12, 16, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 31, 32, 33, 38, 39, 43, 50, 52, 55, 56, 57, 58, 59, 62, 63, 64, 65, 67, 70, 72, 73, 74, 76, 79, 82, 94, 96, 107, 114, 119, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134], "old": [2, 27, 28, 58, 62, 79, 99, 110, 113, 114, 115, 119, 120, 121, 122], "see": [2, 6, 8, 10, 11, 15, 17, 18, 19, 22, 25, 27, 28, 30, 31, 32, 33, 37, 38, 40, 43, 45, 50, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 71, 72, 73, 74, 76, 78, 80, 84, 85, 86, 87, 88, 95, 99, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 126, 128, 129, 130, 131, 133], "part": [2, 6, 8, 9, 10, 17, 18, 25, 27, 30, 31, 33, 43, 45, 47, 52, 55, 56, 58, 59, 62, 64, 74, 76, 78, 85, 87, 110, 113, 115, 116, 117, 120], "clone": [2, 4, 10], "repo": 2, "simpli": [2, 8, 25, 27, 31, 35, 38, 39, 47, 52, 62, 72, 78, 79, 117], "fetch": 2, "origin": [2, 6, 8, 10, 17, 18, 19, 22, 25, 27, 30, 31, 33, 34, 36, 39, 43, 44, 46, 51, 52, 55, 56, 58, 59, 62, 63, 64, 78, 79, 87, 124], "ref": [2, 31, 67], "replac": [2, 5, 8, 10, 17, 25, 27, 30, 43, 45, 46, 50, 52, 55, 58, 62, 65, 72, 79, 85, 95, 113, 115, 119, 120, 121, 124], "note": [2, 3, 5, 6, 7, 8, 10, 11, 17, 18, 19, 22, 24, 25, 27, 29, 30, 31, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 50, 51, 52, 55, 56, 57, 58, 59, 62, 63, 64, 65, 67, 71, 72, 73, 76, 78, 113, 114, 119, 122, 123, 128, 130, 131, 133], "dozen": [2, 133], "refer": [2, 3, 4, 6, 8, 10, 11, 12, 15, 16, 17, 18, 19, 20, 24, 27, 29, 30, 31, 33, 35, 37, 39, 40, 41, 49, 52, 55, 56, 57, 58, 60, 62, 63, 64, 65, 67, 72, 76, 77, 78], "codebas": [2, 87, 117, 120, 121], "Such": [2, 7, 8, 27, 40, 58, 124, 125], "either": [2, 6, 8, 10, 12, 18, 25, 27, 29, 30, 31, 33, 39, 43, 45, 50, 52, 56, 57, 59, 62, 63, 64, 70, 71, 73, 79, 126, 129, 130], "url": [2, 123], "fulli": [2, 10, 17, 27, 41, 67, 72, 117, 121], "qualifi": [2, 10], "like": [2, 4, 5, 8, 10, 13, 18, 27, 30, 31, 33, 35, 40, 43, 45, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 67, 68, 70, 72, 73, 74, 78, 81, 85, 88, 99, 107, 108, 113, 114, 115, 116, 117, 119, 120, 121, 124, 125, 126, 128, 129, 130, 133, 134], "123": [2, 27, 30, 35], "unqualifi": 2, "befor": [2, 10, 20, 22, 27, 33, 50, 52, 53, 55, 56, 57, 58, 59, 62, 65, 66, 75, 78, 119, 126, 127, 133], "whole": [2, 8, 27, 28, 33, 38, 54, 55, 57, 62, 87], "stori": 2, "littl": [2, 8, 18, 35, 50, 52, 56, 58, 67, 76, 123], "wors": [2, 45], "becaus": [2, 5, 6, 8, 10, 18, 27, 31, 33, 35, 37, 38, 41, 42, 43, 48, 50, 52, 55, 58, 59, 62, 63, 72, 73, 78, 113, 114, 120, 121, 125, 128, 130], "6f68fa1": 2, "clearli": [2, 3, 8, 25, 72], "were": [2, 3, 6, 18, 20, 25, 27, 38, 41, 46, 50, 51, 52, 53, 55, 58, 64, 78, 79, 84, 85, 86, 87, 88, 91, 94, 99, 104, 105, 107, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 128, 134], "march": 2, "2014": [2, 118, 119, 123], "7235": 2, "transfer": 2, "number": [2, 3, 8, 9, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 28, 29, 30, 31, 33, 35, 39, 40, 42, 43, 45, 46, 50, 51, 53, 54, 56, 57, 58, 59, 62, 64, 65, 67, 68, 71, 72, 74, 76, 78, 82, 84, 85, 88, 94, 103, 110, 113, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 127, 128, 129, 130, 131, 133], "shift": [2, 8, 13, 17, 18, 20, 29, 33, 36, 39, 41, 45, 55, 67, 117, 119], "3099": 2, "e": [2, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 43, 44, 45, 50, 51, 52, 53, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 78, 79, 80, 84, 85, 86, 88, 96, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 128, 130, 132, 133], "doe": [2, 5, 6, 7, 8, 10, 17, 18, 22, 25, 27, 28, 31, 33, 35, 40, 43, 45, 50, 52, 53, 54, 55, 56, 57, 58, 59, 62, 67, 71, 72, 74, 76, 78, 82, 84, 85, 87, 88, 116, 119, 120, 121, 125, 126], "mean": [2, 6, 8, 10, 18, 27, 28, 43, 45, 48, 50, 52, 56, 58, 59, 62, 65, 67, 68, 70, 72, 114, 117, 126, 128, 130], "3222": 2, "standard": [2, 6, 27, 31, 33, 43, 45, 48, 50, 52, 53, 56, 58, 59, 62, 67, 79, 110, 113, 115, 116, 120, 124, 126, 133], "semant": [2, 88], "scheme": [2, 5, 18, 25, 55, 84], "adopt": [2, 17, 25, 72, 120], "440": 2, "alpha": [2, 10, 17, 29, 33, 43, 55, 56, 58, 62, 67], "an": [2, 4, 5, 6, 7, 10, 11, 12, 13, 16, 17, 18, 19, 20, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 78, 79, 81, 84, 85, 86, 87, 94, 112, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134], "suffix": [2, 27, 74], "beta": [2, 17, 32, 43, 56, 62, 67, 116], "bn": 2, "devn": 2, "tag": [2, 56], "latest": [2, 4, 121], "publish": 2, "vx": 2, "y": [2, 3, 5, 6, 7, 10, 11, 17, 18, 25, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 73, 74, 78, 79, 84, 85, 94, 106, 107, 110, 113, 114, 116, 117, 118, 119, 120, 121, 123, 124, 125, 128, 129, 130, 131, 133, 134], "z": [2, 3, 6, 8, 10, 11, 17, 18, 25, 27, 29, 30, 31, 33, 37, 40, 43, 45, 47, 50, 52, 53, 54, 55, 58, 59, 62, 63, 65, 67, 68, 71, 73, 74, 78, 79, 82, 85, 88, 106, 107, 108, 113, 114, 117, 121, 123, 125, 128, 131, 133, 134], "push": [2, 6], "statement": [3, 4, 6, 27, 33, 45, 47, 56, 74, 78, 98, 113, 114, 119, 128, 134], "execut": [3, 4, 5, 56, 62, 74, 128, 134], "begin": [3, 6, 8, 27, 31, 33, 50, 52, 56, 59, 62, 63, 67, 81, 115, 126, 128], "interact": [3, 4, 27, 42, 43, 48, 54, 58, 94, 95, 107, 114, 115, 116, 132, 133], "session": [3, 27, 37, 43, 44, 132], "d": [3, 6, 8, 10, 12, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 43, 45, 50, 51, 52, 55, 58, 59, 62, 63, 64, 67, 68, 70, 72, 82, 114, 123, 128, 130, 134], "x": [3, 4, 5, 6, 7, 8, 10, 11, 16, 17, 18, 22, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 68, 70, 71, 73, 74, 75, 78, 79, 82, 84, 85, 86, 87, 88, 93, 94, 95, 98, 99, 106, 107, 108, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134], "k": [3, 5, 6, 8, 10, 12, 17, 20, 21, 24, 25, 27, 29, 30, 31, 33, 43, 46, 50, 51, 52, 55, 58, 59, 62, 64, 67, 68, 71, 72, 76, 78, 84, 85, 92, 114, 117, 120, 121, 123, 134], "m": [3, 4, 6, 8, 10, 15, 16, 17, 18, 22, 25, 27, 28, 30, 33, 35, 37, 41, 43, 46, 47, 48, 50, 51, 52, 55, 56, 58, 59, 62, 64, 65, 67, 68, 71, 72, 73, 74, 76, 78, 87, 114, 117, 118, 119, 120, 121, 123, 130, 134], "n": [3, 5, 6, 8, 10, 12, 15, 16, 17, 18, 20, 22, 24, 25, 28, 29, 30, 31, 33, 39, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 54, 55, 56, 58, 59, 62, 64, 67, 69, 71, 72, 73, 78, 84, 85, 87, 88, 114, 115, 116, 117, 118, 119, 120, 121, 123, 130, 131, 132, 133, 134], "true": [3, 5, 6, 8, 10, 11, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 82, 85, 88, 95, 98, 100, 108, 114, 115, 116, 117, 118, 119, 120, 121, 124, 126, 128, 130, 131, 133, 134], "f": [3, 5, 6, 7, 8, 10, 11, 17, 18, 22, 25, 27, 28, 29, 31, 32, 33, 35, 43, 46, 50, 51, 52, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 78, 79, 82, 86, 88, 104, 107, 114, 117, 123, 124, 128, 131, 134], "g": [3, 5, 7, 9, 10, 11, 13, 15, 17, 18, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 37, 40, 41, 43, 44, 50, 52, 53, 55, 56, 58, 59, 62, 63, 66, 68, 70, 71, 72, 74, 78, 79, 80, 82, 84, 85, 96, 113, 114, 115, 116, 117, 118, 119, 121, 123, 125, 131, 133, 134], "cl": [3, 17, 27, 32, 43, 50, 51, 62, 71, 75, 78, 116, 128, 134], "feedback": [3, 117], "introduct": [3, 18, 42, 56, 59, 62, 127, 132], "basic": [3, 5, 6, 7, 10, 15, 17, 21, 24, 25, 31, 40, 42, 43, 45, 48, 49, 56, 58, 62, 63, 64, 74, 78, 84, 87, 94, 95, 96, 113, 115, 116, 117, 118, 120, 121, 125, 127, 133], "gotcha": [3, 27, 127], "print": [3, 4, 5, 8, 10, 12, 16, 17, 18, 25, 27, 28, 33, 39, 42, 44, 45, 50, 52, 54, 58, 62, 72, 74, 78, 85, 86, 87, 88, 93, 95, 100, 102, 104, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 125, 127, 128], "simplif": [3, 9, 27, 28, 30, 31, 32, 42, 50, 53, 55, 62, 64, 65, 66, 85, 87, 106, 109, 111, 115, 116, 118, 119, 120, 124, 126, 127, 128], "calculu": [3, 7, 27, 30, 42, 43, 72, 88, 118, 119, 121, 127], "solver": [3, 33, 42, 50, 52, 55, 59, 62, 63, 64, 65, 66, 85, 87, 88, 95, 104, 106, 110, 113, 114, 116, 118, 120, 121, 127], "polynomi": [3, 5, 8, 9, 11, 17, 25, 27, 29, 30, 32, 42, 43, 50, 58, 60, 62, 64, 84, 85, 86, 87, 88, 95, 103, 105, 106, 109, 110, 111, 113, 115, 116, 118, 120, 121, 123, 127, 130, 133, 134], "matric": [3, 8, 42, 56, 58, 59, 65, 68, 72, 74, 84, 85, 105, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 127, 128], "tree": [3, 11, 17, 20, 27, 51, 55, 56, 58, 70, 76, 78, 84, 116, 117, 127], "command": [3, 5, 56, 73, 87, 105, 113, 114, 115], "config": [3, 42, 87], "core": [3, 17, 31, 32, 34, 41, 42, 46, 48, 49, 50, 52, 53, 55, 56, 58, 59, 62, 73, 78, 84, 85, 89, 94, 110, 113, 115, 119, 120, 121, 126, 129], "combinator": [3, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 30, 42, 52, 72, 76, 78, 115, 128, 133], "concret": [3, 18, 30, 31, 42, 43, 52, 97, 113], "geometri": [3, 27, 34, 35, 36, 38, 39, 40, 41, 42, 72, 86, 94, 97, 113, 115, 119, 121], "integr": [3, 8, 9, 10, 25, 27, 28, 30, 32, 35, 42, 46, 48, 50, 55, 56, 62, 63, 67, 74, 84, 85, 86, 87, 88, 91, 93, 94, 98, 103, 105, 107, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 127, 128, 132], "domain": [3, 6, 10, 25, 27, 33, 42, 43, 50, 52, 62, 67, 84, 85, 86, 87, 88, 113, 121, 130, 131], "plot": [3, 34, 35, 38, 40, 42, 87, 89, 91, 92, 93, 94, 98, 113, 114, 115, 119, 120, 121, 128], "set": [3, 4, 5, 6, 7, 8, 10, 11, 15, 16, 17, 18, 19, 23, 24, 27, 29, 30, 31, 33, 34, 38, 39, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 54, 55, 56, 58, 59, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 78, 79, 85, 98, 107, 111, 113, 114, 115, 118, 119, 120, 121, 123, 124, 133], "simplifi": [3, 8, 25, 27, 28, 30, 31, 33, 35, 37, 41, 42, 43, 45, 46, 48, 50, 51, 57, 59, 62, 63, 64, 65, 66, 67, 85, 86, 87, 88, 91, 94, 96, 99, 103, 106, 113, 114, 115, 116, 117, 119, 120, 121, 124, 128, 133], "stat": [3, 42, 84, 115, 116], "tensor": [3, 14, 28, 32, 42, 50, 56, 68, 70, 71, 73, 113, 115, 116, 117, 121], "util": [3, 5, 14, 16, 17, 26, 27, 30, 36, 37, 38, 40, 42, 49, 56, 58, 59, 60, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 113, 114, 115, 118, 119], "pars": [3, 18, 27, 42, 87, 119, 121], "differenti": [3, 8, 27, 30, 31, 33, 41, 42, 58, 62, 63, 64, 65, 66, 85, 87, 88, 104, 110, 114, 115, 116, 120, 121, 123, 125, 127, 128], "intern": [3, 5, 17, 27, 30, 40, 41, 42, 56, 58, 60, 62, 63, 67, 70, 72, 74, 76, 78, 85, 104, 113, 114, 117, 120, 123, 129, 132], "manipul": [3, 6, 9, 17, 27, 42, 45, 49, 52, 56, 58, 69, 78, 87, 113, 124, 125, 128], "gruntz": [3, 9, 11, 27, 88, 113, 116, 118, 120, 123], "algorithm": [3, 5, 6, 9, 11, 12, 13, 17, 18, 20, 22, 24, 25, 27, 30, 37, 41, 42, 43, 45, 50, 51, 52, 54, 58, 59, 62, 64, 65, 72, 76, 84, 85, 86, 87, 88, 95, 99, 106, 110, 113, 114, 115, 116, 118, 119, 120, 123, 125, 131, 133], "hypergeometr": [3, 5, 6, 9, 27, 30, 32, 42, 64, 67, 107, 114, 115, 121, 123, 133], "expans": [3, 9, 11, 27, 28, 30, 31, 33, 42, 43, 50, 52, 55, 62, 85, 87, 88, 93, 100, 111, 113, 117, 119, 120, 121, 127, 133], "comput": [3, 4, 5, 7, 8, 9, 10, 11, 12, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 43, 47, 50, 52, 55, 57, 58, 59, 62, 64, 67, 73, 76, 78, 82, 85, 87, 88, 89, 94, 110, 113, 114, 115, 118, 119, 120, 121, 123, 124, 125, 126, 128, 130, 131], "meijer": [3, 9, 33, 43, 114, 123, 125, 133], "numer": [3, 8, 9, 10, 25, 27, 33, 37, 42, 52, 53, 54, 55, 56, 58, 62, 65, 71, 72, 73, 79, 82, 84, 85, 86, 89, 94, 105, 107, 113, 114, 115, 116, 121, 126, 127, 133], "evalu": [3, 6, 8, 9, 10, 11, 28, 30, 31, 33, 35, 39, 40, 42, 43, 45, 47, 50, 52, 53, 55, 56, 57, 58, 62, 67, 73, 74, 79, 82, 84, 85, 86, 87, 88, 105, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 128, 133], "report": [3, 17, 50, 52, 84, 112, 113, 120, 123, 134], "issu": [3, 4, 27, 41, 45, 50, 56, 74, 76, 78, 113, 114, 115, 116, 117, 133], "contribut": [3, 10, 62], "rosetta": 3, "stone": 3, "version": [3, 10, 17, 24, 27, 43, 45, 46, 48, 50, 51, 56, 58, 64, 67, 68, 74, 76, 78, 83, 84, 88, 98, 99, 112, 114, 115, 116, 117, 118, 121, 122, 129], "releas": [3, 4, 71, 79, 84, 85, 86, 87, 88, 94, 95, 107, 109, 113, 114, 115, 116, 117, 119, 120, 121], "procedur": [3, 10, 13, 17, 23, 24, 25, 43, 58, 59, 64, 65], "licens": 3, "0": [3, 4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 76, 78, 79, 83, 122, 123, 124, 125, 128, 130, 131, 134], "14": [3, 6, 16, 17, 21, 22, 24, 27, 30, 31, 33, 50, 51, 52, 55, 56, 57, 58, 59, 62, 65, 68, 72, 83, 112, 122, 123, 125], "Not": [3, 27, 30, 32, 45, 56, 78, 83, 88, 120, 121], "yet": [3, 5, 27, 30, 32, 42, 43, 62, 83, 88, 114, 116, 121, 124, 128], "13": [3, 6, 16, 17, 22, 27, 30, 33, 35, 37, 38, 39, 50, 51, 52, 57, 59, 63, 64, 65, 68, 73, 83, 116, 122], "12": [3, 6, 10, 15, 16, 17, 18, 19, 22, 24, 25, 27, 30, 31, 33, 35, 38, 43, 50, 51, 52, 55, 56, 57, 59, 62, 67, 68, 73, 76, 83, 84, 89, 90, 122, 123, 130, 131, 133], "11": [3, 6, 17, 20, 22, 24, 27, 30, 33, 37, 38, 40, 41, 43, 50, 51, 52, 55, 57, 59, 62, 64, 68, 73, 78, 83, 114, 122, 123, 130], "10": [3, 4, 5, 6, 10, 16, 17, 18, 22, 24, 27, 30, 31, 33, 35, 38, 40, 41, 43, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 67, 68, 72, 78, 79, 83, 87, 88, 114, 120, 121, 122, 123, 130, 131, 133], "9": [3, 6, 8, 10, 15, 17, 18, 22, 24, 27, 29, 30, 33, 34, 35, 38, 40, 43, 46, 48, 50, 51, 52, 55, 56, 57, 58, 59, 62, 64, 68, 72, 76, 78, 83, 88, 115, 117, 120, 122, 123, 128, 130, 131, 134], "bibliographi": [3, 85], "3": [4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 76, 78, 79, 82, 84, 85, 86, 87, 88, 89, 94, 96, 99, 106, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 133, 134], "pip": 4, "extra": [4, 5, 8, 10, 27, 42, 74], "depend": [4, 5, 6, 7, 8, 17, 18, 25, 27, 28, 29, 30, 31, 33, 37, 41, 43, 44, 50, 52, 54, 56, 58, 59, 62, 63, 67, 73, 74, 75, 78, 84, 85, 86, 87, 88, 108, 114, 117, 119, 120, 121, 133], "gmpy": [4, 29, 84, 105, 113, 114, 116, 120, 121], "unicod": [4, 33, 44, 50, 56, 94, 100, 102, 107, 120, 128, 132], "pretti": [4, 8, 33, 42, 43, 44, 50, 58, 85, 86, 93, 94, 95, 100, 102, 111, 113, 114, 120, 121, 127, 128], "configur": [4, 26, 84, 85, 113, 120, 121, 132], "ttf": 4, "font": 4, "dejavu": 4, "san": 4, "mono": 4, "seem": [4, 6, 27, 58, 62, 120, 121, 125], "accept": [4, 8, 17, 27, 31, 43, 45, 50, 53, 55, 56, 58, 71, 73, 78, 79, 85, 105, 113, 115, 121], "choic": [4, 6, 10, 18, 33, 56, 58], "On": [4, 10, 19, 28, 33, 45, 50, 55, 56, 62, 76, 123], "debian": [4, 97, 100, 101], "apt": 4, "get": [4, 5, 6, 8, 10, 12, 16, 18, 19, 21, 22, 25, 27, 28, 30, 31, 33, 38, 50, 52, 54, 55, 56, 57, 58, 59, 62, 63, 67, 68, 72, 73, 78, 79, 84, 113, 114, 120, 121, 126, 128, 129, 130, 132, 133, 134], "thei": [4, 5, 6, 7, 8, 10, 15, 17, 18, 24, 27, 28, 30, 31, 33, 35, 38, 39, 40, 41, 43, 45, 46, 47, 48, 50, 52, 53, 54, 56, 57, 58, 59, 62, 63, 65, 67, 68, 72, 73, 74, 76, 78, 83, 88, 114, 115, 117, 119, 124, 125, 127, 128, 130, 133], "come": [4, 8, 22, 24, 25, 27, 31, 33, 43, 50, 55, 59, 62, 78, 86, 115, 124, 128], "requir": [4, 5, 8, 10, 17, 27, 32, 33, 35, 36, 41, 50, 52, 54, 56, 59, 62, 70, 73, 74, 114, 115, 116, 117, 119, 120, 130, 131], "com": [4, 17, 19, 20, 27, 30, 31, 33, 41, 50, 52, 57, 58, 59, 62, 67, 78, 123], "cd": 4, "verifi": [4, 10, 23, 28, 62, 68], "freshli": 4, "up": [4, 5, 6, 8, 17, 18, 20, 27, 28, 29, 33, 34, 35, 43, 44, 45, 50, 52, 55, 56, 58, 59, 62, 63, 64, 73, 74, 76, 88, 94, 109, 112, 115, 117, 120, 122, 130], "interpret": [4, 17, 25, 27, 30, 33, 38, 40, 43, 46, 50, 51, 52, 55, 56, 58, 59, 71, 76, 85, 128, 130], "simpl": [4, 5, 6, 8, 17, 25, 27, 29, 33, 37, 40, 43, 50, 52, 55, 56, 58, 59, 62, 73, 74, 85, 86, 87, 88, 91, 93, 108, 120, 121, 130, 131, 132, 133], "ones": [4, 6, 10, 17, 22, 43, 46, 50, 51, 52, 55, 59, 62, 68, 72, 74, 107, 130, 132], "below": [4, 6, 17, 27, 30, 32, 33, 41, 43, 50, 52, 54, 55, 56, 58, 59, 62, 63, 74, 78, 130], "abc": [4, 17, 25, 27, 30, 33, 34, 41, 43, 44, 50, 55, 56, 58, 59, 68, 74, 76, 78, 79, 100], "1": [4, 5, 7, 8, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 78, 79, 82, 84, 85, 87, 88, 93, 94, 95, 96, 98, 103, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134], "For": [4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 17, 18, 19, 22, 25, 27, 28, 29, 30, 31, 33, 37, 39, 40, 43, 45, 50, 52, 53, 54, 55, 56, 57, 58, 59, 62, 67, 68, 70, 71, 72, 73, 74, 76, 78, 114, 116, 117, 119, 122, 124, 125, 126, 131, 133], "starter": 4, "guid": [4, 56, 72, 94], "full": [4, 5, 10, 17, 18, 27, 33, 37, 38, 43, 55, 56, 58, 59, 98, 111, 113, 114, 115, 116, 124], "unit": [4, 8, 27, 28, 29, 30, 38, 52, 55, 57, 59, 86, 115, 119, 123], "everyth": [4, 27, 28, 33, 39, 43, 48, 56, 84, 113], "pyarg": 4, "bug": [4, 62, 83, 84, 85, 86, 87, 88, 94, 97, 99, 110, 111, 112, 113, 114, 115, 117, 120, 121], "question": [4, 6, 8, 27, 28, 30, 41, 43, 45, 52, 62], "would": [4, 5, 6, 8, 16, 18, 27, 30, 32, 37, 40, 50, 52, 53, 56, 58, 59, 62, 63, 64, 67, 70, 71, 72, 74, 76, 78, 79, 112, 117, 119, 121, 125, 128, 132, 133, 134], "featur": [4, 5, 27, 28, 42, 53, 56, 74, 83, 115, 118, 127], "ticket": 4, "sent": [4, 43, 58], "mail": [4, 56], "instanc": [5, 8, 19, 21, 25, 27, 28, 31, 40, 41, 43, 52, 53, 54, 55, 56, 57, 62, 65, 70, 71, 72, 73, 74, 76, 78, 79, 84, 85, 88, 114, 116, 117, 119, 121, 124, 125, 128, 129, 130, 133], "class": [5, 6, 7, 8, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 52, 53, 55, 57, 59, 62, 63, 64, 67, 69, 71, 72, 73, 74, 75, 76, 78, 79, 84, 85, 86, 89, 95, 99, 106, 113, 114, 115, 116, 117, 118, 119, 121, 125, 126, 129], "custom": [5, 18, 27, 50, 54, 56, 59, 73, 79, 113, 115, 118], "precis": [5, 27, 29, 30, 33, 39, 43, 56, 58, 59, 74, 82, 84, 86, 89, 113, 114, 116, 121, 124, 128, 133], "second": [5, 8, 10, 17, 18, 21, 22, 23, 24, 25, 28, 30, 31, 33, 35, 38, 43, 50, 52, 54, 55, 56, 58, 59, 62, 67, 68, 78, 112, 113, 121, 123, 130], "argument": [5, 6, 8, 10, 17, 18, 21, 24, 25, 27, 28, 30, 31, 32, 33, 35, 40, 43, 45, 47, 50, 52, 53, 54, 55, 56, 57, 58, 62, 63, 70, 71, 73, 74, 76, 78, 79, 82, 84, 85, 86, 96, 99, 105, 113, 114, 115, 116, 118, 119, 120, 121, 125, 129, 130, 131, 133], "100000000000000": 5, "1000000000": 5, "125": [5, 27, 52, 59], "30": [5, 27, 30, 33, 40, 50, 52, 55, 58, 59, 64, 68, 101, 120], "125000000000000000000000000000": 5, "100000000000000005551115123126": 5, "As": [5, 6, 8, 17, 27, 29, 30, 31, 33, 45, 50, 56, 57, 62, 67, 72, 78, 79, 119, 125, 129, 131, 132, 133, 134], "accur": [5, 27, 52, 54, 107], "15": [5, 6, 10, 16, 17, 22, 24, 27, 30, 33, 35, 38, 39, 41, 43, 50, 51, 52, 55, 56, 57, 58, 59, 63, 65, 68, 78, 82, 120, 121, 122, 124, 130], "digit": [5, 27, 35, 43, 52, 55, 58, 82, 85, 95, 105, 106, 124], "input": [5, 10, 22, 27, 30, 45, 50, 52, 54, 55, 56, 58, 59, 67, 73, 74, 76, 78, 79, 85, 87, 118, 119, 129, 133, 134], "while": [5, 18, 19, 22, 25, 27, 28, 30, 40, 44, 45, 50, 51, 52, 62, 72, 74, 76, 78, 85, 87, 114, 115, 117, 120, 121], "those": [5, 6, 10, 17, 18, 24, 25, 27, 29, 32, 38, 45, 52, 54, 55, 56, 58, 62, 63, 65, 67, 72, 76, 78, 108, 116, 117, 118], "denomin": [5, 8, 10, 27, 29, 33, 43, 52, 55, 56, 58, 59, 62, 64, 65, 84, 87, 94, 103, 115, 123, 133], "power": [5, 6, 7, 10, 11, 18, 31, 42, 43, 47, 52, 55, 56, 57, 59, 62, 70, 72, 74, 78, 84, 85, 86, 87, 94, 103, 113, 114, 116, 119, 120, 121, 124, 125, 126, 127, 128, 130, 131], "2": [5, 7, 8, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 76, 78, 79, 82, 84, 85, 87, 88, 90, 91, 93, 94, 96, 98, 108, 109, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134], "exact": [5, 6, 10, 25, 27, 29, 35, 50, 55, 58, 62, 87, 116, 128, 132], "high": [5, 27, 30, 52, 55, 56, 59, 84, 119], "decim": [5, 27, 39, 53, 55, 115], "better": [5, 8, 11, 18, 27, 33, 45, 54, 62, 63, 64, 73, 78, 79, 84, 106, 107, 111, 116, 117, 118, 119, 120, 124], "string": [5, 12, 16, 27, 44, 45, 50, 52, 53, 54, 56, 58, 62, 70, 71, 72, 73, 74, 78, 79, 81, 85, 110, 113, 114, 119, 120, 132], "ration": [5, 6, 8, 10, 25, 29, 30, 31, 33, 35, 37, 38, 39, 40, 41, 42, 43, 50, 52, 53, 56, 57, 58, 59, 62, 64, 65, 67, 82, 84, 85, 86, 87, 88, 94, 113, 115, 119, 120, 121, 123, 126, 127, 129, 131, 132], "evalf": [5, 25, 30, 31, 32, 33, 35, 39, 42, 43, 50, 51, 52, 55, 57, 58, 67, 73, 79, 84, 85, 86, 87, 94, 106, 107, 121, 124, 128], "100000000000000000000000000000": 5, "determin": [5, 7, 8, 10, 11, 12, 17, 27, 31, 35, 36, 38, 43, 50, 51, 52, 55, 56, 58, 59, 62, 70, 78, 114, 116, 118, 120, 130, 133], "perform": [5, 10, 17, 18, 21, 25, 27, 29, 31, 38, 41, 43, 48, 50, 52, 55, 58, 59, 62, 64, 68, 72, 73, 115, 117, 124, 125, 128, 133], "arithmet": [5, 10, 11, 27, 50, 52, 54, 55, 94, 113, 121, 126, 133], "displai": [5, 6, 54, 56, 70, 87], "two": [5, 6, 7, 8, 10, 13, 16, 17, 18, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 50, 51, 52, 54, 55, 56, 58, 59, 62, 63, 64, 67, 68, 71, 72, 76, 78, 84, 87, 88, 114, 115, 117, 119, 121, 125, 126, 129, 130, 132, 133], "differ": [5, 6, 10, 16, 17, 18, 22, 25, 27, 28, 30, 31, 33, 36, 39, 40, 43, 45, 47, 50, 51, 52, 54, 55, 56, 57, 58, 62, 63, 64, 67, 70, 72, 73, 74, 76, 78, 79, 85, 87, 88, 114, 117, 119, 120, 123, 126, 128, 129, 131], "togeth": [5, 17, 27, 29, 50, 52, 55, 56, 58, 62, 64, 67, 78, 113], "oper": [5, 6, 10, 11, 17, 18, 19, 25, 27, 28, 31, 35, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 62, 64, 68, 70, 71, 72, 73, 76, 78, 85, 87, 94, 110, 113, 114, 115, 116, 117, 119, 120, 121, 126, 127, 133], "higher": [5, 11, 27, 28, 33, 50, 51, 55, 58, 62, 68, 79, 82, 87, 118], "result": [5, 6, 8, 10, 17, 18, 22, 25, 27, 28, 31, 35, 37, 41, 43, 45, 50, 51, 52, 53, 55, 56, 58, 59, 62, 63, 67, 68, 70, 72, 73, 74, 76, 78, 82, 85, 86, 87, 88, 94, 113, 115, 116, 117, 118, 119, 120, 121, 128, 133], "001": [5, 12], "1415": 5, "0001": [5, 12], "ha": [5, 6, 8, 10, 12, 16, 17, 18, 20, 22, 25, 27, 28, 29, 30, 31, 33, 35, 37, 40, 41, 42, 43, 45, 47, 50, 51, 52, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 68, 70, 71, 72, 74, 76, 78, 85, 87, 88, 96, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 130, 131, 133], "uncertainti": [5, 115], "003": 5, "5": [5, 6, 7, 8, 10, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 33, 35, 37, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 51, 52, 54, 55, 56, 57, 58, 59, 62, 63, 65, 66, 67, 68, 71, 72, 73, 78, 79, 84, 85, 105, 107, 108, 112, 113, 114, 115, 116, 120, 121, 122, 123, 124, 125, 126, 130, 131, 133, 134], "shown": [5, 6, 10, 16, 18, 25, 27, 33, 56, 62, 127], "31417": 5, "model": [5, 45, 52, 115], "propag": [5, 38], "signific": [5, 27, 43, 85, 94, 119], "rather": [5, 8, 10, 17, 18, 19, 27, 36, 40, 45, 47, 52, 53, 55, 59, 62, 67, 71, 76, 114, 128], "emploi": [5, 43, 52, 62, 67], "ensur": [5, 27, 50, 51], "stabil": [5, 17, 22, 24, 70, 115], "method": [5, 6, 10, 11, 12, 17, 18, 19, 25, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 64, 65, 67, 68, 69, 71, 72, 74, 76, 78, 79, 84, 85, 86, 87, 88, 93, 94, 95, 101, 102, 103, 106, 111, 113, 114, 115, 116, 118, 119, 120, 121, 123, 124, 125, 126, 127, 133], "50000000000000": [5, 27], "5000": 5, "increas": [5, 10, 18, 24, 27, 52, 62, 78, 87, 115, 121], "constructor": [5, 14, 17, 19, 27, 32, 33, 42, 48, 50, 54, 56, 57, 71, 74, 84, 129, 130], "50000000000000000000000000000": 5, "complic": [5, 6, 8, 10, 17, 25, 28, 31, 33, 43, 50, 58, 67, 70, 71, 74, 76, 84, 88], "becom": [5, 22, 25, 27, 32, 44, 53, 62, 72, 133], "concern": [5, 54, 56, 58, 59, 73, 74, 76, 115, 133], "consid": [5, 6, 7, 10, 16, 18, 21, 27, 30, 31, 35, 37, 39, 40, 45, 50, 52, 54, 56, 58, 59, 62, 63, 67, 74, 78, 84, 130, 131, 133], "100": [5, 12, 16, 27, 50, 52, 84, 85, 86, 87, 121], "th": [5, 8, 10, 17, 18, 24, 28, 30, 31, 33, 50, 52, 55, 59, 62, 64, 68, 72], "fibonacci": [5, 32, 52, 87, 120], "excel": 5, "approxim": [5, 17, 25, 27, 33, 35, 43, 50, 52, 54, 55, 67, 113, 119, 123, 128], "varphi": [5, 33, 62], "sqrt": [5, 6, 8, 10, 27, 28, 29, 30, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 50, 52, 55, 56, 58, 59, 62, 65, 67, 78, 79, 84, 85, 86, 87, 88, 93, 117, 120, 121, 124, 128, 131, 132, 133], "where": [5, 6, 7, 8, 10, 16, 17, 18, 20, 22, 24, 25, 27, 28, 30, 31, 33, 38, 39, 40, 41, 43, 45, 47, 50, 51, 52, 55, 56, 58, 59, 62, 63, 64, 67, 70, 72, 74, 78, 94, 101, 112, 117, 120, 121, 124, 128, 130, 133], "golden": [5, 27, 52], "ratio": [5, 25, 27, 30, 33, 46, 50, 52, 56, 58, 87], "With": [5, 6, 10, 25, 27, 52, 54, 56, 58, 68, 117, 121, 131], "ordinari": [5, 17, 31, 33, 43, 62, 66, 68, 76, 85, 123, 128], "subtract": [5, 10, 18, 27, 39, 52, 114, 129], "each": [5, 8, 10, 12, 17, 18, 22, 27, 28, 30, 31, 39, 40, 41, 43, 46, 48, 50, 51, 52, 55, 56, 58, 59, 62, 63, 68, 70, 71, 72, 74, 76, 78, 114, 117, 125, 127, 134], "erron": [5, 120], "complet": [5, 6, 10, 27, 28, 31, 32, 33, 40, 50, 52, 55, 58, 59, 62, 74, 84, 85, 86, 87, 88, 98, 114, 116, 119, 120, 121, 133], "cancel": [5, 6, 10, 27, 43, 52, 55, 58, 87, 88, 93, 94, 113, 117, 120, 128, 133], "goldenratio": [5, 58, 120, 131], "1000": [5, 12, 47, 94], "4": [5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 38, 39, 40, 41, 43, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 76, 78, 79, 84, 85, 87, 88, 89, 90, 91, 95, 98, 107, 108, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 125, 130, 131, 133], "3466557686937455e": 5, "208": 5, "track": [5, 17, 27, 33, 84, 85, 125], "order": [5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 40, 41, 42, 43, 44, 45, 46, 50, 52, 53, 54, 56, 58, 59, 62, 63, 64, 65, 66, 68, 72, 73, 74, 76, 78, 84, 85, 86, 87, 88, 96, 106, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 125, 129, 131, 133], "obtain": [5, 6, 7, 8, 10, 12, 17, 18, 19, 22, 27, 30, 33, 35, 36, 40, 43, 50, 52, 55, 56, 58, 59, 62, 63, 65, 78, 115, 131, 132, 133], "correct": [5, 6, 10, 16, 17, 23, 25, 27, 31, 43, 50, 52, 55, 62, 70, 72, 73, 78, 82, 85, 118, 120, 121, 126, 132], "64613129282185e": 5, "unfortun": [5, 27, 28, 59], "cannot": [5, 10, 11, 18, 23, 25, 27, 29, 35, 37, 38, 39, 40, 41, 43, 46, 48, 50, 51, 52, 54, 55, 56, 58, 62, 68, 78, 84, 85, 86, 88, 120, 121, 124], "tell": [5, 8, 18, 33, 40, 46, 51, 53, 62, 73], "exactli": [5, 8, 12, 27, 32, 35, 53, 58, 62, 68, 76, 78, 125, 128], "zero": [5, 6, 7, 8, 10, 11, 17, 18, 22, 30, 31, 33, 35, 39, 43, 46, 47, 49, 50, 51, 52, 55, 57, 58, 59, 62, 63, 64, 65, 68, 78, 84, 85, 86, 87, 107, 113, 117, 120, 123, 130], "apart": [5, 10, 17, 22, 27, 31, 43, 55, 59, 72, 85, 86, 98, 129, 133], "mere": 5, "veri": [5, 6, 8, 10, 22, 27, 30, 35, 37, 43, 50, 52, 56, 58, 59, 62, 65, 66, 67, 73, 74, 79, 88, 99, 120, 121, 129, 133], "small": [5, 17, 18, 30, 35, 50, 52, 54, 58, 59, 64, 78, 97, 110, 111, 114, 118, 120, 128], "therefor": [5, 10, 22, 27, 33, 52, 55, 56, 62, 68, 72], "cap": 5, "around": [5, 7, 10, 11, 16, 18, 27, 31, 40, 43, 52, 56, 59, 62, 84, 86, 88, 125, 128], "traceback": [5, 10, 18, 27, 35, 43, 46, 48, 50, 51, 55, 70, 78, 120, 125, 130], "most": [5, 7, 8, 10, 17, 18, 25, 27, 29, 35, 37, 42, 43, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 62, 63, 70, 74, 78, 94, 108, 115, 116, 118, 124, 125, 126, 128, 129, 130, 132, 133], "recent": [5, 10, 18, 27, 33, 35, 43, 46, 48, 50, 51, 55, 70, 78, 112, 115, 125, 130], "precisionexhaust": 5, "except": [5, 10, 18, 27, 31, 33, 35, 38, 40, 41, 49, 52, 55, 56, 59, 62, 63, 70, 71, 73, 74, 78, 84, 87, 108, 110, 114, 118, 121], "indic": [5, 6, 10, 12, 16, 17, 18, 19, 21, 22, 25, 27, 30, 33, 43, 45, 50, 51, 52, 56, 58, 68, 69, 70, 71, 72, 73, 74, 115, 130], "fail": [5, 6, 8, 10, 17, 18, 22, 25, 27, 31, 43, 46, 48, 50, 52, 54, 62, 67, 78, 84, 85, 86, 87, 88, 99, 112, 120, 121], "achiev": [5, 8, 27, 33, 52, 58, 94], "forc": [5, 6, 23, 27, 31, 43, 54, 55, 58, 59, 66, 85, 113, 121], "maxn": [5, 27], "keyword": [5, 17, 18, 27, 30, 38, 40, 50, 52, 54, 56, 58, 73, 85, 113, 115, 121, 131, 133], "500": [5, 119], "60123853010113e": 5, "210": [5, 52, 59], "thousand": [5, 52], "awar": [5, 8, 27, 50, 79, 113], "slowdown": [5, 94], "extrem": [5, 17, 43, 58, 84], "case": [5, 6, 7, 8, 10, 11, 13, 15, 17, 18, 22, 25, 27, 28, 29, 30, 31, 33, 37, 42, 43, 45, 50, 52, 53, 55, 56, 58, 59, 62, 63, 64, 65, 67, 70, 71, 72, 74, 78, 79, 84, 85, 86, 94, 107, 110, 114, 115, 121, 124, 126, 128, 130, 131, 133], "fals": [5, 10, 11, 17, 18, 19, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 65, 66, 67, 72, 73, 74, 75, 78, 79, 85, 87, 95, 105, 112, 115, 117, 119, 120, 121, 124, 126, 128, 131, 132], "imprecis": 5, "answer": [5, 6, 7, 8, 10, 17, 27, 43, 50, 52, 58, 65, 76, 84, 85, 87, 88, 115, 116, 120, 121, 128], "instead": [5, 8, 10, 17, 19, 22, 25, 27, 30, 43, 45, 48, 52, 55, 56, 58, 62, 65, 67, 70, 71, 76, 79, 84, 85, 87, 88, 93, 94, 98, 99, 113, 115, 116, 117, 118, 119, 120, 121, 125, 126, 128, 129], "term": [5, 6, 7, 8, 10, 11, 17, 27, 28, 30, 31, 33, 42, 43, 45, 50, 52, 55, 56, 57, 58, 59, 62, 63, 64, 70, 71, 78, 85, 86, 87, 88, 95, 113, 114, 115, 117, 118, 120, 121, 125, 126, 128, 129, 133], "binet": 5, "formula": [5, 9, 10, 20, 25, 27, 30, 33, 38, 50, 52, 55, 56, 58, 59, 85, 113, 119, 128], "126": [5, 50, 52], "1336": 5, "In": [5, 6, 8, 10, 12, 16, 17, 18, 25, 27, 28, 29, 30, 31, 32, 33, 43, 45, 46, 50, 51, 52, 53, 55, 56, 58, 59, 62, 63, 64, 65, 67, 70, 72, 74, 76, 78, 79, 88, 113, 114, 115, 117, 119, 123, 124, 126, 127, 128, 130, 131, 132, 133], "situat": [5, 6, 62, 65, 67], "occur": [5, 6, 10, 18, 27, 32, 50, 53, 58, 63, 78, 87], "chop": [5, 27, 33, 50, 124], "real": [5, 6, 8, 10, 11, 25, 27, 28, 29, 30, 31, 32, 33, 41, 43, 50, 52, 55, 57, 58, 62, 67, 74, 85, 87, 88, 113, 115, 117, 119, 120, 121, 125, 128, 133], "imaginari": [5, 27, 31, 33, 50, 55, 58, 84, 85, 120, 124], "portion": [5, 46, 50], "00000000000000": [5, 67], "wish": [5, 6, 27, 52, 76, 117, 125], "remov": [5, 10, 11, 17, 20, 24, 27, 29, 31, 40, 50, 55, 58, 59, 62, 73, 74, 78, 84, 85, 86, 87, 88, 94, 96, 103, 105, 106, 107, 110, 113, 116, 117, 118, 119, 120, 121, 124], "meaningless": 5, "re": [5, 6, 8, 10, 17, 18, 27, 32, 33, 43, 50, 56, 58, 82, 84, 85, 121, 123, 125, 133], "round": [5, 27, 30, 31, 35, 55, 72, 78, 82, 115, 121], "12345": [5, 121], "012297": 5, "_": [5, 6, 8, 10, 11, 15, 16, 17, 18, 19, 22, 25, 27, 30, 31, 33, 35, 40, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 58, 62, 72, 78, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134], "01": [5, 18, 27, 58], "deal": [5, 6, 10, 25, 37, 43, 55, 59, 81, 123, 128, 131], "contain": [5, 8, 10, 11, 17, 18, 22, 24, 25, 28, 29, 31, 33, 34, 36, 38, 39, 40, 41, 42, 43, 45, 50, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 67, 70, 71, 72, 73, 74, 76, 77, 78, 79, 87, 113, 114, 115, 116, 119, 120, 121, 124], "arbitrari": [5, 13, 18, 19, 25, 27, 29, 30, 33, 35, 37, 45, 50, 54, 58, 62, 63, 64, 65, 72, 78, 79, 89, 115, 116, 117, 119, 124, 125, 131, 133, 134], "rel": [5, 6, 8, 10, 17, 18, 19, 23, 24, 25, 36, 52, 57, 64, 67, 78, 95, 119, 121], "given": [5, 6, 7, 8, 10, 11, 12, 15, 16, 17, 18, 19, 20, 22, 25, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 40, 41, 43, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 71, 72, 74, 76, 78, 79, 85, 87, 114, 115, 119, 124, 130, 133], "v": [5, 6, 8, 10, 11, 22, 25, 27, 28, 45, 46, 50, 51, 52, 54, 58, 59, 62, 64, 67, 72, 78, 88, 120, 123], "pi": [5, 6, 8, 11, 18, 28, 30, 31, 33, 34, 35, 36, 38, 39, 40, 43, 50, 52, 56, 58, 62, 67, 86, 87, 88, 94, 95, 105, 106, 119, 120, 121, 124, 128], "co": [5, 6, 8, 11, 27, 28, 30, 32, 33, 34, 35, 38, 40, 43, 50, 52, 53, 54, 55, 56, 58, 59, 62, 67, 68, 78, 82, 84, 85, 88, 94, 99, 107, 120, 121, 124, 125, 128, 133, 134], "31": [5, 15, 27, 35, 40, 52, 55, 59], "9562288417661": 5, "956": 5, "infinit": [5, 11, 25, 27, 29, 30, 31, 38, 50, 52, 58, 59, 65, 78, 85, 87, 117, 119], "seri": [5, 7, 8, 11, 17, 25, 27, 28, 30, 31, 33, 42, 52, 56, 62, 84, 85, 87, 88, 93, 99, 100, 102, 106, 107, 110, 113, 117, 119, 120, 121, 123, 127], "support": [5, 10, 11, 18, 25, 27, 32, 33, 35, 43, 50, 52, 54, 55, 56, 57, 58, 62, 63, 65, 68, 71, 73, 74, 84, 85, 86, 87, 88, 93, 94, 96, 100, 107, 113, 114, 115, 116, 117, 119, 120, 121, 124, 125, 130, 131], "oo": [5, 11, 25, 27, 30, 31, 32, 33, 38, 43, 50, 57, 58, 62, 67, 71, 78, 84, 85, 86, 87, 88, 94, 114, 118, 119, 120, 121, 125, 128], "29128599706266": 5, "50": [5, 17, 30, 33, 50, 52, 55, 58, 106, 107, 120], "2912859970626635404072825905956005414986193682745": 5, "exp": [5, 6, 7, 8, 11, 27, 28, 30, 32, 33, 43, 47, 50, 52, 55, 58, 62, 63, 67, 68, 78, 84, 87, 88, 107, 110, 116, 117, 120, 121, 125, 128, 134], "14159265358979323846264338328": 5, "By": [5, 6, 10, 27, 30, 33, 46, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 62, 70, 72, 78, 124], "tanh": [5, 27, 32, 43, 56, 58, 133], "sinh": [5, 6, 8, 27, 32, 33, 56, 58, 87, 133], "quadratur": [5, 27, 43, 62, 107, 116], "effici": [5, 12, 17, 22, 27, 29, 30, 40, 41, 50, 52, 55, 58, 59, 64, 78, 94, 110, 113, 118, 123, 130, 133], "robust": [5, 23, 27, 55, 58, 62, 78, 79, 95, 96, 106, 107, 109, 110, 113, 117, 118, 119, 120], "smooth": [5, 27, 52], "integrand": [5, 6, 8, 33, 43, 112], "endpoint": [5, 25, 27, 57], "singular": [5, 11, 31, 33, 43, 50, 51, 62, 115, 120, 125], "struggl": 5, "highli": [5, 27, 55, 74], "oscillatori": [5, 27, 107], "mid": [5, 40, 59], "interv": [5, 10, 27, 31, 33, 34, 35, 38, 40, 43, 54, 55, 57, 67, 84, 85, 87, 88, 113, 114, 115, 118, 120, 121], "discontinu": [5, 31, 33, 43, 88], "mani": [5, 6, 8, 10, 15, 17, 22, 27, 28, 29, 31, 33, 37, 43, 46, 50, 51, 52, 58, 59, 62, 63, 65, 67, 70, 74, 78, 97, 108, 109, 110, 111, 113, 114, 115, 116, 119, 124, 125, 127, 128], "correctli": [5, 6, 50, 62, 85, 87, 92, 94, 110, 114, 120, 121, 126], "estim": [5, 10, 25], "four": [5, 18, 27, 33, 52, 58, 59, 62, 67, 68, 72], "ab": [5, 6, 25, 27, 30, 32, 33, 37, 50, 56, 59, 62, 67, 76, 84, 85, 87, 113, 120, 121, 123], "sin": [5, 6, 8, 11, 27, 28, 30, 32, 33, 34, 35, 43, 50, 53, 54, 56, 57, 58, 62, 68, 74, 78, 79, 82, 84, 85, 93, 94, 96, 99, 113, 116, 119, 120, 121, 124, 125, 128, 133, 134], "split": [5, 6, 10, 25, 27, 43, 53, 56, 72, 78, 113, 116], "piec": [5, 8, 27, 74], "34635637913639": 5, "similar": [5, 8, 25, 27, 30, 31, 33, 36, 40, 41, 45, 58, 62, 64, 76, 113, 115, 128, 130, 133], "dealt": [5, 6], "much": [5, 6, 8, 13, 22, 27, 33, 43, 55, 58, 62, 63, 64, 74, 76, 85, 107, 111, 114, 115, 116, 118, 125, 128, 133], "more": [5, 6, 8, 10, 17, 18, 23, 25, 27, 28, 30, 31, 32, 33, 38, 39, 40, 41, 43, 45, 48, 50, 52, 54, 55, 56, 58, 59, 62, 63, 66, 67, 72, 74, 76, 78, 79, 85, 86, 89, 94, 95, 96, 99, 103, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 123, 126, 127, 128, 130, 133], "quad": [5, 27, 28, 33, 56], "osc": [5, 27], "504067061906928": 5, "20": [5, 16, 17, 18, 25, 27, 30, 33, 41, 52, 55, 56, 57, 58, 59, 67, 97, 100, 111, 120, 128], "50406706190692837199": 5, "factor": [5, 8, 9, 17, 18, 25, 27, 30, 31, 33, 50, 51, 52, 55, 58, 59, 62, 70, 76, 78, 85, 86, 87, 88, 94, 106, 108, 109, 110, 113, 116, 117, 120, 121, 127, 128, 130, 133], "ax": [5, 6, 10, 35, 38, 50, 51, 59, 62, 68, 71, 117, 119], "transform": [5, 9, 11, 22, 25, 27, 28, 30, 33, 39, 42, 44, 47, 50, 55, 57, 58, 59, 62, 63, 64, 71, 74, 79, 107, 113, 115, 117, 120, 121, 128, 130, 133], "variabl": [5, 6, 7, 10, 11, 21, 25, 27, 33, 34, 41, 42, 43, 45, 50, 53, 54, 55, 56, 58, 59, 62, 63, 65, 74, 76, 78, 84, 85, 87, 88, 94, 107, 110, 113, 115, 116, 117, 119, 120, 121, 124, 125, 128, 131, 133], "init_print": [5, 43, 44, 50, 116, 118, 128, 132, 134], "pretty_print": [5, 43, 44, 50, 56, 128, 134], "use_unicod": [5, 28, 33, 43, 44, 50, 52, 56, 58, 62, 63, 67, 78, 121, 128, 132, 134], "wrap_lin": [5, 43, 50, 56, 62], "no_glob": [5, 43, 44, 50], "intgrl": 5, "dx": [5, 22, 28, 41, 43, 50, 59, 62, 63, 68, 117, 125, 128, 132, 134], "summat": [5, 25, 27, 30, 33, 56, 58, 70, 71, 72, 73, 85, 87, 107, 113, 116, 117, 123, 125], "converg": [5, 8, 33, 43, 52, 102, 119, 125], "quickli": [5, 10, 17, 52, 76, 78, 100], "enough": [5, 10, 27, 52, 56, 62, 78, 124], "extrapol": [5, 102], "euler": [5, 25, 27, 32, 33, 52, 62, 88, 116, 118], "maclaurin": [5, 25], "richardson": 5, "speed": [5, 17, 43, 50, 56, 58, 62, 73, 76, 78, 115, 133], "allow": [5, 6, 10, 12, 17, 19, 25, 27, 29, 35, 36, 37, 40, 44, 45, 47, 48, 50, 52, 53, 54, 55, 56, 58, 62, 67, 68, 71, 78, 79, 85, 113, 114, 115, 119, 124, 129, 133], "slowli": 5, "64493406684823": 5, "zeta": [5, 30, 32, 56, 84, 121], "log": [5, 6, 7, 8, 11, 17, 25, 27, 30, 32, 33, 43, 50, 52, 54, 56, 58, 62, 67, 84, 85, 87, 88, 99, 113, 114, 115, 116, 118, 120, 121, 125, 133], "577215664901533": 5, "57721566490153286060651209008240243104215933593992": 5, "eulergamma": [5, 30, 33, 120], "finit": [5, 9, 10, 15, 17, 25, 27, 29, 43, 55, 57, 59, 62, 65, 84, 85, 86, 87, 88, 110, 113, 117, 118, 119, 120, 131], "10000000": [5, 55], "20000000": [5, 55], "693147255559946": 5, "assumpt": [5, 17, 20, 25, 31, 42, 43, 45, 47, 50, 57, 58, 62, 65, 66, 74, 78, 85, 87, 94, 107, 111, 113, 116, 119, 120, 121, 127, 133], "alwai": [5, 6, 7, 8, 17, 18, 25, 27, 28, 29, 31, 33, 35, 37, 40, 43, 45, 50, 52, 55, 57, 58, 59, 62, 63, 74, 79, 101, 114, 115, 125, 126, 128, 129, 133], "optim": [5, 10, 11, 12, 17, 33, 52, 55, 56, 58, 67, 73, 107, 113, 117, 120, 133], "fine": [5, 27, 56, 58], "tune": [5, 56], "over": [5, 7, 9, 17, 18, 21, 23, 27, 28, 29, 30, 40, 43, 45, 50, 52, 54, 55, 56, 58, 59, 62, 64, 67, 68, 70, 78, 84, 85, 86, 87, 88, 108, 113, 115, 116, 121, 123, 131, 133], "might": [5, 6, 8, 27, 31, 38, 50, 52, 55, 56, 58, 59, 67, 74, 78, 115, 124, 128, 129, 133], "worthwhil": 5, "manual": [5, 10, 35, 53, 56, 62, 115, 121, 132], "euler_maclaurin": [5, 25], "factori": [5, 10, 25, 27, 32, 33, 50, 58, 64, 67, 74, 78, 79, 84, 85, 88, 113, 118, 133], "binomi": [5, 25, 32, 33, 52, 58, 62, 67, 78, 85, 87, 88, 113, 120, 133], "coeffici": [5, 6, 7, 8, 10, 11, 25, 27, 28, 29, 30, 33, 38, 50, 51, 52, 55, 58, 59, 62, 63, 64, 72, 78, 84, 85, 86, 87, 94, 113, 116, 117, 120, 121, 131, 133], "rapidli": [5, 6, 7, 27], "ramanujan": [5, 30, 52], "000": [5, 12, 43, 106], "r": [5, 6, 8, 10, 12, 17, 18, 27, 28, 29, 31, 33, 38, 39, 40, 43, 46, 50, 51, 52, 55, 56, 57, 58, 59, 62, 64, 67, 72, 74, 76, 84, 85, 88, 123, 131], "9801": 5, "1103": [5, 86], "26390": 5, "396": [5, 121], "10000": [5, 52, 88], "141592653589793238462643383279502884197169399375105820974944592307": 5, "nsimplifi": [5, 27, 42, 108, 113, 121], "attempt": [5, 17, 22, 24, 27, 30, 37, 43, 52, 56, 58, 59, 62, 115], "find": [5, 6, 7, 8, 10, 11, 17, 20, 21, 22, 25, 27, 31, 33, 35, 37, 38, 41, 42, 43, 50, 52, 57, 58, 59, 62, 64, 65, 84, 95, 109, 113, 115, 119, 120, 121, 125, 128, 130], "equal": [5, 8, 10, 16, 17, 18, 22, 24, 25, 28, 29, 30, 31, 33, 38, 39, 40, 41, 45, 46, 47, 48, 50, 52, 56, 57, 59, 62, 63, 64, 65, 67, 72, 73, 74, 78, 85, 87, 88, 115, 116, 120, 121, 125, 127, 134], "guess": [5, 8, 59, 64], "simpler": [5, 6, 8, 10, 27, 33, 58, 62, 64, 133], "capabl": [5, 6, 27, 113, 117, 124, 127, 128], "identifi": [5, 19, 27, 43, 44, 50, 62, 63, 120, 133], "algebra": [5, 6, 9, 11, 17, 27, 29, 31, 42, 43, 49, 52, 59, 60, 61, 62, 64, 84, 85, 88, 110, 113, 115, 116, 117, 121, 123, 126, 127, 128, 131], "linear": [5, 8, 10, 18, 25, 27, 31, 33, 38, 42, 43, 47, 49, 54, 55, 59, 63, 64, 65, 84, 85, 86, 110, 114, 116, 117, 119, 120, 121], "combin": [5, 8, 10, 27, 30, 33, 43, 50, 55, 56, 58, 59, 62, 64, 67, 68, 76, 78, 88, 110, 114, 115, 117, 119, 129, 133], "constant": [5, 6, 7, 8, 10, 11, 25, 27, 33, 54, 55, 56, 58, 59, 62, 63, 64, 74, 78, 85, 86, 106, 115, 116, 120, 121, 125, 134], "certain": [5, 6, 8, 10, 17, 24, 27, 43, 53, 56, 58, 59, 62, 67, 74, 75, 87, 115, 121, 124], "elementari": [5, 6, 27, 32, 33, 42, 43, 52, 55, 78, 114, 116, 120, 121], "preced": [5, 18, 30, 58], "minimum": [5, 10, 17, 18, 20, 22, 27, 31, 50, 67, 78], "toler": [5, 27, 29, 55, 58], "6": [5, 6, 10, 12, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 35, 37, 38, 40, 43, 46, 47, 48, 50, 51, 52, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 67, 68, 72, 73, 76, 78, 84, 85, 87, 94, 103, 113, 114, 120, 122, 123, 125, 130, 131, 133, 134], "28": [5, 17, 50, 52, 59, 62, 113, 123], "7": [5, 6, 8, 10, 12, 16, 17, 18, 19, 20, 22, 24, 25, 27, 30, 31, 33, 35, 38, 39, 40, 43, 46, 48, 50, 51, 52, 55, 56, 57, 58, 59, 62, 63, 65, 67, 68, 71, 72, 73, 76, 78, 79, 84, 87, 92, 105, 120, 122, 123, 125, 130, 131, 134], "355": [5, 52, 123], "113": [5, 52, 59, 120], "33333": 5, "1e": [5, 27, 55, 82], "635": [5, 84], "504": 5, "___": [5, 25, 30, 43, 44, 50, 58, 67, 71, 78, 125, 128, 131, 132, 133, 134], "sever": [5, 6, 7, 13, 17, 18, 25, 27, 30, 32, 33, 37, 43, 57, 65, 67, 74, 78, 118, 119, 124, 130, 132, 133], "advanc": [5, 17, 27, 30, 38, 50, 54, 55, 73, 74, 78, 123, 127], "130198866629986772369127970337": 5, "atan": [5, 32, 62, 79], "____": [5, 25, 43, 67, 78, 124, 128, 130, 133], "49": [5, 30, 50, 52, 59, 123], "17": [5, 6, 16, 17, 18, 31, 35, 40, 50, 52, 58, 59, 62, 68, 76, 84, 102, 107, 110, 112, 114, 128], "___________": [5, 62, 130], "gamma": [5, 6, 8, 10, 25, 27, 28, 30, 32, 43, 56, 58, 62, 67, 79, 85, 88, 114, 115, 116, 117, 118, 121, 133], "numpi": [5, 27, 49, 71, 72, 73, 74, 79, 88, 91, 93, 96, 107, 112, 113, 119, 120, 121, 124, 126], "vector": [5, 8, 12, 17, 18, 28, 33, 38, 50, 71, 72, 73, 88, 96, 114, 115, 117, 118, 119, 121, 124, 130], "sometim": [5, 6, 27, 30, 33, 55, 59, 62, 78, 87, 88, 120, 121, 124, 130, 133], "incur": 5, "unnecessari": [5, 55, 67, 87], "cost": [5, 52, 78], "chain": [5, 17, 22, 27, 41, 114], "get_numpy_arrai": 5, "routin": [5, 10, 16, 27, 28, 35, 45, 50, 51, 52, 55, 56, 58, 59, 62, 63, 73, 77, 78, 82, 114, 118, 119], "tight": 5, "loop": [5, 27, 52, 56, 62, 76], "someth": [5, 6, 7, 27, 42, 45, 50, 52, 58, 62, 74, 114, 115, 121, 124, 128], "int": [5, 6, 25, 27, 30, 31, 33, 40, 43, 44, 45, 50, 52, 54, 56, 59, 62, 67, 72, 78, 85, 120, 126, 128, 132], "temp": 5, "slightli": [5, 8, 22, 53, 54, 58, 117], "sub": [5, 25, 31, 33, 34, 35, 37, 40, 45, 47, 50, 51, 52, 58, 59, 62, 63, 65, 73, 84, 85, 87, 95, 107, 110, 113, 114, 117, 120, 121, 124, 125], "alloc": [5, 31], "arrai": [5, 17, 18, 22, 23, 33, 42, 43, 50, 52, 56, 69, 71, 73, 74, 76, 79, 85, 91, 112, 113, 119, 120], "walk": [5, 8, 12, 127], "memori": [5, 10, 52, 68, 73, 76, 78], "twice": [5, 27, 28, 52, 56, 76, 125], "onc": [5, 6, 8, 10, 12, 17, 22, 27, 30, 40, 43, 56, 58, 62, 78, 124, 125, 133, 134], "been": [5, 6, 8, 10, 17, 18, 19, 22, 27, 37, 43, 52, 58, 63, 68, 74, 78, 83, 88, 113, 114, 115, 116, 117, 118, 119, 128], "suffici": [5, 7, 17, 18, 22, 62, 67, 76, 78], "solut": [5, 10, 22, 27, 31, 33, 35, 43, 50, 51, 52, 55, 58, 59, 62, 63, 64, 65, 66, 84, 85, 87, 88, 110, 115, 116, 118, 120, 121, 123, 126, 134], "fuse": 5, "both": [5, 6, 8, 10, 18, 21, 22, 24, 25, 27, 30, 31, 33, 43, 45, 50, 58, 59, 62, 65, 68, 71, 74, 78, 84, 108, 109, 113, 115, 118, 120, 121, 125, 128, 133], "element": [5, 6, 7, 8, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 30, 31, 40, 42, 45, 46, 47, 48, 50, 51, 52, 54, 55, 57, 58, 59, 62, 68, 71, 72, 73, 76, 78, 84, 85, 88, 114, 115, 118, 119, 121, 123, 130, 131], "wise": [5, 31, 51, 73], "singl": [5, 6, 7, 8, 10, 12, 17, 27, 29, 30, 31, 33, 38, 40, 41, 43, 45, 46, 50, 53, 54, 56, 58, 59, 62, 64, 65, 67, 71, 72, 74, 76, 84, 85, 113, 117, 125, 129, 134], "static": [5, 17, 18, 20, 31, 38, 56, 57, 72], "compil": [5, 56, 58, 71, 73, 74, 106, 113, 120, 121, 124], "unabl": [5, 38, 41, 88, 121, 125], "advantag": [5, 27, 45, 52, 59, 62, 76], "fortun": 5, "abl": [5, 22, 27, 28, 36, 43, 50, 62, 121, 133], "low": [5, 10, 27, 33, 52, 58, 73, 74, 78, 85], "level": [5, 10, 17, 24, 27, 33, 52, 54, 55, 56, 58, 59, 67, 70, 73, 74, 78, 85, 115, 119, 121], "fortran": [5, 42, 74, 113, 119, 132], "cython": [5, 73, 113, 119, 120], "f2py": [5, 73, 74, 119], "reconnect": 5, "process": [5, 6, 10, 17, 18, 24, 27, 35, 40, 43, 50, 52, 56, 58, 62, 67, 76, 78, 87, 117], "well": [5, 8, 10, 12, 27, 30, 31, 32, 33, 48, 50, 58, 62, 73, 94, 115, 117, 123], "autom": [5, 73, 120], "user": [5, 6, 17, 27, 37, 47, 53, 55, 56, 58, 60, 67, 73, 74, 76, 79, 83, 94, 117, 124, 133], "expr": [5, 7, 10, 11, 25, 28, 29, 31, 33, 38, 42, 43, 45, 46, 47, 48, 54, 55, 56, 58, 59, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 78, 79, 84, 87, 88, 113, 114, 115, 116, 117, 121, 124, 125, 128, 129, 132, 133], "autowrap": [5, 42, 71, 74, 77, 88, 116, 119, 120, 121], "consum": [5, 33], "return": [5, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 78, 79, 81, 82, 84, 85, 87, 88, 94, 95, 98, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 129, 130, 131, 133, 134], "least": [5, 6, 10, 17, 27, 31, 37, 43, 50, 51, 52, 55, 58, 62, 74, 94, 131], "lambdifi": [5, 33, 42, 56, 73, 77, 84, 85, 96, 105, 113, 114, 116, 118, 119, 120, 121, 124], "often": [5, 6, 10, 27, 33, 35, 37, 43, 52, 57, 59, 62, 67, 128, 133], "significantli": [5, 73, 76, 107, 113, 115], "outperform": [5, 116], "jensen": 5, "blog": [5, 59, 111], "post": [5, 20, 27, 56, 58, 99, 117, 129], "topic": 5, "aim": [6, 8, 62, 127], "describ": [6, 8, 17, 20, 21, 24, 25, 27, 33, 39, 43, 52, 58, 59, 62, 70, 74, 115], "subtleti": 6, "involv": [6, 8, 17, 25, 27, 30, 37, 38, 43, 46, 52, 58, 62, 64, 84, 85, 86, 87, 88, 117, 118, 120, 121, 133], "definit": [6, 7, 10, 11, 17, 23, 25, 27, 28, 29, 30, 31, 33, 38, 39, 40, 43, 44, 50, 51, 52, 55, 56, 68, 73, 74, 86, 87, 115, 118, 120, 121, 125], "indefinit": [6, 10, 43, 55, 120, 123, 125], "ignor": [6, 17, 27, 30, 52, 55, 58, 85, 87, 120, 121], "proof": [6, 7, 17, 20, 43, 123], "mathrm": [6, 8, 10, 33, 43, 50, 52, 62, 67, 125], "int_0": [6, 33, 43, 125], "infti": [6, 7, 8, 11, 27, 30, 33, 43, 62, 67, 125, 128], "consist": [6, 18, 22, 27, 30, 39, 40, 50, 54, 57, 58, 62, 70, 73, 74, 78, 85, 113, 114, 117, 118], "three": [6, 8, 17, 19, 27, 29, 30, 33, 35, 39, 40, 45, 54, 55, 56, 58, 59, 64, 67, 84, 113, 115, 124, 126], "rewrit": [6, 7, 10, 25, 27, 30, 31, 33, 43, 50, 55, 57, 58, 62, 63, 98, 107, 114, 115, 121, 128, 133], "usual": [6, 8, 10, 17, 25, 27, 43, 50, 56, 62, 68, 71, 72, 74, 76, 78, 79, 85, 118, 119, 122, 128, 133], "anoth": [6, 8, 10, 18, 23, 27, 28, 31, 33, 35, 36, 37, 38, 39, 40, 41, 43, 50, 52, 54, 55, 56, 57, 62, 67, 73, 74, 88, 115, 119, 128, 133], "hyperexpand": [6, 8, 27, 33, 114], "q": [6, 8, 10, 18, 22, 27, 29, 33, 41, 43, 50, 52, 53, 55, 56, 59, 62, 64, 71, 72, 84, 123, 131, 133], "moreov": [6, 10, 17, 133], "thu": [6, 8, 10, 13, 17, 18, 27, 28, 31, 33, 48, 50, 52, 56, 58, 74, 78, 105, 109, 129], "treatment": [6, 55, 117], "int_": [6, 33, 43, 125, 128], "recast": [6, 65], "There": [6, 8, 17, 18, 19, 20, 23, 27, 29, 30, 33, 35, 43, 45, 50, 52, 54, 55, 57, 59, 62, 64, 67, 71, 76, 79, 85, 115, 125, 126, 129, 133], "lot": [6, 17, 27, 59, 90, 95, 96, 100, 113, 121, 133], "heurist": [6, 9, 18, 43, 58, 60, 65, 84, 93, 98, 115, 121, 123, 133], "best": [6, 8, 27, 33, 43, 50, 56, 58, 62, 70, 73, 78, 115, 128, 132, 133], "typic": [6, 8, 10, 22, 33, 52, 74, 117, 133], "branchpoint": 6, "being": [6, 8, 17, 24, 25, 27, 35, 37, 38, 40, 41, 45, 50, 52, 55, 56, 58, 59, 62, 63, 64, 67, 76, 78, 84, 86, 87, 112, 113, 119, 124], "pm": [6, 7, 25, 59], "sinc": [6, 8, 10, 17, 18, 19, 22, 23, 24, 27, 30, 34, 35, 37, 39, 40, 45, 50, 52, 56, 58, 59, 62, 72, 76, 78, 109, 113, 114, 115, 116, 118, 131, 133], "sort": [6, 10, 16, 18, 22, 27, 50, 51, 52, 54, 55, 58, 59, 62, 63, 70, 72, 74, 78, 84, 110, 113, 114, 117, 119, 121, 128], "left": [6, 8, 10, 11, 17, 22, 27, 28, 30, 31, 33, 40, 41, 43, 50, 52, 56, 57, 58, 62, 67, 73, 74, 76, 78, 110, 115, 117, 125, 128, 133], "human": [6, 55, 56, 107], "need": [6, 8, 10, 13, 17, 18, 22, 24, 25, 27, 28, 31, 32, 33, 36, 40, 43, 50, 52, 53, 55, 56, 57, 58, 59, 62, 67, 70, 71, 73, 74, 75, 76, 78, 86, 87, 114, 115, 118, 119, 121, 129, 131, 133], "crude": 6, "understand": [6, 8, 27, 59, 132], "mathcal": [6, 31], "theta": [6, 28, 31, 33, 44, 50, 53, 56, 67], "mathbb": [6, 8, 10, 17, 25, 29, 31, 33, 52], "map": [6, 18, 27, 31, 40, 43, 52, 56, 58, 62, 63, 64, 66, 67, 70, 73, 76, 78, 79, 84, 94, 116, 121], "p": [6, 8, 10, 15, 16, 17, 18, 19, 20, 22, 24, 25, 27, 28, 29, 30, 31, 33, 35, 38, 39, 40, 41, 43, 50, 52, 55, 56, 58, 59, 62, 65, 67, 68, 71, 72, 78, 84, 113, 120, 123, 124, 130, 133], "rightarrow": [6, 11, 30, 31, 33, 43, 120], "mapsto": [6, 25], "decre": 6, "biholomorph": 6, "give": [6, 8, 16, 17, 18, 19, 20, 25, 27, 28, 30, 31, 33, 35, 37, 38, 40, 43, 45, 50, 52, 54, 55, 58, 59, 62, 64, 74, 78, 84, 85, 86, 87, 88, 113, 114, 115, 116, 117, 119, 120, 121, 124, 127], "topologi": 6, "complex": [6, 8, 10, 17, 27, 29, 30, 32, 33, 37, 40, 42, 50, 51, 53, 55, 58, 62, 65, 67, 74, 78, 82, 86, 87, 88, 94, 113, 114, 117, 119, 120, 124, 133], "structur": [6, 15, 17, 18, 24, 27, 45, 50, 51, 55, 58, 60, 62, 67, 70, 71, 74, 76, 78, 113, 116, 126], "riemann": [6, 27, 28, 30, 31, 32, 58, 72, 121], "surfac": [6, 27, 31, 33, 54, 58, 115, 117], "logarithm": [6, 8, 10, 27, 31, 32, 52, 58, 85, 87, 116, 127], "reason": [6, 8, 10, 18, 24, 27, 33, 48, 56, 58, 62, 76, 78, 88, 114, 124], "defin": [6, 7, 8, 10, 11, 12, 17, 18, 21, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 43, 46, 50, 52, 54, 56, 58, 59, 67, 68, 71, 72, 73, 74, 78, 79, 80, 114, 115, 117, 118, 121, 128, 131], "operatornam": [6, 8, 29, 30, 31, 33, 43, 56, 64], "ii": [6, 52, 56, 62], "These": [6, 8, 17, 25, 43, 50, 53, 56, 59, 62, 63, 67, 73, 74, 78, 84, 85, 86, 87, 88, 114, 115, 117, 120, 121, 133], "holomorph": 6, "inde": [6, 8, 15, 17, 25, 33, 62, 121], "mutual": 6, "formal": [6, 10, 11, 25, 42], "attach": [6, 20, 73, 79], "point": [6, 9, 10, 11, 17, 24, 27, 28, 31, 33, 34, 35, 36, 37, 38, 40, 41, 43, 50, 52, 54, 55, 57, 62, 73, 76, 78, 84, 86, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125], "denot": [6, 7, 8, 10, 27, 28, 33, 50, 52, 54], "object": [6, 10, 12, 17, 18, 19, 20, 21, 25, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 47, 48, 50, 54, 55, 56, 57, 58, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 85, 87, 91, 94, 96, 107, 113, 114, 115, 116, 117, 118, 119, 121, 124, 125, 126, 128, 129, 130, 132], "_0": [6, 29, 50, 79], "notabl": [6, 33, 118], "fundament": [6, 43, 59, 62], "neighbourhood": 6, "which": [6, 7, 8, 10, 16, 17, 18, 19, 22, 24, 25, 27, 28, 30, 31, 33, 35, 38, 40, 43, 45, 48, 50, 52, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 67, 70, 72, 73, 74, 75, 76, 78, 79, 85, 87, 94, 99, 113, 114, 115, 116, 117, 119, 121, 125, 126, 127, 128, 129, 131, 132, 133], "further": [6, 8, 9, 33, 37, 50, 54, 55, 58, 67, 72, 128], "arg": [6, 10, 11, 12, 17, 18, 20, 23, 25, 27, 28, 30, 32, 33, 35, 36, 39, 40, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 65, 68, 71, 72, 73, 74, 78, 79, 93, 94, 99, 113, 114, 120, 121, 129], "evid": [6, 8], "continu": [6, 10, 18, 20, 27, 30, 33, 50, 52, 55, 59, 62, 70, 87, 88, 119, 120], "everywher": [6, 27, 39], "extend": [6, 9, 10, 17, 27, 29, 30, 37, 43, 52, 54, 55, 56, 57, 59, 62, 67, 68, 74, 76, 98, 110, 113, 114, 117], "easili": [6, 27, 33, 52, 55, 56, 58, 59, 62, 64, 73, 114, 115], "properti": [6, 7, 8, 10, 12, 15, 16, 17, 18, 19, 20, 21, 25, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 43, 46, 47, 48, 50, 51, 52, 55, 57, 59, 62, 71, 72, 74, 84, 85, 115, 117, 118, 119, 120, 121, 124, 130], "hold": [6, 8, 22, 27, 28, 31, 33, 50, 55, 58, 62, 64, 67, 74, 116, 133], "posit": [6, 7, 8, 10, 12, 16, 17, 18, 19, 21, 27, 28, 30, 31, 33, 35, 37, 38, 40, 43, 50, 51, 52, 57, 58, 59, 65, 66, 67, 68, 72, 78, 88, 114, 118, 121, 124, 133], "cut": [6, 8, 30, 31, 33, 40, 76, 82, 120, 133], "peculiar": 6, "addit": [6, 8, 10, 18, 25, 27, 33, 37, 43, 47, 50, 53, 54, 56, 58, 59, 62, 63, 67, 73, 74, 76, 78, 107, 113, 114, 115, 116, 117, 119, 120, 121, 124, 126, 129, 130, 131, 132], "sum": [6, 8, 9, 16, 18, 25, 27, 30, 33, 43, 47, 50, 52, 55, 58, 59, 62, 64, 67, 68, 70, 72, 78, 85, 87, 88, 94, 95, 110, 113, 117, 120, 121, 127, 133], "behaviour": [6, 88, 113, 119], "rule": [6, 8, 17, 18, 25, 27, 43, 45, 50, 51, 56, 57, 58, 62, 72, 98, 114, 116, 119, 130, 133], "circl": [6, 27, 35, 37, 39, 40, 41], "agre": [6, 8, 27, 33, 82, 84], "squar": [6, 10, 31, 40, 41, 42, 43, 46, 50, 51, 52, 55, 57, 59, 67, 72, 84, 85, 87, 91, 114, 117, 120, 121, 127, 128], "root": [6, 8, 10, 27, 32, 33, 42, 43, 50, 51, 52, 56, 62, 67, 76, 84, 85, 87, 88, 91, 105, 107, 109, 113, 120, 121, 128, 130, 134], "le": [6, 8, 10, 33, 67, 95], "els": [6, 18, 22, 25, 27, 31, 33, 35, 40, 41, 45, 50, 52, 55, 56, 58, 62, 66, 70, 72, 78, 81, 84, 113, 124], "end": [6, 10, 17, 22, 24, 25, 27, 31, 33, 37, 45, 50, 51, 52, 56, 57, 59, 62, 63, 67, 74, 78, 115, 125, 128], "omit": [6, 8, 18, 25, 27, 31, 43, 46, 50, 51, 70, 74, 78], "matter": [6, 16, 18, 30, 43], "final": [6, 7, 8, 10, 18, 25, 27, 33, 43, 45, 50, 52, 55, 58, 59, 62, 64, 86, 87, 94, 113, 114, 129], "suppos": [6, 8, 10, 18, 25, 27, 32, 56, 62], "introduc": [6, 8, 22, 25, 27, 33, 56, 59, 67, 88, 99, 110, 113, 115, 117, 127, 128], "actual": [6, 8, 16, 17, 24, 27, 33, 37, 43, 47, 50, 52, 56, 57, 58, 59, 62, 73, 76, 119], "canon": [6, 12, 16, 18, 22, 27, 28, 50, 52, 53, 58, 62, 72, 78, 103, 117, 130, 133], "setminu": [6, 10, 33], "l": [6, 7, 8, 10, 16, 17, 18, 25, 33, 37, 38, 43, 50, 51, 52, 56, 59, 62, 64, 67, 71, 72, 74, 78, 123], "Then": [6, 7, 8, 10, 22, 25, 27, 50, 57, 58, 59, 62, 117], "circ": [6, 41], "lift": [6, 10, 22, 31, 33, 84, 86], "princip": [6, 10, 27, 31, 33, 43, 50, 55], "throughout": [6, 45], "than": [6, 8, 10, 11, 13, 17, 18, 19, 25, 27, 30, 31, 32, 33, 34, 39, 40, 43, 45, 47, 50, 51, 52, 53, 55, 56, 58, 59, 62, 63, 64, 65, 67, 72, 73, 74, 76, 78, 82, 87, 95, 109, 114, 119, 124, 126, 127, 130, 131], "multipl": [6, 8, 10, 16, 18, 22, 25, 27, 30, 31, 33, 35, 39, 43, 47, 50, 51, 52, 53, 54, 55, 56, 58, 59, 62, 63, 68, 70, 72, 74, 76, 78, 107, 113, 114, 117, 118, 121, 125, 129, 130, 131, 134], "absorb": [6, 58, 62], "later": [6, 8, 10, 17, 27, 56, 58, 62, 76, 125], "done": [6, 10, 17, 19, 24, 27, 28, 30, 33, 36, 37, 50, 52, 54, 58, 59, 62, 65, 71, 73, 76, 114, 117, 118, 130], "_split_mul": 6, "assembl": 6, "tupl": [6, 7, 10, 17, 18, 25, 28, 31, 34, 38, 39, 40, 42, 43, 46, 50, 52, 53, 54, 56, 58, 59, 62, 63, 64, 65, 67, 68, 71, 72, 73, 74, 78, 79, 88, 93, 113, 121, 125, 129, 130, 132], "_mytyp": 6, "next": [6, 8, 10, 12, 16, 17, 18, 20, 21, 27, 31, 45, 52, 55, 56, 57, 59, 62, 76, 114, 115, 119, 120], "index": [6, 8, 10, 16, 17, 18, 22, 25, 27, 28, 29, 31, 33, 40, 42, 50, 52, 54, 55, 56, 68, 69, 70, 72, 73, 84, 85, 86, 117, 118, 119, 120, 121, 123, 127], "_create_lookup_t": 6, "hopefulli": 6, "yield": [6, 7, 10, 17, 27, 33, 52, 55, 58, 59, 76, 78, 88, 120, 132], "pattern": [6, 8, 27, 43, 50, 51, 58, 62, 89, 115, 116, 129], "match": [6, 17, 27, 38, 43, 50, 51, 58, 62, 63, 67, 74, 78, 85, 87, 89, 115, 116, 117, 119, 120, 121], "success": [6, 10, 17, 27, 33, 43, 52, 62, 67, 78, 115], "now": [6, 8, 10, 11, 27, 33, 36, 39, 40, 41, 50, 58, 59, 62, 68, 72, 73, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 99, 100, 102, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 128, 129, 133], "inequival": 6, "f_1": [6, 10, 28, 30, 55, 62], "f_2": [6, 8, 10, 30, 62], "minimis": [6, 55], "f_i": [6, 10, 25, 28, 50], "2x": [6, 7, 53, 58, 59, 94, 126], "_mul_as_two_part": 6, "recurs": [6, 7, 10, 27, 30, 43, 45, 52, 54, 55, 58, 66, 70, 76, 78, 85, 88, 116, 117, 120, 121, 129], "techniqu": [6, 21, 56, 58, 62], "essenti": [6, 8, 11, 12, 21, 31, 33], "write": [6, 8, 10, 16, 27, 43, 47, 56, 59, 62, 71, 73, 74, 114, 117, 129], "read": [6, 18, 31, 42, 56, 76, 123, 132], "off": [6, 27, 35, 50, 55, 56, 62, 82, 84, 107], "generalis": 6, "bx": [6, 10, 72], "twist": 6, "though": [6, 8, 27, 37, 42, 50, 52, 55, 58, 62, 63, 99, 125, 133], "grow": [6, 10, 22, 27, 52], "too": [6, 17, 18, 27, 31, 52, 58, 59, 62, 73, 84, 85, 87, 88, 133], "recognis": [6, 8, 58, 114], "analyt": [6, 30, 33, 62], "paramet": [6, 7, 10, 11, 17, 18, 22, 24, 25, 27, 28, 30, 33, 34, 35, 38, 39, 40, 41, 43, 44, 45, 46, 50, 52, 53, 54, 55, 56, 58, 59, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 76, 78, 79, 85, 88, 114, 117, 120, 121, 131], "deduc": [6, 8, 28, 72], "easi": [6, 7, 8, 15, 18, 27, 59, 62, 70, 71, 132], "subset": [6, 10, 12, 14, 17, 18, 23, 24, 27, 30, 31, 42, 56, 57, 78, 86, 115, 119, 121], "anywai": [6, 58, 62], "filter": [6, 10, 27, 55, 78, 115], "_rewrite_singl": 6, "_rewrite1": 6, "_rewrite2": 6, "respect": [6, 7, 10, 11, 17, 18, 21, 22, 24, 25, 27, 28, 31, 33, 37, 40, 41, 43, 50, 52, 54, 55, 58, 59, 62, 63, 65, 66, 68, 71, 72, 74, 82, 88, 113, 114, 116, 117, 118, 119, 125], "helper": [6, 8, 17, 21, 24, 27, 42, 44, 59, 62, 63, 73, 82, 85, 115, 118, 120, 121], "reduc": [6, 8, 10, 22, 27, 30, 31, 33, 40, 44, 50, 52, 55, 57, 58, 59, 61, 62, 63, 64, 78, 82, 84, 113, 116, 118, 119, 121, 123, 130, 133], "expon": [6, 7, 27, 31, 43, 52, 55, 56, 58, 62, 70, 76, 78, 87, 115, 120, 131, 133], "uniti": [6, 31, 33, 88, 121], "_rewrite_saxena_1": 6, "_rewrite_saxena": 6, "go": [6, 7, 8, 17, 31, 51, 62, 107, 120, 126, 128], "through": [6, 8, 10, 17, 18, 20, 25, 27, 30, 33, 35, 36, 37, 38, 40, 56, 57, 58, 62, 67, 68, 73, 78, 94, 107, 115, 117, 119, 129], "under": [6, 8, 17, 22, 24, 33, 43, 50, 55, 56, 57, 59, 62, 65, 72, 110, 114], "remedi": 6, "clear": [6, 8, 10, 25, 27, 29, 55, 58, 72, 76, 126], "satisfi": [6, 10, 15, 17, 22, 27, 30, 33, 45, 50, 56, 59, 62, 63, 65, 66, 72, 121], "meijerg": [6, 33, 43, 67, 114, 116, 118, 121, 133], "get_period": [6, 33], "discov": [6, 70], "principal_branch": [6, 27, 32], "period": [6, 27, 31, 52], "py": [6, 8, 27, 31, 36, 50, 56, 62, 63, 72, 84, 85, 92, 108, 110, 112, 115, 118, 120, 121], "exploit": [6, 51, 73], "inform": [6, 8, 10, 17, 18, 24, 27, 30, 33, 37, 43, 50, 56, 59, 60, 67, 70, 71, 74, 76, 111, 115, 116, 119, 120, 123], "transpar": [6, 56], "section": [6, 7, 8, 9, 10, 18, 25, 27, 33, 46, 56, 62, 76, 78, 83, 125, 126, 134], "he": [6, 10, 30, 123], "prove": [6, 27, 43, 46, 48, 50, 52, 115, 116, 126], "literatur": 6, "stade": 6, "g_": [6, 17, 24, 25, 33, 59], "matrix": [6, 8, 10, 16, 18, 27, 28, 33, 39, 42, 48, 49, 51, 56, 58, 59, 62, 65, 68, 70, 71, 72, 73, 74, 79, 84, 85, 95, 104, 110, 114, 115, 116, 117, 118, 119, 120, 121, 128, 130], "a_1": [6, 8, 10, 17, 33, 50, 59, 62], "ldot": [6, 7, 8, 10, 11, 17, 27, 29, 30, 33, 52, 56, 59, 68, 120], "a_p": [6, 8, 33], "b_1": [6, 8, 17, 24, 33, 59, 62], "b_q": [6, 8, 33], "eta": [6, 33, 56, 62, 63], "frac": [6, 7, 8, 10, 11, 25, 27, 28, 30, 31, 33, 43, 52, 56, 59, 62, 63, 67, 68, 125, 128, 132], "prod_": [6, 8, 10, 33, 52], "j": [6, 8, 10, 17, 18, 22, 24, 25, 27, 28, 29, 30, 33, 46, 47, 50, 51, 52, 58, 59, 68, 70, 71, 72, 73, 78, 114, 123, 130], "b_j": [6, 8, 22, 24, 33], "a_j": [6, 8, 33], "c_1": [6, 7, 8, 62], "c_u": 6, "d_1": [6, 62, 67], "d_v": 6, "sigma": [6, 56, 62, 67], "omega": [6, 7, 17, 52, 56, 67], "a_n": [6, 10, 22, 33, 59, 62], "a_": [6, 8, 22, 25, 27, 33, 59, 62, 68, 117], "b_m": [6, 33], "b_": [6, 8, 17, 22, 24, 27, 30, 33, 59, 68], "interest": [6, 8, 10, 22, 28, 30, 50, 52, 55, 58, 59, 73, 74, 78, 115, 116, 133], "what": [6, 8, 10, 18, 20, 25, 27, 29, 30, 31, 36, 50, 52, 58, 59, 62, 71, 74, 78, 82, 87, 115, 126, 127, 129, 133], "amalgam": 6, "found": [6, 8, 10, 17, 18, 20, 22, 24, 27, 28, 36, 52, 56, 58, 59, 62, 64, 70, 110, 115, 116, 119, 121, 134], "appm90": [6, 8, 123], "luk69": [6, 8, 123], "let": [6, 7, 8, 10, 22, 27, 50, 51, 53, 56, 58, 59, 62, 64, 72, 73, 107, 113, 114, 118, 121, 124, 126, 128, 129, 131, 132, 133], "error": [6, 9, 10, 16, 18, 25, 27, 32, 35, 41, 43, 50, 51, 52, 56, 58, 62, 63, 71, 73, 74, 78, 79, 82, 84, 85, 86, 87, 88, 110, 114, 115, 116, 120, 121, 124], "relat": [6, 7, 8, 10, 11, 12, 17, 24, 30, 31, 32, 42, 43, 45, 55, 58, 59, 62, 67, 78, 85, 86, 87, 113, 114, 115, 118, 119, 120, 121], "notat": [6, 15, 18, 19, 25, 27, 30, 58, 71, 72, 113, 120, 125], "xi": [6, 56, 62, 63], "delta": [6, 12, 20, 30, 33, 56, 59, 72, 96, 117], "c_3": [6, 62], "c_4": [6, 62], "five": [6, 16, 59, 117], "separ": [6, 15, 27, 33, 43, 50, 54, 55, 56, 58, 59, 63, 70, 72, 76, 78, 87, 88, 110, 115, 116, 126], "infin": [6, 7, 10, 11, 30, 31, 32, 33, 38, 43, 55, 57, 58, 62, 67, 84, 87, 115, 117, 119, 120, 121], "larg": [6, 7, 8, 10, 18, 27, 35, 43, 51, 52, 55, 56, 58, 67, 71, 73, 78, 120, 133], "valu": [6, 10, 11, 12, 16, 17, 18, 22, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 43, 45, 46, 48, 50, 51, 52, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 70, 72, 74, 75, 78, 79, 85, 87, 88, 114, 117, 120, 121, 124, 132, 133], "wherea": [6, 10, 35, 40, 45, 56, 78], "epsilon": [6, 25, 27, 33, 43, 56, 72], "specifi": [6, 8, 10, 11, 21, 25, 27, 28, 29, 31, 34, 38, 40, 43, 50, 51, 52, 54, 55, 56, 58, 62, 63, 65, 68, 71, 72, 73, 74, 78, 79, 84, 85, 88, 91, 115, 119, 121, 131, 133], "distinct": [6, 8, 17, 30, 38, 50, 52, 56, 62], "immedi": [6, 17, 27, 33, 45, 73], "visibl": 6, "harder": 6, "fulfil": 6, "wedg": [6, 28], "vee": 6, "neg": [6, 8, 10, 21, 27, 30, 31, 33, 35, 37, 38, 40, 43, 50, 51, 52, 55, 56, 57, 58, 59, 62, 67, 84, 86, 103, 113, 118, 120, 121], "ne": [6, 8, 10, 62, 84, 95, 121, 123], "2k": [6, 27, 52, 59, 62], "lceil": 6, "rceil": 6, "sum_": [6, 8, 10, 25, 27, 30, 33, 43, 52, 62, 67], "And": [6, 25, 27, 45, 54, 58, 59, 67, 114, 115, 120, 121, 124], "rho": [6, 50, 52, 56], "d_j": [6, 8], "c_j": [6, 8], "mu": [6, 10, 33, 52, 56, 67, 72], "phi": [6, 27, 30, 33, 50, 52, 56, 62, 120], "psi": [6, 33, 56, 72], "lambda_c": 6, "lambda_": 6, "s0": [6, 25], "c_2": [6, 62], "sign": [6, 7, 10, 11, 22, 27, 30, 32, 35, 43, 56, 58, 59, 66, 78, 85, 86, 113, 121], "z_0": [6, 11, 58], "z_1": [6, 62], "a_i": [6, 8], "notin": [6, 57], "c_i": [6, 8, 27, 62], "b_i": [6, 8, 17, 22, 24], "c_5": 6, "d_i": [6, 22], "c_6": 6, "c_7": 6, "c_8": 6, "lvert": 6, "rvert": 6, "c_9": 6, "c_": [6, 10, 52], "16": [6, 8, 10, 17, 18, 21, 27, 30, 33, 34, 43, 50, 52, 55, 56, 57, 58, 59, 67, 68, 78, 113, 115, 120, 123, 131], "establish": [6, 8, 22], "enumer": [6, 8, 12, 16, 18, 21, 32, 42, 52, 76, 78, 84, 118], "neq": [6, 10, 29, 59, 62], "leq": [6, 10, 17, 25, 33, 59, 67], "fairli": [6, 27, 33], "versatil": 6, "bz": [6, 59, 72], "ask": [6, 27, 37, 57, 78], "zt": [6, 33], "appear": [6, 10, 12, 16, 17, 27, 30, 34, 35, 38, 40, 43, 50, 54, 55, 56, 58, 62, 63, 67, 70, 72, 78, 79, 87], "int_l": [6, 8, 33], "interchang": [6, 25, 62], "inner": [6, 25, 113, 114, 117], "seen": [6, 10, 18, 25, 62, 132], "cauchi": [6, 33, 67], "jordan": [6, 50, 62, 120, 130], "lemma": 6, "deform": 6, "contour": [6, 8, 33, 35, 54], "encircl": 6, "sens": [6, 8, 10, 27, 28, 30, 58, 74, 124, 126, 133], "greater": [6, 10, 11, 18, 27, 31, 52, 58, 62, 65, 67, 76, 78], "onto": [6, 38, 50], "axi": [6, 19, 30, 31, 35, 36, 38, 40, 50, 54], "sine": [6, 31, 33, 43], "entir": [6, 17, 27, 33, 57, 67, 71, 117], "appeal": 6, "henc": [6, 8, 10, 17, 28, 33, 37, 39, 45, 52, 54, 56, 59, 63, 76], "fox": 6, "obstacl": 6, "absolut": [6, 8, 27, 31, 43, 58, 87], "identif": 6, "pole": [6, 8, 27, 33, 43, 121], "newli": [6, 8, 27], "properli": [6, 31, 37, 56, 62, 74, 78, 120], "remain": [6, 8, 17, 18, 20, 22, 39, 46, 52, 53, 55, 62, 63, 72, 76, 78, 113, 115, 120, 121, 124, 128], "observ": [6, 8, 22, 62], "unbranch": [6, 33], "long": [6, 8, 18, 27, 38, 43, 50, 52, 56, 65, 73, 78, 85, 87, 88, 120, 121], "o": [6, 10, 11, 17, 18, 24, 27, 31, 33, 35, 36, 38, 39, 40, 52, 62, 71, 78, 84, 87, 113, 120, 123, 125], "latter": [6, 8, 17, 27, 30, 33, 52, 56, 59, 72, 74, 78, 79, 117], "along": [6, 17, 27, 28, 33, 35, 47, 50, 51, 54, 59, 78], "ge": [6, 8, 10, 31, 50, 52, 78, 95], "domin": [6, 7], "although": [6, 10, 18, 27, 37, 43, 50, 52, 58, 59, 78, 79, 115, 133], "investig": [6, 8, 18, 78], "lim_": [6, 7, 31, 33, 125, 128], "iT": 6, "tau": [6, 56, 62], "sim": [6, 17, 22, 24, 115], "asymptot": [6, 27, 120, 125], "equival": [6, 17, 22, 27, 31, 33, 42, 43, 46, 48, 52, 53, 55, 58, 62, 64, 68, 71, 72, 76, 78, 93, 119], "omega_": 6, "im": [6, 27, 32, 48, 50, 56, 82, 84, 85, 121, 133], "same": [6, 7, 8, 10, 16, 17, 18, 22, 25, 27, 28, 30, 33, 38, 39, 40, 41, 43, 45, 46, 50, 51, 52, 54, 55, 56, 57, 58, 59, 62, 63, 67, 72, 74, 76, 78, 79, 85, 87, 99, 114, 115, 118, 121, 124, 125, 126, 129, 130, 132, 133], "variou": [6, 8, 10, 12, 17, 27, 29, 30, 43, 45, 55, 59, 62, 63, 74, 83, 88, 113, 114, 115, 116, 131, 133], "disguis": 6, "current": [6, 8, 10, 12, 17, 20, 21, 23, 24, 27, 28, 31, 33, 35, 37, 39, 43, 50, 52, 56, 58, 59, 62, 63, 64, 72, 73, 74, 76, 115, 117], "entri": [6, 8, 10, 18, 24, 49, 51, 79, 115], "correspond": [6, 8, 10, 11, 17, 18, 20, 21, 22, 25, 27, 28, 40, 46, 48, 50, 52, 54, 56, 58, 59, 62, 63, 67, 70, 71, 72, 74, 76, 114], "shrink": [6, 36], "futur": [6, 42, 54, 58, 71, 115, 119], "improv": [6, 10, 55, 62, 71, 88, 89, 93, 94, 95, 96, 100, 104, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 125, 133], "Of": [6, 25, 50, 78, 120, 121], "cours": [6, 8, 12, 25, 33, 50, 52], "whenev": [6, 8, 24, 56, 67, 125], "middl": [6, 8, 33, 40, 50, 51, 85, 89], "exp_": [6, 8], "chi": [6, 8, 33, 56, 67, 72, 115], "ci": [6, 33, 85, 115], "ei": [6, 8, 33, 59, 62, 72, 115, 117], "shi": [6, 8, 33, 115], "si": [6, 33, 115], "i_": [6, 8, 33, 67], "j_": [6, 8, 30, 33, 43], "k_": [6, 33], "y_": [6, 33], "cosh": [6, 8, 27, 32, 33, 56, 58, 87, 133], "erf": [6, 8, 33, 43, 67, 88, 116, 120], "erfc": [6, 33, 88], "erfi": [6, 33, 121], "gru96": [7, 27, 123], "time": [7, 8, 10, 17, 18, 22, 27, 30, 33, 35, 50, 52, 56, 58, 62, 78, 87, 106, 107, 118, 121, 125, 130], "still": [7, 8, 10, 18, 25, 27, 33, 37, 43, 50, 56, 58, 62, 71, 72, 78, 109, 113, 114, 115, 117, 119, 120], "how": [7, 8, 10, 18, 27, 32, 33, 37, 42, 45, 46, 50, 51, 53, 54, 56, 58, 59, 62, 63, 73, 74, 78, 88, 121, 125, 128, 129, 132, 133], "implement": [7, 9, 10, 13, 17, 18, 23, 27, 30, 31, 32, 33, 36, 38, 42, 43, 45, 50, 52, 54, 55, 58, 59, 60, 62, 63, 64, 66, 67, 70, 71, 76, 77, 78, 79, 84, 85, 86, 87, 91, 93, 95, 96, 98, 101, 103, 105, 108, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 131, 133], "accord": [7, 10, 15, 17, 18, 22, 25, 27, 52, 54, 59, 72, 74, 78, 84], "vari": [7, 27, 40], "compar": [7, 10, 18, 23, 27, 31, 41, 45, 50, 58, 62, 71, 78, 87, 88, 89, 94, 95, 107, 121], "lim": [7, 11, 27, 125], "limits_": [7, 11, 25, 27], "sai": [7, 8, 10, 25, 27, 59, 62, 64, 67, 128, 131], "succ": [7, 67], "iff": [7, 8, 10, 11, 18, 39, 45, 50, 59], "asymp": 7, "42": [7, 16, 27, 30, 46, 48, 50, 51, 52, 59, 120], "strategi": [7, 8, 27, 43, 50, 58, 63, 86, 120, 123], "subexpress": [7, 27, 50, 51, 55, 56, 58, 74, 85, 105, 117, 133], "mrv": [7, 27, 88], "item": [7, 16, 18, 26, 27, 30, 41, 50, 52, 55, 56, 57, 62, 63, 67, 73, 76, 78], "belong": [7, 10, 11, 17, 22, 27, 38, 50, 54, 55, 57, 59, 72], "choos": [7, 8, 10, 22, 27, 28, 30, 50, 52, 55, 62, 63, 133], "tend": [7, 8, 10, 27, 117], "independ": [7, 8, 27, 28, 33, 41, 43, 50, 55, 58, 59, 62, 63, 64, 65, 67, 72, 73, 78, 84, 116, 117, 123, 129], "lead": [7, 10, 25, 27, 35, 43, 52, 55, 58, 62, 74, 81, 86, 87, 116, 121, 131], "c_0": [7, 27], "e_0": [7, 27], "e_1": 7, "e_2": 7, "exposit": 7, "gloss": 7, "address": [7, 56, 84, 85, 86, 87, 88, 120, 121], "thesi": [7, 17, 123], "termin": [7, 17, 27, 31, 52, 56, 86, 87, 100, 132], "pp": [7, 10, 17, 18, 24, 30, 31, 43, 50, 62, 63], "52": [7, 16, 30, 59, 62, 78, 125], "60": [7, 17, 19, 27, 30, 50, 52, 59, 62, 78, 120], "between": [7, 10, 17, 18, 20, 24, 27, 28, 30, 35, 37, 38, 39, 40, 43, 47, 48, 50, 52, 53, 54, 55, 56, 58, 62, 63, 67, 68, 78, 79, 85, 113, 114, 115, 117, 121, 126], "functon": 7, "leadterm": 7, "pair": [7, 8, 10, 11, 17, 18, 27, 31, 37, 46, 48, 50, 52, 55, 57, 58, 59, 62, 67, 74, 84, 117, 118, 120, 130], "c0": [7, 62, 64, 134], "e0": 7, "limitinf": 7, "calcul": [7, 10, 18, 24, 27, 28, 33, 35, 37, 40, 41, 43, 46, 48, 50, 52, 54, 55, 62, 70, 73, 74, 78, 79, 85, 87, 88, 95, 105, 106, 113, 115, 116, 120, 121, 130], "place": [7, 11, 18, 19, 27, 40, 46, 51, 58, 76, 78, 91, 115, 124, 130], "rewritten": [7, 33, 58, 62, 78, 91, 114, 116, 117], "signinf": 7, "minu": [7, 27, 56, 113], "constantli": 7, "page": [8, 10, 30, 50, 52, 59, 83, 100, 105], "symplifi": [8, 58], "base": [8, 10, 16, 17, 22, 23, 24, 27, 29, 30, 31, 32, 33, 36, 38, 40, 42, 43, 44, 46, 47, 50, 51, 52, 54, 55, 56, 57, 58, 59, 62, 67, 70, 71, 72, 73, 74, 75, 76, 78, 84, 85, 88, 108, 113, 114, 115, 117, 118, 121, 123, 127, 133], "paper": [8, 52, 55, 59, 123], "roa96": [8, 123], "roa97": [8, 123], "recal": [8, 10, 126], "_pf_q": [8, 33], "_n": [8, 30, 33, 43], "turn": [8, 27, 31, 44, 48, 56, 57, 58, 59, 62, 72, 78, 87, 117, 128], "p_q": 8, "sequenc": [8, 11, 12, 14, 17, 18, 22, 24, 25, 27, 30, 33, 35, 38, 39, 40, 41, 42, 50, 52, 56, 58, 59, 62, 63, 72, 73, 74, 78, 80, 102, 117, 123, 124, 133], "convert": [8, 10, 12, 18, 22, 27, 29, 30, 33, 39, 41, 45, 50, 51, 52, 53, 55, 56, 58, 59, 62, 63, 68, 71, 72, 73, 78, 84, 87, 101, 106, 113, 115, 119, 120, 121, 124], "a_r": 8, "reachabl": 8, "subscript": [8, 18, 56, 59, 78, 130], "length": [8, 12, 17, 18, 20, 24, 25, 27, 30, 31, 33, 38, 39, 40, 41, 50, 52, 55, 56, 58, 62, 67, 73, 78, 115], "conjunct": [8, 45, 54, 133], "uppercas": 8, "chosen": [8, 10, 17, 18, 28, 52, 62, 67], "inequ": [8, 10, 27, 42, 54, 57, 60, 65, 86, 87, 113, 118, 119, 120, 121], "dz": 8, "_p": [8, 10, 58], "f_q": 8, "atop": [8, 30, 33], "e_i": [8, 27, 28, 72], "similarli": [8, 10, 22, 27, 37, 57, 62, 95, 114, 129, 130], "upper": [8, 10, 25, 33, 34, 50, 59, 71], "lower": [8, 10, 17, 18, 25, 27, 28, 33, 34, 50, 58, 62, 71, 72, 76, 78], "a_2": [8, 17, 50, 59, 62], "arriv": [8, 28, 58, 62], "multipli": [8, 10, 17, 27, 36, 39, 50, 51, 52, 56, 59, 62, 78, 87, 107, 114, 129], "suitabl": [8, 10, 43, 56, 59, 62, 68], "undo": 8, "whenc": 8, "invers": [8, 9, 17, 18, 27, 28, 29, 32, 33, 42, 43, 47, 50, 51, 52, 55, 56, 67, 115, 116, 120, 126, 130], "commut": [8, 10, 17, 18, 22, 27, 28, 43, 55, 72, 113, 114, 115, 117, 119, 120, 121, 123, 129, 131], "half": [8, 10, 29, 33, 40, 43, 52, 53, 55, 58, 67], "nice": [8, 27, 28, 32, 37, 50, 56, 100, 102, 103, 108], "had": [8, 27, 38, 52, 55, 56, 62, 75, 116], "infer": [8, 42, 43, 62, 73, 116, 118], "un": [8, 120], "analysi": [8, 17, 27, 31, 119], "game": 8, "quit": [8, 33, 50, 52, 64, 65, 126], "trivial": [8, 10, 11, 17, 22, 25, 27, 45, 52, 59, 62, 70, 87, 120, 121], "f_": [8, 10, 27, 30, 33, 43, 62], "remark": [8, 10, 62], "p_0": [8, 17, 22, 59], "p_1": [8, 17, 22, 52, 59], "degre": [8, 10, 17, 24, 25, 33, 40, 50, 55, 58, 59, 62, 64, 67, 84, 88, 115, 121, 131], "p_2": [8, 17, 52], "c_r": 8, "d_": [8, 22], "databas": 8, "twofold": 8, "firstli": 8, "easier": [8, 27, 74, 119, 124], "secondli": 8, "non": [8, 10, 19, 27, 30, 31, 33, 35, 41, 43, 45, 50, 51, 55, 57, 58, 59, 62, 65, 67, 68, 70, 71, 72, 74, 78, 84, 86, 87, 94, 113, 114, 117, 120, 121, 123, 129, 131], "treat": [8, 10, 24, 25, 27, 30, 39, 40, 50, 53, 55, 58, 70, 73, 76, 115, 124], "incongru": 8, "mod": [8, 10, 29, 30, 31, 42, 50, 52, 55, 59, 115, 120, 121], "congruent": [8, 59], "down": [8, 47, 57, 58, 62, 76, 117, 133], "arbitrarili": [8, 10, 27, 52, 62, 63, 67, 119], "less": [8, 10, 18, 25, 27, 30, 31, 33, 40, 50, 52, 55, 58, 59, 62, 64, 74, 112, 133], "bigger": [8, 27, 30, 133], "wlog": [8, 10], "ever": [8, 62, 74], "undefin": [8, 27, 31, 32, 33, 53, 84, 88, 134], "smaller": [8, 10, 17, 18, 27, 33, 47, 52, 64, 78, 113, 114, 115, 124, 131, 133], "associ": [8, 10, 24, 27, 29, 33, 59, 72, 87, 118], "invari": [8, 22, 55, 62], "alpha_r": 8, "equiv": [8, 59], "pmod": [8, 50], "beta_r": 8, "symmetr": [8, 10, 15, 17, 18, 22, 29, 40, 50, 51, 52, 55, 57, 72, 84, 113, 116], "blindli": 8, "messi": 8, "contigu": [8, 27, 74], "2n": [8, 18, 25, 30, 33, 43], "undesir": [8, 27, 120], "max": [8, 18, 32, 50, 52, 78, 84, 85, 113, 121], "basi": [8, 9, 28, 47, 50, 55, 58, 64, 68, 72, 78, 86, 114, 115, 117, 120, 121], "store": [8, 17, 27, 47, 51, 52, 68, 70, 71, 72, 74, 76, 78, 129], "particularli": [8, 50, 133], "_r": 8, "hint": [8, 11, 12, 27, 31, 43, 50, 52, 55, 60], "bulk": 8, "few": [8, 18, 43, 52, 56, 62, 67, 74, 78], "trick": [8, 22, 72], "extens": [8, 10, 17, 27, 29, 31, 37, 50, 55, 56, 58, 62, 74, 84, 85, 86, 88, 113, 115, 116, 121, 123, 127, 131], "slater": [8, 33], "theorem": [8, 9, 10, 11, 15, 33, 42, 43, 52, 58, 59, 113], "residu": [8, 11, 22, 52, 87, 113], "confluent": [8, 33], "repres": [8, 9, 10, 11, 12, 16, 17, 18, 19, 21, 22, 25, 27, 28, 29, 30, 31, 32, 33, 36, 39, 40, 41, 43, 45, 47, 50, 51, 54, 55, 56, 57, 58, 59, 62, 67, 70, 71, 72, 74, 76, 78, 95, 114, 115, 117, 119, 124, 125, 126, 128, 129, 134], "far": [8, 56, 79], "plu": [8, 25, 93], "why": [8, 78, 120, 121, 133], "enclos": [8, 35, 36, 40, 56, 72, 121], "doubl": [8, 22, 27, 32, 50, 56, 74, 121, 133], "quotient": [8, 10, 25, 29, 31, 52, 55, 58, 62, 115, 119], "empti": [8, 10, 17, 21, 25, 27, 37, 39, 40, 41, 43, 50, 51, 52, 56, 57, 64, 65, 74, 78, 81, 85, 87, 115, 120, 121, 129, 134], "k_1": [8, 52, 62], "k_u": 8, "k_i": [8, 52], "l_1": [8, 30, 72], "l_v": 8, "l_i": 8, "k_j": 8, "c_w": 8, "exhaust": [8, 27, 127], "congruenc": [8, 17, 27, 59, 115], "claim": 8, "f_j": 8, "r_j": 8, "mostli": [8, 27, 31, 56, 65, 132], "again": [8, 27, 33, 39, 62, 98, 99, 126, 133], "l_u": 8, "res_": 8, "delta_i": 8, "_t": [8, 43], "align": [8, 50, 56, 85], "design": [8, 50, 56, 62, 113, 123, 132], "etc": [8, 18, 22, 27, 30, 31, 49, 52, 54, 56, 57, 58, 59, 67, 70, 73, 74, 78, 113, 114, 115, 120, 131], "straightforward": [8, 17], "At": [8, 22, 27, 31, 33, 38, 52], "top": [8, 27, 40, 41, 56, 62, 74, 115, 120, 121], "add_formula": 8, "nest": [8, 27, 28, 33, 46, 51, 56, 58, 68, 70, 78, 79, 87, 117], "ap": [8, 33, 37], "bq": [8, 33], "addb": 8, "dummi": [8, 22, 25, 43, 50, 55, 58, 62, 70, 72, 74, 78, 79, 88, 94, 116, 120], "declar": [8, 38, 50, 56, 62, 63, 67, 71, 74, 124], "hyper": [8, 30, 33, 58, 64, 114, 133], "free": [8, 10, 22, 25, 27, 43, 50, 52, 54, 55, 56, 58, 59, 62, 65, 72, 78, 84, 87, 88, 120, 127], "sum_0": 8, "avail": [8, 17, 18, 25, 27, 29, 30, 33, 42, 43, 50, 55, 56, 57, 58, 59, 68, 71, 72, 78, 79, 100, 117, 119, 121, 132, 133], "test_hyperexpand": 8, "test_formula": 8, "presum": [8, 74], "enter": [8, 10, 18, 27, 30, 53], "probabl": [8, 17, 27, 30, 33, 37, 52, 56, 62, 67, 73, 79, 85, 120], "chanc": [8, 35, 67, 82, 126], "suboptim": 8, "output": [8, 27, 50, 52, 55, 56, 58, 59, 62, 64, 67, 71, 73, 74, 76, 78, 84, 85, 87, 108, 110, 117, 119, 121, 128, 130, 132, 133, 134], "hand": [8, 10, 18, 19, 27, 31, 33, 43, 45, 50, 52, 56, 74, 76, 91], "explan": [8, 37, 52, 71], "theoret": [8, 123], "difficult": [8, 27, 62, 63, 73, 85, 115], "explicit": [8, 18, 25, 27, 31, 40, 41, 52, 55, 63, 65, 76], "fresnel": [8, 32, 125], "obei": [8, 33, 56], "represent": [8, 10, 17, 20, 27, 33, 37, 45, 47, 51, 52, 54, 55, 56, 58, 59, 62, 71, 72, 84, 85, 86, 113, 114, 117, 119, 121, 123, 132], "cdot": [8, 10, 25, 50, 52, 62, 68, 120, 131], "lookup": [8, 9, 43, 50, 52, 84, 95], "bit": [8, 12, 45, 50, 52, 59], "mainli": [8, 17, 33, 50, 59, 62, 115, 116], "proce": [8, 10, 56], "naiv": [8, 17, 23, 27, 30, 64, 65, 72], "insid": [8, 17, 18, 23, 27, 35, 36, 40, 55, 56, 59, 67, 70, 72, 76, 117, 121, 130], "exp_polar": [8, 27, 32, 33, 121], "third": [8, 27, 33, 35, 55, 62, 78, 115, 123, 125], "fresnelc": [8, 33], "realli": [8, 27, 37, 58, 62, 73, 81, 117], "simplic": [8, 62], "earlier": [8, 58, 62, 114], "b_0": [8, 22, 30, 59], "_1": [8, 33, 50, 79], "mathbf": [8, 68], "imath": 8, "directli": [8, 17, 25, 27, 31, 36, 52, 55, 57, 58, 59, 63, 67, 73, 74, 76, 78, 95, 114, 116, 118, 119, 125], "b0": [8, 22, 33], "diff": [8, 10, 30, 31, 32, 33, 41, 46, 48, 50, 56, 62, 63, 65, 66, 68, 87, 107, 114, 121, 125, 128, 134], "prime": [8, 10, 17, 24, 25, 30, 33, 52, 55, 59, 67, 76, 84, 112, 131], "b1prime": 8, "32": [8, 31, 33, 35, 50, 52, 59], "b_2": [8, 17, 24, 62], "common": [8, 10, 17, 27, 31, 36, 42, 50, 52, 55, 56, 62, 67, 73, 74, 78, 85, 94, 105, 117, 121, 124, 128, 130, 131, 132, 133], "contrast": [8, 25, 27, 62], "obvious": [8, 17, 124, 133], "alreadi": [8, 10, 27, 28, 32, 34, 35, 38, 40, 42, 43, 50, 52, 58, 62, 67, 72, 94, 127, 132], "row": [8, 16, 18, 30, 46, 47, 50, 51, 52, 56, 79, 84, 118, 121, 130], "b1": [8, 17, 22], "b2": 8, "vital": 8, "taken": [8, 15, 24, 25, 27, 30, 31, 41, 43, 50, 51, 55, 71, 74, 78, 87, 122], "atanh": [8, 32], "asin": [8, 32, 33, 56, 87, 126], "polar": [8, 9, 28, 31, 33, 54, 58, 85], "knowledg": [8, 25, 62, 67], "api": [9, 10, 27, 37, 42, 54, 59, 77, 115, 119, 127], "anytim": 9, "anyon": 9, "spars": [9, 42, 49, 50, 68, 85, 86, 87, 88, 113, 120], "gr\u00f6bner": [9, 55, 113, 114, 115, 121, 123, 127], "field": [9, 28, 29, 42, 43, 59, 64, 72, 84, 85, 86, 87, 88, 113, 115, 117, 123, 131], "modular": [9, 29, 52, 86, 113, 114, 115, 117], "gcd": [9, 25, 27, 29, 52, 55, 58, 59, 84, 85, 87, 88, 113, 121, 123, 127], "tool": [9, 17, 42, 50, 55, 61, 73, 78, 119], "undocu": [9, 120], "confluenc": 9, "tabl": [9, 33, 43, 50, 52, 115, 116], "overview": 9, "argand": 9, "plane": [9, 27, 31, 33, 43, 88, 133], "mellin": [9, 33, 43, 115], "appli": [9, 10, 17, 18, 19, 24, 25, 27, 28, 31, 32, 39, 45, 46, 48, 50, 51, 52, 53, 54, 55, 58, 62, 63, 68, 70, 72, 78, 79, 86, 115, 117, 123, 133], "laplac": [9, 43, 67, 115, 120], "float": [9, 10, 31, 33, 35, 39, 41, 43, 44, 50, 51, 53, 54, 55, 58, 65, 82, 84, 85, 86, 88, 113, 115, 118, 120, 121, 124, 126], "accuraci": [9, 27, 55], "handl": [9, 11, 15, 18, 27, 43, 45, 49, 52, 55, 58, 64, 68, 70, 73, 78, 79, 84, 85, 94, 110, 113, 114, 116, 119, 120], "ufuncifi": [9, 73, 119], "ground": [10, 29, 50, 55, 84, 113], "decid": [10, 25, 27, 46, 48, 74], "ring": [10, 29, 50, 55, 84, 87, 115, 131], "perfectli": [10, 25, 27, 55], "legitim": 10, "uninterest": 10, "reli": [10, 56, 58, 114, 116], "encapsul": [10, 74], "unifi": [10, 27, 29, 55, 95, 108, 117, 120], "access": [10, 27, 33, 45, 47, 50, 58, 62, 68, 70, 72, 73, 74, 99, 107, 114, 116, 118, 119, 121, 124], "zz": [10, 27, 29, 43, 52, 55, 120, 130], "quo": [10, 29, 55, 113], "dens": [10, 42, 47, 49, 50, 51, 68, 86, 87, 113, 120], "infeas": [10, 55], "amount": [10, 27, 37], "storag": [10, 27, 50], "dictionari": [10, 16, 17, 18, 24, 27, 30, 40, 44, 51, 52, 53, 55, 56, 58, 59, 62, 63, 64, 65, 66, 67, 70, 76, 78, 79, 86, 130], "poli": [10, 25, 27, 29, 31, 33, 34, 40, 43, 55, 84, 85, 86, 87, 88, 94, 96, 105, 111, 113, 120, 121], "lexord": [10, 29, 55], "construct": [10, 27, 29, 31, 33, 35, 40, 47, 50, 55, 56, 59, 64, 67, 68, 71, 72, 74, 76, 113, 115, 119, 120, 121, 126, 130], "x_1": [10, 30, 50, 55, 59], "x_n": [10, 50, 55, 59], "str": [10, 18, 27, 34, 35, 38, 40, 41, 50, 52, 53, 54, 55, 56, 58, 62, 72, 73, 78, 79, 85, 121, 127], "coercibl": 10, "lex": [10, 55, 56, 78, 114, 131], "polyel": [10, 84, 85, 86, 87], "multivari": [10, 11, 27, 29, 55, 58, 84, 86, 87, 88, 89, 95, 109, 113, 131, 133], "mutabl": [10, 46, 47, 48, 50, 51, 56, 58, 68, 84, 120, 130], "until": [10, 18, 20, 27, 35, 52, 62, 119], "hash": [10, 58, 62, 74, 78, 87, 117, 133], "preserv": [10, 25, 27, 39, 55, 78], "plan": [10, 37, 114], "inplac": 10, "copi": [10, 18, 19, 27, 40, 46, 50, 56, 78, 81, 84, 114, 132], "p1": [10, 17, 22, 35, 37, 38, 39, 40, 41, 54, 68], "p2": [10, 17, 25, 35, 37, 38, 39, 40, 41, 54], "runtimeerror": [10, 85, 120, 121], "modifi": [10, 17, 33, 52, 53, 58, 65, 67, 76, 78, 79, 130], "polynomialr": [10, 29, 84, 85], "__add__": 10, "__eq__": [10, 17, 95, 121], "__getitem__": [10, 27, 46, 71, 86], "stand": [10, 72], "monomi": [10, 27, 42, 52, 56, 86, 131, 133], "is_monomi": [10, 85], "23": [10, 17, 18, 27, 31, 33, 50, 52, 55, 78, 120, 121], "__mul__": [10, 13, 17, 46, 50], "__pow__": 10, "none": [10, 11, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 78, 79, 82, 85, 86, 87, 115, 117, 118, 119, 120, 124, 130, 133], "rais": [10, 16, 18, 27, 28, 34, 35, 38, 39, 40, 41, 43, 50, 52, 55, 56, 58, 62, 63, 67, 70, 72, 74, 78, 84, 85, 87, 115, 117, 118, 120, 121, 130], "__rmul__": 10, "self": [10, 11, 17, 18, 23, 25, 27, 29, 32, 33, 34, 35, 36, 38, 39, 40, 43, 46, 50, 51, 55, 56, 57, 72, 119, 120], "__rsub__": 10, "substract": 10, "__sub__": 10, "__weakref__": 10, "weak": [10, 117], "compos": [10, 28, 47, 50, 55, 58, 84, 86, 114], "composit": [10, 16, 18, 29, 43, 52, 55, 84, 85, 86, 116], "content": [10, 27, 50, 55, 56, 74, 131], "shallow": 10, "main": [10, 27, 31, 50, 56, 62, 71, 73, 110, 115, 117, 119, 133, 134], "partial": [10, 17, 24, 28, 30, 31, 42, 52, 58, 62, 63, 66, 68, 98, 110, 113, 115, 116, 119, 121, 124, 125, 133], "discrimin": [10, 52, 55, 62, 111], "div": [10, 27, 29, 55, 56, 58, 87, 94, 113, 121, 131], "fv": 10, "divsor": 10, "qv": 10, "uniqu": [10, 20, 22, 27, 30, 33, 43, 50, 58, 59, 70, 74, 78, 131], "divisor": [10, 17, 27, 52, 55, 85, 131], "f1": [10, 17, 50, 55], "f2": [10, 27, 50, 55], "g1": [10, 13, 17, 50], "g2": [10, 13, 17, 50], "closhea15": [10, 55, 65, 123], "64": [10, 13, 58, 78], "gcdex": [10, 29, 55], "euclidean": [10, 38, 39, 52, 55, 131], "qq": [10, 25, 29, 43, 55, 84, 85, 88, 120], "leading_expv": 10, "leading_term": 10, "monic": [10, 25, 50, 55, 131], "divid": [10, 17, 27, 40, 50, 52, 55, 56, 62, 76, 86, 129, 131], "prem": [10, 87], "pseudo": [10, 18, 52], "knu85": [10, 123], "407": 10, "primit": [10, 17, 27, 29, 33, 52, 55, 56, 59, 87, 121, 123], "includepr": [10, 55], "54": [10, 27, 32, 78, 123], "729": [10, 84], "216": 10, "27": [10, 17, 21, 30, 52, 58, 84, 93], "tail_degre": [10, 86], "tail": [10, 12, 25, 27, 67], "total_degre": [10, 55], "total": [10, 16, 27, 30, 40, 46, 55, 58, 62, 70, 117, 133], "univar": [10, 29], "univarpolyel": [10, 86], "univari": [10, 25, 27, 29, 31, 43, 55, 59, 67, 85, 86, 106, 131], "decompos": [10, 17, 18, 24, 28, 31, 36, 52, 55], "decomposit": [10, 17, 24, 42, 50, 51, 98, 113, 116, 133], "characterist": [10, 28, 29, 50, 62, 64, 84, 85, 130], "f_n": [10, 25, 30, 33, 55], "homogen": [10, 50, 55, 59, 62, 63, 84, 86, 117, 119, 120], "unlik": [10, 27, 52, 59, 62, 76, 128, 129, 130], "t_n": [10, 33, 43], "t_m": 10, "chebyshev": [10, 27, 43, 55], "kl89": [10, 123], "half_gcdex": [10, 29, 55], "sturm": [10, 85], "dst88": [10, 123], "f_0": [10, 28, 30], "rem": [10, 29, 55, 113], "25": [10, 17, 18, 30, 33, 35, 39, 50, 51, 52, 55, 56, 59, 62, 63, 73, 94, 95], "2079": 10, "variant": [10, 62], "euclid": 10, "indetermin": [10, 27, 64], "qg": 10, "deg": [10, 29, 43, 131], "ident": [10, 17, 18, 24, 25, 27, 30, 31, 40, 46, 47, 50, 51, 55, 56, 58, 62, 70, 72, 78, 84, 114, 116, 120, 123, 130, 133], "ideal": [10, 55, 121, 123], "greatest": [10, 35, 52, 55, 113, 131], "strictli": [10, 27, 33, 50, 52, 58, 118], "decreas": [10, 27, 114], "f_k": [10, 25], "alon": [10, 58, 62, 64, 71, 78, 128], "analogi": 10, "natur": [10, 17, 27, 31, 48, 52, 57, 67, 78, 85, 115], "uf": 10, "vg": 10, "qquad": [10, 31], "analog": [10, 19, 30, 68], "Be": [10, 27, 50, 62, 79, 84], "zout": 10, "fast": [10, 27, 49, 50, 51, 52, 55, 62, 66, 76, 78, 79, 89, 94, 107, 109, 118, 123], "reduct": [10, 59, 113, 120], "extract": [10, 27, 43, 50, 51, 52, 55, 67, 74, 115], "cf": [10, 52], "coprim": [10, 43, 52], "exceedingli": 10, "effort": 10, "besid": [10, 64], "exclud": [10, 25, 27, 55, 62, 65, 78, 121], "collin": [10, 113, 123], "col67": [10, 123], "realiz": [10, 13, 17, 52, 67], "size": [10, 12, 16, 17, 18, 19, 20, 21, 22, 27, 30, 50, 51, 52, 58, 59, 62, 78, 87, 118, 119], "linearli": [10, 33, 50, 62, 64, 72], "subdomain": 10, "growth": [10, 16, 52, 117, 125], "2l": 10, "sylvest": [10, 52], "Its": [10, 40, 56, 130], "2j": 10, "submatrix": [10, 50, 51, 118], "s_j": 10, "scalar": [10, 27, 28, 39, 46, 47, 50, 51, 68, 72, 74, 115, 116, 117, 121], "briefli": [10, 99], "guarante": [10, 17, 18, 27, 37, 50, 62, 78, 82, 117, 133], "remainin": 10, "subdetermin": 10, "regardless": [10, 18, 25, 43, 52, 57, 58, 78, 88], "n_0": 10, "n_1": 10, "n_2": 10, "n_k": 10, "n_i": [10, 22, 64], "n_": [10, 59], "abnorm": 10, "s_": [10, 22], "former": [10, 27, 30, 55, 59, 78, 87, 88, 117, 121], "gamma_i": 10, "brown": [10, 123], "traub": [10, 123], "bt71": [10, 123], "Their": [10, 27, 33, 54, 123], "exclus": [10, 25, 27, 45], "conjectur": [10, 52], "subsequ": [10, 27, 55, 76, 78], "justifi": 10, "bro78": [10, 123], "who": [10, 56, 127], "implic": [10, 45], "discoveri": 10, "vanish": [10, 50, 55, 62], "sensit": [10, 27, 58], "previou": [10, 12, 16, 17, 18, 21, 27, 43, 79, 94, 95, 107, 114, 117, 119, 129], "groebnertool": 10, "buchberg": [10, 55, 123, 131], "li": [10, 33, 40, 116], "solv": [10, 12, 22, 25, 28, 42, 50, 51, 55, 58, 59, 60, 61, 62, 63, 64, 65, 84, 85, 86, 87, 88, 106, 107, 111, 113, 115, 116, 118, 120, 121, 123, 128, 134], "lexicograph": [10, 17, 18, 21, 22, 27, 55, 78, 113], "elimin": [10, 22, 42, 50, 51, 72, 74, 86, 105, 117, 133], "dimension": [10, 12, 37, 38, 39, 40, 50, 54, 55, 65, 72, 73, 117, 119, 121, 123, 132], "nkbg03": [10, 123], "gmn": [10, 123], "91": [10, 120, 123], "alw95": [10, 123], "bw93": [10, 123], "232": 10, "cp_kei": 10, "kei": [10, 16, 17, 18, 26, 27, 30, 40, 46, 50, 52, 55, 56, 58, 59, 62, 63, 67, 70, 76, 78, 117, 130], "critic": 10, "critical_pair": 10, "label": [10, 20, 22, 27, 35, 54, 56, 58, 71, 72, 119], "um": 10, "vm": 10, "sake": [10, 30, 59], "expens": [10, 46, 48, 62, 63, 73, 78, 95, 130], "lightweight": 10, "f5_reduc": 10, "f5": [10, 123], "contin": 10, "lt_h": 10, "lt_f": 10, "lbp": 10, "sig": 10, "polyn": 10, "f5b": [10, 55], "yao": [10, 123], "sun": [10, 123], "dingkang": [10, 123], "wang": [10, 113, 123], "adjoin": [10, 17], "signatur": [10, 18, 27, 74, 118], "path": [10, 17, 40, 58, 62, 73, 76, 91, 94, 107], "discard": 10, "redund": [10, 17, 24, 45, 74, 113, 120, 121], "sw10": [10, 123], "203": [10, 16, 30], "groebner": [10, 55, 58, 84, 86, 120, 131], "seq": [10, 17, 27, 50, 78], "wrapper": [10, 18, 27, 33, 43, 62, 73, 78, 113], "groebner_gcd": 10, "groebner_lcm": 10, "lcm": [10, 27, 29, 52, 55, 113, 121, 127], "intersect": [10, 17, 35, 36, 38, 39, 40, 41, 42, 57, 85, 110, 114, 115, 118, 119, 121], "approach": [10, 11, 27, 35, 43, 50, 63, 64, 73, 76, 78, 113, 123], "unrel": 10, "doesn": [10, 17, 24, 25, 27, 35, 36, 46, 50, 52, 58, 62, 65, 66, 78, 81, 84, 85, 86, 87, 119, 120, 121, 124, 131, 133], "is_groebn": 10, "is_minim": 10, "is_rewritable_or_compar": 10, "num": [10, 17, 27, 58, 62, 76], "thatsign": 10, "lbp_cmp": 10, "lbp_kei": 10, "lbp_mul_term": 10, "cx": [10, 62], "lbp_sub": 10, "maximum": [10, 17, 18, 27, 31, 50, 52, 54, 55, 56, 58, 62, 76, 78, 114, 120, 121], "matrix_fglm": 10, "o_to": 10, "o_from": 10, "faugereglm93": [10, 55, 123], "red_groebn": 10, "select": [10, 11, 12, 17, 18, 25, 27, 34, 45, 46, 50, 55, 58, 84, 118, 123], "s_poli": 10, "cp": [10, 18], "sig_cmp": 10, "sig_kei": 10, "sig_mult": 10, "spoli": 10, "lm": [10, 55], "numberfield": [10, 55, 121], "minpoly_groebn": [10, 84], "ex": [10, 15, 29, 55, 72, 75, 84, 121], "minimal_polynomi": [10, 55, 84, 85, 86, 87, 88, 116, 117, 121], "al94": [10, 123], "factorization_alg_field": 10, "_alpha_to_z": 10, "x_0": [10, 11, 59, 62, 67], "_denomin": 10, "den": [10, 58], "smallest": [10, 20, 29, 31, 50, 52, 78], "_diophantin": 10, "minpoli": [10, 84, 87, 88], "diophantin": [10, 42, 52, 60, 85, 117, 120, 121], "z_p": 10, "_diophantine_univari": 10, "h_f": 10, "lbrace": 10, "rbrace": 10, "_distinct_prime_divisor": 10, "pairwis": [10, 30, 50, 52, 59, 64], "jm09": [10, 123], "_div": 10, "_extended_euclidean_algorithm": 10, "sf": [10, 86], "tg": 10, "_factor": 10, "save": [10, 27, 52, 54, 65, 76, 98], "squarefre": [10, 52], "_hensel_lift": 10, "lc": [10, 55], "parallel": [10, 35, 38, 43, 50, 109], "hensel": [10, 86], "irreduc": [10, 55, 72, 84, 113, 131, 133], "pfactor": 10, "modulo": [10, 27, 52, 55], "_leading_coeff": 10, "lcfactor": 10, "denom": [10, 27, 58, 84, 85], "defect": 10, "possibli": [10, 18, 24, 27, 43, 52, 58, 74, 85, 121], "u_": 10, "_monic_associ": 10, "_padic_lift": 10, "z_": [10, 58], "geq": [10, 29, 33, 59, 67], "bound": [10, 25, 27, 34, 39, 43, 46, 52, 64, 71, 76, 119, 120, 121], "largest": [10, 18, 20, 27, 29, 31, 33, 50, 52], "_sqf_p": 10, "_subs_ground": 10, "_test_evaluation_point": 10, "fa": 10, "_test_prim": 10, "_z_to_alpha": 10, "efactor": 10, "faster": [10, 13, 27, 33, 43, 50, 51, 52, 58, 59, 62, 63, 73, 76, 87, 90, 94, 95, 98, 103, 106, 107, 116, 118], "larger": [10, 17, 18, 25, 27, 33, 47, 52, 58, 64, 74, 76, 117], "wrong": [10, 17, 27, 35, 50, 84, 85, 86, 87, 88, 116, 120, 121], "modulargcd": 10, "_chinese_remainder_reconstruct": 10, "hp": 10, "hq": 10, "h_": [10, 17, 22, 33, 43], "pq": 10, "x_": [10, 30, 55, 59, 62, 68, 117], "h_p": 10, "h_q": 10, "_q": 10, "chines": [10, 52], "modulu": [10, 27, 29, 50, 52, 55, 85, 113, 121, 131], "hpq": 10, "trunc_ground": 10, "_euclidean_algorithm": 10, "m_": 10, "invert": [10, 27, 29, 50, 52, 55, 62, 116, 121, 130], "necessarili": [10, 27, 28, 43, 45, 52, 55, 58, 62, 131], "_evaluate_ground": 10, "_func_field_modgcd_m": 10, "t_1": [10, 59], "t_k": 10, "reconstruct": [10, 52, 129], "subroutin": 10, "_func_field_modgcd_p": 10, "trial": [10, 27, 52, 62, 121], "drop": [10, 29, 43, 72, 85, 86, 87, 88, 113, 120], "mvh04": [10, 123], "itself": [10, 16, 17, 18, 24, 27, 30, 38, 41, 50, 52, 55, 56, 58, 70, 71, 72, 74, 76, 78, 114, 115], "t_": [10, 22], "interpol": [10, 34, 55, 113], "desir": [10, 17, 18, 27, 30, 35, 40, 50, 52, 55, 56, 58, 73, 76, 78, 124, 133], "_gf_gcdex": 10, "_interpol": 10, "evalpoint": 10, "hpeval": 10, "imag": [10, 17, 57, 98, 114], "x_i": [10, 33, 43, 50, 56], "resp": [10, 62], "boolean": [10, 11, 27, 35, 39, 40, 41, 42, 43, 44, 52, 54, 58, 59, 65, 78, 88, 113, 114, 116, 117, 118, 121], "_minpoly_from_dens": 10, "_modgcd_p": 10, "degbound": 10, "contbound": 10, "encount": [10, 27, 43, 55, 65, 74, 78, 121], "mw00": [10, 123], "bro71": [10, 123], "_primitive_in_x0": 10, "cong": [10, 52], "_rational_function_reconstruct": 10, "fracel": [10, 85, 86], "_rational_reconstruction_func_coeff": 10, "hm": 10, "c_h": 10, "h_m": 10, "_rational_reconstruction_int_coeff": 10, "ntheori": [10, 17, 52, 55, 59, 87, 115], "integer_rational_reconstruct": [10, 52], "_to_anp_poli": 10, "_to_zz_poli": 10, "_trunc": 10, "ftrunc": 10, "func_field_modgcd": 10, "reconstuct": 10, "longer": [10, 35, 52, 56, 58, 78, 110, 113, 114, 115, 117, 118, 119, 131, 133], "spuriou": [10, 85], "algebraic_field": [10, 29, 55, 84, 85], "modgcd": 10, "candid": [10, 52, 58, 78], "trial_divis": 10, "vhm02": [10, 123], "_gcd": 10, "_zz_heu_gcd": 10, "pure": [10, 27, 55, 56, 92, 109], "signal": [10, 52, 129], "switch": [10, 17, 18, 24, 28, 52, 55, 94, 113], "recov": [10, 43, 59], "lf95": [10, 123], "isol": [10, 31, 55, 65, 74, 84, 113, 121], "refin": [10, 55, 74, 84, 113], "rootisol": [10, 86], "complexinterv": 10, "conj": 10, "x1": [10, 27, 30, 58, 62, 78, 117], "y1": [10, 27], "x2": [10, 27, 30, 62], "y2": [10, 27], "southwest": 10, "northeast": 10, "coordin": [10, 28, 31, 33, 34, 35, 36, 39, 50, 54, 55, 62, 85, 119], "rectangl": [10, 39, 43, 55, 121], "as_tupl": 10, "south": 10, "western": 10, "corner": [10, 17, 19, 55, 62, 110], "ai": [10, 33, 52, 59, 118], "north": 10, "eastern": 10, "center": [10, 17, 25, 35, 40, 41, 43, 50, 54, 56, 57], "conjug": [10, 16, 17, 27, 32, 33, 46, 48, 50, 51, 55, 56, 62, 72, 84, 85], "is_disjoint": [10, 57, 119], "check_re_refin": 10, "re_disjoint": 10, "disjoint": [10, 16, 18, 57, 119], "bool": [10, 27, 45, 50, 53, 54, 55, 56, 64, 65, 66, 67, 73, 74, 78, 126], "enabl": [10, 44, 55, 56, 62, 64, 65, 67, 114, 115, 116, 120, 121, 126, 132], "share": [10, 29, 50, 52, 67, 74], "vertic": [10, 12, 19, 20, 35, 36, 38, 40, 41, 50, 56, 78, 110], "realinterv": 10, "scarc": 10, "manag": [10, 27, 58, 72, 113, 116, 119], "polyopt": 10, "gen": [10, 17, 22, 23, 24, 27, 29, 55, 65, 87], "flag": [10, 17, 18, 22, 24, 27, 39, 43, 45, 50, 52, 55, 56, 58, 59, 62, 65, 66, 72, 73, 78, 118, 121, 124, 128], "build_opt": 10, "wrt": [10, 27, 41, 50, 55, 64, 65], "greedi": [10, 52, 55, 58], "gaussian": [10, 33, 43, 50, 55, 59, 87, 115, 121, 131], "polyerror": [10, 87], "basepolynomialerror": 10, "coercionfailederror": 10, "coercion": [10, 86], "computationfailederror": 10, "func": [10, 27, 30, 33, 52, 55, 56, 58, 62, 63, 66, 75, 78, 79, 129], "narg": [10, 27, 32, 103, 118], "exc": 10, "domainerror": [10, 87], "evaluationfailederror": 10, "exactquotientfailederror": [10, 55], "dom": [10, 29, 120], "extraneousfactorserror": 10, "extran": [10, 62, 85], "flagerror": 10, "generatorserror": [10, 50], "unsuit": 10, "generatorsneedederror": 10, "heuristicgcdfailederror": 10, "homomorphismfailederror": 10, "homomorph": 10, "isomorphismfailederror": 10, "isomprph": 10, "modulargcdfailederror": 10, "multivariatepolynomialerror": 10, "notalgebraicerror": 10, "notinvertibleerror": [10, 55], "notreversibleerror": 10, "revers": [10, 12, 16, 18, 25, 27, 31, 50, 52, 55, 56, 58, 62, 78, 113, 133], "operationnotsupportederror": 10, "optionerror": 10, "polificationfailederror": 10, "opt": [10, 58], "orig": 10, "polunomi": 10, "polynomialdivisionfailederror": 10, "polynomialerror": [10, 84, 87, 88], "refinementfailederror": 10, "unificationfailederror": 10, "unif": [10, 117], "univariatepolynomialerror": 10, "unluckyleadingcoefficienterror": 10, "unlucki": [10, 84], "fractionfield": [10, 29], "wait": 11, "http": [11, 12, 15, 16, 17, 18, 19, 20, 25, 27, 30, 31, 33, 40, 41, 43, 50, 52, 55, 56, 57, 58, 59, 62, 67, 73, 74, 78, 95, 105, 108, 115, 123], "en": [11, 15, 16, 17, 18, 25, 27, 30, 31, 33, 41, 43, 50, 52, 55, 57, 62, 67, 74, 78], "wikipedia": [11, 15, 16, 17, 18, 25, 27, 30, 31, 33, 37, 41, 43, 50, 52, 55, 57, 62, 67, 74, 78, 120], "org": [11, 15, 16, 17, 18, 25, 27, 30, 31, 33, 41, 43, 50, 52, 55, 56, 57, 59, 62, 67, 73, 74, 78, 95, 105, 108, 115, 123], "wiki": [11, 15, 16, 17, 18, 25, 27, 30, 31, 33, 41, 43, 50, 52, 55, 57, 59, 62, 67, 74, 78, 105], "mathematical_singular": 11, "z0": [11, 27], "dir": [11, 27, 88, 125], "unevalu": [11, 25, 27, 41, 43, 52, 55, 57, 62, 67, 87, 88, 93, 95, 113, 114, 119, 120, 121, 125, 128, 134], "bidirect": [11, 120, 125], "doit": [11, 25, 27, 28, 30, 31, 33, 43, 55, 62, 63, 78, 85, 87, 107, 114, 120, 121, 125, 128], "maxim": [11, 17, 58, 120], "alia": [11, 19, 27, 29, 35, 40, 46, 49, 51, 57, 59, 68, 84, 121], "kwarg": [11, 17, 18, 25, 27, 29, 31, 33, 35, 36, 38, 39, 40, 45, 46, 47, 48, 50, 51, 54, 56, 57, 58, 62, 63, 67, 68, 73, 79, 88, 119, 120], "behavior": [11, 17, 27, 33, 53, 55, 56, 58, 79, 87, 114, 115, 117, 119, 120, 133], "big": [11, 12, 27, 28, 52, 85, 107, 117, 120, 121, 125], "sup": [11, 55, 56, 57], "intuit": [11, 27, 62], "thought": [11, 27, 62], "proport": [11, 17, 85], "leav": [11, 27, 43, 52, 76, 124, 129], "as_leading_term": [11, 27, 85, 87], "membership": [11, 23, 24], "big_o_not": 11, "inclus": [11, 25, 57, 62], "x0": [11, 27, 28, 52, 58, 62, 67, 78, 113, 117, 125], "notion": [11, 84], "residue_": 11, "28complex_analysi": 11, "29": [11, 16, 17, 18, 27, 30, 31, 50, 52, 57, 67, 114, 130], "residue_theorem": 11, "graycod": 12, "kw_arg": [12, 20, 71, 72], "hamiltonian": 12, "cube": [12, 17, 19, 31, 59, 123], "edg": [12, 19, 20, 56, 78], "whose": [12, 16, 18, 25, 27, 35, 40, 46, 51, 52, 55, 58, 62, 63, 72, 76], "hamilton": 12, "visit": [12, 17, 27, 30, 78], "vertex": [12, 20, 36, 40], "3d": [12, 52, 54, 86, 93, 113, 115, 119], "110": [12, 27], "010": 12, "011": 12, "111": [12, 35], "101": [12, 52], "sequenti": [12, 31], "delet": [12, 50, 51, 84, 89, 130], "absent": 12, "applic": [12, 17, 19, 27, 43, 50, 52, 55, 56, 58, 64, 74, 78, 123, 134], "manner": [12, 33, 59, 62], "nijenhui": 12, "wilf": [12, 123], "1978": [12, 123], "combinatori": [12, 18, 25, 27, 32, 33, 42, 78, 80, 133], "academ": [12, 123], "press": [12, 18, 59, 123], "knuth": [12, 18, 76, 118, 123], "2011": [12, 18, 52, 113, 114], "art": [12, 18, 56, 76, 118], "vol": [12, 18, 33, 50, 76, 114], "addison": [12, 18, 52, 123], "weslei": [12, 18, 52, 123], "generate_grai": 12, "0000": 12, "0011": [12, 21], "0010": 12, "0110": 12, "0111": 12, "0101": 12, "0100": 12, "1100": [12, 86], "1101": [12, 86], "1111": 12, "1110": 12, "1010": 12, "1011": 12, "1001": 12, "referenc": [12, 16, 52], "rank": [12, 16, 17, 18, 20, 21, 22, 50, 68, 71, 72, 113, 120], "skip": [12, 27, 50, 52, 62, 65, 117, 120], "dimens": [12, 36, 39, 41, 50, 55, 56, 64, 68, 71, 72, 74, 117, 119, 121, 123], "distanc": [12, 18, 35, 38, 39, 40, 118], "among": [12, 18, 55, 62, 68, 70, 72], "reflect": [12, 15, 18, 27, 35, 40, 58, 113, 117], "brgc": 12, "6th": [12, 52], "famili": [12, 43, 115], "statweb": 12, "stanford": 12, "edu": [12, 17, 30, 52, 59, 62, 123], "susan": [12, 123], "s208": 12, "node12": 12, "unrank": [12, 16, 17, 18, 20], "classmethod": [12, 16, 18, 20, 21, 27, 32, 33, 46, 50, 51, 55, 56, 57], "own": [12, 17, 27, 56, 58, 62, 76, 79, 126], "00010": 12, "random_bitstr": 12, "random": [12, 16, 17, 18, 24, 27, 35, 38, 42, 49, 50, 52, 54, 82, 113, 115, 121], "bitlist": [12, 21], "gray_to_bin": 12, "endian": 12, "encod": [12, 18, 24, 42, 76, 78, 129], "bin_to_grai": 12, "get_subset_from_bitstr": 12, "bitstr": 12, "graycode_subset": 12, "group_construct": [13, 15], "directproduct": [13, 15], "permut": [13, 14, 15, 19, 22, 23, 24, 30, 33, 42, 50, 55, 59, 68, 72, 78, 114, 115, 118], "gn": 13, "cyclicgroup": [13, 15, 17], "perm_group": [13, 17, 23, 24], "permutationgroup": [13, 15, 17, 23, 24], "partit": [14, 17, 30, 42, 52, 76, 77, 114, 118, 120, 121], "group": [14, 18, 19, 22, 23, 24, 30, 42, 52, 54, 55, 58, 62, 64, 72, 78, 115, 116, 121], "polyhedron": [14, 17, 42], "prufer": [14, 42, 115], "grai": [14, 21, 42, 115], "canonic": [14, 27, 42, 72, 84, 114, 116], "named_group": 15, "symmetricgroup": [15, 17, 23, 24], "cycl": [15, 17, 18, 24, 30, 52, 78, 114, 120], "transposit": [15, 18, 31, 47, 50], "is_group": [15, 17], "24": [15, 18, 19, 27, 33, 50, 52, 55, 59, 62, 76, 96, 125, 130], "generate_schreier_sim": [15, 17], "af": [15, 17, 23], "dihedralgroup": [15, 17, 23, 24], "alternatinggroup": [15, 17, 23], "symmetric_group": 15, "generators_and_rel": 15, "cyclic": [15, 18, 19, 52, 72], "dihedr": [15, 18], "d_n": 15, "symmetri": [15, 19, 22, 33, 50, 62, 70, 72], "gon": 15, "rotat": [15, 17, 19, 27, 34, 35, 36, 39, 40, 50, 62, 78, 93, 114, 119], "bab": 15, "generate_dimino": [15, 17], "perm": [15, 18, 19, 24, 30, 50, 68, 78], "cyclic_form": [15, 18, 19], "dihedral_group": 15, "altern": [15, 17, 18, 31, 33, 47, 51, 56, 78, 115, 120], "odd": [15, 18, 27, 30, 31, 33, 45, 52, 87, 88], "len": [15, 16, 17, 18, 22, 24, 27, 30, 33, 56, 58, 62, 71, 78, 119], "is_even": [15, 17, 18, 27, 85], "armstrong": 15, "abeliangroup": 15, "cyclic_ord": 15, "abelian": [15, 17], "print_cycl": [15, 17, 18, 22, 24], "groupprop": [15, 17], "subwiki": [15, 17], "structure_theorem_for_finitely_generated_abelian_group": 15, "abstract": [16, 33, 38, 42, 47, 72, 74, 113], "union": [16, 17, 24, 57, 114, 120, 121], "iter": [16, 17, 18, 21, 22, 27, 30, 33, 40, 42, 46, 52, 55, 56, 57, 58, 59, 64, 65, 66, 67, 68, 70, 73, 74, 76, 77, 84, 86, 113, 114, 119, 120], "multiset_partit": [16, 30, 78], "rg": 16, "restrict": [16, 33, 50, 65, 118], "block": [16, 17, 49, 50, 52, 59, 111, 115, 117, 120], "member": [16, 17, 38, 71], "from_rg": 16, "abcd": [16, 19], "cbead": 16, "sort_kei": [16, 27, 62, 78, 120], "ti": [16, 18, 27, 78], "broken": [16, 56, 62, 78, 96, 120, 121], "rang": [16, 17, 18, 20, 22, 27, 30, 31, 33, 46, 50, 51, 52, 54, 55, 57, 58, 62, 67, 68, 71, 72, 78, 87, 113, 118, 119, 121, 124, 133], "default_sort_kei": [16, 27, 70, 78, 117], "integerpartit": [16, 78], "summand": [16, 25], "partition_": 16, "28number_theori": 16, "as_dict": [16, 55, 84], "as_ferr": 16, "char": 16, "ferrer": 16, "diagram": [16, 129], "next_lex": [16, 18], "lexic": 16, "prev_lex": 16, "random_integer_partit": 16, "seed": [16, 17, 35, 50, 52], "practic": [16, 17, 27, 35, 70], "85": [16, 30, 35, 52], "rgs_gener": 16, "unrestrict": [16, 78, 114], "26": [16, 27, 52, 59, 95, 120], "37": [16, 35, 52, 59], "77": [16, 52, 56, 74, 131], "151": 16, "rgs_enum": 16, "superset": [16, 21, 57, 58, 119], "assert": [16, 17, 18, 37, 62, 63], "rgs_unrank": 16, "rgs_rank": 16, "pn": 17, "suppli": [17, 18, 27, 28, 35, 52, 62, 73, 78, 79, 118], "decor": [17, 27, 33, 42, 77, 78, 80, 84, 94, 106], "motion": [17, 62, 115], "front": [17, 27, 29, 55, 58, 72], "bottom": [17, 27, 40, 55, 56, 121], "face": [17, 19, 117], "2x2": 17, "rubik": 17, "19": [17, 27, 33, 35, 50, 52, 73, 108, 123], "21": [17, 27, 30, 35, 50, 52, 56, 62, 65, 68, 119, 133], "18": [17, 18, 30, 33, 40, 50, 51, 52, 56, 57, 58, 59, 62, 64, 68, 72, 86, 118, 123, 131], "3674160": 17, "pgroup": [17, 19], "reset": [17, 19, 26, 75], "Or": [17, 27, 28, 45, 58, 114, 121], "p10": 17, "make_perm": 17, "holt": [17, 24], "eick": [17, 24], "brien": [17, 24], "handbook": [17, 24, 33, 115, 123], "seress": 17, "schreier_vector": 17, "nielsen_transform": 17, "product_replacement_algorithm": 17, "frank": [17, 18], "celler": 17, "charl": 17, "leedham": 17, "green": 17, "scott": 17, "murrai": 17, "alic": 17, "niemey": 17, "block_": 17, "28permutation_group_theori": 17, "web": [17, 52, 59, 122], "archiv": [17, 52, 59, 122], "20170105021515": 17, "www": [17, 18, 33, 50, 52, 56, 58, 59, 62, 78, 123], "algorithmist": 17, "80": [17, 27, 43, 50, 52], "php": [17, 33, 52, 59], "union_find": 17, "multiply_transitive_group": 17, "center_": 17, "28group_theori": 17, "centralizer_and_norm": 17, "derived_subgroup": 17, "nilpotent_group": 17, "math": [17, 27, 30, 33, 52, 56, 62, 63, 73, 74, 79, 96, 114, 121, 123, 124, 128], "colost": 17, "hulpk": 17, "cgt": 17, "cgtnote": 17, "pdf": [17, 30, 52, 58, 59, 62, 67, 78, 120, 123], "__contains__": 17, "act": [17, 18, 22, 27, 45, 115, 117], "n1": [17, 27, 59], "n2": [17, 27, 59], "__new__": [17, 27, 129], "dup": 17, "_union_find_merg": 17, "parent": [17, 27, 28, 76], "not_rep": 17, "atkinson": 17, "suggest": [17, 43, 52], "83": 17, "87": [17, 31, 120], "side": [17, 18, 27, 37, 40, 43, 50, 56, 63, 67, 70, 74, 88, 115, 117, 125], "effect": [17, 19, 27, 41, 43, 50, 54, 62, 124], "due": [17, 27, 28, 39, 41, 44, 56, 59, 63, 82, 133], "minimal_block": 17, "_union_find_rep": 17, "compress": 17, "alter": [17, 27], "schreier": [17, 22, 24, 115], "b_k": [17, 24, 30, 33], "concept": [17, 55, 56, 70], "strong": [17, 22, 23, 24, 52, 72], "depth": [17, 42, 54, 56, 78, 120, 121], "89": [17, 24, 123], "55": [17, 30, 50, 59], "57": [17, 52, 123], "coset": [17, 22], "strong_gen": [17, 23, 24], "basic_transvers": [17, 24], "basic_orbit": [17, 24], "basic_stabil": 17, "baseswap": 17, "po": [17, 45, 50], "transvers": [17, 22, 24], "strong_gens_distr": [17, 24], "swap": [17, 19, 46, 50, 51, 67, 130], "consecut": [17, 22, 25, 27, 30, 40, 58], "la": 17, "vega": 17, "determinist": 17, "orbit": [17, 24, 115], "testutil": [17, 23, 24], "_verify_bsg": [17, 23, 24], "schreier_sim": [17, 23, 24], "bsg": [17, 22, 24, 72], "s1": [17, 25, 38, 40, 55, 72, 78], "102": [17, 50, 120], "103": [17, 120], "98": [17, 62, 65, 86], "mistak": 17, "pseudocod": 17, "beta_": 17, "langl": 17, "rangl": 17, "foral": [17, 25, 28], "zg": 17, "gz": 17, "central": [17, 23, 54, 59, 67], "subgroup": [17, 18, 22, 23, 24, 52, 115], "c_g": 17, "sg": [17, 72], "proper": [17, 27, 43, 52, 57, 62, 68, 73, 74, 119], "outsid": [17, 27, 33, 36, 40, 50, 58, 62, 125], "is_subgroup": 17, "subgroup_search": 17, "hgh": 17, "closur": [17, 23, 57, 121], "drawn": 17, "resiz": 17, "necessari": [17, 18, 27, 35, 45, 55, 58, 62, 63, 67, 68, 72, 74, 78, 84, 118], "elem": 17, "coset_factor": 17, "factor_index": 17, "_basic_orbit": 17, "confirm": [17, 52, 62], "u1": [17, 62], "u2": [17, 62], "tr": [17, 56, 115], "_strip": [17, 24], "coset_rank": 17, "coset_unrank": 17, "compris": [17, 50, 55, 78], "derived_seri": 17, "g_0": [17, 59], "g_1": [17, 55, 59, 62], "g_2": [17, 62], "g_i": 17, "g_k": 17, "dimino": 17, "tetrahedron": [17, 19], "axiom": 17, "doy": 17, "sc": 17, "is_abelian": 17, "is_alt_sym": [17, 24], "ep": [17, 25], "05": 17, "_random_prec": 17, "mont": [17, 115], "carlo": [17, 115, 123], "incorrect": [17, 27, 35, 52, 76, 84, 85, 86, 87, 88, 120, 121], "nontrivi": [17, 27, 52, 62, 115, 133], "transit": 17, "81": [17, 30, 50, 123], "82": 17, "226": 17, "227": 17, "_check_cycles_alt_sym": [17, 24], "is_nilpot": [17, 50], "nilpot": [17, 50, 116, 121], "solvabl": [17, 59, 62, 116], "lower_central_seri": 17, "is_solv": 17, "is_norm": [17, 29, 85], "gr": [17, 123], "is_primit": [17, 29, 86], "action": [17, 27, 55, 58, 85, 113], "cardin": [17, 18, 21, 119], "badli": 17, "offer": [17, 76], "produc": [17, 27, 38, 56, 62, 63, 67, 76, 78, 85, 114, 120, 132, 133], "random_stab": 17, "hope": 17, "g3": 17, "s3": 17, "s5": 17, "c7": 17, "is_transit": 17, "is_trivi": 17, "randomli": [17, 52], "cba": 17, "max_div": 17, "siev": [17, 52], "nonempti": 17, "gb": 17, "translat": [17, 27, 34, 36, 39, 41, 56, 62, 73, 74, 78, 79, 93, 116], "thing": [17, 18, 27, 28, 37, 42, 45, 50, 57, 58, 62, 70, 113, 119, 124, 125, 126, 130, 133], "p_": [17, 22, 27, 59, 62, 68, 72], "normal_closur": [17, 23], "yx": 17, "73": [17, 27, 38, 52, 62], "random_pr": 17, "74": [17, 30], "orb": 17, "orbit_transvers": 17, "orbit_rep": 17, "send": [17, 27, 31, 50, 52, 62], "79": [17, 18, 120], "rep": [17, 22, 27, 29, 55, 58], "lowest": [17, 22, 52], "pointwise_stabil": 17, "increment": [17, 18, 19, 25, 40, 115], "pointwis": [17, 24], "p_k": [17, 52], "p_i": [17, 22, 52], "p20": 17, "stab": 17, "schreier_sims_increment": [17, 24], "obviou": [17, 25, 59, 128], "segment": [17, 35, 37, 38, 39, 40, 41, 54, 62, 110], "gen_count": 17, "_random_pr_init": 17, "attribut": [17, 18, 27, 33, 47, 50, 54, 58, 71, 72, 73, 75, 79, 84, 85, 86, 87, 107, 118, 119, 121, 124, 129], "_random_gen": 17, "repeat": [17, 20, 25, 27, 33, 35, 43, 50, 51, 52, 53, 56, 70, 71, 73, 78, 87, 120], "b_r": 17, "h_1": [17, 22], "unchang": [17, 18, 27, 43, 50, 55, 58, 124], "90": [17, 24, 27, 33, 50, 56, 58, 74, 120], "93": [17, 123], "schreier_sims_random": [17, 24], "consec_succ": 17, "consec": 17, "_succ": 17, "97": [17, 50, 52, 84, 123], "sift": [17, 24, 78], "amend": 17, "unsuccess": [17, 24], "accordingli": 17, "halt": 17, "signifi": [17, 55], "g_t": 17, "prop": 17, "init_subgroup": 17, "prune": 17, "callabl": [17, 56, 58, 73, 74, 78, 79], "supergroup": 17, "sought": [17, 52, 58], "def": [17, 27, 30, 32, 37, 45, 50, 52, 53, 55, 56, 58, 78, 79], "prop_even": 17, "lenghti": 17, "care": [17, 27, 43, 50, 58, 59, 62, 70, 72, 73, 124, 133], "attent": [17, 31, 79], "114": [17, 120], "117": 17, "book": [17, 31, 115], "clariti": 17, "exponenti": [17, 22, 27, 30, 32, 42, 43, 50, 52, 53, 58, 62, 65, 67, 85, 86, 87, 88, 115, 121], "terribl": 17, "crucial": [17, 25], "frequent": [17, 119], "transitivity_degre": 17, "fold": [17, 27, 56, 58], "a_k": 17, "arrang": [18, 46, 59, 87], "reorder": [18, 25, 55, 62, 85], "themselv": [18, 24, 27, 52, 57, 72, 76, 78], "commonli": [18, 30, 33, 43, 62], "bracket": [18, 56, 72, 87, 113, 120], "conveni": [18, 27, 30, 33, 43, 45, 54, 56, 57, 58, 65, 70, 71, 73, 79, 122, 125], "economi": 18, "singleton": [18, 42, 45, 86, 94, 119, 121], "caution": [18, 27, 31, 58], "__call__": [18, 120], "syntax": [18, 27, 43, 44, 53, 56, 58, 84, 87, 98, 108, 113, 116, 119, 120, 125, 128, 132], "instanti": [18, 27, 29, 38, 40, 67, 85, 115, 119], "trigger": [18, 87], "indexerror": [18, 50, 55, 85, 120, 121], "ok": [18, 62], "prohibit": [18, 19], "autos": 18, "varieti": [18, 27, 55, 67, 115, 119], "watch": 18, "prefer": [18, 25, 27, 33, 52, 58, 62, 74, 79, 128], "array_form": [18, 19], "econom": [18, 78], "biject": [18, 20], "locat": [18, 27, 50, 52, 58, 67, 119], "hard": [18, 52, 56, 62, 65], "full_cyclic_form": 18, "rmul": 18, "unrank_lex": 18, "zo42": 18, "from_sequ": 18, "skiena": 18, "discret": [18, 33, 52, 62, 85, 116], "graph": [18, 33, 56, 71, 78, 113], "mathematica": [18, 42, 53, 91, 115, 121, 132], "ma": [18, 123], "1990": [18, 123], "1st": [18, 52, 62, 63, 119], "ed": [18, 33], "wendi": 18, "myrvold": 18, "ruskei": 18, "2001": [18, 123], "inf": [18, 50, 55, 57, 62, 121], "lett": 18, "septemb": [18, 76, 123], "281": 18, "284": 18, "doi": [18, 123], "1016": [18, 86, 123], "s0020": 18, "0190": 18, "00141": 18, "kreher": 18, "stinson": 18, "crc": [18, 123], "1999": [18, 51], "graham": [18, 30, 31, 52], "patashnik": 18, "foundat": [18, 123], "scienc": [18, 50, 123, 125], "2nd": [18, 52, 62, 68, 78, 115, 119], "1994": [18, 123], "lehmer_cod": 18, "_array_form": 18, "rubric": 18, "ascent": 18, "ie": [18, 35, 94], "descent": 18, "min": [18, 22, 30, 32, 50, 62, 78, 85, 113, 121], "atom": [18, 27, 45, 50, 56, 71, 94, 113, 115, 121], "fg": [18, 28, 62], "gf": [18, 29], "commutes_with": [18, 72], "cycle_structur": 18, "stirl": [18, 32, 78, 85], "from_inversion_vector": 18, "lambda": [18, 46, 47, 50, 51, 52, 55, 56, 57, 58, 62, 64, 67, 68, 78, 79, 93, 95, 119, 120], "get_adjacency_dist": 18, "adjac": [18, 55, 78], "metric": [18, 22, 28, 58, 62, 72], "count": [18, 25, 27, 30, 35, 52, 57, 58, 72, 76, 78, 85, 113, 118], "job": [18, 56], "n_adj": 18, "quantiti": [18, 27, 30, 33, 37, 41, 58, 119], "reev": 18, "colin": [18, 120], "landscap": 18, "annal": 18, "research": [18, 58], "86": 18, "473": [18, 121], "490": 18, "josephu": 18, "get_precedence_matrix": 18, "get_precedence_dist": 18, "get_adjacency_matrix": 18, "get_positional_dist": 18, "inversion_vector": 18, "lesser": 18, "lie": [18, 28, 39, 40, 60], "lehmer": 18, "ith": [18, 52, 114], "variat": [18, 27, 62, 77], "eng": 18, "chula": 18, "ac": [18, 37, 58, 59], "prabha": 18, "teach": [18, 30], "algo": 18, "algo2008": 18, "inv": [18, 50, 51], "htm": [18, 33, 52, 59, 123], "is_empti": 18, "is_singleton": 18, "is_ident": 18, "is_odd": [18, 27], "shuffl": 18, "stop": [18, 27, 52, 62], "3rd": [18, 52, 68, 84], "012345": 18, "345": 18, "34": [18, 30, 58, 59], "253": [18, 120], "2531": 18, "25314": 18, "253140": 18, "flavius_josephu": 18, "josephus_problem": 18, "trim": [18, 94, 113], "unmov": 18, "trail": [18, 52, 55, 81], "mul_inv": 18, "next_nonlex": 18, "nonlex": 18, "rank_nonlex": 18, "unrank_nonlex": 18, "next_trotterjohnson": 18, "trotter": 18, "johnson": 18, "rank_trotterjohnson": 18, "unrank_trotterjohnson": 18, "pariti": 18, "_af_par": 18, "underli": [18, 24, 27, 46, 50, 64, 67], "inv_perm": 18, "enforc": [18, 117], "operand": [18, 27, 120], "typeerror": [18, 27, 35, 39, 46, 48, 51, 84, 85, 86, 87, 88, 117, 118, 120, 121], "rmul_with_af": 18, "ascend": [18, 78, 86], "join": [18, 27, 38, 50, 51, 56, 58, 62, 78], "transposition_": 18, "28mathemat": [18, 27, 57], "dict": [18, 40, 44, 50, 52, 53, 55, 56, 58, 59, 62, 63, 64, 65, 66, 67, 70, 78, 85, 95, 107, 121, 134], "flexibl": [18, 27], "rh": [18, 27, 50, 51, 56], "truncat": [18, 85], "__iter__": [18, 27, 58], "redefin": [18, 27], "sn": [18, 25], "cn": 18, "dn": 18, "s2": [18, 38, 40, 55, 72, 78], "klein": 18, "embed": [18, 117], "s4": 18, "polyhedr": 19, "psg": 19, "platon": 19, "solid": 19, "tetrahedr": 19, "octahedr": 19, "icosahedr": 19, "docstr": [19, 27, 42, 43, 52, 58, 62, 63, 71, 75, 81, 84, 85, 110, 111, 115, 119, 120, 121], "mathworld": [19, 20, 27, 30, 31, 33, 52, 57, 59, 67, 78], "wolfram": [19, 20, 27, 30, 31, 33, 52, 56, 57, 58, 59, 67, 78], "polyhedralgroup": 19, "polyhedra": 19, "valid": [19, 25, 27, 30, 35, 40, 50, 52, 58, 59, 62, 67, 115, 120, 121, 133], "physic": [19, 52, 76, 111, 113, 115, 117, 118, 119, 120, 123, 133], "letter": [19, 27, 50, 52, 56, 78, 125], "shadow": 19, "h5": 19, "isomorph": [20, 55, 113], "heinz": [20, 123], "caylei": 20, "labeledtre": 20, "node": [20, 27, 43, 56, 70, 76, 78, 129], "connect": [20, 28, 39, 40, 62, 116, 131], "beyond": [20, 40, 58], "tree_repr": 20, "prufer_rank": 20, "prev": 20, "36": [20, 30, 43, 50, 52, 55, 59, 62, 120], "35": [20, 30, 43, 50, 52, 59, 62, 67, 130], "prufer_repr": 20, "highest": [20, 55, 59], "record": 20, "to_pruf": 20, "778": 20, "779": 20, "777": 20, "1296": 20, "to_tre": 20, "hamberg": 20, "erlend": 20, "2010": [20, 63, 112, 116, 123], "06": [20, 82], "compact": [20, 55, 76], "next_binari": 21, "prev_binari": 21, "bitlist_from_subset": 21, "subset_from_bitlist": 21, "superset_s": 21, "iterate_binari": 21, "iterate_graycod": 21, "prev_grai": 21, "next_grai": 21, "next_lexicograph": 21, "prev_lexicograph": 21, "rank_binari": 21, "unrank_binari": 21, "rank_grai": 21, "unrank_grai": 21, "rank_lexicograph": 21, "43": [21, 35, 52], "super_set": 21, "subset_indic": 21, "ksubset": 21, "itertool": [21, 78], "tensor_can": [22, 72], "msym": 22, "contravari": [22, 50, 72], "covari": [22, 28, 50, 72, 115], "d0": 22, "d1": [22, 67], "base_i": 22, "gens_i": 22, "sym_i": 22, "failur": [22, 41, 52, 84, 85, 112, 120, 121], "canonicalize_na": 22, "slower": [22, 50, 51], "exchang": [22, 50], "compon": [22, 27, 28, 43, 55, 71, 72, 76, 115], "anticommut": [22, 72, 113], "canonical_fre": 22, "slot": [22, 71, 72], "tensor_gen": 22, "list_free_indic": 22, "sym": [22, 27, 30, 56, 58, 59, 78], "double_coset_can_rep": 22, "reintroduc": 22, "antisymmetr": [22, 28, 50, 72], "d2": [22, 67], "ord": [22, 50], "t_c": 22, "base2a": 22, "gens2a": 22, "get_symmetric_group_sg": [22, 72], "t0": 22, "t1": [22, 36, 40, 41, 59, 72], "a_m": 22, "_a": [22, 33, 55], "_b": [22, 33], "base_f": 22, "gens_f": 22, "base1": 22, "gens1": 22, "base_a": 22, "gens_a": 22, "bsgs_direct_product": 22, "sgen": 22, "s_transvers": 22, "butler": [22, 72], "portug": [22, 72], "computation": [22, 65, 73], "slow": [22, 27, 43, 56, 58, 62, 73, 84, 85, 86, 87, 88, 107, 117, 121, 124, 133], "absenc": 22, "opposit": [22, 40, 50, 133], "ind": [22, 72], "Being": [22, 35, 40], "d3": 22, "a0": 22, "a1": [22, 50, 52, 68], "a2": [22, 50, 52, 68], "a3": [22, 50], "a4": 22, "a5": 22, "_af_rmul": 22, "p0": [22, 35, 62], "sublist": 22, "dbase": 22, "recomput": 22, "tab": [22, 87], "s_i": [22, 43], "h_i": 22, "p_j": 22, "s_0": 22, "id": [22, 31], "d_0": 22, "h_0": 22, "sx": 22, "trace": [22, 47, 50, 56, 68, 70, 115, 120, 121], "h_n": [22, 33, 43], "tab1": 22, "assign": [22, 26, 40, 45, 50, 54, 56, 65, 72, 74, 119], "get_transvers": 22, "antisym": [22, 72], "anti": [22, 43, 50], "base2": 22, "gens2": 22, "_cmp_perm_list": 23, "hashabl": [23, 78], "ls1": 23, "ls2": 23, "_naive_list_centr": 23, "brute": [23, 59], "serv": [23, 27, 28, 32, 62, 63, 81, 127], "_verify_centr": 23, "centr": 23, "_verify_normal_closur": 23, "_base_ord": 24, "base_ord": 24, "backtrack": [24, 115], "108": [24, 52, 120], "132": [24, 30], "_distribute_gens_by_bas": 24, "_strong_gens_from_distr": 24, "_orbits_transversals_from_bsg": 24, "_handle_precomputed_bsg": 24, "transversals_onli": 24, "across": [24, 25, 56, 76, 77, 78, 117], "_remove_gen": 24, "new_gen": 24, "outlin": [24, 43], "95": [24, 52, 56, 62, 74, 123], "implicit": [24, 27, 53, 54, 62, 65, 71, 73, 74, 115, 121], "retriev": [24, 58, 72, 121], "stage": [25, 42], "recurr": [25, 30, 42, 50, 58, 60, 62, 65, 80, 85, 86, 120, 121, 127], "plai": [25, 28, 59, 124, 128], "annihil": [25, 27], "word": [25, 27, 31, 45, 58, 59, 62, 74, 119], "is_hypergeometr": [25, 27, 121], "rf": [25, 30], "ff": [25, 30, 88], "speci": [25, 27], "rise": [25, 30, 33, 58, 62], "fall": [25, 30, 56, 59, 63], "previous": [25, 58, 67, 114, 116, 117, 119], "nonlinear": [25, 65, 106], "hypersimp": [25, 27, 42], "karr": [25, 116, 123], "kar81": [25, 123], "especi": [25, 58, 62, 111, 124, 125], "seemingli": 25, "nonsens": 25, "eval_integr": 25, "magnitud": [25, 27, 33, 87], "28333333333333": 25, "sstr": [25, 56, 72, 120], "full_prec": [25, 56], "26629073187415": 25, "0175000000000000": 25, "nonzero": [25, 27, 31, 50, 85], "remaind": [25, 27, 29, 52, 55, 62, 123, 131], "findrecur": [25, 120], "sum_k": [25, 68], "doubli": [25, 52], "sister": [25, 120], "celin": [25, 120], "petkovvsekwz97": [25, 64, 123], "ch": [25, 28, 50, 51, 59], "reverse_ord": 25, "selector": [25, 58], "mix": [25, 27, 50, 56, 70, 72, 79, 86], "expr_with_intlimit": 25, "exprwithintlimit": 25, "reorder_limit": 25, "analogu": 25, "prod": [25, 87], "120": [25, 27, 30, 52, 56, 62, 120, 125], "capital_pi_not": 25, "empty_product": 25, "risingfactori": [25, 32, 33, 84], "expr_with_limit": [25, 43], "exprwithlimit": [25, 43], "as_dummi": [25, 43], "counterpart": [25, 27, 62, 125], "world": [25, 78], "_x": [25, 35, 58, 62, 114], "_y": 25, "underscor": [25, 27, 62], "prefix": [25, 50, 52, 59, 62, 73, 74, 78], "free_symbol": [25, 27, 34, 43, 50, 55, 84], "is_numb": [25, 27, 32, 118, 121], "renam": [25, 84, 85, 87, 91, 98, 103, 113, 117, 119, 120, 121], "change_index": [25, 117], "var": [25, 43, 50, 56, 58, 59, 92, 103, 107, 108, 113, 115, 120], "trafo": 25, "newvar": 25, "p3": [25, 35, 37, 38, 39, 40, 41, 54], "inconsist": [25, 27, 62, 85, 86, 87, 88], "_____": 25, "gosper": [25, 113, 120], "gosper_norm": 25, "gosper_term": 25, "s_n": [25, 55], "g_n": [25, 55], "gosper_sum": [25, 121], "convert_xor": [27, 53], "coerc": 27, "inherit": [27, 32, 45, 47, 48, 56, 67, 74, 75, 107, 115, 121], "cooper": [27, 123], "sage": [27, 101, 102, 103, 106], "09": [27, 123], "2e": 27, "noth": [27, 29, 43, 56, 58, 62, 65, 126], "is_integ": [27, 56, 71, 88], "is_real": [27, 31, 32, 50, 85, 113, 117, 119], "45": [27, 30, 40, 52, 55, 59, 87, 120], "sympifyerror": 27, "sympif": [27, 78, 119], "load": 27, "bitcount": 27, "improperli": 27, "unbound": [27, 71, 119], "recogn": [27, 30, 58, 71, 86, 113], "namespac": [27, 59, 62, 63, 74, 79, 85, 128], "exec": 27, "greek": [27, 52, 53, 56], "clash": [27, 50], "privat": [27, 54, 74, 84, 121], "_clash1": 27, "_clash2": 27, "multi": [27, 56, 114, 115, 120], "_clash": 27, "convers": [27, 71, 73], "denest": [27, 42, 55, 78, 91, 115], "ast": [27, 44, 91, 108, 120, 121], "autosimplif": [27, 58], "dure": [27, 50, 52, 58, 84, 120, 126], "_diofant_": 27, "subclass": [27, 36, 38, 45, 54, 56, 67, 73, 74, 79, 84, 85, 113, 115, 117, 118], "runtim": [27, 120, 121], "mylist1": 27, "global": [27, 37, 53, 54, 57, 59, 62, 63, 67, 74, 113, 115, 120], "mylist": 27, "mylist2": 27, "xxx": [27, 43, 50], "machineri": [27, 79], "is_": [27, 120], "default_assumpt": 27, "defined_fact": 27, "is_algebra": 27, "is_prim": 27, "is_posit": [27, 85, 94, 124], "context": [27, 28, 45, 113, 116, 119, 128], "obj": [27, 55], "_assumpt": 27, "getter": 27, "managedproperti": 27, "kw": 27, "metaclass": 27, "style": [27, 56, 115, 120], "stdfactkb": 27, "factkb": 27, "specialis": 27, "built": [27, 29, 31, 56, 67, 76, 78, 113, 116, 128, 132], "kind": [27, 28, 30, 33, 43, 50, 55, 57, 62, 63, 65, 67, 78, 85, 113, 125, 133], "as_properti": 27, "check_assumpt": [27, 121], "conclud": [27, 33, 65, 66], "make_properti": 27, "automag": 27, "maxsiz": 27, "immut": [27, 42, 46, 49, 50, 51, 68, 85, 94, 115, 120, 124, 130], "class_kei": [27, 32, 78], "cot": [27, 32, 33, 53, 56, 87, 120], "truli": [27, 121], "zoo": [27, 30, 31, 33, 58, 88, 98, 118, 120, 121], "implicitli": [27, 40], "scan": 27, "appliedundef": 27, "swallow": 27, "queri": [27, 37, 58, 67, 113, 120], "visual": [27, 52, 58, 112, 116], "deep": [27, 31, 45, 50, 55, 58, 115, 117], "is_evalu": 27, "expess": 27, "xreplac": [27, 50, 51], "q_": [27, 59, 62], "rcall": [27, 28], "simul": 27, "abus": [27, 72], "travers": [27, 42, 52, 55, 76, 78], "simultan": [27, 52, 121, 124], "fashion": [27, 78, 129], "target": [27, 52, 58, 74], "succe": [27, 45, 52], "receiv": [27, 52, 71], "tan": [27, 30, 32, 43, 53, 56, 58, 62, 79, 87, 88, 119, 133], "newtyp": 27, "is_mul": [27, 95], "trigonometr": [27, 32, 42, 43, 62, 88, 98, 109, 111, 115, 119, 121, 126, 127], "definedfunct": 27, "destin": [27, 74], "forbid": [27, 84], "unspecifi": [27, 84], "foo": [27, 56, 78, 84, 87, 120], "op": [27, 58, 78], "tie": [27, 78], "delai": [27, 78], "unord": [27, 52, 78], "unsort": 27, "liter": [27, 45, 53, 58, 71, 115, 126, 129], "333333333333333333333": 27, "333333333333333": [27, 124], "wildcard": [27, 44, 58, 128], "evalfmixin": [27, 87], "occurr": [27, 52, 58], "within": [27, 38, 40, 45, 47, 50, 52, 57, 62, 67, 73, 78, 87], "valueerror": [27, 34, 35, 38, 40, 43, 50, 78, 87, 121, 130], "invalid": [27, 85, 87, 115, 120, 121], "preorder_travers": [27, 129], "pre": [27, 51, 58, 117, 129], "That": [27, 31, 62, 73, 74, 78, 131, 133], "descend": [27, 74, 78], "breadth": [27, 78], "children": [27, 76, 78, 129], "subtre": [27, 76, 78], "pt": [27, 34, 35, 36, 38, 39, 40], "mechan": [27, 42, 115, 118, 119], "singletonregistri": 27, "addition": [27, 56, 67, 124], "registri": 27, "class_nam": 27, "mysingleton": 27, "creation": [27, 28, 50, 56, 67, 71, 74, 94, 113, 118], "superclass": [27, 47, 117], "metaprogram": 27, "shouldn": [27, 113], "worri": 27, "comparison": [27, 45, 50, 64, 78, 85, 86, 87, 117, 120, 121], "primari": [27, 37, 45, 74], "singletonwithmanagedproperti": 27, "experiment": [27, 58, 119], "adjoint": [27, 32, 46, 48, 50, 116], "transpos": [27, 32, 46, 47, 48, 50, 59, 68, 115, 121, 130], "hermit": [27, 31, 43, 50, 55, 116, 120], "args_cnc": 27, "cset": 27, "warn": [27, 56, 62, 65, 66, 74, 78, 110, 119, 131], "split_1": 27, "maintain": [27, 62, 76], "explicitli": [27, 31, 40, 41, 47, 54, 55, 58, 62, 114, 115, 119, 126], "suppress": [27, 53], "as_base_exp": [27, 78, 87], "as_coeff_add": [27, 113, 116], "as_coeff_mul": [27, 113, 116], "dep": [27, 62], "individu": [27, 36, 40, 41, 57, 62], "head": [27, 67, 72, 115, 129], "as_two_term": 27, "as_independ": [27, 94, 114], "as_coeff_expon": 27, "as_coeffici": [27, 113], "as_poli": [27, 55, 88], "coeff_monomi": [27, 55], "coeff": [27, 28, 55, 58, 62, 64, 72, 85, 86, 94, 113, 115, 133], "polytool": [27, 55, 86, 121], "as_coefficients_dict": 27, "defaultdict": [27, 78, 121], "inquiri": 27, "as_content_primit": [27, 50, 55, 121], "radic": [27, 55, 58, 65, 115, 121], "121": [27, 30, 52], "as_expr": [27, 50, 55, 113], "separatevar": [27, 42, 62], "noncommut": [27, 85, 94, 116], "as_add": 27, "n3": 27, "_eval_as_leading_term": 27, "as_numer_denom": [27, 111], "stub": 27, "as_ordered_factor": [27, 78], "as_ordered_term": [27, 78, 114], "as_powers_dict": 27, "lost": 27, "as_real_imag": [27, 31, 133], "confus": [27, 30, 45, 112, 120, 121, 125], "as_term": 27, "aseri": [27, 87, 120], "hir": 27, "hierarch": 27, "earli": [27, 42, 52, 59, 133], "nicer": [27, 116], "tri": [27, 33, 40, 43, 56, 58, 62, 63, 101], "induc": [27, 50], "majorli": 27, "overal": [27, 64, 84, 86, 121], "till": [27, 62], "asymptotic_expans": 27, "canonical_vari": [27, 121], "0_": 27, "distribute_order_term": [27, 58], "combsimp": [27, 30, 67, 115, 133], "compute_leading_term": 27, "logx": 27, "could_extract_minus_sign": 27, "failing_express": [27, 46, 48], "did": [27, 43, 87, 128], "power_bas": [27, 50], "power_exp": [27, 50], "multinomi": [27, 50, 52], "extract_addit": 27, "toward": [27, 33], "extract_multipl": [27, 118], "extract_branch_factor": 27, "allow_half": 27, "geto": 27, "getn": 27, "algebraic_numb": 27, "is_algebraic_expr": [27, 116], "is_rational_funct": 27, "algebraic_express": 27, "is_commut": [27, 43, 78, 107], "is_compar": [27, 121], "is_complex": [27, 120], "is_composit": 27, "composite_numb": 27, "is_const": 27, "constanc": 27, "conclus": 27, "perhap": [27, 52, 74], "decis": [27, 31, 43, 74, 84], "test_expr": 27, "failing_numb": 27, "parity_": 27, "is_extended_r": [27, 85], "extended_real_number_lin": 27, "is_finit": [27, 85, 119], "is_imaginari": [27, 85, 120], "imaginary_numb": 27, "is_infinit": [27, 119], "isfinit": 27, "is_irr": 27, "irrational_numb": 27, "is_neg": [27, 85, 94], "negative_numb": 27, "is_noninteg": 27, "aren": 27, "is_nonneg": [27, 85], "nonneg": [27, 30, 59], "is_nonposit": [27, 85], "nonposit": 27, "is_nonzero": [27, 85, 87, 119], "is_zero": [27, 39, 50, 55, 85, 120], "hit": [27, 82, 129], "is_polar": 27, "polar_lift": [27, 32, 33, 58], "is_polynomi": [27, 88], "prime_numb": [27, 52], "is_rat": 27, "rational_funct": 27, "real_numb": 27, "is_transcendent": 27, "transcendent": [27, 33, 43, 65, 95, 116, 120], "transcendental_numb": 27, "xlim": [27, 54], "nseri": [27, 95, 96, 107, 113], "innermost": 27, "cross": [27, 40, 50, 59, 118], "disadvantag": 27, "append": [27, 51, 54, 74], "shorter": [27, 35, 74], "_eval_nseri": 27, "powsimp": [27, 31, 85, 110, 133], "never": [27, 43, 52, 55, 56, 67, 115], "radsimp": [27, 42], "ratsimp": [27, 42, 113], "removeo": [27, 56, 125], "72": [27, 52, 120], "builtin": [27, 56, 57, 84, 91, 117], "isinst": [27, 47, 56, 58, 70, 74, 95], "lazi": 27, "measur": [27, 31, 40, 46, 50, 55, 57, 58, 67, 114, 120, 133], "taylor_term": [27, 31], "previous_term": [27, 31], "taylor": [27, 31, 55, 62, 121], "trigsimp": [27, 50, 88, 116, 133], "placehold": 27, "overrid": [27, 34, 35, 40, 53, 56, 71, 74, 113], "whatev": [27, 58, 62, 63, 115], "didn": [27, 43, 50, 52], "ambigu": [27, 58, 70], "temporari": [27, 73], "comma": [27, 72], "whitespac": 27, "delimit": [27, 56, 120], "colon": 27, "x3": [27, 30, 62], "x4": [27, 30], "x5": [27, 30], "x6": 27, "x7": 27, "x8": 27, "x9": 27, "x50": 27, "x51": 27, "y0": [27, 28, 62], "y3": 27, "y4": 27, "null": 27, "xa": 27, "xb": 27, "xc": 27, "parenthes": [27, 53, 56, 70, 121], "disambigu": 27, "x01": 27, "x02": 27, "x11": 27, "x12": 27, "00": [27, 59, 123], "surround": [27, 41, 120], "space": [27, 34, 35, 36, 38, 39, 40, 53, 67, 76, 85, 113, 117, 119, 123], "escap": [27, 56], "backslash": [27, 56], "despit": 27, "undefinedfunct": [27, 56, 73, 78, 79], "inject": [27, 29, 55, 72], "recommend": [27, 62, 71, 119], "cofactor": [27, 29, 50, 55], "dp": [27, 29, 33, 39, 50, 75, 85, 121], "captur": [27, 78], "100000000000000000000": 27, "1e20": 27, "00000000000000e": 27, "23456789123456789": 27, "23456789123457": 27, "00100": 27, "figur": [27, 39, 43, 54, 56], "12e": 27, "012": 27, "e2": [27, 35, 41, 43, 50, 52], "0e": 27, "6000": [27, 121], "600e": 27, "inexact": 27, "approx": [27, 43], "099609": 27, "12500": 27, "12500000000000000000": 27, "disallow": [27, 58, 117, 121], "appar": 27, "closest": [27, 38], "5404319552844595": 27, "29999999999999998890": 27, "30000000000000000000": 27, "_mpf_": 27, "prec": [27, 29, 35, 58, 121], "_prec": 27, "4915": 27, "70": [27, 41, 43, 50, 59, 81, 124], "307": [27, 120], "ceil": [27, 32, 52, 56, 87, 119, 120, 121], "epsilon_eq": 27, "floor": [27, 32, 56, 67, 86, 87, 121], "mpmath": [27, 33, 50, 57, 75, 79, 84, 91, 96, 105, 109, 110, 111, 112, 113, 114, 118, 119], "unprejud": 27, "3602879701896397": 27, "18014398509481984": 27, "roughli": [27, 62], "limit_denomin": 27, "75": 27, "use_tri": [27, 52], "use_rho": [27, 52], "use_pm1": [27, 52], "factorint": [27, 52, 55, 76, 112], "cheap": [27, 52], "disabl": [27, 44, 52, 55, 56, 58, 62, 113, 120], "max_denomin": 27, "1000000": [27, 105], "141592653589793": [27, 124], "311": [27, 52, 121], "99": [27, 50, 52, 120], "approximation_interv": 27, "number_cl": 27, "modular_multiplicative_invers": 27, "extended_euclidean_algorithm": 27, "1_": 27, "28number": 27, "88": [27, 120, 123], "921_": 27, "one_half": 27, "loos": 27, "ieee": 27, "754": 27, "counter": [27, 31, 37], "constrast": 27, "affin": [27, 117], "topolog": [27, 28, 78, 113], "compactif": 27, "tild": 27, "undetermin": [27, 55, 62, 64, 88, 113, 121], "phase": [27, 43, 119], "718281828": 27, "napier": 27, "e_": 27, "28mathematical_const": 27, "imaginary_unit": 27, "141592654": 27, "circumfer": [27, 35], "diamet": 27, "area": [27, 35, 37, 40, 41], "mascheroni": [27, 33], "5772157": 27, "recur": 27, "harmon": [27, 32, 52, 103, 113, 116], "ln": [27, 31, 43, 56, 67, 88], "93mascheroni_const": 27, "91596559": 27, "27s_constant": 27, "golden_ratio": 27, "oscil": [27, 85, 113], "zero_to_the_power_of_zero": 27, "indeterminate_form": 27, "raw": [27, 55, 58], "as_coef_mul": 27, "flatten": [27, 57, 78, 79, 113, 118], "consequ": [27, 50], "4596": 27, "compound": [27, 42, 115], "5728": 27, "suspect": [27, 52], "5706": 27, "consider": [27, 59, 62], "moot": 27, "as_coef_add": 27, "extract_leading_ord": 27, "commutative_part": 27, "noncommutative_part": 27, "order_symbol": 27, "subprocess": [27, 73], "dividend": 27, "lh": [27, 56, 120], "rop": 27, "dispatch": [27, 56], "appropri": [27, 31, 50, 55, 56, 58, 59, 62, 67, 71, 74, 94], "validrelationaloper": 27, "as_set": [27, 118], "prioriti": [27, 79], "relationship": [27, 30, 43, 52, 58], "truth": [27, 45, 50, 116, 117], "unknown": [27, 62, 63, 64, 94, 117, 121, 124, 134], "prevent": [27, 52, 55, 56, 58, 118, 128], "boolalg": [27, 45, 113], "_eval_eq": 27, "intent": [27, 74], "client": [27, 76], "e1": [27, 33, 35, 41], "litter": 27, "oddbal": 27, "minor": [27, 35, 50, 56], "caveat": 27, "succinctli": 27, "coupl": [27, 50, 111, 112, 115], "nativ": [27, 55], "silent": [27, 73], "e3": 27, "e4": 27, "e5": 27, "e6": 27, "e7": 27, "e8": 27, "consol": [27, 44, 132], "annoy": 27, "succinct": 27, "occasion": 27, "tempt": 27, "mdarg": 27, "vsin": 27, "vdiff": 27, "shortcut": [27, 46, 56, 57, 58, 113], "naturals0": [27, 57], "carri": [27, 79], "_eval_deriv": [27, 121], "conserv": [27, 78], "136": 27, "_diff_wrt": 27, "temporarili": 27, "strang": [27, 87, 121], "motiv": 27, "lagrang": [27, 55, 59, 118], "unambigu": [27, 62], "meant": [27, 29, 33, 38, 43, 52, 57, 58, 63], "surpris": [27, 126], "reader": [27, 76, 127], "_xi_1": [27, 63], "doit_numer": 27, "zeroth": 27, "legaci": [27, 67], "v5_2": 27, "infunct": 27, "algebraiccomput": 27, "idiff": [27, 41, 118], "myfunc": [27, 32, 79], "honour": [27, 32], "eval": [27, 31, 32, 33, 55, 56, 74, 118, 132], "elif": [27, 32], "_eval_is_r": [27, 32], "fdiff": [27, 31, 32], "argindex": [27, 31, 32], "subject": 27, "trig": [27, 43, 55, 56, 58], "meta": [27, 62, 63], "catch": [27, 62], "_eval_expand_complex": 27, "shut": [27, 55], "unwant": [27, 79], "alphabet": [27, 59, 74, 131], "expand_hint": 27, "_eval_expand_hint": [27, 115], "respons": [27, 54, 56, 74, 115], "furthermor": [27, 45, 128], "unexpect": [27, 121], "attributeerror": [27, 50, 87, 88, 120, 121], "rebuild": [27, 55], "metahint": 27, "myclass": 27, "_eval_expand_doubl": 27, "pop": [27, 59], "angleformula": 27, "virtual": [27, 40, 127], "isn": [27, 43, 79, 128], "negat": [27, 45], "horner": [27, 55, 113], "untouch": 27, "mixin": 27, "tini": 27, "subresult": [27, 55, 110, 123], "maxprec": 27, "291": 27, "framework": [27, 71, 74, 108, 110, 113], "slice": [27, 46, 50, 55, 58, 68, 118, 130], "tuple_count": 27, "afterward": 27, "behav": [27, 31, 33, 52, 55, 57, 58, 68], "view": [27, 62, 72, 74, 76, 78, 79, 91], "reimplement": [27, 110, 120], "wide": [27, 44, 50, 55, 56, 67, 101], "notiter": 27, "as_int": 27, "is_sequ": [27, 114], "generatortyp": 27, "almost": [27, 29, 48, 54, 62, 67, 76, 106, 114, 124, 133], "isprimit": 27, "_gcd_term": 27, "terms_gcd": [27, 55, 118], "diffgeom": [28, 115], "manifold": [28, 115, 117], "dim": [28, 42, 69, 72, 120], "role": [28, 31], "patch": [28, 56, 94, 100, 109], "studi": [28, 59], "chart": [28, 54], "parameter": [28, 34, 35, 38, 40, 59], "coordsystem": 28, "coord": [28, 38, 39, 41], "rect": 28, "coord_system": 28, "connect_to": 28, "coord_tuple_transform_to": 28, "applyfunc": [28, 46, 50, 51, 68], "jacobian": [28, 50, 110], "cartesian": [28, 54, 57, 78, 113, 114, 119, 120], "point_to_coord": 28, "basescalarfield": 28, "coord_funct": 28, "basevectorfield": 28, "v_x": 28, "base_vector": 28, "oneform": 28, "base_oneform": 28, "rect_0": 28, "e_rect_0": 28, "drect_0": 28, "e_x": [28, 72], "coord_index": 28, "to_si": 28, "from_coord": 28, "to_expr": [28, 29, 84], "fill_in_gap": 28, "regist": [28, 117], "inappropri": 28, "boilerpl": [28, 44], "coord_si": 28, "r0": 28, "theta0": 28, "fx": [28, 62, 63], "fy": [28, 63], "ftheta": 28, "predefin": [28, 58, 72, 100, 104], "r2": [28, 38, 55, 56, 58], "rn": 28, "r2_p": 28, "r2_r": 28, "point_p": 28, "point_r": 28, "s_field": 28, "pprint": [28, 33, 50, 52, 56, 58, 62, 63, 67, 78, 85, 107, 121, 132], "xi_2": 28, "dxi_2": 28, "dy0": 28, "v1": [28, 38, 39, 50, 87], "v2": [28, 38, 50], "v_1": 28, "v_2": 28, "e_r": 28, "c_xy": 28, "c_xr": 28, "form_field": 28, "exterior": [28, 40], "df": [28, 63], "dg": 28, "xi_1": 28, "dxi_1": 28, "tensorproduct": [28, 68, 115], "multilinear": 28, "lack": [28, 56], "dy": [28, 41, 50, 56, 59, 62, 63, 125], "tp1": 28, "tp": 28, "pad": [28, 50], "wedgeproduct": 28, "wp1": 28, "liederiv": 28, "v_field": 28, "transport": 28, "pushforward": 28, "curv": [28, 37, 43, 54, 62], "basecovarderivativeop": 28, "metric_to_christoffel_2nd": 28, "cvd": 28, "covarderivativeop": 28, "intcurve_seri": 28, "vector_field": 28, "param": [28, 59], "start_point": 28, "dt": [28, 33, 62], "movement": 28, "intcurve_diffequ": 28, "atan2": [28, 32, 94], "init_cond": 28, "vectors_in_basi": 28, "kept": [28, 78], "e_theta": 28, "twoform_to_matrix": 28, "twoform": 28, "e_j": 28, "metric_to_christoffel_1st": 28, "christoffel": 28, "levi": [28, 33, 72, 96], "civita": [28, 33, 72, 96], "metric_to_riemann_compon": 28, "non_trivial_metr": 28, "dr": [28, 56, 62], "dtheta": 28, "metric_to_ricci_compon": 28, "ricci": 28, "usefulli": 29, "alias": 29, "dtype": [29, 50], "convert_from": 29, "frac_field": [29, 88], "from_expr": [29, 55, 84], "poly_r": [29, 84], "k1": [29, 52], "rr": [29, 120], "tol": [29, 55, 82], "cc": [29, 87], "alg": [29, 120], "__truediv__": 29, "exquo": [29, 55], "commutativ": [29, 84, 85, 87], "__divmod__": [29, 84], "__floordiv__": 29, "__mod__": 29, "simpledomain": 29, "compositedomain": 29, "characteristiczero": [29, 84], "integermodr": [29, 87], "finitefield": [29, 84, 85], "finite_field": 29, "finite_r": 29, "rationalfield": [29, 85], "algebraicfield": [29, 84, 86], "ext": 29, "realalgebraicfield": [29, 84, 85], "complexalgebraicfield": [29, 84], "eject": [29, 55, 85], "univarpolynomialr": [29, 86], "dispersionset": [29, 55, 86], "dispers": [29, 55, 86, 118, 120, 123], "fp": 29, "gp": [29, 62], "mw94": [29, 123], "koe98": [29, 123], "abr71": [29, 123], "man93": [29, 123], "realfield": 29, "53": [29, 50], "almosteq": [29, 86], "to_rat": 29, "complexfield": [29, 87], "expressiondomain": 29, "pythonfinitefield": 29, "gmpyfinitefield": 29, "pythoninteg": [29, 55], "gmpyinteg": 29, "pythonrationalfield": 29, "gmpyrationalfield": 29, "modularinteg": 29, "galoisfieldel": 29, "galoi": 29, "k_sym": 30, "b_n": 30, "binom": [30, 52, 67], "incomplet": [30, 33, 114, 116], "x_2": [30, 55, 59], "dotsc": 30, "j_1": [30, 68], "j_2": 30, "dotsb": 30, "2j_2": 30, "3j_2": 30, "877": 30, "4140": 30, "21147": 30, "115975": 30, "846749014511809332450147": 30, "bell_numb": 30, "bellnumb": 30, "bellpolynomi": 30, "nth": [30, 31, 33, 52, 58, 62, 84, 95, 121], "66": [30, 50, 56], "1000001": 30, "bernoulli_numb": 30, "bernoulli_polynomi": 30, "bernoullinumb": 30, "bernoullipolynomi": 30, "expand_func": [30, 33, 55, 67, 84, 87, 114, 133], "6435": 30, "pascal": [30, 52], "triangl": [30, 36, 37, 40, 41, 50, 52, 115], "diagon": [30, 47, 50, 51, 78, 84, 111, 113, 130], "4th": [30, 52], "c_n": [30, 33, 62], "429": [30, 56], "1430": 30, "4862": 30, "polygamma": [30, 33, 116, 120, 121], "39764993382373624267": 30, "020884341620842555705": 30, "catalan_numb": 30, "catalannumb": 30, "gammabetaerf": [30, 33, 58], "geomet": 30, "mathcircl": 30, "e_n": 30, "61": [30, 40, 52], "1385": 30, "euler_numb": 30, "eulernumb": 30, "alternating_permut": 30, "alternatingpermut": 30, "swing": 30, "fastest": [30, 43, 78], "5040": 30, "derang": [30, 78, 114], "cach": [30, 42, 76, 87, 93, 94, 106, 107, 113, 119, 120], "elsewher": 30, "44": [30, 52, 120], "generate_derang": [30, 78], "gamma_funct": [30, 33], "uppergamma": [30, 33], "double_factori": 30, "f_z": 30, "fibonacci_numb": 30, "fibonaccinumb": 30, "137": 30, "205": [30, 120, 123], "144": 30, "5269": 30, "3600": 30, "_k": [30, 33], "761": [30, 84], "280": [30, 120], "83711": 30, "27720": 30, "30247": 30, "9900": 30, "40": [30, 33, 35, 41, 50, 52], "983697455232980674869851942390639915940": 30, "digamma": [30, 33, 84], "offset": [30, 33], "harmonic_numb": 30, "harmonicnumb": 30, "harmonicnumber2": 30, "l_0": [30, 72], "47": [30, 35, 50, 52], "76": [30, 52, 55, 62], "lucas_numb": 30, "lucasnumb": 30, "pochhamm": [30, 58], "unsign": [30, 58], "274": 30, "225": [30, 52, 123], "511": 30, "9330": 30, "34105": 30, "42525": 30, "22827": 30, "5880": 30, "750": 30, "stirling_numbers_of_the_first_kind": 30, "stirling_numbers_of_the_second_kind": 30, "multiset": [30, 76, 78, 114, 118], "pick": 30, "nc": 30, "aa": 30, "bb": [30, 58], "multiset_combin": [30, 78], "aab": [30, 78], "aabc": 30, "aaaabbbbcccc": 30, "m_1": [30, 59], "m_2": 30, "m_k": 30, "stackexchang": 30, "4643": 30, "submultiset": 30, "giv": 30, "4654": 30, "np": [30, 52, 73], "ba": 30, "multiset_permut": [30, 78], "nt": [30, 78], "aabbc": 30, "mississippi": [30, 78], "609": [30, 121], "1521": 30, "1768": 30, "1224": [30, 52], "579": 30, "197": 30, "csse": 30, "uwa": 30, "au": [30, 62], "cits7209": 30, "707106781186548": 31, "radian": [31, 34, 35, 36, 38, 39, 50, 115], "complex_conjug": 31, "unbranched_argu": 31, "trigonometric_funct": 31, "dlmf": [31, 33], "nist": [31, 33], "gov": [31, 33], "elementaryfunct": 31, "trigonometryangl": 31, "cosin": [31, 33, 43, 55, 67, 86], "tangent": [31, 35, 37, 62], "cotang": 31, "secant": 31, "cosec": 31, "arcsin": [31, 56, 67, 126], "inverse_trigonometric_funct": 31, "arc": 31, "arcco": [31, 56, 126], "ultim": 31, "asex": 31, "arcsec": 31, "arctan": [31, 56, 67, 79], "arccot": 31, "arccsc": 31, "quadrant": 31, "clock": 31, "angl": [31, 33, 34, 35, 36, 38, 39, 40, 115, 118, 133], "arctan2": 31, "567": [31, 121], "ceilingfunct": 31, "floorfunct": 31, "bi": [31, 33, 62, 87, 118], "classic": [31, 33, 115, 117], "lambert": [31, 43], "multivalu": 31, "w_k": 31, "635564016364870": 31, "34747534407696": 31, "41624341514535": 31, "lambert_w_funct": 31, "cond": [31, 43], "nan": [31, 58, 85, 115, 118, 120, 125], "othewis": 31, "piecewise_fold": 31, "conflict": [31, 52, 72, 74], "task": [31, 114, 125], "supremum": [31, 57], "directed_complete_partial_ord": 31, "lattice_": 31, "28order": 31, "principl": [31, 50, 52], "rootof": [31, 55, 62, 65, 84, 85, 88, 93, 113, 120, 121], "rootoftool": [31, 55], "integer_nthroot": [31, 52], "square_root": 31, "root_of_un": 31, "principal_valu": 31, "cuberoot": 31, "presenc": [31, 62, 70], "eq": [31, 41, 43, 54, 55, 56, 58, 59, 62, 63, 64, 65, 67, 73, 74, 78, 84, 85, 87, 95, 114, 116, 120, 121, 126, 128, 134], "powdenest": [31, 133], "periodic_argu": 32, "sec": [32, 43, 56, 120, 133], "csc": [32, 53, 56, 120], "aco": [32, 40, 62, 120, 121, 126], "asec": [32, 119], "acot": [32, 120], "acsc": [32, 119], "hyperbol": [32, 33, 42, 58, 93, 98, 115, 133], "hyperbolicfunct": 32, "coth": [32, 56, 58, 119], "sech": 32, "csch": 32, "asinh": 32, "acosh": [32, 88], "acoth": [32, 88], "roundfunct": 32, "lambertw": [32, 87, 120], "piecewis": [32, 33, 42, 43, 56, 67, 88, 108, 111, 113, 115, 116, 119, 120, 121, 125], "exprcondpair": 32, "miscellan": [32, 42, 77], "identityfunct": 32, "real_root": [32, 55, 88, 121], "bell": [32, 78, 114], "bernoulli": [32, 33, 64, 67, 87, 110], "catalan": 32, "subfactori": [32, 78], "factorial2": [32, 120], "fallingfactori": 32, "luca": 32, "diracdelta": [32, 43, 85, 114, 116], "heavisid": [32, 43, 116], "bessel": [32, 43, 55, 58, 67, 113, 114, 128], "airi": [32, 43, 118], "spline": [32, 113], "ellipt": [32, 35, 116], "orthogon": [32, 42, 50, 113, 116, 120], "spheric": [32, 54, 55, 103, 113, 116, 128], "delta_funct": [33, 43], "sum_i": 33, "is_simpl": 33, "tensor_funct": [33, 115], "kroneckerdelta": [33, 115, 116, 120], "deltafunct": [33, 43], "heaviside_step_funct": 33, "mirror": 33, "288037795340032417959588909060233922890": 33, "49801566811835604271": 33, "15494982830181068512": 33, "lowergamma": [33, 67], "loggamma": 33, "trigamma": 33, "beta_funct": 33, "gammafunct": 33, "17805383034794561964694160130": 33, "65092319930185633889": 33, "8724366472624298171": 33, "loggammafunct": 33, "meromorph": 33, "19093197": 33, "5173168": 33, "ni": 33, "polygamma_funct": 33, "polygammafunct": 33, "polygamma2": 33, "digamma_funct": 33, "digammafunct": 33, "trigamma_funct": 33, "trigammafunct": 33, "int_x": 33, "_1f_1": 33, "xt": 33, "expint": [33, 115], "incomplete_gamma_funct": 33, "upper_incomplete_gamma_funct": 33, "abramowitz": 33, "milton": 33, "stegun": 33, "iren": 33, "1965": 33, "chapter": [33, 52], "gamma2": 33, "gamma3": 33, "exponential_integr": 33, "relation_with_other_funct": 33, "lower_incomplete_gamma_funct": 33, "eulerian": 33, "02671848900111377452242355235388489324562": 33, "2112723729365330143": 33, "7655283165378005676": 33, "betafunct": 33, "error_funct": 33, "gauss": [33, 43, 116], "999999984582742099719981147840": 33, "1296959": 33, "73071763923152794095062": 33, "complementari": 33, "erf2": 33, "erfinv": 33, "erfcinv": 33, "erf2inv": 33, "0000000154172579002800188521596734869": 33, "5648024145755525987042919132": 33, "995322265018952734162069256367": 33, "179143454621292": 33, "inverse_funct": 33, "inverseerf": 33, "inverseerfc": 33, "inverseerf2": 33, "fresnelintegr": 33, "overlin": 33, "bar": [33, 56], "343415678363698242195300815958": 33, "fresnel_integr": 33, "john": [33, 59, 62, 123], "wrench": 33, "jr": 33, "vicki": 33, "allei": 33, "488253406075340754500223503357": 33, "background": 33, "carefulli": 33, "understood": 33, "219383934395520": 33, "21938393439552": 33, "14159265358979": [33, 124], "peopl": [33, 114], "sfu": 33, "ca": [33, 56], "cbm": 33, "aand": 33, "page_228": 33, "nu": [33, 43, 56, 58, 67], "int_1": 33, "postiv": 33, "expintegral": 33, "04516378011749278484458888919": 33, "0652795784357498247001125598": 33, "08346052231061726610939702133": 33, "soldner": 33, "findroot": 33, "45136923488338": 33, "logarithmic_integr": 33, "logarithmicintegr": 33, "soldnersconst": 33, "92242131492155809316615998938": 33, "antideriv": [33, 43], "bewar": 33, "trigonometric_integr": 33, "somewhat": [33, 43], "besselbas": 33, "besselj": [33, 58, 87, 128], "laurent": [33, 87], "j_n": 33, "jn": [33, 55, 128], "bess": [33, 58, 67], "besselk": [33, 86], "luke": [33, 123], "1969": [33, 123], "volum": [33, 50, 59, 62, 76, 123], "bessel_funct": 33, "typefunct": 33, "yn": 33, "iz": 33, "hankel1": 33, "hankel": [33, 43], "iy_": 33, "hankel2": 33, "hankelh1": 33, "hankelh2": 33, "2z": [33, 67], "orthopoli": [33, 55], "spherical_bessel_fn": [33, 55], "y_n": [33, 59], "jn_zero": 33, "besseljzero": 33, "scipi": [33, 73, 85], "spherical_jn": [33, 85], "newton": [33, 106], "7635": 33, "095": 33, "323": [33, 120], "515": 33, "airybas": 33, "airyai": [33, 118], "airyaiprim": [33, 118], "22740742820168557599192443603787379946077222541710": 33, "airybi": [33, 118, 120], "airybiprim": [33, 118], "airy_funct": 33, "encyclopediaofmath": 33, "airyfunct": 33, "41230258795639848808323405461146104203453483447240": 33, "61825902074169104140626429133247528291577794512415": 33, "27879516692116952268509756941098324140300059345163": 33, "bspline": 33, "bspline_basi": 33, "knot": 33, "0th": 33, "cubic": [33, 55, 65, 87, 111, 121], "bspline_basis_set": 33, "zeta_funct": 33, "hurwitz": 33, "admit": [33, 62], "circumst": [33, 128], "lerch": [33, 115], "transcend": [33, 115], "lerchphi": [33, 115], "dirichlet_eta": 33, "polylog": [33, 115, 121], "hurwitz_zeta_funct": 33, "famou": [33, 52, 59], "dirichlet": 33, "20205690315959": 33, "dirichlet_eta_funct": 33, "dirichletetafunct": 33, "polylogarithm": [33, 115], "sheet": 33, "phi_0": 33, "ze": 33, "bateman": 33, "erd\u00e9lyi": 33, "1953": 33, "york": [33, 123], "mcgraw": 33, "hill": [33, 117], "lerch_transcend": 33, "diverg": [33, 119], "parametr": [33, 34, 38, 54, 59, 87, 88, 115, 117, 120], "generalized_hypergeometric_funct": 33, "convergence_stat": 33, "radius_of_converg": 33, "radiu": [33, 35, 40, 67], "anywher": [33, 78, 81], "barn": 33, "resembl": [33, 71, 122], "confusingli": 33, "tradition": 33, "super": [33, 56], "script": [33, 73, 92, 110], "__1": 33, "__": [33, 43, 56, 67, 71], "subvector": 33, "aother": 33, "bm": 33, "bother": 33, "allow_hyp": [33, 58], "subsum": 33, "meijer_g": 33, "region": [33, 41, 43, 54, 62, 115], "elliptic_integr": 33, "elliptic_k": 33, "tfrac": [33, 62, 67], "50923695405127": 33, "625146415202697": 33, "128": [33, 52, 56, 123], "ellipticintegr": 33, "elliptick": 33, "elliptic_f": 33, "909449841483": 33, "74720545502474": 33, "ellipticf": 33, "elliptic_": 33, "512": 33, "55203744279187": 33, "290764986058437": 33, "991052601328069": 33, "81879421395609": 33, "elliptice2": 33, "elliptic": 33, "elliptic_pi": 33, "50232379629182": 33, "760939574180767": 33, "29136443417283": 33, "32555634906645": 33, "ellipticpi3": 33, "ellipticpi": 33, "p_n": [33, 43], "weight": [33, 41, 43, 58, 116], "chebyshevu": 33, "chebyshevt": 33, "chebyshevt_root": 33, "chebyshevu_root": 33, "assoc_legendr": 33, "assoc_laguerr": 33, "jacobi_poli": [33, 55], "gegenbauer_poli": [33, 55], "chebyshevt_poli": [33, 55], "chebyshevu_poli": [33, 55], "hermite_poli": [33, 55], "legendre_poli": [33, 55], "laguerre_poli": [33, 55], "jacobi_polynomi": 33, "jacobipolynomi": 33, "jacobip": 33, "jacobi_norm": 33, "normilz": 33, "p_m": 33, "delta_": 33, "gegenbauer_polynomi": 33, "gegenbauerpolynomi": 33, "gegenbauerc3": 33, "chebyshev_polynomi": 33, "chebyshevpolynomialofthefirstkind": 33, "chebyshevpolynomialofthesecondkind": 33, "u_n": [33, 43], "chebyshev_root": 33, "kth": [33, 52], "legendre_polynomi": 33, "legendrepolynomi": 33, "legendrep": 33, "legendrep2": 33, "associated_legendre_polynomi": 33, "hermite_polynomi": 33, "hermitepolynomi": 33, "hermiteh": 33, "l_n": [33, 43], "laguerre_polynomi": 33, "laguerrepolynomi": 33, "laguerrel": 33, "laguerrel3": 33, "associatedlaguerrepolynomi": 33, "spherical_harmon": 33, "ynm": 33, "ynm_c": 33, "znm": 33, "sphericalharmon": 33, "sphericalharmonici": 33, "z_n": 33, "eijk": 33, "compat": [33, 42, 50, 70, 72, 74], "levicivita": [33, 50, 116], "eval_levicivita": 33, "pseudotensor": 33, "kroneck": [33, 72, 96, 115, 117], "kronecker_delta": 33, "indices_contain_equal_inform": 33, "fermi": 33, "above_fermi": 33, "below_fermi": 33, "is_above_fermi": 33, "is_below_fermi": 33, "is_only_below_fermi": 33, "is_only_above_fermi": 33, "killable_index": 33, "regard": [33, 66, 88], "preferred_index": 33, "incorrectli": [34, 35, 85, 87, 88, 120], "polyfunc": [34, 55], "arbitrary_point": [34, 35, 37, 38, 40], "plot_interv": [34, 35, 38, 40], "geometr": [34, 35, 36, 37, 38, 39, 40, 41, 50, 67, 85, 87, 94, 110, 115, 117, 118, 130], "lower_bound": [34, 35, 38, 40], "upper_bound": [34, 35, 38, 40], "counterclockwis": [34, 35, 36, 39], "scale": [34, 35, 36, 39, 40, 41, 54, 67], "geometryent": [34, 35, 36, 38, 39, 40, 41], "hradiu": 35, "vradiu": 35, "eccentr": 35, "geometryerror": [35, 38, 40, 41], "radii": 35, "horizont": [35, 38, 50, 56, 62], "foci": 35, "major": [35, 119], "apoapsi": 35, "focu": [35, 58], "periapsi": 35, "shortest": [35, 38, 40, 58, 62, 78, 118], "encloses_point": [35, 36, 40], "border": [35, 40], "evolut": 35, "focus_dist": 35, "focal": 35, "entiti": [35, 38, 39, 40, 41, 42, 85, 115], "rai": [35, 37, 38, 115, 118], "100500": 35, "363": [35, 52], "175": [35, 50, 123], "48": [35, 59, 120, 125], "is_tang": [35, 37], "linearent": [35, 38, 40], "polygon": [35, 36, 37, 41, 54, 113, 115, 121], "notimplementederror": [35, 38, 41, 58, 62, 63, 85, 87, 88, 120], "tangent_lin": [35, 94], "l1": [35, 37, 38, 41], "normal_lin": [35, 118], "quartic": [35, 55, 65, 111, 116], "38": [35, 50, 52, 59, 120], "2020": [35, 85], "random_point": [35, 38], "assur": [35, 52], "41": [35, 50, 52, 59, 130], "364": 35, "notimpl": [35, 87, 121], "collinear": [35, 37, 39, 40, 54], "c1": [35, 41, 62, 64, 72, 134], "c2": [35, 41, 62, 64, 67, 72], "p4": [35, 38, 39, 40, 54], "ambient_dimens": [36, 39], "boundari": [36, 38, 57, 62, 64, 67, 87, 118], "ellips": [36, 37, 39, 40, 56, 85, 94, 113, 118], "regularpolygon": [36, 37, 40], "t2": [36, 40, 41, 59, 72], "is_similar": [36, 38, 40, 41], "uniform": [36, 54, 67], "enlarg": 36, "are_similar": [36, 37, 41], "entity1": 37, "entity2": 37, "convex_hul": [37, 40, 41, 110], "zp": 37, "is_collinear": [37, 39], "bc": [37, 62], "l2": [37, 38, 41], "subs_point": 37, "val": [37, 79], "extended_r": [37, 40, 85, 120], "p11": 37, "p12": 37, "p13": 37, "p21": 37, "p22": 37, "p23": 37, "ll1": 37, "ll2": 37, "ll3": 37, "ll4": 37, "ll5": 37, "ll6": 37, "pp1": 37, "pp2": 37, "pp3": 37, "orient": [37, 40, 114], "clockwis": 37, "overlap": [37, 41, 57], "infanc": 37, "geometryresult": 37, "certainli": [37, 76], "fair": [37, 67], "angle_between": [38, 40], "dot": [38, 39, 50, 56, 116, 120, 127], "readili": [38, 50], "is_perpendicular": [38, 40], "are_concurr": 38, "concurr": 38, "imposs": [38, 62, 63, 87], "amongst": 38, "rest": [38, 45, 48, 114, 127], "l3": 38, "l4": 38, "p5": [38, 39, 40, 54], "p6": [38, 40, 54], "p7": [38, 40, 54], "is_parallel": 38, "perpendicular": [38, 40], "parallel_lin": 38, "perpendicular_lin": 38, "perpendicular_seg": 38, "enpoint": 38, "reform": 38, "slope": [38, 39, 40], "moment": [38, 54, 55, 59], "2d": [38, 40, 54, 56, 59, 91, 93, 102, 115, 127, 128], "semi": [38, 50, 52], "ccw": [38, 40], "xdirect": 38, "ydirect": 38, "r1": [38, 55], "eman": 38, "undirect": [38, 40], "midpoint": [38, 39, 40, 43, 54], "170": 38, "perpendicular_bisector": 38, "bisector": [38, 40], "ambient": 39, "xmin": [39, 54], "ymin": [39, 54], "xmax": [39, 54], "ymax": [39, 54], "vi": 39, "v1_slope": 39, "vi_slop": 39, "is_concycl": 39, "concycl": 39, "conycl": 39, "successfulli": 39, "is_scalar_multipl": 39, "3x3": [39, 50], "fewer": 40, "unrot": 40, "circumscrib": 40, "spin": [40, 113, 114], "perimet": 40, "centroid": [40, 41, 115], "convex": [40, 41], "paulbourk": 40, "net": [40, 78], "polygonmesh": 40, "insidepoli": 40, "poly1": 40, "poly2": 40, "is_convex": 40, "interior": [40, 55, 57, 118], "180": [40, 123], "rot": 40, "apothem": 40, "inradiu": 40, "inscrib": 40, "rp": 40, "circumcent": 40, "circumcircl": 40, "circumradiu": 40, "incircl": 40, "exterior_angl": 40, "interior_angl": 40, "leg": 40, "hypotenus": 40, "square_in_unit_circl": 40, "asymmetr": 40, "kite": 40, "asa": [40, 115], "sa": [40, 55, 115], "sss": [40, 115], "altitud": 40, "height": [40, 56], "straight": [40, 62], "incent": 40, "touch": 40, "is_equilater": 40, "is_isoscel": 40, "is_right": 40, "is_scalen": 40, "uniformli": [40, 41, 54], "medial": 40, "median": [40, 42], "orthocent": 40, "real_num": 41, "hull": 41, "graham_scan": 41, "andrew": 41, "monoton": 41, "1979": 41, "geomalgorithm": 41, "a10": 41, "_hull": 41, "t3": [41, 59], "mass": [41, 62], "averag": [41, 43, 52, 94, 95, 107], "mixtur": [41, 74, 120], "stack": [41, 50, 56, 76, 130], "tripl": [41, 50, 81], "subdirectori": 42, "stabl": [42, 50, 78, 84], "sympifi": [42, 45, 78, 91, 93, 113, 114, 117, 121], "atomicexpr": [42, 113], "mul": [42, 43, 50, 52, 55, 56, 58, 63, 70, 84, 85, 87, 88, 94, 95, 105, 107, 116, 117, 129], "multidimension": [42, 123], "exprtool": [42, 55], "pappu": 42, "hexagon": 42, "printer": [42, 44, 50, 71, 73, 74, 79, 85, 88, 91, 94, 110, 113, 118, 119, 120, 121, 127], "prettyprint": 42, "ccodeprint": [42, 119], "lambdaprint": 42, "latexprint": 42, "mathmlprint": 42, "pythonprint": 42, "reprprint": 42, "strprinter": [42, 50], "dotprint": [42, 132], "nthroot": 42, "besselsimp": [42, 116], "hypersimilar": 42, "posifi": 42, "logcombin": [42, 62, 111, 113, 133], "subexpres": 42, "epath": [42, 113], "od": [42, 60, 63, 64, 65, 84, 85, 87, 88, 110, 111, 112, 113, 114, 116, 119, 120, 121], "pde": [42, 60, 62, 110, 116], "codegen": [42, 73, 77, 84, 119, 120], "enum": [42, 77, 118], "memoiz": [42, 76, 77], "randomis": [42, 77], "vast": [43, 55, 111], "tediou": 43, "happili": [43, 70], "nonelementari": [43, 116], "mellin_transform": 43, "sensibl": 43, "strip": [43, 52, 81], "fourier": [43, 86, 113, 115], "bilater": 43, "auxiliari": 43, "mellintransform": 43, "integraltransform": 43, "nocond": 43, "inverse_mellin_transform": 43, "laplace_transform": [43, 87], "fourier_transform": 43, "hankel_transform": 43, "inverse_hankel_transform": 43, "vice": [43, 52, 121], "versa": [43, 52, 121], "inversemellintransform": 43, "st": 43, "laplacetransform": 43, "inverse_laplace_transform": 43, "singularit": 43, "inverselaplacetransform": 43, "unitari": 43, "frequenc": 43, "fouriertransform": 43, "inverse_fourier_transform": 43, "sine_transform": 43, "inverse_sine_transform": 43, "cosine_transform": 43, "inverse_cosine_transform": 43, "inversefouriertransform": 43, "sinetransform": 43, "inversesinetransform": 43, "cosinetransform": 43, "inversecosinetransform": 43, "hankeltransform": 43, "ht": 43, "inversehankeltransform": 43, "risch": [43, 93, 98, 116, 125], "norman": [43, 98], "huge": [43, 52, 117], "whittak": 43, "improp": [43, 87, 120, 121], "entail": 43, "delic": 43, "albeit": 43, "eventu": [43, 74, 114, 115], "_eval_integr": 43, "nonelementaryintegr": [43, 116], "proven": [43, 52], "meijerint": [43, 115], "moder": 43, "slowest": 43, "irrespect": [43, 59], "line_integr": 43, "deltaintegr": 43, "couldn": [43, 62, 63], "rationaltool": [43, 55], "ratint": [43, 110], "bro05": [43, 123], "ratint_logpart": 43, "ratint_ratpart": 43, "lazard": [43, 123], "rioboo": 43, "trager": [43, 113], "q_i": 43, "horowitz": 43, "ostrogradski": 43, "heurisch": [43, 116], "retri": [43, 52], "degree_offset": 43, "unnecessary_permut": 43, "manuel": [43, 123], "bronstein": [43, 55, 64, 123], "poor": 43, "man": [43, 100, 123], "toplevel": 43, "preprocess": 43, "bro": [43, 123], "heurisch_wrapp": 43, "reevalu": 43, "trigonometri": [43, 93], "trigintegr": 43, "wikibook": 43, "integration_techniqu": 43, "as_sum": 43, "trapezoid": 43, "rectangle_method": 43, "trapexoid": 43, "730": 43, "809": 43, "int_a": 43, "quadrat": [43, 52, 55, 59, 62, 67, 87, 117, 119, 121], "uvar": 43, "ui": [43, 63], "accomplish": 43, "_compute_transform": 43, "_as_integr": 43, "integraltransformerror": 43, "_name": 43, "_collapse_extra": 43, "needev": 43, "function_vari": 43, "transform_vari": 43, "gauss_legendr": 43, "n_digit": 43, "legendr": [43, 52, 55, 59, 116], "w_i": [43, 55, 62], "7746": 43, "55556": 43, "88889": 43, "86114": [43, 55], "33998": [43, 55], "34785": 43, "65215": 43, "gauss_laguerr": 43, "gauss_gen_laguerr": 43, "gauss_hermit": 43, "gauss_chebyshev_t": 43, "gauss_chebyshev_u": 43, "gauss_jacobi": 43, "gaussian_quadratur": 43, "laguerr": [43, 55, 116, 120], "l_": 43, "41577": 43, "2943": 43, "2899": 43, "71109": 43, "27852": 43, "010389": 43, "22285": 43, "1889": 43, "9927": 43, "7751": 43, "8375": 43, "983": [43, 86], "45896": 43, "417": [43, 58], "11337": 43, "010399": 43, "00026102": 43, "9855e": 43, "93laguerre_quadratur": 43, "2247": 43, "29541": 43, "1816": 43, "3506": 43, "3358": 43, "43608": 43, "00453": 43, "15707": 43, "72463": 43, "hermite_quadratur": 43, "19016": 43, "7845": 43, "5253": 43, "4493": 43, "31413": 43, "00906": 43, "97851": 43, "9904": 43, "3193": 43, "712": 43, "53087": 43, "67721": 43, "11895": 43, "0023152": 43, "86602": 43, "0472": 43, "96593": 43, "70711": 43, "25882": 43, "5236": 43, "93gauss_quadratur": 43, "3927": 43, "7854": 43, "90097": 43, "62349": 43, "22252": 43, "084489": 43, "27433": 43, "42658": 43, "jacobi": [43, 52, 55, 116], "7063": 43, "0973": 43, "33795": 43, "87174": 43, "5917": 43, "2093": 43, "050584": 43, "22169": 43, "39439": 43, "93jacobi_quadratur": 43, "environ": [44, 56, 87, 92, 119], "plain": [44, 55, 56], "\u03b8": 44, "grevlex": [44, 55, 56, 78, 131], "automaticsymbol": 44, "floatration": [44, 121], "integerdivisionwrapp": [44, 121], "unicode_identifi": 44, "booleantru": [45, 88, 121], "shorthand": [45, 57], "bitwis": 45, "rememb": [45, 50, 56, 58, 68], "thumb": 45, "asid": [45, 62, 63, 128], "doubt": 45, "quot": [45, 56, 81, 85], "ye": [45, 62], "greet": 45, "booleanfals": 45, "xor": [45, 53, 85, 113], "nand": 45, "ITE": [45, 113, 121], "claus": [45, 88], "disjunct": [45, 116], "to_cnf": 45, "cnf": 45, "simplest": [45, 50, 52, 58, 62, 88, 116, 133], "is_cnf": 45, "to_dnf": [45, 116], "dnf": 45, "is_dnf": [45, 116], "is_nnf": 45, "to_nnf": 45, "nnf": 45, "simplify_log": [45, 116], "sop": [45, 123], "proposit": 45, "sentenc": 45, "dpll2": 45, "all_model": 45, "unsatisfi": 45, "use_model": 45, "unsat": 45, "mutablematrix": [46, 49], "mutabledensematrix": [46, 50], "densematrix": [46, 50, 51], "column": [46, 50, 51, 56, 62, 118, 121, 130], "as_immut": [46, 51], "as_mut": [46, 47, 48, 51], "ey": [46, 47, 48, 49, 50, 51, 68, 130], "reshap": [46, 51, 68, 85, 127], "col": [46, 47, 50, 51, 84], "tolist": [46, 51, 68], "col_op": [46, 51], "functor": [46, 51], "row_op": [46, 51], "col_swap": [46, 51, 130], "row_swap": [46, 51, 130], "copyin_list": 46, "copyin_matrix": 46, "fill": [46, 50, 51, 81], "zip_row_op": [46, 51], "count_op": [46, 50, 58, 78, 133], "immutabledensematrix": [46, 48], "hermitian": [46, 48, 50, 51], "matrixsymbol": [47, 56, 115, 121], "matrixexpr": [47, 48, 121], "matadd": 47, "matmul": [47, 120], "as_explicit": 47, "immutablematrix": [47, 49, 50, 51, 79, 115, 119, 121, 130], "elementwis": [47, 50, 68, 113], "matpow": 47, "mat": [47, 56], "functionmatrix": 47, "lamda": [47, 56, 57, 67], "sparsematrix": [47, 50, 51, 58, 113], "lazili": 47, "342923500": 47, "zeromatrix": 47, "blockmatrix": [47, 115], "submatric": [47, 50], "block_collaps": 47, "blockdiagmatrix": 47, "mission": 48, "bridg": 48, "tension": 48, "safeti": 48, "freeli": 48, "matrixbas": [49, 51, 65], "immutablesparsematrix": 49, "abil": [50, 62, 116, 128], "quick": [50, 52, 65, 79, 121], "diag": [50, 130], "learn": [50, 73, 83], "m2": [50, 52, 59, 62, 68, 72], "96": [50, 120, 121, 123], "150": [50, 59, 130], "del": [50, 72, 76, 119, 130], "v3": 50, "glue": 50, "m1": [50, 52, 59, 62, 68, 72], "row_join": [50, 51], "m3": [50, 59, 68], "col_join": [50, 51], "ll": 50, "det": [50, 85, 95, 120, 130], "lu": [50, 116], "qr": [50, 111, 113], "qrdecomposit": 50, "lusolv": 50, "cheat": 50, "soln": [50, 51], "gram": 50, "schmidt": 50, "out1": 50, "gramschmidt": 50, "out2": 50, "63": [50, 52], "1692": 50, "353": 50, "1551": 50, "706": 50, "423": 50, "6707": 50, "spot": 50, "norm": [50, 51, 55, 114, 120], "eigenvalu": [50, 120, 128, 130], "eigenvector": [50, 130], "nullspac": [50, 130], "dirac": [50, 113], "ldldecomposit": [50, 51], "ldl": [50, 51, 113], "choleski": [50, 51, 113], "ludecomposit": 50, "ldlsolv": 50, "lower_triangular_solv": 50, "upper_triangular_solv": 50, "cholesky_solv": [50, 51], "diagonal_solv": 50, "qrsolv": 50, "pinv_solv": 50, "iszerofunc": 50, "_iszero": 50, "ludecomposition_simpl": 50, "ludecompositionff": 50, "pa": 50, "zhou": 50, "jeffrei": [50, 58], "frontier": [50, 57], "china": 50, "67": [50, 120], "2008": [50, 56, 91, 92, 93, 94, 95, 96, 105, 106, 107, 108], "lu_solv": 50, "qr_solv": 50, "triangular": [50, 67, 113], "51": [50, 52], "167": [50, 120], "68": [50, 52, 59, 120], "69": [50, 76], "58": [50, 51, 72], "158": 50, "33": [50, 56], "educ": 50, "adjug": 50, "berkowitz": [50, 95], "cofactormatrix": 50, "charpoli": [50, 130], "processor": 50, "acm": [50, 62, 123], "1984": 50, "147": [50, 120], "keber": 50, "bezout": 50, "tech": 50, "mpi": [50, 57], "006": 50, "saarbr\u00fccken": 50, "berkowitz_det": 50, "berkowitz_minor": 50, "berkowitz_charpoli": 50, "berkowitz_eigenv": 50, "purepoli": [50, 55, 84, 130], "_lambda": 50, "minorentri": 50, "minormatrix": 50, "col_insert": [50, 51, 130], "mti": 50, "insert": [50, 53, 81, 121, 130], "row_insert": [50, 51, 130], "bott": [50, 51], "concaten": 50, "condition_numb": [50, 121], "singular_valu": 50, "relax": [50, 53], "multiply_elementwis": 50, "bareiss": [50, 85], "det_barei": 50, "det_lu": 50, "det_lu_decomposit": 50, "det_bareiss": 50, "todo": [50, 56, 71, 78], "sff": 50, "hong": 50, "lee": 50, "david": [50, 123], "saunder": 50, "journal": [50, 58, 76, 123], "1995": [50, 58, 123], "393": [50, 59], "402": 50, "issn": 50, "0747": [50, 123], "7171": [50, 121, 123], "sciencedirect": [50, 123], "articl": [50, 123], "pii": [50, 123], "s074771718571022x": 50, "suit": [50, 54, 55, 109], "reals_onli": 50, "is_diagon": 50, "is_diagonaliz": 50, "dual": 50, "anti_symmetr": 50, "speak": 50, "eigenv": [50, 121, 128, 130], "eigen": 50, "eigenvect": [50, 130], "tidi": [50, 109], "artifact": 50, "rowslist": [50, 51], "colslist": [50, 51], "get_diag_block": 50, "decoupl": 50, "hstack": [50, 85], "adj": 50, "inverse_lu": 50, "inverse_g": 50, "inverse_adj": 50, "inv_mod": 50, "cof": 50, "is_anti_symmetr": 50, "wouldn": 50, "is_low": 50, "is_upp": [50, 85], "clear_subproduct": 50, "diagonaliz": [50, 117, 120, 130], "subproduct": 50, "is_hermitian": [50, 51, 85], "is_lower_hessenberg": 50, "hessenberg": 50, "superdiagon": 50, "is_upper_hessenberg": 50, "is_squar": [50, 52, 85, 121], "is_symbol": 50, "is_symmetr": [50, 51], "subdiagon": 50, "vacuou": 50, "vectori": 50, "hessian": 50, "wronskian": [50, 62, 85], "jordan_cel": [50, 85, 120], "calc_transform": 50, "cell": 50, "jcell": 50, "jordan_form": [50, 85, 130], "key2bound": 50, "key2ij": 50, "hadamard": [50, 113], "200": [50, 52, 54, 109], "300": [50, 52, 114], "frobeniu": 50, "fro": 50, "sing": 50, "spectral": 50, "span": [50, 56, 130], "permutebkwd": 50, "permutefwd": 50, "pinv": 50, "moor": 50, "penros": 50, "pseudoinvers": 50, "penrose_pseudoinvers": 50, "arbitrary_matrix": 50, "underdetermin": [50, 65, 116], "wn_m": 50, "Will": 50, "_w0_0": 50, "_w1_0": 50, "_w2_0": 50, "59": [50, 62], "obtaining_all_solutions_of_a_linear_system": 50, "print_nonzero": 50, "symb": [50, 56], "xx": 50, "rref": [50, 65, 120, 130], "echelon": [50, 130], "pivot": [50, 130], "solve_least_squar": [50, 51], "xy": [50, 51, 133], "rowstart": 50, "rowend": 50, "rowsep": 50, "colsep": 50, "vec": [50, 110], "vech": [50, 110], "check_symmetri": 50, "reliabl": [50, 62, 99, 125], "vstack": [50, 85], "matrixerror": 50, "shapeerror": 50, "nonsquarematrixerror": 50, "classof": 50, "contagi": 50, "matrix_multiply_elementwis": 50, "band": 50, "kern": 50, "hpad": 50, "vpad": 50, "varlist": 50, "constraint": 50, "hessian_matrix": 50, "vlist": 50, "orthonorm": 50, "93schmidt_process": 50, "fn": [50, 55], "casoratian": 50, "ly": 50, "kernel": [50, 64], "rsolve_hyp": [50, 64, 95, 120], "randmatrix": 50, "percent": [50, 55], "percentag": [50, 52], "65": [50, 52], "62": 50, "list2numpi": [50, 93], "matrix2numpi": 50, "symarrai": [50, 112, 113], "ndarrai": [50, 72], "prefix_i1_i2_": 50, "prepend": [50, 72], "_2": 50, "a_0": [50, 59, 62, 68], "a_0_0": 50, "a_0_1": 50, "a_0_2": 50, "a_1_0": 50, "a_1_1": 50, "a_1_2": 50, "a_0_0_0": 50, "a_0_0_1": 50, "a_0_1_0": 50, "a_0_1_1": 50, "a_0_2_0": 50, "a_0_2_1": 50, "a_1_0_0": 50, "a_1_0_1": 50, "a_1_1_0": 50, "a_1_1_1": 50, "a_1_2_0": 50, "a_1_2_1": 50, "rot_axis1": 50, "rot_axis2": 50, "rot_axis3": 50, "a2idx": 50, "mutablesparsematrix": 51, "augment": [51, 65], "beneath": 51, "sparsematrixbas": 51, "rl": 51, "_smat": 51, "col_list": 51, "row_list": 51, "liupc": 51, "liu": [51, 123], "jeroen": 51, "van": [51, 123], "grondel": 51, "sparsiti": 51, "nnz": 51, "row_structure_symbolic_choleski": 51, "factoror": 51, "scalar_multipli": 51, "dynam": [52, 76], "eratosthen": 52, "_list": 52, "extend_to_no": 52, "primerang": 52, "cycle_length": 52, "nmax": 52, "detect": [52, 54, 56, 62, 63, 68, 78, 84, 87], "brent": [52, 76], "floyd": 52, "cycle_detect": 52, "nextprim": 52, "prevprim": 52, "utm": 52, "glossari": 52, "xpage": 52, "bertrandspostul": 52, "primetest": 52, "isprim": [52, 112], "primepi": 52, "twin": 52, "bertrand": 52, "brocard": 52, "gap": 52, "occupi": [52, 72], "randprim": 52, "primori": 52, "argu": 52, "211": [52, 62, 123], "primefactor": 52, "149": 52, "postul": 52, "s_postul": 52, "factor_": [52, 55, 59], "antidivisor_count": 52, "antidivisor": 52, "oei": 52, "a066272": 52, "divisor_count": 52, "totient": [52, 121], "margin": [52, 54], "a066272a": 52, "core_t": 52, "core_2": 52, "m_i": 52, "cubefre": 52, "free_integ": 52, "squarefree_cor": 52, "9424": 52, "1178": 52, "379238": 52, "square_factor": 52, "20130629014824": 52, "mayer": 52, "dial": 52, "pipex": 52, "divisor_sigma": 52, "sigma_k": 52, "m_ik": 52, "divisor_funct": 52, "39": [52, 120], "56": [52, 55], "stackoverflow": 52, "1010381": 52, "2000": [52, 113, 123], "65537": 52, "perfect": [52, 59, 128], "1407633717262338957430697921446883": 52, "991": 52, "202916782076162456022877024859": 52, "4200": 52, "pow": [52, 56, 58, 84, 85, 87, 88, 105, 114, 118, 120, 121, 129, 132], "1764": 52, "toggl": 52, "pollard": [52, 123], "ahead": 52, "12345678910111213141516": 52, "2507191691": 52, "1231026625769": 52, "progress": [52, 74], "smoothness_p": 52, "factorrat": 52, "rat": 52, "987": 52, "250": [52, 59], "perfect_pow": 52, "pollard_pm1": 52, "1234": [52, 59, 88], "likelihood": 52, "mumber": 52, "constitut": 52, "site": [52, 119, 123], "1009": [52, 86], "256": [52, 56], "am": 52, "255": [52, 120], "exce": [52, 72], "crack": 52, "21477639576571": 52, "4410317": 52, "1787": 52, "4869863": 52, "2434931": 52, "617": 52, "reach": [52, 55, 62, 119], "1786": 52, "worst": [52, 62], "scenario": 52, "divisisor": 52, "realist": 52, "nearli": 52, "richard": [52, 123], "crandal": 52, "carl": [52, 76], "pomer": [52, 76], "2005": [52, 123], "perspect": [52, 74], "springer": [52, 123], "edit": [52, 123], "236": 52, "238": 52, "20150716201437": 52, "washington": 52, "spring": 52, "ent": 52, "node81": 52, "20170830055619": 52, "toronto": 52, "yuvalf": 52, "pollard_rho": 52, "max_step": 52, "upon": [52, 62, 71, 73, 121, 133], "leader": 52, "16843009": 52, "2048": [52, 56], "32767": 52, "4d": 52, "2489": 52, "1482": 52, "285": [52, 123], "leadup": 52, "bad": [52, 88, 120, 121], "229": 52, "231": [52, 123], "123456": 52, "643": [52, 84], "10000000001": 52, "99009901": 52, "sm": 52, "psm": 52, "govern": 52, "10431": 52, "annot": [52, 56], "crt": 52, "moduli": 52, "u_i": 52, "639985": 52, "912285": 52, "954": 52, "solve_congru": [52, 115], "crt1": 52, "4536": 52, "252": 52, "756": 52, "crt2": 52, "mm": 52, "wan81": [52, 123], "remainder_modulus_pair": 52, "mi": 52, "quicker": 52, "105": [52, 55, 59], "zip": [52, 55, 76], "symmetric_residu": 52, "binomial_coeffici": 52, "k2": 52, "kn": 52, "84": [52, 120], "binomial_coefficients_list": 52, "multinomial_coeffici": 52, "km": 52, "c_kn": 52, "k_m": 52, "multinomial_coefficients_iter": 52, "_tupl": 52, "precomput": 52, "m53": 52, "m33": 52, "partitions_": 52, "npartit": 52, "hardi": 52, "rademach": 52, "1958": 52, "partitionfunctionp": 52, "primal": 52, "prep": 52, "mersenneforum": 52, "showpost": 52, "110896": 52, "pseudoprim": [52, 112], "safe": [52, 70], "miller": 52, "rabin": 52, "46": 52, "mr": 52, "wit": 52, "135": 52, "138": 52, "threshold": 52, "93rabin_primality_test": 52, "deterministic_vari": 52, "1373651": 52, "479001599": 52, "residue_ntheori": 52, "discrete_log": [52, 85], "prime_ord": 52, "babi": [52, 78], "giant": 52, "pohlig": 52, "hellman": 52, "discretelogarithm": 52, "mvv97": [52, 123], "is_nthpow_residu": [52, 121], "hackman": 52, "2009": [52, 109, 110, 111, 123], "is_primitive_root": 52, "said": [52, 62], "n_order": 52, "is_quad_residu": 52, "legendre_symbol": 52, "jacobi_symbol": 52, "genfrac": 52, "alpha_1": 52, "alpha_2": 52, "alpha_k": 52, "nonresidu": 52, "mobiu": 52, "m\u00f6biu": 52, "fermion": [52, 113], "c3": [52, 62, 67], "b6bius_funct": 52, "thoma": [52, 123], "koshi": 52, "nthroot_mod": [52, 121], "all_root": [52, 55, 84, 121], "109": [52, 59, 123], "primitive_root": 52, "stein": 52, "quadratic_residu": 52, "sqrt_mod": 52, "sqrt_mod_it": 52, "continued_fract": 52, "continued_fraction_converg": 52, "continued_fraction_iter": 52, "333": 52, "106": [52, 106], "103993": 52, "33102": 52, "104348": 52, "33215": 52, "208341": 52, "66317": 52, "292": [52, 120, 123], "continued_fraction_period": 52, "surd": [52, 58, 85], "irrat": [52, 55, 84, 85, 119, 121, 128], "continued_fraction_reduc": 52, "periodic_continued_fract": 52, "rosen": 52, "379": [52, 55], "381": 52, "januari": [52, 123], "1992": [52, 123], "157": [52, 123], "233": [52, 62, 123], "718281835": 52, "287": 52, "egyptian_fract": 52, "egyptian": [52, 119], "jewett": 52, "takenouchi": 52, "golomb": 52, "3192": 52, "234": 52, "1118": [52, 87], "2580": 52, "seldom": 52, "blow": 52, "exhibit": 52, "singli": 52, "tendenc": 52, "1921": 52, "golumb": 52, "1962": 52, "propos": 52, "bleicher": 52, "1972": 52, "420": [52, 59, 121], "140": [52, 120], "574": 52, "2788": 52, "6460": 52, "11590": 52, "33062": 52, "113820": 52, "greedy_algorithm_for_egyptian_fract": 52, "ic": 52, "uci": 52, "eppstein": 52, "numth": 52, "egypt": 52, "ami": 52, "uni": [52, 78], "eszterhazi": 52, "hu": 52, "upload": 52, "finalpdf": 52, "ami_42_from129to134": 52, "sympy_pars": 53, "parse_expr": 53, "local_dict": 53, "lambda_not": 53, "auto_symbol": [53, 120], "auto_numb": 53, "global_dict": 53, "token": [53, 120], "standard_transform": 53, "implicit_multiplication_appl": 53, "stringify_expr": 53, "eval_expr": 53, "maxima": [53, 93], "parse_maxima": 53, "name_dict": 53, "datatyp": [53, 74], "split_symbol": 53, "xyz": [53, 113, 114], "implicit_multipl": 53, "split_symbols_custom": 53, "predic": [53, 107, 113, 116], "can_split": 53, "unsplitt": 53, "_token_splitt": 53, "implicit_appl": 53, "function_exponenti": 53, "10sin": 53, "3xyz": 53, "render": [54, 56, 114, 132], "matplotlib": [54, 112, 115, 121], "backend": [54, 73, 114, 119], "plot_parametr": 54, "plot_implicit": [54, 85, 119, 120], "plot3d": 54, "plot3d_parametric_lin": 54, "plot3d_parametric_surfac": 54, "eas": [54, 56], "_seri": 54, "baseseri": 54, "eg": 54, "titl": 54, "xlabel": 54, "aesthet": 54, "color": [54, 56, 78, 108], "nonparametr": 54, "ariti": 54, "cylindr": 54, "ylabel": 54, "xscale": 54, "yscale": 54, "axis_cent": 54, "ylim": 54, "aspect_ratio": 54, "autoscal": 54, "listseri": 54, "lineover1drangeseri": 54, "parametric2dlineseri": 54, "parametric3dlineseri": 54, "line_color": 54, "integers_onli": 54, "surfaceover2drangeseri": 54, "parametricsurfaceseri": 54, "surface_color": 54, "adapt": [54, 64, 78, 85, 87, 107, 122], "sampl": [54, 67, 128], "expr1": 54, "expr2": 54, "nb_of_point": 54, "latex": [54, 56, 85, 86, 88, 91, 107, 110, 111, 114, 116, 117, 118, 120, 121, 127, 128], "400": [54, 55, 95, 121], "expr_x": 54, "expr_i": 54, "expr1_x": 54, "expr1_i": 54, "expr2_x": 54, "expr2_i": 54, "range_x": 54, "range_i": 54, "nb_of_points_x": 54, "nb_of_points_i": 54, "expr_z": 54, "range_u": 54, "range_v": 54, "nb_of_points_u": 54, "nb_of_points_v": 54, "x_var": 54, "y_var": 54, "mesh": 54, "grid": [54, 119], "width": [54, 56, 91], "p8": 54, "p9": 54, "stuff": [54, 74, 81, 84, 113], "textbackend": [54, 120], "lineover1drang": 54, "is_2dlin": 54, "oblig": 54, "get_point": 54, "line2dbaseseri": 54, "only_integ": 54, "get_seg": 54, "get_color_arrai": 54, "var_start_end": 54, "luiz": 54, "henriqu": 54, "de": [54, 59, 62, 78], "figueiredo": 54, "line3dbaseseri": 54, "surfacebaseseri": 54, "var_start_end_x": 54, "var_start_end_i": 54, "var_start_end_u": 54, "var_start_end_v": 54, "implicitseri": 54, "has_equ": 54, "use_interval_math": 54, "dedic": [55, 74], "friendli": [55, 74, 83, 107], "groebnerbasi": [55, 121, 131], "independent_set": [55, 121], "kw88": [55, 123], "q_1": [55, 59], "q_n": 55, "set_ord": [55, 84], "fglm": [55, 84], "grlex": [55, 56, 78], "lt": [55, 95, 114, 121], "ec": 55, "em": 55, "et": [55, 58, 94], "tc": 55, "all_coeff": 55, "mess": [55, 62], "clear_denom": 55, "monom": [55, 86], "cff": 55, "cfg": 55, "count_root": [55, 84], "x_j": 55, "exquo_ground": 55, "factor_list": [55, 84, 86, 121], "free_symbols_in_domain": 55, "from_dict": 55, "from_list": [55, 86], "from_poli": 55, "get_modulu": 55, "has_only_gen": 55, "spec": 55, "is_cyclotom": 55, "cyclotom": [55, 113], "is_ground": 55, "is_homogen": 55, "is_irreduc": 55, "is_linear": 55, "is_multivari": 55, "is_on": [55, 84], "is_quadrat": 55, "is_squarefre": [55, 84], "is_term": [55, 85], "is_univari": 55, "nroot": [55, 114], "maxstep": 55, "cleanup": [55, 107, 110, 111, 120], "rerun": 55, "73205080756888": 55, "73205080756887729352744634151": 55, "quo_ground": 55, "rat_clear_denom": 55, "retract": 55, "recalcul": 55, "got": [55, 85, 86, 121, 128, 129], "set_domain": 55, "set_modulu": 55, "sqf_list": [55, 84, 85], "sqf_norm": [55, 84], "sqf_part": [55, 84], "termwis": 55, "to_exact": 55, "to_field": 55, "to_r": 55, "trunc": 55, "mode": [55, 56, 107], "buc01": [55, 123], "polysi": [55, 65], "solve_poly_system": [55, 65, 85, 121], "mod_invers": [55, 121], "parallel_poly_from_expr": 55, "destruct": 55, "sqf": [55, 59, 85, 87, 113, 131], "gcd_term": 55, "factor_term": [55, 58], "horner_schem": 55, "equispac": 55, "i_1": [55, 68], "i_2": 55, "i_n": [55, 68], "viet": [55, 113], "construct_domain": 55, "field_isomorph": [55, 84], "primitive_el": [55, 84, 121], "ynt89": [55, 123], "arw96": [55, 123], "itermonomi": 55, "gradedlexord": 55, "grade": 55, "reversedgradedlexord": 55, "eval_r": 55, "rootsum": [55, 105, 107, 113], "polyroot": 55, "unread": 55, "casu": 55, "irreducibili": 55, "cubic_equ": 55, "trigonometric_and_hyperbolic_solut": 55, "benchmark": [55, 108], "specialpoli": 55, "cyclotomic_poli": 55, "interpolating_poli": 55, "random_poli": 55, "swinnerton_dyer_poli": 55, "swinnerton": [55, 113], "dyer": [55, 113], "symmetric_poli": 55, "gegenbau": 55, "heroic": 55, "complement": [55, 57, 119, 120, 121], "partfrac": 55, "undertermin": 55, "readabl": [55, 56, 114, 128], "_w": [55, 88], "apart_list": 55, "assemble_partfrac_list": 55, "quadrupl": 55, "bunch": 55, "pfd": 55, "bs93": [55, 123], "partial_list": 55, "reassembl": 55, "pfda": 55, "subsystem": [56, 94], "driver": [56, 73], "adequ": 56, "emptyprint": 56, "mathml": [56, 85, 110, 111, 121], "repr": [56, 127, 129], "qualiti": [56, 110, 120], "spread": [56, 67, 76], "great": [56, 59, 115], "inconveni": 56, "nevertheless": 56, "printmethod": 56, "_print_": 56, "expr_class": 56, "hierarchi": [56, 67], "_print": 56, "_print_rat": 56, "_print_numb": 56, "_print_atom": 56, "_print_bas": 56, "infrastructur": [56, 63, 116], "_print_foo": 56, "_print_bar": 56, "_print_funct": 56, "_print_sin": 56, "_print_tan": 56, "resort": 56, "overload": 56, "customstrprint": 56, "_print_deriv": 56, "noqa": [56, 74], "n802": 56, "mystr": 56, "doprint": 56, "set_global_set": 56, "stringpict": 56, "pretty_symbologi": 56, "prettyform": 56, "hline": 56, "vline": 56, "ascii": [56, 121, 132], "prettifi": 56, "num_column": 56, "ccode": [56, 74, 85], "assign_to": 56, "fab": 56, "_ccode": 56, "indent_cod": 56, "user_funct": [56, 85], "functionclass": [56, 79], "argument_test": 56, "cfunction_str": 56, "cfunction_format": 56, "derefer": 56, "dereferenc": 56, "symbols_to_declar": 56, "not_supported_funct": 56, "code_text": 56, "0l": 56, "custom_funct": 56, "exp2": 56, "ternari": [56, 59, 117], "thrown": 56, "len_i": 56, "indexedbas": [56, 70, 71, 73, 119], "idx": [56, 70, 71, 73], "fcode": 56, "awai": 56, "burden": 56, "tweak": 56, "source_format": 56, "2003": [56, 59, 123], "0d0": 56, "floor1": 56, "floor2": 56, "fcodeprint": 56, "_fcode": 56, "cmplx": 56, "conjg": 56, "715": 56, "65536": 56, "32768": 56, "1024": [56, 86], "mandatori": [56, 73], "inlin": [56, 74], "71828182845905d0": 56, "14159265358979d0": 56, "718281828459045235360287d0": 56, "141592653589793238462643d0": 56, "869604401089358618834491d0": 56, "mygamma": 56, "readi": [56, 102], "past": [56, 110, 132], "instruct": [56, 73, 74], "iii": [56, 62], "mcodeprint": 56, "_mcode": 56, "mathematica_cod": [56, 84], "lambdarepr": 56, "_diofantstr": 56, "usabl": 56, "accepted_latex_funct": 56, "_latex": 56, "amsmath": 56, "itex": 56, "emit": 56, "fold_frac_pow": 56, "fold_func_bracket": 56, "fold_short_frac": 56, "long_frac_ratio": 56, "mul_symbol": 56, "inv_trig_styl": 56, "abbrevi": [56, 68], "mat_str": 56, "smallmatrix": [56, 128], "mat_delim": 56, "symbol_nam": 56, "info": [56, 62, 63], "w3": 56, "mathml2": 56, "chapter4": 56, "markup": 56, "mathml3": 56, "_mathml": 56, "mathml_tag": 56, "srepr": [56, 120], "_diofantrepr": 56, "fallback": [56, 94], "reprifi": 56, "sep": [56, 63, 98], "sstrrepr": 56, "hook": [56, 115], "sy": [56, 91, 113, 126], "displayhook": 56, "split_super_sub": 56, "superscript": [56, 107, 110], "a_x": 56, "var_sub1__sup_sub2": 56, "sub1": 56, "sub2": 56, "assignmenterror": 56, "necess": 56, "pretty_use_unicod": 56, "greek_lett": 56, "iota": 56, "kappa": [56, 67], "omicron": 56, "upsilon": 56, "xobj": 56, "spatial": 56, "vobj": 56, "hobj": 56, "xsym": 56, "symbologi": 56, "pretty_atom": 56, "atom_nam": 56, "pretty_symbol": 56, "symb_nam": 56, "stylis": 56, "draw": [56, 67, 103], "_print_meijerg": 56, "_print_hyp": 56, "jurjen": 56, "bo": 56, "hate": 56, "spammer": 56, "me": 56, "pietjepuk314": 56, "ku": 56, "oc": 56, "oohai": 56, "jason": 56, "gedg": 56, "email": 56, "my": 56, "mun": 56, "terminal_str": 56, "baselin": [56, 85], "pictur": 56, "paren": 56, "ifascii_nougli": 56, "line_break": 56, "multilin": 56, "terminal_width": 56, "bind": 56, "wider": [56, 119], "blue": 56, "black": 56, "maxdepth": 56, "labelfunc": 56, "arrow": 56, "leaf": [56, 129], "digraph": 56, "bgcolor": 56, "rankdir": 56, "td": 56, "finiteset": [57, 88, 114, 115, 119, 120, 121], "emptyset": [57, 120], "neighborhood": 57, "outer": [57, 70, 113, 117], "rim": 57, "right_open": 57, "univers": [57, 59, 64, 119, 121, 126], "universalset": [57, 85, 115, 121], "infimum": 57, "is_clos": 57, "disjoint_set": 57, "is_open": 57, "is_proper_subset": [57, 119], "is_proper_superset": [57, 119], "is_subset": [57, 119], "left_open": 57, "is_superset": [57, 119], "isdisjoint": 57, "issubset": 57, "issuperset": 57, "lebesgu": 57, "powerset": [57, 119], "power_set": 57, "symmetric_differ": 57, "imageset": [57, 117, 118, 119, 120], "fancyset": 57, "ropen": 57, "lopen": 57, "interval_": 57, "as_rel": [57, 114], "is_left_unbound": 57, "is_right_unbound": 57, "finite_set": 57, "union_": 57, "28set_theori": 57, "constitu": 57, "intersection_": 57, "productset": [57, 114, 115, 119, 121], "coin": [57, 67], "cartesian_product": 57, "complementset": 57, "empty_set": 57, "universal_set": [57, 119], "base_set": 57, "square_iter": 57, "extendedr": [57, 86], "nonetheless": [58, 62], "intellig": [58, 62, 133], "unmodifi": 58, "feel": [58, 62], "my_measur": 58, "discourag": 58, "max_len": 58, "koepf": [58, 123], "399": 58, "nfloat": [58, 121], "restor": [58, 117, 119], "eq_x": 58, "max_term": 58, "violat": 58, "polish": [58, 104, 105], "r5": 58, "signsimp": 58, "predict": 58, "magic": [58, 113], "behind": [58, 62], "scene": 58, "expand_power_bas": [58, 133], "wild": [58, 78, 89, 94, 107], "w1": 58, "incorpor": 58, "rcollect": 58, "r3": [58, 114], "unset": 58, "analyz": [58, 71], "forward": [58, 113], "trigsimp_groebn": [58, 120], "al": [58, 94], "wherev": 58, "rv": [58, 67], "ctr1": 58, "ctr2": 58, "ctr3": 58, "ctr4": 58, "rfdz": 58, "ph": 58, "noe": 58, "fileadmin": 58, "mathematik_upload": 58, "acdca": 58, "destime2006": 58, "des_contrib": 58, "autoexpand": 58, "won": [58, 62, 78, 113], "bb1": 58, "be1": 58, "bb2": 58, "be2": 58, "bei": 58, "collaps": 58, "outermost": [58, 70], "familiar": [58, 114], "prefactor": 58, "02": [58, 123], "0005": 58, "max_it": 58, "watson": 58, "ibm": 58, "fagin": 58, "symb85": 58, "rich": [58, 86, 121, 123], "cybertest": 58, "cov": 58, "commun": [58, 62], "cbrt": 58, "cse_main": 58, "postprocess": 58, "numbered_symbol": [58, 62, 78], "stream": [58, 78], "preprocessor": [58, 74], "postprocessor": 58, "extern": [58, 73, 108, 114], "machin": [58, 62, 106, 124], "reduced_expr": 58, "opportun": 58, "opt_sub": 58, "hyperegeometr": 58, "traversaltool": 58, "epathtool": 58, "grammar": 58, "ebnf": 58, "za": 58, "xml": 58, "xpath": 58, "emul": [58, 68, 115], "hasattr": [58, 75], "mathematician": 59, "live": [59, 84, 115], "citi": 59, "father": 59, "mark": [59, 119, 123], "a_1x_1": 59, "a_2x_2": 59, "a_nx_n": 59, "bxy": [59, 117], "cy": [59, 117], "cz": [59, 117], "dxy": [59, 117], "eyz": [59, 117], "fzx": [59, 117], "pythagorean": [59, 117], "t4": 59, "t5": 59, "easiest": [59, 124, 129], "3y": 59, "t_0": 59, "m_0": 59, "4ac": 59, "y_1": 59, "y_2": 59, "9369318": 59, "920": 59, "5y": 59, "bmatrix": 59, "aforement": 59, "providean": 59, "eqyptian": 59, "thorough": 59, "thilinaatsympi": 59, "wordpress": 59, "andreescu": 59, "titu": 59, "andrica": 59, "dorin": 59, "cucurezeanu": 59, "ion": 59, "onlin": [59, 78], "diophantineequ": 59, "20181231080858": 59, "alpertron": 59, "20180831180321": 59, "jpr2718": 59, "ax2p": 59, "_dict": 59, "binary_quadrat": 59, "cubic_thu": 59, "general_pythagorean": 59, "general_sum_of_even_pow": 59, "general_sum_of_squar": 59, "homogeneous_general_quadrat": 59, "homogeneous_ternary_quadrat": 59, "homogeneous_ternary_quadratic_norm": 59, "inhomogeneous_general_quadrat": 59, "inhomogeneous_ternary_quadrat": 59, "t_2": 59, "bivari": 59, "pell": 59, "lmm": 59, "13y": 59, "986": 59, "49299": 59, "1570": 59, "robertson": 59, "juli": [59, 123], "2004": [59, 123], "20180831180333": 59, "nitaj": 59, "numbertheori": 59, "signed_permut": [59, 78, 121], "676": 59, "884": 59, "3xy": 59, "2y": [59, 62, 128], "fxy": 59, "gyz": 59, "hxz": 59, "lattic": 59, "conic": 59, "cremona": 59, "rusin": 59, "2x_": 59, "m4": 59, "8m": 59, "2345": 59, "proofwiki": 59, "integer_as_sum_of_three_squar": 59, "throw": [59, 79, 85, 120], "stopiter": [59, 120], "44542": 59, "207": 59, "schorn": 59, "3456": 59, "1294585930293": 59, "2161": 59, "1137796": 59, "1729": 59, "permute_sign": [59, 78, 121], "sum_of_pow": 59, "evenli": 59, "contit": 59, "reject": [59, 121], "var_t": 59, "q_0": 59, "six": [59, 67], "ur": 59, "dv": 59, "vr": 59, "124": 59, "7729": 59, "1410": 59, "363263": 59, "2700": 59, "30916": 59, "695610": 59, "5400": 59, "15458": 59, "resolut": 59, "nigel": 59, "smart": [59, 62], "london": [59, 123], "societi": [59, 123], "student": [59, 67, 114, 115], "cambridg": 59, "1998": [59, 123], "satisif": [59, 62], "301": [59, 123], "w_0": 59, "y_0": [59, 62], "4x": 59, "7y": 59, "5x": [59, 106], "eprint": 59, "nottingham": 59, "uk": [59, 123], "kvxefz87": 59, "az": 59, "mordel": 59, "sq": 59, "legrang": 59, "csusm": 59, "aitken_html": 59, "fxz": 59, "reduce_inequ": [61, 65, 86, 87, 120, 121], "init": [62, 64, 85, 123], "classifi": [62, 63, 66], "autodetect": [62, 63], "classif": [62, 63], "ode_ord": [62, 63, 66], "deutil": [62, 63, 66], "best_hint": 62, "all_integr": [62, 63], "_integr": [62, 63], "hang": [62, 63, 84, 85, 86, 87, 88, 120, 121], "unevaluat": 62, "tip": [62, 63], "test_od": 62, "ode_": 62, "hintnam": [62, 63], "classify_sysod": 62, "ode_hintnam": 62, "tough": 62, "nth_linear_homogeneous_constant_coeff_integr": 62, "ordin": 62, "nth_linear": 62, "indep": 62, "spell": 62, "indep_div_dep": 62, "undetermined_coeffici": 62, "_best": 62, "separable_integr": 62, "1st_linear_integr": 62, "1st_homogeneous_coeff_subs_indep_div_dep_integr": 62, "1st_homogeneous_coeff_subs_dep_div_indep_integr": 62, "nth_linear_constant_coeff_variation_of_parameters_integr": 62, "sol": [62, 63, 66, 115], "solve_for_func": [62, 63], "ode_1st_homogeneous_coeff_subs_dep_div_indep": 62, "ode_1st_homogeneous_coeff_subs_indep_div_dep": 62, "varepsilon": 62, "genform": [62, 63], "optimis": 62, "starrett": 62, "dai": 62, "nth_linear_euler_eq_homogen": 62, "nth_linear_euler_eq_nonhomogeneous_undetermined_coeffici": 62, "nth_linear_euler_eq_nonhomogeneous_variation_of_paramet": 62, "1st_exact_integr": [62, 120], "bernoulli_integr": 62, "almost_linear_integr": 62, "linear_coefficients_integr": 62, "separable_reduced_integr": 62, "nth_linear_euler_eq_nonhomogeneous_variation_of_parameters_integr": 62, "liouville_integr": 62, "empir": 62, "overridden": 62, "symbolnam": 62, "startnumb": 62, "endnumb": 62, "renumb": 62, "c4": 62, "absorpt": 62, "assist": [62, 115], "rare": [62, 67], "ode_sol_simpl": 62, "trysolv": 62, "sola": 62, "solb": 62, "listofsolut": 62, "eq1": 62, "eq2": 62, "ode_1st_exact": 62, "inert": 62, "exact_differential_equ": 62, "tp63": [62, 123], "ode_1st_homogeneous_coeff_best": 62, "ode_1st_homogeneous_coeff_best_integr": 62, "homogeneous_differential_equ": 62, "u_1": 62, "u_2": 62, "ode_1st_linear": 62, "linear_differential_equ": 62, "order_equation_with_variable_coeffici": 62, "92": [62, 123], "ode_bernoulli": 62, "ode_separ": 62, "bernoulli_differential_equ": 62, "ode_liouvil": 62, "________________": 62, "gb73": [62, 123], "maplesoft": 62, "mapl": 62, "aspx": 62, "odeadvisor": 62, "ode_riccati_special_minus2": 62, "riccati": [62, 114], "__________________": 62, "eqworld": 62, "ipmnet": 62, "ru": 62, "ode0106": 62, "ode0123": 62, "ode_nth_linear_constant_coeff_homogen": 62, "c5": 62, "nth_linear_constant_coeff_homogeneous_integr": 62, "sollist": 62, "nonhomogeneous_equation_with_constant_coeffici": 62, "ode_nth_linear_constant_coeff_undetermined_coeffici": 62, "method_of_undetermined_coeffici": 62, "221": 62, "ode_nth_linear_constant_coeff_variation_of_paramet": 62, "y_i": 62, "cramer": 62, "inhomogen": [62, 64, 85, 120], "variation_of_paramet": 62, "rearrang": [62, 127], "caught": 62, "fault": 62, "ode_almost_linear": 62, "joel": 62, "mose": 62, "stormi": 62, "decad": 62, "august": [62, 76], "1971": [62, 123], "558": 62, "ode_linear_coeffici": 62, "ode_separable_reduc": 62, "ode_lie_group": [62, 121], "subsitut": [62, 121], "ode_1st_power_seri": 62, "travi": [62, 85], "walker": 62, "ode_2nd_power_series_ordinari": 62, "lamar": 62, "seriessolut": 62, "sim16": [62, 123], "176": 62, "184": 62, "ode_2nd_power_series_regular": 62, "q0": 62, "indici": 62, "720": [62, 78], "lie_heuristic_abaco1_simpl": 62, "comp": 62, "factoris": 62, "cheb": 62, "terrab": 62, "duart": 62, "da": 62, "mota": 62, "lie_heuristic_abaco1_product": 62, "roch": 62, "lie_heuristic_bivari": 62, "327": 62, "329": [62, 123], "lie_heuristic_chi": 62, "fourth": [62, 123], "satisifi": 62, "lie_heuristic_abaco2_similar": 62, "yy": 62, "lie_heuristic_function_sum": 62, "lie_heuristic_abaco2_unique_unknown": 62, "lie_heuristic_linear": 62, "gy": 62, "bh": 62, "impract": 62, "_linear_2eq_order1_type3": 62, "_linear_2eq_order1_type4": 62, "_linear_2eq_order1_type5": 62, "bv": 62, "_linear_2eq_order1_type6": 62, "_linear_2eq_order1_type7": 62, "fgp": 62, "ag": 62, "bg": 62, "_linear_2eq_order2_type1": 62, "4bc": 62, "lambda_1": 62, "lambda_2": 62, "lambda_3": 62, "lambda_4": 62, "bt": 62, "2bk": 62, "kt": 62, "2b": 62, "bk": 62, "kx": 62, "_linear_2eq_order2_type2": 62, "_linear_2eq_order2_type3": 62, "pendulum": 62, "earth": 62, "4b": 62, "_linear_2eq_order2_type5": 62, "categori": [62, 120], "atv": 62, "btu": 62, "_linear_2eq_order2_type6": 62, "k_2": 62, "z_2": 62, "_linear_2eq_order2_type7": 62, "_linear_2eq_order2_type8": 62, "_linear_2eq_order2_type9": 62, "d_2": [62, 67], "k_4": 62, "_linear_2eq_order2_type11": 62, "_linear_3eq_order1_type4": 62, "a_3": 62, "b_3": 62, "sysode_linear_neq_order1": 62, "match_": 62, "hnorsettw14": [62, 123], "_nonlinear_2eq_order1_type1": 62, "_nonlinear_2eq_order1_type2": 62, "_nonlinear_2eq_order1_type3": 62, "autonom": 62, "_nonlinear_2eq_order1_type4": 62, "fir": 62, "_nonlinear_2eq_order1_type5": 62, "clairaut": 62, "envelop": 62, "_nonlinear_3eq_order1_type1": 62, "enspac": 62, "sysod": 62, "sode0401": 62, "_nonlinear_3eq_order1_type2": 62, "sode0402": 62, "_handle_integr": 62, "philosophi": 62, "gather": [62, 119], "unhind": 62, "hack": [62, 91, 120, 121], "wolphramalpha": 62, "detool": 62, "resourc": [62, 73], "hint_integr": 62, "alphanumer": 62, "lowercas": [62, 125], "capit": 62, "defeat": 62, "guidelin": 62, "cleaner": 62, "_undetermined_coefficients_match": 62, "hinder": 62, "matching_hint": 62, "matchdict": 62, "rst": [62, 85, 88, 120], "src": 62, "directori": [62, 73, 89, 101, 109], "bypass": 62, "lastli": 62, "1st_homogeneous_coeff": 62, "your_hint": 62, "xfail": 62, "platform": [62, 78, 117], "refactor": [62, 70, 76, 85, 93, 107, 110, 111, 119], "trialset": 62, "fun": 63, "uxt": 63, "uxi": 63, "solvefun": 63, "test_pd": 63, "pde_hintnam": 63, "ux": 63, "allhint": 63, "1st_linear_constant_coeff_homogen": 63, "_preprocess": [63, 66], "hasn": 63, "inabl": 63, "viktor": 63, "grigoryan": 63, "124a": 63, "1st_linear_constant_coeff_integr": 63, "du": 63, "dsolv": [63, 64, 65, 84, 85, 88, 119, 120, 121, 128, 134], "heavili": 63, "inspir": 63, "pde_hint": 63, "rsolv": [64, 65, 85, 86, 120, 121, 134], "seek": [64, 115], "dissimilar": 64, "abramov": [64, 123], "alembertian": 64, "petkovvsek92": [64, 123], "rsolve_poli": [64, 95], "sophist": 64, "invent": 64, "petkov\u0161ek": 64, "abpetkovvsek95": [64, 123], "rsolve_ratio": 64, "revis": [64, 123], "1989": [64, 123], "abr95": [64, 123], "minsolve_linear_system": 65, "nx": [65, 78], "checksol": [65, 66, 121], "quintic": 65, "solve_linear": 65, "solve_linear_system": [65, 120], "overdetermin": 65, "degener": [65, 84], "solve_surd_system": 65, "inconclus": 66, "_desolv": 66, "prebuilt": 67, "die": 67, "finiterv": 67, "varianc": 67, "densiti": [67, 115], "dice": 67, "std": 67, "discreteuniform": 67, "randomsymbol": [67, 115], "d6": 67, "d4": 67, "toss": 67, "unfair": 67, "flip": [67, 120], "marbl": 67, "white": 67, "700000000000000": 67, "geometric_distribut": 67, "geometricdistribut": 67, "poisson": [67, 116, 120], "rate": [67, 125], "poisson_distribut": 67, "poissondistribut": 67, "arcsine_distribut": 67, "benini": 67, "heavi": [67, 129], "rayleigh": 67, "benini_distribut": 67, "v8": 67, "beninidistribut": 67, "beta_distribut": 67, "betadistribut": 67, "betaprim": 67, "beta_prime_distribut": 67, "betaprimedistribut": 67, "cauchy_distribut": 67, "cauchydistribut": 67, "freedom": 67, "chi_distribut": 67, "chidistribut": 67, "chinoncentr": 67, "noncentral_chi_distribut": 67, "chisquar": 67, "chi_squared_distribut": 67, "squareddistribut": 67, "dagum": 67, "dagum_distribut": 67, "erlang": 67, "cdf": 67, "erlang_distribut": 67, "erlangdistribut": 67, "skew": 67, "exponential_distribut": 67, "exponentialdistribut": [67, 120], "fdistribut": 67, "______________________________": 67, "fisherz": 67, "fisher": 67, "2d_1": 67, "d_1z": 67, "d_1e": 67, "27s_z": 67, "fishersz": 67, "frechet": 67, "fr": [67, 123], "a9chet_distribut": 67, "gamma_distribut": 67, "gammadistribut": 67, "gammainvers": 67, "kumaraswami": 67, "kumaraswamy_distribut": 67, "laplace_distribut": 67, "laplacedistribut": 67, "logist": 67, "logistic_distribut": 67, "logisticdistribut": 67, "lognorm": 67, "deviat": 67, "lognormaldistribut": 67, "maxwel": 67, "2a": 67, "maxwell_distribut": 67, "maxwelldistribut": 67, "nakagami": 67, "nakagami_distribut": 67, "normal_distribut": 67, "normaldistributionfunct": 67, "pareto": 67, "xm": 67, "x_m": 67, "pareto_distribut": 67, "paretodistribut": 67, "quadraticu": 67, "quadratic_distribut": 67, "raisedcosin": 67, "raised_cosine_distribut": 67, "rayleigh_distribut": 67, "rayleighdistribut": 67, "studentt": 67, "student_t": 67, "studentst": 67, "triangular_distribut": 67, "triangulardistribut": 67, "uniform_distribution_": 67, "28continu": 67, "uniformdistribut": 67, "uniformsum": 67, "irwin": 67, "hall": 67, "lfloor": 67, "rfloor": 67, "uniform_sum_distribut": 67, "uniformsumdistribut": 67, "vonmis": 67, "von": 67, "mise": 67, "i_0": 67, "concentr": 67, "von_mises_distribut": 67, "vonmisesdistribut": 67, "weibul": 67, "geq0": 67, "weibull_distribut": 67, "weibulldistribut": 67, "wignersemicircl": 67, "wigner": [67, 113, 114], "semicircl": 67, "frac2": 67, "wigner_semicircle_distribut": 67, "wignerssemicirclelaw": 67, "continuousrv": 67, "given_condit": 67, "numsampl": 67, "die_rol": 67, "sample_it": 67, "sampling_p": 67, "sampling_": 67, "randomdomain": 67, "pspace": 67, "probabilist": 67, "enhanc": [67, 116, 119], "roll": 67, "singledomain": 67, "singlepspac": 67, "brought": 67, "productdomain": 67, "productpspac": 67, "adject": 67, "conditionaldomain": 67, "frv": 67, "finitedomain": 67, "finitepspac": 67, "crv": 67, "continuousdomain": 67, "continuouspspac": 67, "diepspac": 67, "singlefinitepspac": 67, "normalpspac": 67, "singlecontinuouspspac": 67, "frv_type": 67, "crv_type": 67, "randomvari": 67, "tactic": 67, "balanc": 67, "expos": 67, "random_symbol": 67, "rs_swap": 67, "pspace1": 67, "pspace2": 67, "sampling_dens": 67, "immutabledensendimarrai": 68, "tomatrix": 68, "j_m": 68, "otim": 68, "i_a": 68, "i_b": 68, "tensorcontract": 68, "derive_by_arrai": [68, 121], "nm": 68, "sum_m": 68, "immutablesparsendimarrai": 68, "mutabledensendimarrai": [68, 85], "mutablesparsendimarrai": [68, 85], "permutedim": [68, 121], "contraction_ax": 68, "index_method": 70, "indexconformanceexceptionerror": 70, "get_contraction_structur": [70, 71], "deeper": 70, "deepest": 70, "parenthesi": 70, "nested_contract": 70, "contact": 70, "get_indic": [70, 71, 72], "gracefulli": [70, 119], "held": [70, 129], "______": 71, "stem": 71, "dim1": 71, "dim2": 71, "pedant": 71, "qwerti": 71, "indexexceptionerror": 71, "broadcast": [71, 73, 115, 119], "syntact": 71, "sugar": [71, 84, 123], "_tensormanag": 72, "comm": 72, "set_comm": 72, "tensormanag": 72, "comm_i2symbol": 72, "comm_symbols2i": 72, "get_comm": 72, "gh": 72, "lorentz": 72, "tensorindextyp": 72, "i0": 72, "i1": 72, "i2": 72, "i3": 72, "i4": 72, "tensor_indic": 72, "tensorhead": 72, "gcomm": 72, "ghcomm": 72, "canon_bp": 72, "eps_dim": 72, "dummy_fmt": 72, "character": [72, 114], "metric_nam": 72, "metric_antisym": 72, "tensortyp": 72, "dim_ep": 72, "riemannian": 72, "spinor": 72, "tensorindex": 72, "su": 72, "is_up": 72, "einstein": 72, "_dummy_fmt": 72, "sym1": 72, "tensorsymmetri": 72, "_i0": 72, "_i1": 72, "typ": 72, "monoterm": 72, "multiterm": 72, "sym2": 72, "young": 72, "tableaux": 72, "tableau": 72, "index_typ": 72, "repetit": [72, 78], "matrix_behavior": 72, "electromagnet": 72, "ez": 72, "e_z": 72, "b_x": 72, "b_y": 72, "b_z": 72, "cast": 72, "momentum": [72, 113, 115], "px": 72, "pz": 72, "p_x": 72, "p_y": 72, "p_z": 72, "tensexpr": 72, "tensadd": [72, 121], "tensmul": [72, 121], "ipos1": 72, "ipos2": 72, "icomp1": 72, "icomp2": 72, "nameless": 72, "get_matrix": 72, "free_arg": 72, "addend": 72, "contract_metr": 72, "contract_al": 72, "from_tids_list": 72, "tids_list": 72, "tid": 72, "ea": 72, "eb": 72, "_tid": 72, "fun_ev": 72, "index_tupl": 72, "old_index": 72, "new_index": 72, "substitute_indic": 72, "nonrep": 72, "ipo": 72, "icomp": 72, "dum": 72, "ext_rank": 72, "is_canon_bp": 72, "m0": 72, "collid": 72, "perm2tensor": 72, "sorted_compon": 72, "tensor_mul": 72, "riemann_cyclic_replac": 72, "t_r": 72, "riemann_cycl": 72, "cadabra": 72, "tandem": 73, "matvec": 73, "codewrapp": 73, "filenam": [73, 74, 116], "distutil": [73, 88, 121], "fwrap": 73, "swig": 73, "goal": 73, "button": [73, 89], "binary_cal": 73, "binary_funct": 73, "_imp_": [73, 79, 85], "invok": 73, "190": 73, "primarili": [73, 76], "repeatedli": 73, "ufunc": [73, 119, 124], "intact": 73, "tempdir": 73, "codewraperror": 73, "filepath": 73, "cythoncodewrapp": 73, "dump_pyx": 73, "header": [73, 74], "basenam": [73, 74], "dummywrapp": 73, "f2pycodewrapp": 73, "ufuncifycodewrapp": 73, "dump_c": [73, 74], "f95": [73, 74], "mute": 73, "debug": 73, "auxillari": 73, "link": [73, 76, 85, 114], "function_nam": 73, "diofant_express": 73, "binary_func": 73, "symfunc": [73, 79], "implemented_funct": [73, 79], "ndimension": 73, "arang": 73, "f_fortran": 73, "f401": 74, "workflow": 74, "fortran77": 74, "fortran90": 74, "octav": [74, 84, 119, 120], "matlab": [74, 84, 119], "mileston": [74, 84, 85, 86, 87, 88, 120, 121], "unsurmount": 74, "tackl": 74, "pyf": 74, "gsl": 74, "intermedi": 74, "cse": [74, 117, 127], "rigor": 74, "inputoutput": 74, "beforehand": 74, "gcc": 74, "tcc": 74, "libtcc": 74, "date": 74, "hostnam": 74, "sha1": 74, "ccodegen": [74, 85], "preprocessor_stat": 74, "dump_h": 74, "guard": 74, "get_prototyp": 74, "prototyp": 74, "codegenerror": 74, "function_prototyp": 74, "dump_cod": 74, "argument_sequ": 74, "global_var": 74, "outputargu": 74, "pointer": 74, "inputargu": 74, "inoutargu": 74, "to_fil": 74, "cname": 74, "fname": 74, "pynam": 74, "octnam": 74, "fcodegen": 74, "f90": 74, "dump_f95": 74, "get_interfac": 74, "octavecodegen": 74, "name_expr": 74, "dump_m": 74, "result_var": 74, "returnvalu": 74, "local_var": 74, "result_vari": 74, "ot": 74, "unnam": 74, "insensit": 74, "agument": 74, "c_name": 74, "c_code": 74, "h_name": 74, "c_header": 74, "f_result": 74, "ifndef": 74, "project__test__h": 74, "endif": 74, "myfcn": 74, "fcn2": 74, "myfcn_result": 74, "void": 74, "f_name": 74, "f_code": 74, "get_default_datatyp": 74, "make_routin": [74, 119], "agnost": 74, "fcn": 74, "result_": 74, "out_": 74, "examin": 74, "conserve_mpmath_dp": 75, "finish": 75, "mp": 75, "doctest_depends_on": 75, "disable_view": 75, "metadata": 75, "no_attrs_in_subclass": 75, "multiset_partitions_taocp": 76, "vistor": 76, "visitor": 76, "frame": 76, "pstack": 76, "lpart": 76, "topmost": 76, "partcompon": 76, "peek": 76, "unpredict": 76, "accumul": 76, "abb": [76, 78], "list_visitor": 76, "factoring_visitor": 76, "multisetpartitiontravers": 76, "5m": [76, 118], "count_partit": 76, "127750": 76, "686": 76, "4a": [76, 114], "donald": [76, 123], "oppenheim": 76, "factorisatio": 76, "numerorum": 76, "canfield": 76, "paul": [76, 123], "erd\u0151": 76, "1983": 76, "yorgei": 76, "monad": 76, "explor": 76, "acceler": [76, 102], "persist": 76, "288716": 76, "child": 76, "decrement": 76, "dramat": 76, "hypothet": 76, "borrow": 76, "overflow": 76, "importantli": 76, "coalesc": 76, "_rang": 76, "someon": [76, 127], "stretch": 76, "brain": 76, "histogram": 76, "enum_al": 76, "enum_larg": 76, "lb": 76, "enum_smal": 76, "enum_rang": 76, "ub": 76, "exercis": 76, "binary_partit": 78, "taocp": [78, 114], "bracelet": 78, "necklac": [78, 114], "cantor_product": [78, 120], "robin": 78, "consumpt": 78, "islic": 78, "hello": 78, "common_prefix": 78, "common_suffix": 78, "rev": 78, "unaffect": 78, "filter_symbol": 78, "myop": 78, "kog": 78, "informatik": 78, "hamburg": 78, "mein": 78, "python_trick": 78, "eco": 78, "generate_involut": 78, "involut": [78, 114], "permutationinvolut": 78, "has_dup": 78, "has_varieti": 78, "minlex": 78, "is_set": 78, "11010011000": 78, "00011010011": 78, "00011001011": 78, "abi": 78, "bby": 78, "abracadabra": 78, "banana": 78, "165": 78, "aba": 78, "baa": 78, "bead": 78, "acb": 78, "mnemon": 78, "backward": [78, 83, 113], "ooo": 78, "oooo": 78, "resolv": [78, 87], "_node": 78, "undecor": 78, "ineffici": [78, 88], "breaker": 78, "collis": 78, "wast": 78, "criteria": 78, "ordered_partit": [78, 121], "jeromekelleh": 78, "jerom": 78, "kelleh": 78, "barri": 78, "sullivan": 78, "arxiv": [78, 123], "0909": 78, "2331v2": 78, "_same_": 78, "activest": 78, "recip": 78, "218332": 78, "tim": 78, "peter": [78, 123], "postfix": 78, "postorder_travers": [78, 129], "postord": 78, "rotate_left": 78, "rotate_right": 78, "gt": [78, 95, 114], "keyfunc": 78, "dl": [78, 123], "squenc": 78, "longest": 78, "topological_sort": 78, "________": [78, 133], "acycl": 78, "unflatten": 78, "uniq": 78, "dat": 78, "workaround": 79, "afunc": 79, "lam_f": 79, "lambdastr": 79, "dummifi": 79, "unpack": [79, 101], "__flatten_args__": 79, "use_imp": 79, "18503986326": 79, "18503986": 79, "29100619": 79, "8559934": 79, "my_cool_funct": 79, "cool": 79, "recurrence_memo": 80, "memo": 80, "specfun": 80, "misc": 81, "fillded": 81, "dedent": 81, "randtest": 82, "random_complex_numb": 82, "verify_derivative_numer": 82, "verify_numer": 82, "consult": 83, "incompat": 83, "summar": 83, "jan": [84, 86, 91, 92, 93], "2019": 84, "619": 84, "631": 84, "763": 84, "tower": 84, "653": 84, "669": 84, "630": 84, "748": 84, "thank": [84, 85, 86, 87, 114, 115, 120, 121], "kalevi": [84, 85, 86], "suominen": [84, 85, 86], "review": [84, 85, 86], "integer_digit": 84, "765": 84, "622": 84, "762": 84, "633": 84, "658": 84, "741": 84, "768": 84, "673": 84, "478": 84, "dmf": 84, "620": 84, "fracfield": 84, "get_field": 84, "polyr": 84, "621": 84, "get_r": 84, "624": 84, "627": 84, "628": 84, "anp": 84, "to_number_field": 84, "realnumb": 84, "636": 84, "of_typ": 84, "unify_with_symbol": 84, "has_characteristiczero": 84, "704": 84, "637": 84, "is_unit": 84, "from_": 84, "from_diof": 84, "to_diof": 84, "algebraicnumb": [84, 121], "distributedmodul": 84, "648": 84, "654": 84, "666": 84, "dummy_eq": 84, "var1": 84, "val1": 84, "var2": 84, "val2": 84, "667": 84, "anymor": [84, 86, 94, 95, 117, 119], "679": 84, "theano": [84, 116], "681": 84, "684": 84, "688": 84, "row_del": 84, "col_del": 84, "697": 84, "itercoeff": 84, "itermonom": 84, "iterterm": 84, "listcoeff": 84, "listmonom": 84, "listterm": 84, "const": [84, 121], "imul_num": 84, "add_ground": 84, "sub_ground": 84, "mul_ground": 84, "sqr": 84, "factor_list_includ": 84, "revert": 84, "gff": 84, "gff_list": 84, "sqf_list_includ": 84, "homogeneous_ord": 84, "701": 84, "732": 84, "717": 84, "727": 84, "747": 84, "532": 84, "is_sqf": 84, "724": 84, "has_r": 84, "is_r": 84, "print_mathml": 84, "submodul": [84, 87, 115, 120, 121], "769": 84, "771": 84, "623": 84, "minpoly_method": 84, "655": 84, "659": 84, "661": 84, "668": 84, "670": 84, "625": 84, "__delitem__": 84, "691": 84, "gmpy2": [84, 120], "mpz": [84, 87], "694": 84, "fallback_gcd_zz_method": 84, "721": 84, "gcd_aa_method": 84, "726": 84, "cachetool": [84, 120], "647": 84, "setuptools_scm": 84, "725": 84, "739": 84, "14384": 84, "14393": 84, "14414": 84, "13886": 84, "14220": 84, "7724": 84, "5850": 84, "14494": 84, "14389": 84, "14291": 84, "14590": 84, "14645": 84, "14294": 84, "idempot": 84, "14721": 84, "14293": 84, "14380": 84, "14442": 84, "14759": 84, "dup_isolate_real_roots_list": 84, "14738": 84, "dup_count_complex_root": 84, "14782": 84, "14791": 84, "14793": 84, "14811": 84, "14822": 84, "14820": 84, "14831": 84, "14476": 84, "14885": 84, "15055": 84, "15056": 84, "get_numbered_const": 84, "6938": 84, "8945": 84, "15146": 84, "5934": 84, "8210": 84, "11775": 84, "unorder": 84, "7047": 84, "15323": 84, "15344": 84, "12602": 84, "5595": 84, "5602": 84, "5555": 84, "15407": 84, "15311": 84, "11668": 84, "rid": [84, 120], "bare": 84, "4511": 84, "15474": 84, "15502": 84, "15520": 84, "5th": 84, "15539": 84, "15561": 84, "divmod": [84, 115], "15574": 84, "12695": 84, "dead": 84, "densearith": 84, "densetool": 84, "densesolv": 84, "5428": 84, "14337": 84, "8818": 84, "9544": 84, "15798": 84, "unus": [84, 86], "15810": 84, "apr": [85, 95, 109], "785": 85, "gabriel": 85, "orisaka": 85, "919": 85, "pickl": [85, 86, 109], "972": 85, "795": 85, "940": 85, "910": 85, "galoistool": 85, "957": 85, "971": 85, "964": 85, "euclidtool": 85, "port": [85, 86, 87, 108, 114], "994": 85, "775": 85, "780": 85, "787": 85, "seterr": 85, "794": 85, "dmp": 85, "ring_seri": 85, "820": 85, "828": 85, "834": 85, "975": 85, "797": 85, "851": 85, "is_antihermitian": 85, "873": 85, "print_python": 85, "print_ccod": 85, "891": 85, "896": 85, "generate_oriented_forest": 85, "kbin": 85, "ibin": 85, "903": 85, "numexpr": [85, 119, 120], "numexprprint": 85, "deferredvector": 85, "905": 85, "export": [85, 121], "921": 85, "dict_merg": 85, "generate_bel": [85, 118], "967": 85, "977": 85, "has_assoc_field": 85, "is_symbolicdomain": 85, "is_expressiondomain": 85, "drop_to_ground": 85, "misspel": 85, "barei": 85, "866": 85, "nth_power_roots_poli": 85, "ground_root": 85, "refine_root": 85, "ltrim": 85, "max_norm": 85, "l1_norm": 85, "996": 85, "788": 85, "francesco": [85, 121], "bonazzi": [85, 121], "aa_factor_method": 85, "844": 85, "893": 85, "jame": 85, "cotton": 85, "927": 85, "968": 85, "sphinxcontrib": 85, "bibtex": 85, "766": 85, "887": 85, "flake8": [85, 86, 88, 120, 121], "928": 85, "982": 85, "15943": 85, "12163": 85, "matematica": 85, "11642": 85, "15984": 85, "7337": 85, "11600": 85, "16038": 85, "15553": 85, "11581": 85, "11976": 85, "11275": 85, "11841": 85, "\u03b3": [85, 125, 133], "11926": 85, "11855": 85, "11955": 85, "11502": 85, "11435": 85, "12200": 85, "9123": 85, "12177": 85, "8129": 85, "9983": 85, "11726": 85, "pde_separ": 85, "11981": 85, "12092": 85, "10472": 85, "11959": 85, "11944": 85, "11732": 85, "12178": 85, "10681": 85, "11078": 85, "11877": 85, "wrongli": [85, 120], "10211": 85, "11806": 85, "12325": 85, "dmp_integrate_in": 85, "16222": 85, "100000000": [85, 86], "15413": 85, "16432": 85, "16431": 85, "16530": 85, "16562": 85, "16589": 85, "16714": 85, "16774": 85, "17034": 85, "isqrt": 85, "17044": 85, "10996": 85, "15282": 85, "16722": 85, "15673": 85, "sphere": 85, "17380": 85, "17431": 85, "17492": 85, "17555": 85, "is_extended_posit": 85, "17556": 85, "17453": 85, "_eval_is_": 85, "17719": 85, "12386": 85, "12369": 85, "17792": 85, "17789": 85, "intermitt": 85, "17841": 85, "17847": 85, "17982": 85, "9244": 85, "nonhomogen": 85, "15946": 85, "16635": 85, "14312": 85, "8859": 85, "9204": 85, "14779": 85, "18008": 85, "8810": 85, "18118": 85, "6599": 85, "18176": 85, "18306": 85, "8695": 85, "18378": 85, "18384": 85, "18399": 85, "18452": 85, "18470": 85, "18482": 85, "18499": 85, "18501": 85, "18508": 85, "18507": 85, "18707": 85, "18751": 85, "18749": 85, "berlekamp": [85, 113], "18895": 85, "18894": 85, "sring": [85, 86], "18531": 85, "14806": 85, "friend": 85, "18874": 85, "16620": 85, "18997": 85, "18992": 85, "19026": 85, "12303": 85, "11986": 85, "12361": 85, "12452": 85, "tall": 85, "19070": 85, "16971": 85, "2021": [86, 87], "1032": 86, "motzkin": 86, "1063": 86, "876": 86, "sqfreetool": 86, "factortool": 86, "1015": 86, "1018": 86, "1019": 86, "1020": 86, "1021": 86, "nowher": 86, "1030": 86, "1031": 86, "1035": 86, "1067": 86, "1092": 86, "katja": 86, "sophi": 86, "hotz": 86, "vring": 86, "vfield": 86, "to_dens": 86, "degree_list": 86, "is_mon": 86, "1036": 86, "1051": [86, 123], "1039": 86, "poly_from_expr": 86, "gcd_list": 86, "lcm_list": 86, "1037": 86, "1057": 86, "1086": 86, "1053": [86, 123], "1105": 86, "deflat": 86, "1108": 86, "1046": 86, "1074": 86, "19630": 86, "19076": 86, "19670": 86, "19755": 86, "19760": 86, "19770": 86, "19766": 86, "19774": 86, "19988": 86, "lose": [86, 121], "14874": 86, "19991": 86, "10666": 86, "20163": 86, "9479": 86, "20365": 86, "20360": 86, "20389": 86, "20391": 86, "simplex": 86, "19161": 86, "20397": 86, "19196": 86, "20491": 86, "notebook": [86, 132], "20490": 86, "20484": 86, "20485": 86, "20487": 86, "puiseux": 86, "20610": 86, "generatorsneed": [86, 120], "20617": 86, "20640": 86, "20704": 86, "nov": [87, 102, 108, 119, 120], "musser": 87, "1132": 87, "853": 87, "andr\u00e9": 87, "roberg": 87, "1114": 87, "polyconfig": 87, "1115": 87, "diofant_debug": 87, "cpython": [87, 88, 120], "5cae972": 87, "1123": 87, "1124": 87, "igcd": 87, "ilcm": 87, "1125": 87, "similari": 87, "1131": 87, "1140": 87, "lseri": [87, 113], "1146": 87, "protect": 87, "1033": 87, "1138": 87, "1159": 87, "1175": 87, "1162": 87, "1060": 87, "20861": 87, "20874": 87, "20902": 87, "20941": 87, "20973": 87, "20985": 87, "plynomi": 87, "21031": 87, "21034": 87, "21038": 87, "21041": 87, "21063": 87, "21075": 87, "21091": 87, "19590": 87, "21121": 87, "21107": 87, "21132": 87, "21180": 87, "21167": 87, "21029": 87, "20697": 87, "20578": 87, "20444": 87, "19453": 87, "19442": 87, "11667": 87, "21202": 87, "recursionerror": [87, 88], "21227": 87, "21263": 87, "21334": 87, "21342": 87, "21319": 87, "21341": 87, "21024": 87, "coercionfail": 87, "21396": 87, "21410": 87, "keyerror": [87, 121], "21437": 87, "21460": 87, "21466": 87, "21166": 87, "21486": 87, "21530": 87, "21549": 87, "21557": 87, "21550": 87, "21177": 87, "21245": 87, "fuction": 87, "11833": 87, "mayb": [87, 121], "9127": 87, "askevenhandl": 87, "21606": 87, "21641": 87, "21651": 87, "20461": 87, "13029": 87, "21711": 87, "21721": 87, "21716": 87, "isympi": [87, 94, 95, 98, 100, 101, 102, 104, 107, 113, 114, 115], "21741": 87, "21756": 87, "21760": 87, "21761": 87, "notalgebra": 87, "21430": 87, "21766": 87, "21773": 87, "21785": 87, "21812": 87, "jupyt": 87, "lab": 87, "21814": 87, "21176": 87, "21852": 87, "21859": 87, "sp": 87, "21882": 87, "21890": 87, "nonlinsolv": [87, 121], "21888": 87, "5822": 87, "19745": 87, "weird": 87, "9358": 87, "21905": 87, "21938": 87, "21984": 87, "21999": 87, "22020": 87, "22051": 87, "22058": 87, "solveset": 87, "22073": 87, "22093": 87, "heuristicgcdfail": [87, 88], "luck": [87, 88], "22155": 87, "22220": 87, "22248": 87, "forev": [87, 121], "22294": 87, "22322": 87, "22334": 87, "22400": 87, "22435": 87, "1214": 88, "1218": 88, "1232": 88, "1047": 88, "1192": 88, "to_mpi": 88, "1194": 88, "bool_map": 88, "posform": [88, 116], "sopform": [88, 116], "04ea41a220": 88, "be319badf5": 88, "1235": 88, "finite_diff": [88, 119], "1271": 88, "1274": 88, "1209": 88, "1215": 88, "1268": 88, "22487": 88, "22493": 88, "22558": 88, "22837": 88, "22836": 88, "22788": 88, "unevlu": 88, "22863": 88, "22862": 88, "22893": 88, "22878": 88, "22982": 88, "22986": 88, "14433": 88, "23069": 88, "19639": 88, "23086": 88, "23156": 88, "reciproc": 88, "23174": 88, "gf_edf_zassenhau": 88, "21409": 88, "22673": 88, "12531": 88, "6322": 88, "22583": 88, "23202": 88, "__ne__": [88, 95], "23223": 88, "23224": 88, "23231": 88, "14387": 88, "impress": 88, "8166": 88, "14502": 88, "18492": 88, "23266": 88, "7391": 88, "23287": 88, "11496": 88, "3663": 88, "23299": 88, "23319": 88, "7rc1": 88, "5539": 88, "23425": 88, "classify_od": 88, "23432": 88, "8433": 88, "13750": 88, "23497": 88, "23562": 88, "23585": 88, "23596": 88, "23605": 88, "23637": 88, "23479": 88, "22605": 88, "23677": 88, "23836": 88, "23845": 88, "23855": 88, "linsolv": 88, "24067": 88, "24127": 88, "23702": 88, "23707": 88, "24210": 88, "24225": 88, "24266": 88, "24331": 88, "23766": 88, "24360": 88, "24346": 88, "20913": 88, "9671406556917067856609794": 88, "24386": 88, "sigmoid": 88, "24390": 88, "aug": [89, 90, 97, 107], "10x": [89, 103], "100x": [89, 94], "speedup": [89, 94, 106, 117, 119], "wildfunct": 89, "colormap": 89, "mous": 89, "zoom": 89, "preview": [91, 116, 117], "pngview": 91, "pdfview": 91, "dviview": 91, "pyglet": [91, 92, 100, 103, 111, 114, 120], "parser": [91, 93], "texmac": 91, "readm": [91, 115], "thirdparti": 91, "box": 93, "idiom": [93, 99], "mar": [94, 112], "sympifyit": 94, "unari": [94, 121], "silli": 94, "reus": 94, "is_dummi": 94, "experi": 94, "subs_dict": [94, 95], "assoti": 94, "recognit": [94, 113], "__int__": 94, "basicmeth": 94, "clean": [94, 112, 117], "__nonzero__": 95, "8x": [95, 107], "bailei": 95, "borwein": 95, "plouff": 95, "hexidecim": 95, "oseri": 95, "pickabl": 96, "limit_seri": 96, "tarbal": [97, 115], "polici": [97, 100], "complexinfin": 98, "oct": [99, 100, 101, 115], "applylog": 99, "facil": [99, 115], "_arg": 99, "bin": [100, 108, 112, 115, 120], "_sage_": 101, "sit": 101, "dec": [103, 104, 111, 117], "_eval_appli": 103, "ylm": 103, "singlevaluedfunct": 103, "nofarg": 103, "0beta2": 103, "jul": [105, 106, 110, 114, 116], "rootsof": 105, "spedup": 105, "thread": 106, "msolv": 106, "130": 107, "noarithmeth": 107, "norelmeth": 107, "relmeth": 107, "arithmeth": 107, "gone": 107, "python2": 108, "jython": 108, "qnew": 108, "buildbot": 108, "regularli": 108, "i386": 108, "amd64": 108, "architectur": 108, "bench": 108, "greatli": [108, 118, 133], "protocol": 109, "vastli": 109, "upgrad": 110, "ga": [110, 115], "eval_pow": 110, "tsolv": 110, "guess_solve_strategi": 110, "complaint": 110, "dpll": [110, 113], "print_mul": 110, "4381": 110, "print_add": 110, "fabian": 111, "runner": 111, "aaron": [111, 116, 120], "nsolv": [111, 121], "rootfind": 111, "cluster": [111, 112], "wick": [111, 113], "usr": 112, "runtest": 112, "quantiz": [112, 113], "jun": 113, "6aecdb7": 113, "31c9aa4": 113, "3acac67": 113, "4b75dae": 113, "fa1206": 113, "103b928": 113, "45c9b22": 113, "8870c8b": 113, "b348b30": 113, "ff65e9f": 113, "891e4d": 113, "310a585": 113, "b097b01": 113, "08482bf": 113, "b8fbd59": 113, "33d8cdb": 113, "7eb81c9": 113, "88bf187": 113, "f800f95": 113, "1027408": 113, "d8c8768": 113, "75c8d2d": 113, "b9c2a9a": 113, "8d235c7": 113, "6d560f3": 113, "dad03dd": 113, "6ccf20c": 113, "dc728d6": 113, "2f17684": 113, "3004db8": 113, "37a58f1": 113, "a72d188": 113, "0d98945": 113, "f638fcf": 113, "d521c7f": 113, "548120b": 113, "f6f74e6": 113, "b1c49cd": 113, "3527b64": 113, "dc327fe": 113, "e920870": 113, "a8f20e6": 113, "d4dbbb5": 113, "9769d49": 113, "496f08f": 113, "f3e432": 113, "4c88be6": 113, "41502d7": 113, "gnu": 113, "38e1683": 113, "afb3886": 113, "22c4061": 113, "wester": 113, "1c23792": 113, "17e8f1f": 113, "60fbff4": 113, "5df77f5": 113, "7de602c": 113, "950969b": 113, "70353e9": 113, "bd0be06": 113, "425e225": 113, "quantum": [113, 115], "bra": 113, "ket": [113, 115], "dagger": 113, "hilbert": 113, "qubit": [113, 115], "gate": 113, "grover": 113, "qft": 113, "shor": 113, "circuit": 113, "circuitplot": 113, "inclu": 113, "anihil": 113, "boson": 113, "secondqu": [113, 115], "angular": [113, 115], "hydrogen": 113, "wave": 113, "schroeding": 113, "energi": 113, "1d": 113, "clebsch": 113, "gordan": 113, "nd": 113, "7c0b857": 113, "53f0e1a": 113, "d1dd6a3": 113, "handler": 113, "f3bee7a": 113, "sat": 113, "2d96329": 113, "acfbe75": 113, "0f187e5": 113, "5888024": 113, "sum2": 113, "ef1f6a7": 113, "965aa91": 113, "verb": 113, "053a045": 113, "4877": 113, "273f450": 113, "5102": 113, "c83c9b0": 113, "5079": 113, "d86d08f": 113, "c8661ef": 113, "5062": 113, "f6452a8": 113, "9aeb220": 113, "957745a": 113, "1ea5be8": 113, "4c269fe": 113, "6a26941": 113, "9c6bf0f": 113, "e9f4a0a": 113, "is_float": 113, "deprec": [113, 115, 116, 117, 119, 120], "abe1c49": 113, "a4ea170": 113, "4871": 113, "5098": 113, "5091": 113, "5086": 113, "e8cb04a": 113, "0d8d748": 113, "75734f8": 113, "fcc6b13": 113, "4ec9dc5": 113, "d4d351d": 113, "mxn": 113, "zeronm": 113, "5da0884": 113, "smatrix": 113, "acd1685": 113, "58c1dad": 113, "84f2c22": 113, "95b4321": 113, "859bb33": 113, "08b4932": 113, "a30c5a3": 113, "2c99999": 113, "5221": 113, "5223": 113, "147c142": 113, "108fb41": 113, "696139d": 113, "bf90689": 113, "d12a2aa": 113, "3542041": 113, "73fb9ac": 113, "328eaba": 113, "8455147": 113, "f8fcaa7": 113, "cart": 113, "b1b10ed": 113, "b2ce27b": 113, "c1ad905": 113, "31ed8d7": 113, "3383aa3": 113, "7ab2da2": 113, "4029": 113, "3e763a8": 113, "4475": 113, "4826": 113, "64a12a4": 113, "__abs__": 113, "max_": 113, "min_": 113, "99a271": 113, "5252": 113, "each_char": [113, 117], "a0ab479": 113, "635d89c": 113, "as_bas": 113, "e61819d": 113, "80dfe91": 113, "as_coeff_term": [113, 116], "as_coeff_factor": [113, 116], "assume_pos_r": 113, "ship": 114, "buggi": 114, "mimic": 114, "twodic": 114, "reduce_poly_inequ": 114, "ari": 114, "forest": 114, "innerproduct": 114, "wignerd": 114, "jzket": 114, "jx": 114, "eigenst": 114, "jxket": 114, "mathjax": 114, "entierli": 114, "browser": 114, "javascript": 114, "png": 114, "modern": 114, "older": 114, "5615": 114, "gsoc": [114, 115, 117], "vladimir": 114, "peri\u0107": 114, "retroact": 114, "author": [114, 120], "concis": 114, "saveimag": 114, "stringio": [114, 117], "outfil": 114, "2012": 115, "offici": [115, 119], "pinch": 115, "download": 115, "use2to3": 115, "pypi": 115, "nightli": 115, "replic": 115, "combinatorica": 115, "jerrum": 115, "transformationset": [115, 117], "machan": 115, "constrain": 115, "bodi": 115, "entropi": 115, "fidel": 115, "reloc": 115, "folder": 115, "particip": 115, "uncoupl": 115, "agca": [115, 121], "macaulay2": 115, "sussman": 115, "wisdom": 115, "dij": 115, "__float__": 115, "__complex__": 115, "idiomat": 115, "favor": [115, 116], "galgebra": [115, 120], "set_main": 115, "make_symbol": 115, "negativeinfin": 115, "gaussopt": [115, 119], "optic": [115, 119], "beam": 115, "find_unit": 115, "physci": 115, "slip": 115, "sqrtdenest": 115, "tableform": [115, 121], "aid": [115, 123, 128], "tradit": 115, "meurer": [116, 120], "summer": 116, "1970": 116, "positive_definit": 116, "hadamardproduct": 116, "matrixslic": 116, "dft": 116, "preliminari": 116, "svd": 116, "blogpost": 116, "load_ext": 116, "ipythonprint": 116, "7013": 116, "viewer": [116, 117], "7018": 116, "6477": 116, "6476": 116, "1510": 116, "1955": 116, "1823": 116, "1940": 116, "1864": 116, "1883": 116, "2109": 116, "gave": 116, "1497": 116, "1703": 116, "expintegr": 116, "1708": 116, "1712": 116, "bool_equ": 116, "2176": 116, "gen_legendr": 116, "2038": 116, "2148": 116, "descart": 116, "1947": 116, "1700": 116, "1644": 116, "iron": 116, "multivector": 117, "inher": [117, 126], "scratch": 117, "viewpoint": 117, "gradient": [117, 119], "grad": 117, "cryptographi": [117, 123], "cipher": 117, "vigener": 117, "bifid": 117, "rsa": 117, "kid": 117, "\u01f9ow": 117, "accross": 117, "7023": 117, "7086": 117, "3333": 117, "5769": 117, "4855": 117, "4279": 117, "5931": 117, "2510": 117, "comfort": 117, "7022": 117, "6751": 117, "cheatsheet": 117, "4820": 117, "5018": 117, "bytesio": 117, "7083": 117, "thereof": 118, "fanci": 118, "strike": 118, "inv_quick": 118, "det_quick": 118, "facilit": 118, "solve_univariate_inequ": 118, "2732": 118, "2862": 118, "2894": 118, "euler_equ": 118, "2431": 118, "0x0": 118, "2813": 118, "2823": 118, "2734": 118, "2606": 118, "to_matrix": 118, "dyadic": 118, "2686": 118, "2687": 118, "2728": 118, "2772": 118, "print_builtin": 118, "2683": 118, "2723": 118, "2744": 118, "2427": 119, "7587": 119, "\u2124": [119, 131], "lru": 119, "7464": 119, "sympy_cache_s": 119, "fastcach": 119, "v0": 119, "newer": 119, "7737": 119, "unitsystem": 119, "stai": 119, "matur": 119, "2628": 119, "7462": 119, "7500": 119, "7989": 119, "codeprint": 119, "octave_cod": [119, 120], "curl": 119, "7460": 119, "kanesmethod": 119, "bundl": [119, 120], "functool": 119, "7853": [119, 120], "7891": 119, "is_bound": 119, "is_unbound": 119, "7947": 119, "is_infinitesim": 119, "7995": 119, "7996": 119, "7861": 119, "__init__": [119, 129], "saniti": 119, "8082": 119, "7622": 119, "7741": 119, "7625": 119, "7634": 119, "dioptr": 119, "7782": 119, "7752": 119, "8199": 119, "8213": 119, "2016": [120, 123], "mrvasympt": 120, "avich": 120, "dayal": 120, "cantor": 120, "276": 120, "286": 120, "macdonald": 120, "275": 120, "setuptool": 120, "__repr__": 120, "187": 120, "209": 120, "316": 120, "334": 120, "354": 120, "sagemath": 120, "crypto": 120, "print_gtk": 120, "unbundl": 120, "141": [120, 123], "when_multipl": 120, "156": 120, "160": [120, 123], "164": 120, "115": 120, "122": 120, "201": [120, 123], "liealgebra": 120, "315": 120, "308": [120, 123], "manualintegr": 120, "279": 120, "raoul": 120, "bourquin": 120, "consolid": 120, "278": 120, "298": 120, "risch_integr": 120, "337": 120, "356": 120, "numpydoc": 120, "credit": 120, "aboutu": 120, "152": 120, "212": [120, 123], "codecov": 120, "io": 120, "217": [120, 123], "pep8": 120, "214": 120, "diofant_use_cach": 120, "219": 120, "deprecationwarn": 120, "9351": 120, "9034": 120, "7927": 120, "9283": 120, "9274": 120, "geo": 120, "mult": 120, "9398": 120, "7259": 120, "9832": 120, "9053": 120, "9052": 120, "9533": 120, "9545": 120, "9652": 120, "osx": 120, "8432": 120, "9542": 120, "9326": 120, "9413": 120, "circular": 120, "8840": 120, "4898": 120, "10195": 120, "10196": 120, "10198": 120, "7917": 120, "reciprocaltrigonometricfunct": 120, "8649": 120, "5641": 120, "10258": 120, "10268": 120, "10237": 120, "10255": 120, "10290": 120, "10304": 120, "9471": 120, "9449": 120, "exceed": 120, "crash": 120, "8462": 120, "9917": 120, "7383": 120, "7098": 120, "10323": 120, "10326": 120, "10095": 120, "4187": 120, "10383": 120, "10382": 120, "10388": 120, "10391": 120, "8241": 120, "3539": 120, "7216": 120, "10503": 120, "10567": 120, "9075": 120, "10610": 120, "4173": 120, "10803": 120, "10836": 120, "9558": 120, "4949": 120, "5952": 120, "9608": 120, "10961": 120, "10976": 120, "10995": 120, "11011": 120, "scientif": [120, 123], "11062": 120, "10804": 120, "11063": 120, "9480": 120, "10497": 120, "5383": 120, "11270": 120, "5172": 120, "7055": 120, "test_rsolve_bulk": 120, "11261": 120, "11313": 120, "11290": 120, "10761": 120, "10024": 120, "7985": 120, "9637": 120, "10003": 120, "10052": 120, "10063": 120, "10075": 120, "9823": 120, "10156": 120, "10113": 120, "10020": 120, "10240": 120, "8510": 120, "10220": 120, "10092": 120, "10161": 120, "10243": 120, "10274": 120, "10210": 120, "9539": 120, "unsupport": 120, "nonetyp": [120, 121], "11407": 120, "11413": 120, "11434": 120, "11526": 120, "11553": 120, "8045": 120, "11602": 120, "4720": 120, "11623": 120, "10292": 120, "rebuilt": 120, "6572": 120, "10134": 120, "11672": 120, "11678": 120, "11746": 120, "substit": 120, "3904": 120, "3112": 120, "9173": 120, "9808": 120, "9341": 120, "9908": 120, "unboundlocalvari": 120, "6171": 120, "9276": 120, "diagnose_import": 120, "10201": 120, "9057": 120, "segfault": 120, "11159": 120, "2839": 120, "init_sess": 120, "auto_int_to_integ": 120, "11081": 120, "10974": 120, "bom": 120, "10806": 120, "10801": 120, "9549": 120, "4231": 120, "8634": 120, "8481": 120, "pmf": 120, "9956": 120, "9747": 120, "test_piecewise_lambdifi": 120, "9634": 120, "8500": 120, "fuzzy_and": 120, "9192": 120, "7130": 120, "8514": 120, "9334": 120, "8229": 120, "8061": 120, "7872": 120, "3496": 120, "2929": 120, "8203": 120, "7649": 120, "7256": 120, "6783": 120, "5662": 120, "assocop": 120, "_eval_template_is_attr": 120, "misus": 120, "5295": 120, "4856": 120, "4555": 120, "pyflak": 120, "5773": 120, "cmp_to_kei": 120, "5484": 120, "8825": 120, "weakref": 120, "8635": 120, "8157": 120, "7599": 120, "6179": 120, "5415": 120, "2865": 120, "5907": 120, "11722": 120, "8804": 120, "10728": 120, "2018": 121, "390": 121, "chri": 121, "smith": 121, "283": 121, "461": 121, "508": 121, "519": 121, "538": 121, "573": 121, "578": 121, "487": 121, "430": 121, "448": 121, "assumption0": 121, "382": 121, "387": [121, 123], "391": 121, "solve_triangul": 121, "solve_biquadrat": 121, "389": 121, "interactive_travers": 121, "395": 121, "xring": 121, "xfield": 121, "403": 121, "jscode": 121, "404": 121, "pager_print": 121, "print_fcod": 121, "411": 121, "380": 121, "experimental_lambdifi": 121, "intervalmath": 121, "384": 121, "426": 121, "554": 121, "549": 121, "get_domain": 121, "479": 121, "510": 121, "529": 121, "534": 121, "543": 121, "solve_undetermined_coeff": 121, "557": 121, "537": 121, "577": 121, "585": 121, "is_zero_dimension": 121, "monomialop": 121, "586": 121, "argiment": 121, "596": 121, "597": 121, "pprint_try_use_unicod": 121, "605": 121, "321": 121, "433": 121, "438": 121, "553": [121, 123], "571": 121, "dae": 121, "413": 121, "414": 121, "415": 121, "428": 121, "485": 121, "563": 121, "608": 121, "606": 121, "408": 121, "421": 121, "comprehens": [121, 123], "plugin": 121, "isort": 121, "520": 121, "hypothesi": 121, "547": 121, "xdist": 121, "551": 121, "timeout": 121, "11879": 121, "11884": 121, "11045": 121, "7165": 121, "8733": 121, "8430": 121, "12005": 121, "11799": 121, "12018": 121, "5649": 121, "11538": 121, "12081": 121, "7214": 121, "4678": 121, "7789": 121, "8255": 121, "roots_quadrat": 121, "7138": 121, "11691": 121, "7457": 121, "multiprocess": 121, "12115": 121, "4315": 121, "6807": 121, "12114": 121, "zerodivisionerror": 121, "5169": 121, "6249": 121, "6426": 121, "test_arg": 121, "rebuil": 121, "11461": 121, "nameerror": 121, "10925": 121, "12180": 121, "5786": 121, "9607": 121, "8754": 121, "8697": 121, "higer": 121, "8694": 121, "8710": 121, "10337": 121, "9447": 121, "10305": 121, "10413": 121, "10414": 121, "10375": 121, "10433": 121, "9044": 121, "10445": 121, "10379": 121, "10633": 121, "7163": 121, "11881": 121, "11801": 121, "11911": 121, "10489": 121, "serial": 121, "10336": 121, "12375": 121, "5514": 121, "12398": 121, "12400": 121, "12221": 121, "12522": 121, "12555": 121, "12569": 121, "12578": 121, "12582": 121, "12747": 121, "12769": 121, "12942": 121, "12238": 121, "4269": 121, "13081": 121, "13078": 121, "13098": 121, "13312": 121, "13111": 121, "10488": 121, "9706": 121, "10740": 121, "10592": 121, "7858": 121, "5412": 121, "10710": 121, "10810": 121, "10867": 121, "10782": 121, "10719": 121, "10680": 121, "10701": 121, "10770": 121, "10773": 121, "13332": 121, "13382": 121, "13403": 121, "13416": 121, "13462": 121, "13501": 121, "13536": 121, "13545": 121, "arithemet": 121, "13460": 121, "13071": 121, "13575": 121, "13629": 121, "13645": 121, "7067": 121, "python3": 121, "11378": 121, "10999": 121, "diop": 121, "holzer": 121, "11000": 121, "power_represent": 121, "11026": 121, "8943": 121, "11016": 121, "9538": 121, "11049": 121, "11021": 121, "11050": 121, "13853": 121, "13849": 121, "9366": 121, "13914": 121, "14000": 121, "11099": 121, "8257": 121, "11198": 121, "10784": 121, "window": 121, "10897": 121, "10963": 121, "10931": 121, "2799": 121, "11090": 121, "11207": 121, "9135": 121, "10829": 121, "10816": 121, "10886": 121, "10157": 121, "needs_bracket": 121, "10972": 121, "10044": 121, "10395": 121, "10641": 121, "10821": 121, "9296": 121, "9630": 121, "12792": 121, "12506": 121, "13115": 121, "13149": 121, "14117": 121, "14159": 121, "dup_isolate_complex_roots_sqf": 121, "11122": 121, "11418": 121, "misclassif": 121, "9862": 121, "11525": 121, "11530": 121, "11559": 121, "11547": 121, "11306": 121, "2866": 121, "11351": 121, "reduced_toti": 121, "14289": 121, "changelog": 122, "yu": 123, "brychkov": 123, "prudnikov": 123, "marichev": 123, "gordon": 123, "breach": 123, "ussr": 123, "324": 123, "330": 123, "0041555371900280": 123, "0041": 123, "5553": 123, "71": 123, "90028": 123, "ation": 123, "olut": 123, "inear": 123, "iffer": 123, "quation": 123, "olynomi": 123, "oeffici": 123, "issac": 123, "roceed": 123, "nternat": 123, "ymposium": 123, "ymbolic": 123, "lgebraic": 123, "omput": 123, "289": 123, "ny": 123, "usa": 123, "1145": 123, "220346": 123, "220383": 123, "marko": 123, "petkov": 123, "\u0161": 123, "ek": 123, "perat": 123, "290": 123, "296": 123, "220384": 123, "william": 123, "adam": 123, "philipp": 123, "loustaunau": 123, "ntroduct": 123, "\u00f6": 123, "bner": 123, "ases": 123, "american": 123, "boston": 123, "isbn": 123, "821": 123, "83804": 123, "iyad": 123, "ajwa": 123, "zhuojun": 123, "lgorithm": 123, "icm": 123, "199502": 123, "steven": 123, "arno": 123, "robinson": 123, "ferel": 123, "wheeler": 123, "302": 123, "1996": 123, "s0022314x96900499": 123, "1006": 123, "jnth": 123, "0049": 123, "becker": 123, "volker": 123, "weispfen": 123, "graduat": 123, "verlag": 123, "1993": 123, "97971": 123, "kredel": 123, "oor": 123, "ntegrat": 123, "inria": 123, "cafe": 123, "pmint": 123, "ranscendent": 123, "unction": 123, "540": 123, "21493": 123, "bruno": 123, "salvi": 123, "ull": 123, "artial": 123, "raction": 123, "ecomposit": 123, "164081": 123, "164114": 123, "uclid": 123, "reatest": 123, "ommon": 123, "ivisor": 123, "symsac": 123, "195": 123, "800204": 123, "806288": 123, "transact": 123, "237": 123, "249": 123, "355791": 123, "355795": 123, "heori": 123, "ubresult": 123, "505": 123, "514": 123, "321662": 123, "321665": 123, "hort": 123, "ystem": 123, "heorist": 123, "eurocast": 123, "georg": 123, "142": 123, "1967": 123, "citat": 123, "cfm": 123, "doid": 123, "321371": 123, "321381": 123, "cox": 123, "shea": 123, "arieti": 123, "undergradu": 123, "978": 123, "319": 123, "16720": 123, "davenport": 123, "siret": 123, "tournier": 123, "1988": 123, "204230": 123, "faug": 123, "\u00e8": 123, "gianni": 123, "mora": 123, "344": 123, "octob": 123, "s0747717183710515": 123, "jsco": 123, "alessandro": 123, "giovini": 123, "teo": 123, "gianfranco": 123, "niesi": 123, "lorenzo": 123, "robbiano": 123, "traverso": 123, "uchberg": 123, "1991": 123, "120694": 123, "120701": 123, "goldstein": 123, "braun": 123, "nasa": 123, "nation": 123, "aeronaut": 123, "administr": 123, "offic": 123, "1973": 123, "dominik": 123, "imit": 123, "anipul": 123, "phd": 123, "swiss": 123, "feder": 123, "institut": 123, "technologi": 123, "\u00fc": 123, "switzerland": 123, "hairer": 123, "\u00f8": 123, "rsett": 123, "wanner": 123, "nonstiff": 123, "9783642052330": 123, "sei": 123, "mohammad": 123, "mahdi": 123, "javadi": 123, "michael": 123, "monagan": 123, "actor": 123, "ultivari": 123, "umber": 123, "ield": 123, "199": 123, "206": 123, "1576702": 123, "1576731": 123, "ummat": 123, "erm": 123, "305": 123, "350": 123, "1981": 123, "322248": 123, "322255": 123, "rt": 123, "rogram": 123, "eminumer": 123, "1985": 123, "03822": 123, "braunschweig": 123, "dexter": 123, "kozen": 123, "landau": [123, 125], "445": 123, "456": 123, "s0747": 123, "80027": 123, "247": 123, "s0747717188800452": 123, "80045": 123, "hsin": 123, "chao": 123, "liao": 123, "fateman": 123, "valuat": 123, "240": 123, "220376": 123, "yudel": 123, "yiu": 123, "kwong": 123, "376": 123, "s0747717183710539": 123, "franci": 123, "wright": 123, "proceed": 123, "symposium": 123, "94": 123, "190347": 123, "190413": 123, "menez": 123, "vanston": 123, "boca": 123, "raton": 123, "florida": 123, "1997": 123, "hoeij": 123, "04": 123, "297": 123, "304": 123, "1005285": 123, "1005328": 123, "allan": 123, "wittkopf": 123, "345542": 123, "345639": 123, "bose": 123, "guiver": 123, "ypergeometr": 123, "ecurr": 123, "243": 123, "264": 123, "90038": 123, "herbert": 123, "doron": 123, "zeilberg": 123, "ak": 123, "ltd": 123, "welleslei": 123, "rutger": 123, "aeqb": 123, "kelli": 123, "roach": 123, "236869": 123, "237088": 123, "258726": 123, "258784": 123, "simmon": 123, "textbook": 123, "9781498702621": 123, "corr": 123, "1004": 123, "0084": 123, "tenenbaum": 123, "dover": 123, "1963": 123, "odular": 123, "resent": 123, "ultipl": 123, "xtension": 123, "2002": 123, "116": 123, "780506": 123, "780520": 123, "adic": 123, "nivari": 123, "800206": 123, "806398": 123, "kazuhiro": 123, "yokoyama": 123, "masayuki": 123, "noro": 123, "taku": 123, "takeshima": 123, "580": 123, "s0747717189800616": 123, "80061": 123, "aspect": 124, "deduct": 124, "is_assumpt": 124, "82842712474619": 124, "141592653589793238462643383279502884197169399375105820974944592307816": 124, "289025482222236": 124, "0919996683503752": 124, "\u2148": [124, 131, 133], "718281828459045j": 124, "roundoff": 124, "146": 124, "998334166468282": 124, "9983341664682815": 124, "84147098": 124, "45464871": 124, "04704": 124, "18920062": 124, "\u212f": [125, 128, 133, 134], "oh": 125, "\u03c0": [125, 128, 133], "poleerror": 125, "newcom": 126, "coers": 126, "disprov": 126, "8284271247461903": 128, "8284271247461900976": 128, "wrote": 128, "2xy": 128, "theme": 128, "cass": 128, "whet": 128, "appetit": 128, "unclear": 128, "c\u2082": [128, 134], "c\u2081": [128, 134], "j_y": 128, "tear": 129, "dig": 129, "pdp": 130, "influenc": 131, "\u03c6": 131, "153": 131, "textual": 132, "frontend": 132, "screen": 132, "graphviz": 132, "pitfail": 133, "late": 133, "whittl": 133, "catchal": 133, "scope": 133, "expand_multinomi": 133, "expand_mul": 133, "sound": 133, "expand_trig": 133, "expand_power_exp": 133, "expand_log": 133, "expand_complex": 133, "x\u2080": 133, "x\u2081": 133, "c\u2080": 134}, "objects": {"": [[42, 0, 0, "-", "diofant"]], "diofant": [[11, 0, 0, "-", "calculus"], [26, 0, 0, "-", "config"], [27, 0, 0, "-", "core"], [28, 0, 0, "-", "diffgeom"], [29, 0, 0, "-", "domains"], [32, 0, 0, "-", "functions"], [37, 0, 0, "-", "geometry"], [43, 0, 0, "-", "integrals"], [44, 0, 0, "-", "interactive"], [45, 0, 0, "-", "logic"], [49, 0, 0, "-", "matrices"], [53, 0, 0, "-", "parsing"], [54, 0, 0, "-", "plotting"], [55, 0, 0, "-", "polys"], [56, 0, 0, "-", "printing"], [60, 0, 0, "-", "solvers"], [67, 0, 0, "-", "stats"], [69, 0, 0, "-", "tensor"], [77, 0, 0, "-", "utilities"]], "diofant.calculus": [[7, 0, 0, "-", "gruntz"], [11, 0, 0, "-", "limits"], [11, 0, 0, "-", "optimization"], [11, 0, 0, "-", "order"], [11, 0, 0, "-", "residues"], [11, 0, 0, "-", "singularities"]], "diofant.calculus.gruntz": [[7, 1, 1, "", "compare"], [7, 1, 1, "", "leadterm"], [7, 1, 1, "", "limitinf"], [7, 1, 1, "", "mrv"], [7, 1, 1, "", "rewrite"], [7, 1, 1, "", "signinf"]], "diofant.calculus.limits": [[11, 2, 1, "", "Limit"], [11, 1, 1, "", "limit"]], "diofant.calculus.limits.Limit": [[11, 3, 1, "", "doit"]], "diofant.calculus.optimization": [[11, 1, 1, "", "maximize"], [11, 1, 1, "", "minimize"]], "diofant.calculus.order": [[11, 4, 1, "", "O"], [11, 2, 1, "", "Order"]], "diofant.calculus.order.Order": [[11, 3, 1, "", "contains"]], "diofant.calculus.residues": [[11, 1, 1, "", "residue"]], "diofant.calculus.singularities": [[11, 1, 1, "", "singularities"]], "diofant.combinatorics": [[18, 0, 0, "-", "generators"], [12, 0, 0, "-", "graycode"], [13, 0, 0, "-", "group_constructs"], [15, 0, 0, "-", "named_groups"], [16, 0, 0, "-", "partitions"], [17, 0, 0, "-", "perm_groups"], [18, 0, 0, "-", "permutations"], [19, 0, 0, "-", "polyhedron"], [20, 0, 0, "-", "prufer"], [21, 0, 0, "-", "subsets"], [22, 0, 0, "-", "tensor_can"], [23, 0, 0, "-", "testutil"], [24, 0, 0, "-", "util"]], "diofant.combinatorics.generators": [[18, 3, 1, "", "alternating"], [18, 3, 1, "", "cyclic"], [18, 3, 1, "", "dihedral"], [18, 3, 1, "", "symmetric"]], "diofant.combinatorics.graycode": [[12, 2, 1, "", "GrayCode"], [12, 3, 1, "", "bin_to_gray"], [12, 3, 1, "", "get_subset_from_bitstring"], [12, 3, 1, "", "gray_to_bin"], [12, 3, 1, "", "graycode_subsets"], [12, 3, 1, "", "random_bitstring"]], "diofant.combinatorics.graycode.GrayCode": [[12, 5, 1, "", "current"], [12, 3, 1, "", "generate_gray"], [12, 5, 1, "", "n"], [12, 3, 1, "", "next"], [12, 5, 1, "", "rank"], [12, 5, 1, "", "selections"], [12, 3, 1, "", "skip"], [12, 3, 1, "", "unrank"]], "diofant.combinatorics.group_constructs": [[13, 1, 1, "", "DirectProduct"]], "diofant.combinatorics.named_groups": [[15, 1, 1, "", "AbelianGroup"], [15, 1, 1, "", "AlternatingGroup"], [15, 1, 1, "", "CyclicGroup"], [15, 1, 1, "", "DihedralGroup"], [15, 1, 1, "", "SymmetricGroup"]], "diofant.combinatorics.partitions": [[16, 2, 1, "", "IntegerPartition"], [16, 2, 1, "", "Partition"], [16, 1, 1, "", "RGS_enum"], [16, 1, 1, "", "RGS_generalized"], [16, 1, 1, "", "RGS_rank"], [16, 1, 1, "", "RGS_unrank"], [16, 1, 1, "", "random_integer_partition"]], "diofant.combinatorics.partitions.IntegerPartition": [[16, 3, 1, "", "as_dict"], [16, 3, 1, "", "as_ferrers"], [16, 5, 1, "", "conjugate"], [16, 3, 1, "", "next_lex"], [16, 3, 1, "", "prev_lex"]], "diofant.combinatorics.partitions.Partition": [[16, 5, 1, "", "RGS"], [16, 3, 1, "", "from_rgs"], [16, 5, 1, "", "partition"], [16, 5, 1, "", "rank"], [16, 3, 1, "", "sort_key"]], "diofant.combinatorics.perm_groups": [[17, 2, 1, "", "PermutationGroup"]], "diofant.combinatorics.perm_groups.PermutationGroup": [[17, 3, 1, "", "__contains__"], [17, 3, 1, "", "__eq__"], [17, 3, 1, "", "__mul__"], [17, 3, 1, "", "__new__"], [17, 3, 1, "", "_union_find_merge"], [17, 3, 1, "", "_union_find_rep"], [17, 5, 1, "", "base"], [17, 3, 1, "", "baseswap"], [17, 5, 1, "", "basic_orbits"], [17, 5, 1, "", "basic_stabilizers"], [17, 5, 1, "", "basic_transversals"], [17, 3, 1, "", "center"], [17, 3, 1, "", "centralizer"], [17, 3, 1, "", "commutator"], [17, 3, 1, "", "contains"], [17, 3, 1, "", "coset_factor"], [17, 3, 1, "", "coset_rank"], [17, 3, 1, "", "coset_unrank"], [17, 5, 1, "", "degree"], [17, 3, 1, "", "derived_series"], [17, 3, 1, "", "derived_subgroup"], [17, 5, 1, "", "elements"], [17, 3, 1, "", "generate"], [17, 3, 1, "", "generate_dimino"], [17, 3, 1, "", "generate_schreier_sims"], [17, 5, 1, "", "generators"], [17, 5, 1, "", "is_abelian"], [17, 3, 1, "", "is_alt_sym"], [17, 5, 1, "", "is_nilpotent"], [17, 3, 1, "", "is_normal"], [17, 3, 1, "", "is_primitive"], [17, 5, 1, "", "is_solvable"], [17, 3, 1, "", "is_subgroup"], [17, 3, 1, "", "is_transitive"], [17, 5, 1, "", "is_trivial"], [17, 3, 1, "", "lower_central_series"], [17, 3, 1, "", "make_perm"], [17, 5, 1, "", "max_div"], [17, 3, 1, "", "minimal_block"], [17, 3, 1, "", "normal_closure"], [17, 3, 1, "", "orbit"], [17, 3, 1, "", "orbit_rep"], [17, 3, 1, "", "orbit_transversal"], [17, 3, 1, "", "orbits"], [17, 3, 1, "", "order"], [17, 3, 1, "", "pointwise_stabilizer"], [17, 3, 1, "", "random"], [17, 3, 1, "", "random_pr"], [17, 3, 1, "", "random_stab"], [17, 3, 1, "", "schreier_sims"], [17, 3, 1, "", "schreier_sims_incremental"], [17, 3, 1, "", "schreier_sims_random"], [17, 3, 1, "", "schreier_vector"], [17, 3, 1, "", "stabilizer"], [17, 5, 1, "", "strong_gens"], [17, 3, 1, "", "subgroup_search"], [17, 5, 1, "", "transitivity_degree"]], "diofant.combinatorics.permutations": [[18, 2, 1, "", "Cycle"], [18, 2, 1, "", "Permutation"], [18, 1, 1, "", "_af_parity"]], "diofant.combinatorics.permutations.Cycle": [[18, 3, 1, "", "list"]], "diofant.combinatorics.permutations.Permutation": [[18, 5, 1, "", "array_form"], [18, 3, 1, "", "ascents"], [18, 3, 1, "", "atoms"], [18, 5, 1, "", "cardinality"], [18, 3, 1, "", "commutator"], [18, 3, 1, "", "commutes_with"], [18, 5, 1, "", "cycle_structure"], [18, 5, 1, "", "cycles"], [18, 5, 1, "", "cyclic_form"], [18, 3, 1, "", "descents"], [18, 3, 1, "", "from_inversion_vector"], [18, 3, 1, "", "from_sequence"], [18, 5, 1, "", "full_cyclic_form"], [18, 3, 1, "", "get_adjacency_distance"], [18, 3, 1, "", "get_adjacency_matrix"], [18, 3, 1, "", "get_positional_distance"], [18, 3, 1, "", "get_precedence_distance"], [18, 3, 1, "", "get_precedence_matrix"], [18, 3, 1, "", "index"], [18, 3, 1, "", "inversion_vector"], [18, 3, 1, "", "inversions"], [18, 5, 1, "", "is_Empty"], [18, 5, 1, "", "is_Identity"], [18, 5, 1, "", "is_Singleton"], [18, 5, 1, "", "is_even"], [18, 5, 1, "", "is_odd"], [18, 3, 1, "", "josephus"], [18, 3, 1, "", "length"], [18, 3, 1, "", "list"], [18, 3, 1, "", "max"], [18, 3, 1, "", "min"], [18, 3, 1, "", "mul_inv"], [18, 3, 1, "", "next_lex"], [18, 3, 1, "", "next_nonlex"], [18, 3, 1, "", "next_trotterjohnson"], [18, 3, 1, "", "order"], [18, 3, 1, "", "parity"], [18, 3, 1, "", "random"], [18, 3, 1, "", "rank"], [18, 3, 1, "", "rank_nonlex"], [18, 3, 1, "", "rank_trotterjohnson"], [18, 3, 1, "", "rmul"], [18, 3, 1, "", "rmul_with_af"], [18, 3, 1, "", "runs"], [18, 3, 1, "", "signature"], [18, 5, 1, "", "size"], [18, 3, 1, "", "support"], [18, 3, 1, "", "transpositions"], [18, 3, 1, "", "unrank_lex"], [18, 3, 1, "", "unrank_nonlex"], [18, 3, 1, "", "unrank_trotterjohnson"]], "diofant.combinatorics.polyhedron": [[19, 2, 1, "", "Polyhedron"]], "diofant.combinatorics.polyhedron.Polyhedron": [[19, 5, 1, "", "array_form"], [19, 5, 1, "", "corners"], [19, 5, 1, "", "cyclic_form"], [19, 5, 1, "", "edges"], [19, 5, 1, "", "faces"], [19, 5, 1, "", "pgroup"], [19, 3, 1, "", "reset"], [19, 3, 1, "", "rotate"], [19, 5, 1, "", "size"], [19, 5, 1, "", "vertices"]], "diofant.combinatorics.prufer": [[20, 2, 1, "", "Prufer"]], "diofant.combinatorics.prufer.Prufer": [[20, 3, 1, "", "edges"], [20, 3, 1, "", "next"], [20, 5, 1, "", "nodes"], [20, 3, 1, "", "prev"], [20, 3, 1, "", "prufer_rank"], [20, 5, 1, "", "prufer_repr"], [20, 5, 1, "", "rank"], [20, 5, 1, "", "size"], [20, 3, 1, "", "to_prufer"], [20, 3, 1, "", "to_tree"], [20, 5, 1, "", "tree_repr"], [20, 3, 1, "", "unrank"]], "diofant.combinatorics.subsets": [[21, 2, 1, "", "Subset"], [21, 3, 1, "", "ksubsets"]], "diofant.combinatorics.subsets.Subset": [[21, 3, 1, "", "bitlist_from_subset"], [21, 5, 1, "", "cardinality"], [21, 3, 1, "", "iterate_binary"], [21, 3, 1, "", "iterate_graycode"], [21, 3, 1, "", "next_binary"], [21, 3, 1, "", "next_gray"], [21, 3, 1, "", "next_lexicographic"], [21, 3, 1, "", "prev_binary"], [21, 3, 1, "", "prev_gray"], [21, 3, 1, "", "prev_lexicographic"], [21, 5, 1, "", "rank_binary"], [21, 5, 1, "", "rank_gray"], [21, 5, 1, "", "rank_lexicographic"], [21, 5, 1, "", "size"], [21, 5, 1, "", "subset"], [21, 3, 1, "", "subset_from_bitlist"], [21, 3, 1, "", "subset_indices"], [21, 5, 1, "", "superset"], [21, 5, 1, "", "superset_size"], [21, 3, 1, "", "unrank_binary"], [21, 3, 1, "", "unrank_gray"]], "diofant.combinatorics.tensor_can": [[22, 1, 1, "", "bsgs_direct_product"], [22, 1, 1, "", "canonicalize"], [22, 1, 1, "", "double_coset_can_rep"], [22, 1, 1, "", "get_symmetric_group_sgs"]], "diofant.combinatorics.testutil": [[23, 1, 1, "", "_cmp_perm_lists"], [23, 1, 1, "", "_naive_list_centralizer"], [23, 1, 1, "", "_verify_bsgs"], [23, 1, 1, "", "_verify_centralizer"], [23, 1, 1, "", "_verify_normal_closure"]], "diofant.combinatorics.util": [[24, 1, 1, "", "_base_ordering"], [24, 1, 1, "", "_check_cycles_alt_sym"], [24, 1, 1, "", "_distribute_gens_by_base"], [24, 1, 1, "", "_handle_precomputed_bsgs"], [24, 1, 1, "", "_orbits_transversals_from_bsgs"], [24, 1, 1, "", "_remove_gens"], [24, 1, 1, "", "_strip"], [24, 1, 1, "", "_strong_gens_from_distr"]], "diofant.concrete.expr_with_intlimits": [[25, 2, 1, "", "ExprWithIntLimits"]], "diofant.concrete.expr_with_intlimits.ExprWithIntLimits": [[25, 3, 1, "", "change_index"], [25, 3, 1, "", "index"], [25, 3, 1, "", "reorder"], [25, 3, 1, "", "reorder_limit"]], "diofant.concrete.expr_with_limits": [[25, 2, 1, "", "ExprWithLimits"]], "diofant.concrete.expr_with_limits.ExprWithLimits": [[25, 3, 1, "", "as_dummy"], [25, 5, 1, "", "free_symbols"], [25, 5, 1, "", "function"], [25, 5, 1, "", "is_number"], [25, 5, 1, "", "limits"], [25, 5, 1, "", "variables"]], "diofant.concrete.gosper": [[25, 1, 1, "", "gosper_normal"], [25, 1, 1, "", "gosper_sum"], [25, 1, 1, "", "gosper_term"]], "diofant.concrete.products": [[25, 2, 1, "", "Product"], [25, 1, 1, "", "product"]], "diofant.concrete.products.Product": [[25, 3, 1, "", "reverse_order"]], "diofant.concrete.summations": [[25, 2, 1, "", "Sum"], [25, 1, 1, "", "summation"]], "diofant.concrete.summations.Sum": [[25, 3, 1, "", "euler_maclaurin"], [25, 3, 1, "", "findrecur"], [25, 3, 1, "", "reverse_order"]], "diofant.config": [[26, 1, 1, "", "setup"]], "diofant.core": [[27, 0, 0, "-", "add"], [27, 0, 0, "-", "assumptions"], [27, 0, 0, "-", "basic"], [27, 0, 0, "-", "cache"], [27, 0, 0, "-", "compatibility"], [27, 0, 0, "-", "containers"], [27, 0, 0, "-", "core"], [27, 0, 0, "-", "evalf"], [27, 0, 0, "-", "evaluate"], [27, 0, 0, "-", "expr"], [27, 0, 0, "-", "exprtools"], [27, 0, 0, "-", "function"], [27, 0, 0, "-", "mod"], [27, 0, 0, "-", "mul"], [27, 0, 0, "-", "multidimensional"], [27, 0, 0, "-", "numbers"], [27, 0, 0, "-", "power"], [27, 0, 0, "-", "relational"], [27, 0, 0, "-", "singleton"], [27, 0, 0, "-", "symbol"], [27, 0, 0, "-", "sympify"]], "diofant.core.add": [[27, 2, 1, "", "Add"]], "diofant.core.add.Add": [[27, 3, 1, "", "as_coeff_Add"], [27, 3, 1, "", "as_coeff_add"], [27, 3, 1, "", "as_coefficients_dict"], [27, 3, 1, "", "as_content_primitive"], [27, 3, 1, "", "as_real_imag"], [27, 3, 1, "", "as_two_terms"], [27, 3, 1, "", "class_key"], [27, 3, 1, "", "extract_leading_order"], [27, 3, 1, "", "flatten"], [27, 3, 1, "", "getO"], [27, 3, 1, "", "primitive"], [27, 3, 1, "", "removeO"]], "diofant.core.assumptions": [[27, 2, 1, "", "ManagedProperties"], [27, 2, 1, "", "StdFactKB"], [27, 1, 1, "", "as_property"], [27, 1, 1, "", "check_assumptions"], [27, 1, 1, "", "make_property"]], "diofant.core.basic": [[27, 2, 1, "", "Atom"], [27, 2, 1, "", "Basic"], [27, 2, 1, "", "preorder_traversal"]], "diofant.core.basic.Atom": [[27, 3, 1, "", "class_key"], [27, 3, 1, "", "doit"], [27, 3, 1, "", "sort_key"]], "diofant.core.basic.Basic": [[27, 5, 1, "", "args"], [27, 3, 1, "", "atoms"], [27, 3, 1, "", "class_key"], [27, 3, 1, "", "copy"], [27, 3, 1, "", "count"], [27, 3, 1, "", "count_ops"], [27, 3, 1, "", "doit"], [27, 3, 1, "", "find"], [27, 5, 1, "", "free_symbols"], [27, 5, 1, "", "func"], [27, 3, 1, "", "has"], [27, 5, 1, "", "is_evaluated"], [27, 3, 1, "", "match"], [27, 3, 1, "", "rcall"], [27, 3, 1, "", "replace"], [27, 3, 1, "", "rewrite"], [27, 3, 1, "", "sort_key"], [27, 3, 1, "", "subs"], [27, 3, 1, "", "xreplace"]], "diofant.core.basic.preorder_traversal": [[27, 3, 1, "", "skip"]], "diofant.core.cache": [[27, 1, 1, "", "cacheit"]], "diofant.core.compatibility": [[27, 2, 1, "", "NotIterable"], [27, 1, 1, "", "as_int"], [27, 1, 1, "", "is_sequence"], [27, 1, 1, "", "iterable"]], "diofant.core.containers": [[27, 2, 1, "", "Dict"], [27, 2, 1, "", "Tuple"]], "diofant.core.containers.Dict": [[27, 5, 1, "", "args"], [27, 3, 1, "", "get"], [27, 3, 1, "", "items"], [27, 3, 1, "", "keys"], [27, 3, 1, "", "values"]], "diofant.core.containers.Tuple": [[27, 3, 1, "", "index"], [27, 3, 1, "", "tuple_count"]], "diofant.core.evalf": [[27, 2, 1, "", "EvalfMixin"], [27, 1, 1, "", "N"], [27, 2, 1, "", "PrecisionExhausted"]], "diofant.core.evalf.EvalfMixin": [[27, 3, 1, "", "evalf"]], "diofant.core.evaluate": [[27, 1, 1, "", "evaluate"]], "diofant.core.expr": [[27, 2, 1, "", "AtomicExpr"], [27, 2, 1, "", "Expr"]], "diofant.core.expr.Expr": [[27, 3, 1, "", "adjoint"], [27, 3, 1, "", "apart"], [27, 3, 1, "", "args_cnc"], [27, 3, 1, "", "as_base_exp"], [27, 3, 1, "", "as_coeff_Add"], [27, 3, 1, "", "as_coeff_Mul"], [27, 3, 1, "", "as_coeff_add"], [27, 3, 1, "", "as_coeff_exponent"], [27, 3, 1, "", "as_coeff_mul"], [27, 3, 1, "", "as_coefficient"], [27, 3, 1, "", "as_coefficients_dict"], [27, 3, 1, "", "as_content_primitive"], [27, 3, 1, "", "as_expr"], [27, 3, 1, "", "as_independent"], [27, 3, 1, "", "as_leading_term"], [27, 3, 1, "", "as_numer_denom"], [27, 3, 1, "", "as_ordered_factors"], [27, 3, 1, "", "as_ordered_terms"], [27, 3, 1, "", "as_poly"], [27, 3, 1, "", "as_powers_dict"], [27, 3, 1, "", "as_real_imag"], [27, 3, 1, "", "as_terms"], [27, 3, 1, "", "aseries"], [27, 3, 1, "", "cancel"], [27, 5, 1, "", "canonical_variables"], [27, 3, 1, "", "coeff"], [27, 3, 1, "", "collect"], [27, 3, 1, "", "combsimp"], [27, 3, 1, "", "compute_leading_term"], [27, 3, 1, "", "conjugate"], [27, 3, 1, "", "could_extract_minus_sign"], [27, 3, 1, "", "count_ops"], [27, 3, 1, "", "diff"], [27, 3, 1, "", "equals"], [27, 3, 1, "", "expand"], [27, 3, 1, "", "extract_additively"], [27, 3, 1, "", "extract_branch_factor"], [27, 3, 1, "", "extract_multiplicatively"], [27, 3, 1, "", "factor"], [27, 3, 1, "", "getO"], [27, 3, 1, "", "getn"], [27, 3, 1, "", "integrate"], [27, 3, 1, "", "invert"], [27, 5, 1, "", "is_algebraic"], [27, 3, 1, "", "is_algebraic_expr"], [27, 5, 1, "", "is_commutative"], [27, 5, 1, "", "is_comparable"], [27, 5, 1, "", "is_complex"], [27, 5, 1, "", "is_composite"], [27, 3, 1, "", "is_constant"], [27, 5, 1, "", "is_even"], [27, 5, 1, "", "is_extended_real"], [27, 5, 1, "", "is_finite"], [27, 3, 1, "", "is_hypergeometric"], [27, 5, 1, "", "is_imaginary"], [27, 5, 1, "", "is_infinite"], [27, 5, 1, "", "is_integer"], [27, 5, 1, "", "is_irrational"], [27, 5, 1, "", "is_negative"], [27, 5, 1, "", "is_noninteger"], [27, 5, 1, "", "is_nonnegative"], [27, 5, 1, "", "is_nonpositive"], [27, 5, 1, "", "is_nonzero"], [27, 5, 1, "", "is_number"], [27, 5, 1, "", "is_odd"], [27, 5, 1, "", "is_polar"], [27, 3, 1, "", "is_polynomial"], [27, 5, 1, "", "is_positive"], [27, 5, 1, "", "is_prime"], [27, 5, 1, "", "is_rational"], [27, 3, 1, "", "is_rational_function"], [27, 5, 1, "", "is_real"], [27, 5, 1, "", "is_transcendental"], [27, 5, 1, "", "is_zero"], [27, 3, 1, "", "limit"], [27, 3, 1, "", "normal"], [27, 3, 1, "", "nseries"], [27, 3, 1, "", "nsimplify"], [27, 3, 1, "", "powsimp"], [27, 3, 1, "", "primitive"], [27, 3, 1, "", "radsimp"], [27, 3, 1, "", "ratsimp"], [27, 3, 1, "", "removeO"], [27, 3, 1, "", "round"], [27, 3, 1, "", "series"], [27, 3, 1, "", "simplify"], [27, 3, 1, "", "sort_key"], [27, 3, 1, "", "taylor_term"], [27, 3, 1, "", "together"], [27, 3, 1, "", "transpose"], [27, 3, 1, "", "trigsimp"]], "diofant.core.exprtools": [[27, 1, 1, "", "factor_terms"], [27, 1, 1, "", "gcd_terms"]], "diofant.core.function": [[27, 2, 1, "", "Derivative"], [27, 2, 1, "", "Function"], [27, 2, 1, "", "FunctionClass"], [27, 2, 1, "", "Lambda"], [27, 2, 1, "", "PoleError"], [27, 2, 1, "", "Subs"], [27, 2, 1, "", "WildFunction"], [27, 1, 1, "", "count_ops"], [27, 1, 1, "", "diff"], [27, 1, 1, "", "expand"], [27, 1, 1, "", "expand_complex"], [27, 1, 1, "", "expand_func"], [27, 1, 1, "", "expand_log"], [27, 1, 1, "", "expand_mul"], [27, 1, 1, "", "expand_multinomial"], [27, 1, 1, "", "expand_power_base"], [27, 1, 1, "", "expand_power_exp"], [27, 1, 1, "", "expand_trig"], [27, 1, 1, "", "nfloat"]], "diofant.core.function.Derivative": [[27, 3, 1, "", "doit"], [27, 3, 1, "", "doit_numerically"], [27, 5, 1, "", "expr"], [27, 5, 1, "", "free_symbols"], [27, 5, 1, "", "variables"]], "diofant.core.function.Function": [[27, 3, 1, "", "class_key"], [27, 3, 1, "", "fdiff"]], "diofant.core.function.FunctionClass": [[27, 5, 1, "", "nargs"]], "diofant.core.function.Lambda": [[27, 5, 1, "", "expr"], [27, 5, 1, "", "free_symbols"], [27, 5, 1, "", "variables"]], "diofant.core.function.Subs": [[27, 3, 1, "", "doit"], [27, 3, 1, "", "evalf"], [27, 5, 1, "", "expr"], [27, 5, 1, "", "free_symbols"], [27, 5, 1, "", "point"], [27, 5, 1, "", "variables"]], "diofant.core.mod": [[27, 2, 1, "", "Mod"]], "diofant.core.mul": [[27, 2, 1, "", "Mul"]], "diofant.core.mul.Mul": [[27, 3, 1, "", "as_base_exp"], [27, 3, 1, "", "as_coeff_Mul"], [27, 3, 1, "", "as_coeff_mul"], [27, 3, 1, "", "as_content_primitive"], [27, 3, 1, "", "as_ordered_factors"], [27, 3, 1, "", "as_powers_dict"], [27, 3, 1, "", "as_real_imag"], [27, 3, 1, "", "as_two_terms"], [27, 3, 1, "", "class_key"], [27, 3, 1, "", "flatten"]], "diofant.core.multidimensional": [[27, 2, 1, "", "vectorize"]], "diofant.core.numbers": [[27, 2, 1, "", "Catalan"], [27, 2, 1, "", "ComplexInfinity"], [27, 2, 1, "", "EulerGamma"], [27, 2, 1, "", "Exp1"], [27, 2, 1, "", "Float"], [27, 2, 1, "", "GoldenRatio"], [27, 2, 1, "", "Half"], [27, 2, 1, "", "ImaginaryUnit"], [27, 2, 1, "", "Infinity"], [27, 2, 1, "", "Integer"], [27, 2, 1, "", "NaN"], [27, 2, 1, "", "NegativeInfinity"], [27, 2, 1, "", "NegativeOne"], [27, 2, 1, "", "Number"], [27, 2, 1, "", "NumberSymbol"], [27, 2, 1, "", "One"], [27, 2, 1, "", "Pi"], [27, 2, 1, "", "Rational"], [27, 2, 1, "", "Zero"], [27, 1, 1, "", "integer_digits"], [27, 1, 1, "", "mod_inverse"]], "diofant.core.numbers.Float": [[27, 3, 1, "", "ceiling"], [27, 3, 1, "", "epsilon_eq"], [27, 3, 1, "", "floor"], [27, 5, 1, "", "num"]], "diofant.core.numbers.Integer": [[27, 5, 1, "", "is_composite"], [27, 5, 1, "", "is_even"], [27, 5, 1, "", "is_imaginary"], [27, 5, 1, "", "is_nonzero"], [27, 5, 1, "", "is_odd"], [27, 5, 1, "", "is_prime"], [27, 5, 1, "", "is_zero"]], "diofant.core.numbers.Number": [[27, 3, 1, "", "as_coeff_Add"], [27, 3, 1, "", "as_coeff_Mul"], [27, 3, 1, "", "as_coeff_add"], [27, 3, 1, "", "as_coeff_mul"], [27, 3, 1, "", "class_key"], [27, 3, 1, "", "cofactors"], [27, 3, 1, "", "gcd"], [27, 3, 1, "", "is_constant"], [27, 3, 1, "", "lcm"], [27, 3, 1, "", "sort_key"]], "diofant.core.numbers.NumberSymbol": [[27, 3, 1, "", "approximation_interval"]], "diofant.core.numbers.Rational": [[27, 3, 1, "", "as_content_primitive"], [27, 3, 1, "", "factors"], [27, 3, 1, "", "gcd"], [27, 3, 1, "", "lcm"], [27, 3, 1, "", "limit_denominator"]], "diofant.core.power": [[27, 2, 1, "", "Pow"], [27, 1, 1, "", "integer_nthroot"]], "diofant.core.power.Pow": [[27, 3, 1, "", "as_base_exp"], [27, 3, 1, "", "as_content_primitive"], [27, 3, 1, "", "as_real_imag"], [27, 5, 1, "", "base"], [27, 3, 1, "", "class_key"], [27, 5, 1, "", "exp"]], "diofant.core.relational": [[27, 4, 1, "", "Eq"], [27, 2, 1, "", "Equality"], [27, 4, 1, "", "Ge"], [27, 2, 1, "", "GreaterThan"], [27, 4, 1, "", "Gt"], [27, 4, 1, "", "Le"], [27, 2, 1, "", "LessThan"], [27, 4, 1, "", "Lt"], [27, 4, 1, "", "Ne"], [27, 4, 1, "", "Rel"], [27, 2, 1, "", "Relational"], [27, 2, 1, "", "StrictGreaterThan"], [27, 2, 1, "", "StrictLessThan"], [27, 2, 1, "", "Unequality"]], "diofant.core.relational.Relational": [[27, 3, 1, "", "as_set"], [27, 5, 1, "", "canonical"], [27, 3, 1, "", "equals"], [27, 5, 1, "", "lhs"], [27, 5, 1, "", "reversed"], [27, 5, 1, "", "rhs"]], "diofant.core.singleton": [[27, 6, 1, "", "S"], [27, 2, 1, "", "Singleton"], [27, 2, 1, "", "SingletonRegistry"], [27, 2, 1, "", "SingletonWithManagedProperties"]], "diofant.core.symbol": [[27, 2, 1, "", "Dummy"], [27, 2, 1, "", "Symbol"], [27, 2, 1, "", "Wild"], [27, 1, 1, "", "symbols"], [27, 1, 1, "", "var"]], "diofant.core.symbol.Dummy": [[27, 3, 1, "", "class_key"], [27, 3, 1, "", "sort_key"]], "diofant.core.sympify": [[27, 1, 1, "", "sympify"]], "diofant.diffgeom": [[28, 2, 1, "", "BaseCovarDerivativeOp"], [28, 2, 1, "", "BaseScalarField"], [28, 2, 1, "", "BaseVectorField"], [28, 2, 1, "", "Commutator"], [28, 2, 1, "", "CoordSystem"], [28, 2, 1, "", "CovarDerivativeOp"], [28, 2, 1, "", "Differential"], [28, 2, 1, "", "LieDerivative"], [28, 2, 1, "", "Manifold"], [28, 2, 1, "", "Patch"], [28, 2, 1, "", "Point"], [28, 2, 1, "", "TensorProduct"], [28, 2, 1, "", "WedgeProduct"], [28, 1, 1, "", "intcurve_diffequ"], [28, 1, 1, "", "intcurve_series"], [28, 1, 1, "", "metric_to_Christoffel_1st"], [28, 1, 1, "", "metric_to_Christoffel_2nd"], [28, 1, 1, "", "metric_to_Ricci_components"], [28, 1, 1, "", "metric_to_Riemann_components"], [28, 1, 1, "", "twoform_to_matrix"], [28, 1, 1, "", "vectors_in_basis"]], "diofant.diffgeom.CoordSystem": [[28, 3, 1, "", "base_oneform"], [28, 3, 1, "", "base_oneforms"], [28, 3, 1, "", "base_vector"], [28, 3, 1, "", "base_vectors"], [28, 3, 1, "", "connect_to"], [28, 3, 1, "", "coord_function"], [28, 3, 1, "", "coord_functions"], [28, 3, 1, "", "coord_tuple_transform_to"], [28, 3, 1, "", "jacobian"], [28, 3, 1, "", "point"], [28, 3, 1, "", "point_to_coords"]], "diofant.diffgeom.Point": [[28, 3, 1, "", "coords"]], "diofant.domains": [[29, 2, 1, "", "AlgebraicField"], [29, 2, 1, "", "ComplexAlgebraicField"], [29, 2, 1, "", "ComplexField"], [29, 2, 1, "", "ExpressionDomain"], [29, 2, 1, "", "FiniteField"], [29, 2, 1, "", "IntegerModRing"], [29, 2, 1, "", "IntegerRing"], [29, 2, 1, "", "RationalField"], [29, 2, 1, "", "RealAlgebraicField"], [29, 2, 1, "", "RealField"]], "diofant.domains.AlgebraicField": [[29, 3, 1, "", "algebraic_field"]], "diofant.domains.ComplexField": [[29, 3, 1, "", "almosteq"]], "diofant.domains.ExpressionDomain": [[29, 2, 1, "", "Expression"], [29, 4, 1, "", "dtype"]], "diofant.domains.IntegerRing": [[29, 5, 1, "", "field"], [29, 3, 1, "", "finite_field"], [29, 3, 1, "", "finite_ring"]], "diofant.domains.RationalField": [[29, 3, 1, "", "algebraic_field"]], "diofant.domains.RealField": [[29, 3, 1, "", "almosteq"], [29, 3, 1, "", "to_rational"]], "diofant.domains.characteristiczero": [[29, 2, 1, "", "CharacteristicZero"]], "diofant.domains.compositedomain": [[29, 2, 1, "", "CompositeDomain"]], "diofant.domains.compositedomain.CompositeDomain": [[29, 3, 1, "", "inject"]], "diofant.domains.domain": [[29, 2, 1, "", "Domain"]], "diofant.domains.domain.Domain": [[29, 3, 1, "", "convert"], [29, 3, 1, "", "convert_from"], [29, 3, 1, "", "frac_field"], [29, 3, 1, "", "from_expr"], [29, 3, 1, "", "poly_ring"], [29, 3, 1, "", "to_expr"], [29, 3, 1, "", "unify"]], "diofant.domains.field": [[29, 2, 1, "", "Field"]], "diofant.domains.field.Field": [[29, 3, 1, "", "div"], [29, 3, 1, "", "exquo"], [29, 5, 1, "", "field"], [29, 3, 1, "", "gcd"], [29, 3, 1, "", "quo"], [29, 3, 1, "", "rem"]], "diofant.domains.finitefield": [[29, 2, 1, "", "GMPYFiniteField"], [29, 2, 1, "", "GaloisFieldElement"], [29, 2, 1, "", "ModularInteger"], [29, 2, 1, "", "PythonFiniteField"]], "diofant.domains.finitefield.ModularInteger": [[29, 5, 1, "", "is_primitive"]], "diofant.domains.integerring": [[29, 2, 1, "", "GMPYIntegerRing"], [29, 2, 1, "", "PythonIntegerRing"]], "diofant.domains.rationalfield": [[29, 2, 1, "", "GMPYRationalField"], [29, 2, 1, "", "PythonRationalField"]], "diofant.domains.ring": [[29, 2, 1, "", "CommutativeRing"]], "diofant.domains.ring.CommutativeRing": [[29, 5, 1, "", "characteristic"], [29, 3, 1, "", "cofactors"], [29, 3, 1, "", "div"], [29, 3, 1, "", "exquo"], [29, 3, 1, "", "half_gcdex"], [29, 3, 1, "", "invert"], [29, 3, 1, "", "is_normal"], [29, 3, 1, "", "lcm"], [29, 3, 1, "", "quo"], [29, 3, 1, "", "rem"], [29, 5, 1, "", "ring"]], "diofant.domains.simpledomain": [[29, 2, 1, "", "SimpleDomain"]], "diofant.domains.simpledomain.SimpleDomain": [[29, 3, 1, "", "inject"]], "diofant.functions.combinatorial.factorials": [[30, 2, 1, "", "FallingFactorial"], [30, 2, 1, "", "RisingFactorial"], [30, 2, 1, "", "binomial"], [30, 2, 1, "", "factorial"], [30, 2, 1, "", "factorial2"], [30, 2, 1, "", "subfactorial"]], "diofant.functions.combinatorial.numbers": [[30, 2, 1, "", "bell"], [30, 2, 1, "", "bernoulli"], [30, 2, 1, "", "catalan"], [30, 2, 1, "", "euler"], [30, 2, 1, "", "fibonacci"], [30, 2, 1, "", "harmonic"], [30, 2, 1, "", "lucas"], [30, 1, 1, "", "nC"], [30, 1, 1, "", "nP"], [30, 1, 1, "", "nT"], [30, 1, 1, "", "stirling"]], "diofant.functions.elementary.complexes": [[31, 2, 1, "", "Abs"], [31, 2, 1, "", "adjoint"], [31, 2, 1, "", "arg"], [31, 2, 1, "", "conjugate"], [31, 2, 1, "", "im"], [31, 2, 1, "", "periodic_argument"], [31, 2, 1, "", "polar_lift"], [31, 2, 1, "", "principal_branch"], [31, 2, 1, "", "re"], [31, 2, 1, "", "sign"], [31, 2, 1, "", "transpose"]], "diofant.functions.elementary.complexes.Abs": [[31, 3, 1, "", "fdiff"]], "diofant.functions.elementary.complexes.im": [[31, 3, 1, "", "as_real_imag"]], "diofant.functions.elementary.complexes.re": [[31, 3, 1, "", "as_real_imag"]], "diofant.functions.elementary.exponential": [[31, 2, 1, "", "LambertW"], [31, 1, 1, "", "exp"], [31, 2, 1, "", "exp_polar"], [31, 2, 1, "", "log"]], "diofant.functions.elementary.exponential.LambertW": [[31, 3, 1, "", "fdiff"]], "diofant.functions.elementary.exponential.exp_polar": [[31, 5, 1, "", "exp"]], "diofant.functions.elementary.exponential.log": [[31, 3, 1, "", "as_real_imag"], [31, 3, 1, "", "fdiff"], [31, 3, 1, "", "inverse"]], "diofant.functions.elementary.hyperbolic": [[31, 2, 1, "", "HyperbolicFunction"], [31, 2, 1, "", "acosh"], [31, 2, 1, "", "acoth"], [31, 2, 1, "", "asinh"], [31, 2, 1, "", "atanh"], [31, 2, 1, "", "cosh"], [31, 2, 1, "", "coth"], [31, 2, 1, "", "csch"], [31, 2, 1, "", "sech"], [31, 2, 1, "", "sinh"], [31, 2, 1, "", "tanh"]], "diofant.functions.elementary.hyperbolic.acosh": [[31, 3, 1, "", "inverse"]], "diofant.functions.elementary.hyperbolic.acoth": [[31, 3, 1, "", "inverse"]], "diofant.functions.elementary.hyperbolic.asinh": [[31, 3, 1, "", "inverse"]], "diofant.functions.elementary.hyperbolic.atanh": [[31, 3, 1, "", "inverse"]], "diofant.functions.elementary.hyperbolic.coth": [[31, 3, 1, "", "inverse"]], "diofant.functions.elementary.hyperbolic.csch": [[31, 3, 1, "", "fdiff"], [31, 3, 1, "", "taylor_term"]], "diofant.functions.elementary.hyperbolic.sinh": [[31, 3, 1, "", "as_real_imag"], [31, 3, 1, "", "fdiff"], [31, 3, 1, "", "inverse"], [31, 3, 1, "", "taylor_term"]], "diofant.functions.elementary.hyperbolic.tanh": [[31, 3, 1, "", "inverse"]], "diofant.functions.elementary.integers": [[31, 2, 1, "", "RoundFunction"], [31, 2, 1, "", "ceiling"], [31, 2, 1, "", "floor"]], "diofant.functions.elementary.miscellaneous": [[31, 2, 1, "", "IdentityFunction"], [31, 2, 1, "", "Max"], [31, 2, 1, "", "Min"], [31, 1, 1, "", "real_root"], [31, 1, 1, "", "root"], [31, 1, 1, "", "sqrt"]], "diofant.functions.elementary.piecewise": [[31, 2, 1, "", "ExprCondPair"], [31, 2, 1, "", "Piecewise"], [31, 1, 1, "", "piecewise_fold"]], "diofant.functions.elementary.piecewise.ExprCondPair": [[31, 5, 1, "", "cond"], [31, 5, 1, "", "expr"]], "diofant.functions.elementary.piecewise.Piecewise": [[31, 3, 1, "", "doit"]], "diofant.functions.elementary.trigonometric": [[31, 2, 1, "", "acos"], [31, 2, 1, "", "acot"], [31, 2, 1, "", "acsc"], [31, 2, 1, "", "asec"], [31, 2, 1, "", "asin"], [31, 2, 1, "", "atan"], [31, 2, 1, "", "atan2"], [31, 2, 1, "", "cos"], [31, 2, 1, "", "cot"], [31, 2, 1, "", "csc"], [31, 2, 1, "", "sec"], [31, 2, 1, "", "sin"], [31, 2, 1, "", "tan"]], "diofant.functions.elementary.trigonometric.acos": [[31, 3, 1, "", "inverse"]], "diofant.functions.elementary.trigonometric.acot": [[31, 3, 1, "", "inverse"]], "diofant.functions.elementary.trigonometric.acsc": [[31, 3, 1, "", "inverse"]], "diofant.functions.elementary.trigonometric.asec": [[31, 3, 1, "", "inverse"]], "diofant.functions.elementary.trigonometric.asin": [[31, 3, 1, "", "inverse"]], "diofant.functions.elementary.trigonometric.atan": [[31, 3, 1, "", "inverse"]], "diofant.functions.elementary.trigonometric.cot": [[31, 3, 1, "", "inverse"]], "diofant.functions.elementary.trigonometric.tan": [[31, 3, 1, "", "inverse"]], "diofant.functions.special": [[33, 0, 0, "-", "bessel"], [33, 0, 0, "-", "beta_functions"], [33, 0, 0, "-", "elliptic_integrals"], [33, 0, 0, "-", "error_functions"], [33, 0, 0, "-", "gamma_functions"], [33, 0, 0, "-", "polynomials"], [33, 0, 0, "-", "zeta_functions"]], "diofant.functions.special.bessel": [[33, 2, 1, "", "AiryBase"], [33, 2, 1, "", "BesselBase"], [33, 2, 1, "", "airyai"], [33, 2, 1, "", "airyaiprime"], [33, 2, 1, "", "airybi"], [33, 2, 1, "", "airybiprime"], [33, 2, 1, "", "besseli"], [33, 2, 1, "", "besselj"], [33, 2, 1, "", "besselk"], [33, 2, 1, "", "bessely"], [33, 2, 1, "", "hankel1"], [33, 2, 1, "", "hankel2"], [33, 2, 1, "", "jn"], [33, 1, 1, "", "jn_zeros"], [33, 2, 1, "", "yn"]], "diofant.functions.special.bessel.BesselBase": [[33, 5, 1, "", "argument"], [33, 5, 1, "", "order"]], "diofant.functions.special.beta_functions": [[33, 2, 1, "", "beta"]], "diofant.functions.special.bsplines": [[33, 1, 1, "", "bspline_basis"], [33, 1, 1, "", "bspline_basis_set"]], "diofant.functions.special.delta_functions": [[33, 2, 1, "", "DiracDelta"], [33, 2, 1, "", "Heaviside"]], "diofant.functions.special.delta_functions.DiracDelta": [[33, 3, 1, "", "is_simple"], [33, 3, 1, "", "simplify"]], "diofant.functions.special.elliptic_integrals": [[33, 2, 1, "", "elliptic_e"], [33, 2, 1, "", "elliptic_f"], [33, 2, 1, "", "elliptic_k"], [33, 2, 1, "", "elliptic_pi"]], "diofant.functions.special.error_functions": [[33, 2, 1, "", "Chi"], [33, 2, 1, "", "Ci"], [33, 1, 1, "", "E1"], [33, 2, 1, "", "Ei"], [33, 2, 1, "", "FresnelIntegral"], [33, 2, 1, "", "Li"], [33, 2, 1, "", "Shi"], [33, 2, 1, "", "Si"], [33, 2, 1, "", "erf"], [33, 2, 1, "", "erf2"], [33, 2, 1, "", "erf2inv"], [33, 2, 1, "", "erfc"], [33, 2, 1, "", "erfcinv"], [33, 2, 1, "", "erfi"], [33, 2, 1, "", "erfinv"], [33, 2, 1, "", "expint"], [33, 2, 1, "", "fresnelc"], [33, 2, 1, "", "fresnels"], [33, 2, 1, "", "li"]], "diofant.functions.special.gamma_functions": [[33, 1, 1, "", "digamma"], [33, 2, 1, "", "gamma"], [33, 2, 1, "", "loggamma"], [33, 2, 1, "", "lowergamma"], [33, 2, 1, "", "polygamma"], [33, 1, 1, "", "trigamma"], [33, 2, 1, "", "uppergamma"]], "diofant.functions.special.hyper": [[33, 2, 1, "", "hyper"], [33, 2, 1, "", "meijerg"]], "diofant.functions.special.hyper.hyper": [[33, 5, 1, "", "ap"], [33, 5, 1, "", "argument"], [33, 5, 1, "", "bq"], [33, 5, 1, "", "convergence_statement"], [33, 5, 1, "", "eta"], [33, 5, 1, "", "radius_of_convergence"]], "diofant.functions.special.hyper.meijerg": [[33, 5, 1, "", "an"], [33, 5, 1, "", "aother"], [33, 5, 1, "", "ap"], [33, 5, 1, "", "argument"], [33, 5, 1, "", "bm"], [33, 5, 1, "", "bother"], [33, 5, 1, "", "bq"], [33, 5, 1, "", "delta"], [33, 3, 1, "", "get_period"], [33, 3, 1, "", "integrand"], [33, 5, 1, "", "nu"]], "diofant.functions.special.polynomials": [[33, 2, 1, "", "assoc_laguerre"], [33, 2, 1, "", "assoc_legendre"], [33, 2, 1, "", "chebyshevt"], [33, 2, 1, "", "chebyshevt_root"], [33, 2, 1, "", "chebyshevu"], [33, 2, 1, "", "chebyshevu_root"], [33, 2, 1, "", "gegenbauer"], [33, 2, 1, "", "hermite"], [33, 2, 1, "", "jacobi"], [33, 1, 1, "", "jacobi_normalized"], [33, 2, 1, "", "laguerre"], [33, 2, 1, "", "legendre"]], "diofant.functions.special.spherical_harmonics": [[33, 2, 1, "", "Ynm"], [33, 1, 1, "", "Ynm_c"], [33, 2, 1, "", "Znm"]], "diofant.functions.special.tensor_functions": [[33, 1, 1, "", "Eijk"], [33, 2, 1, "", "KroneckerDelta"], [33, 2, 1, "", "LeviCivita"], [33, 1, 1, "", "eval_levicivita"]], "diofant.functions.special.tensor_functions.KroneckerDelta": [[33, 3, 1, "", "eval"], [33, 5, 1, "", "indices_contain_equal_information"], [33, 5, 1, "", "is_above_fermi"], [33, 5, 1, "", "is_below_fermi"], [33, 5, 1, "", "is_only_above_fermi"], [33, 5, 1, "", "is_only_below_fermi"], [33, 5, 1, "", "killable_index"], [33, 5, 1, "", "preferred_index"]], "diofant.functions.special.zeta_functions": [[33, 2, 1, "", "dirichlet_eta"], [33, 2, 1, "", "lerchphi"], [33, 2, 1, "", "polylog"], [33, 2, 1, "", "zeta"]], "diofant.geometry": [[34, 0, 0, "-", "curve"], [35, 0, 0, "-", "ellipse"], [36, 0, 0, "-", "entity"], [41, 0, 0, "-", "exceptions"], [38, 0, 0, "-", "line"], [39, 0, 0, "-", "point"], [40, 0, 0, "-", "polygon"], [41, 0, 0, "-", "util"]], "diofant.geometry.curve": [[34, 2, 1, "", "Curve"]], "diofant.geometry.curve.Curve": [[34, 3, 1, "", "arbitrary_point"], [34, 5, 1, "", "free_symbols"], [34, 5, 1, "", "functions"], [34, 5, 1, "", "limits"], [34, 5, 1, "", "parameter"], [34, 3, 1, "", "plot_interval"], [34, 3, 1, "", "rotate"], [34, 3, 1, "", "scale"], [34, 3, 1, "", "translate"]], "diofant.geometry.ellipse": [[35, 2, 1, "", "Circle"], [35, 2, 1, "", "Ellipse"]], "diofant.geometry.ellipse.Circle": [[35, 5, 1, "", "circumference"], [35, 3, 1, "", "equation"], [35, 3, 1, "", "intersection"], [35, 5, 1, "", "radius"], [35, 3, 1, "", "reflect"], [35, 3, 1, "", "scale"], [35, 5, 1, "", "vradius"]], "diofant.geometry.ellipse.Ellipse": [[35, 5, 1, "", "apoapsis"], [35, 3, 1, "", "arbitrary_point"], [35, 5, 1, "", "area"], [35, 5, 1, "", "center"], [35, 5, 1, "", "circumference"], [35, 5, 1, "", "eccentricity"], [35, 3, 1, "", "encloses_point"], [35, 3, 1, "", "equation"], [35, 3, 1, "", "evolute"], [35, 5, 1, "", "foci"], [35, 5, 1, "", "focus_distance"], [35, 5, 1, "", "hradius"], [35, 3, 1, "", "intersection"], [35, 3, 1, "", "is_tangent"], [35, 5, 1, "", "major"], [35, 5, 1, "", "minor"], [35, 3, 1, "", "normal_lines"], [35, 5, 1, "", "periapsis"], [35, 3, 1, "", "plot_interval"], [35, 3, 1, "", "random_point"], [35, 3, 1, "", "reflect"], [35, 3, 1, "", "rotate"], [35, 3, 1, "", "scale"], [35, 3, 1, "", "tangent_lines"], [35, 5, 1, "", "vradius"]], "diofant.geometry.entity": [[36, 2, 1, "", "GeometryEntity"]], "diofant.geometry.entity.GeometryEntity": [[36, 5, 1, "", "ambient_dimension"], [36, 3, 1, "", "encloses"], [36, 3, 1, "", "intersection"], [36, 3, 1, "", "is_similar"], [36, 3, 1, "", "rotate"], [36, 3, 1, "", "scale"], [36, 3, 1, "", "translate"]], "diofant.geometry.exceptions": [[41, 7, 1, "", "GeometryError"]], "diofant.geometry.line": [[38, 2, 1, "", "Line"], [38, 2, 1, "", "LinearEntity"], [38, 2, 1, "", "Ray"], [38, 2, 1, "", "Segment"]], "diofant.geometry.line.Line": [[38, 3, 1, "", "contains"], [38, 3, 1, "", "distance"], [38, 3, 1, "", "equal"], [38, 3, 1, "", "equation"], [38, 3, 1, "", "plot_interval"]], "diofant.geometry.line.LinearEntity": [[38, 3, 1, "", "angle_between"], [38, 3, 1, "", "arbitrary_point"], [38, 3, 1, "", "are_concurrent"], [38, 5, 1, "", "coefficients"], [38, 3, 1, "", "contains"], [38, 3, 1, "", "intersection"], [38, 3, 1, "", "is_parallel"], [38, 3, 1, "", "is_perpendicular"], [38, 3, 1, "", "is_similar"], [38, 5, 1, "", "length"], [38, 5, 1, "", "p1"], [38, 5, 1, "", "p2"], [38, 3, 1, "", "parallel_line"], [38, 3, 1, "", "perpendicular_line"], [38, 3, 1, "", "perpendicular_segment"], [38, 5, 1, "", "points"], [38, 3, 1, "", "projection"], [38, 3, 1, "", "random_point"], [38, 5, 1, "", "slope"]], "diofant.geometry.line.Ray": [[38, 3, 1, "", "contains"], [38, 5, 1, "", "direction"], [38, 3, 1, "", "distance"], [38, 3, 1, "", "plot_interval"], [38, 5, 1, "", "source"], [38, 5, 1, "", "xdirection"], [38, 5, 1, "", "ydirection"]], "diofant.geometry.line.Segment": [[38, 3, 1, "", "contains"], [38, 3, 1, "", "distance"], [38, 5, 1, "", "length"], [38, 5, 1, "", "midpoint"], [38, 3, 1, "", "perpendicular_bisector"], [38, 3, 1, "", "plot_interval"]], "diofant.geometry.point": [[39, 2, 1, "", "Point"]], "diofant.geometry.point.Point": [[39, 5, 1, "", "ambient_dimension"], [39, 5, 1, "", "bounds"], [39, 3, 1, "", "distance"], [39, 3, 1, "", "dot"], [39, 3, 1, "", "evalf"], [39, 3, 1, "", "intersection"], [39, 3, 1, "", "is_collinear"], [39, 3, 1, "", "is_concyclic"], [39, 3, 1, "", "is_scalar_multiple"], [39, 5, 1, "", "is_zero"], [39, 5, 1, "", "length"], [39, 3, 1, "", "midpoint"], [39, 5, 1, "", "origin"], [39, 3, 1, "", "rotate"], [39, 3, 1, "", "scale"], [39, 3, 1, "", "transform"], [39, 3, 1, "", "translate"], [39, 5, 1, "", "x"], [39, 5, 1, "", "y"]], "diofant.geometry.polygon": [[40, 2, 1, "", "Polygon"], [40, 2, 1, "", "RegularPolygon"], [40, 2, 1, "", "Triangle"]], "diofant.geometry.polygon.Polygon": [[40, 5, 1, "", "angles"], [40, 3, 1, "", "arbitrary_point"], [40, 5, 1, "", "area"], [40, 5, 1, "", "centroid"], [40, 3, 1, "", "distance"], [40, 3, 1, "", "encloses_point"], [40, 3, 1, "", "intersection"], [40, 3, 1, "", "is_convex"], [40, 5, 1, "", "perimeter"], [40, 3, 1, "", "plot_interval"], [40, 5, 1, "", "sides"], [40, 5, 1, "", "vertices"]], "diofant.geometry.polygon.RegularPolygon": [[40, 5, 1, "", "angles"], [40, 5, 1, "", "apothem"], [40, 5, 1, "", "area"], [40, 5, 1, "", "args"], [40, 5, 1, "", "center"], [40, 5, 1, "", "centroid"], [40, 5, 1, "", "circumcenter"], [40, 5, 1, "", "circumcircle"], [40, 5, 1, "", "circumradius"], [40, 3, 1, "", "encloses_point"], [40, 5, 1, "", "exterior_angle"], [40, 5, 1, "", "incircle"], [40, 5, 1, "", "inradius"], [40, 5, 1, "", "interior_angle"], [40, 5, 1, "", "length"], [40, 5, 1, "", "radius"], [40, 3, 1, "", "reflect"], [40, 3, 1, "", "rotate"], [40, 5, 1, "", "rotation"], [40, 3, 1, "", "scale"], [40, 3, 1, "", "spin"], [40, 5, 1, "", "vertices"]], "diofant.geometry.polygon.Triangle": [[40, 5, 1, "", "altitudes"], [40, 3, 1, "", "bisectors"], [40, 5, 1, "", "circumcenter"], [40, 5, 1, "", "circumcircle"], [40, 5, 1, "", "circumradius"], [40, 5, 1, "", "incenter"], [40, 5, 1, "", "incircle"], [40, 5, 1, "", "inradius"], [40, 3, 1, "", "is_equilateral"], [40, 3, 1, "", "is_isosceles"], [40, 3, 1, "", "is_right"], [40, 3, 1, "", "is_scalene"], [40, 3, 1, "", "is_similar"], [40, 5, 1, "", "medial"], [40, 5, 1, "", "medians"], [40, 5, 1, "", "orthocenter"], [40, 5, 1, "", "vertices"]], "diofant.geometry.util": [[41, 1, 1, "", "are_similar"], [41, 1, 1, "", "centroid"], [41, 1, 1, "", "convex_hull"], [41, 1, 1, "", "idiff"], [41, 1, 1, "", "intersection"]], "diofant.integrals.deltafunctions": [[43, 1, 1, "", "deltaintegrate"]], "diofant.integrals.heurisch": [[43, 1, 1, "", "components"], [43, 1, 1, "", "heurisch"], [43, 1, 1, "", "heurisch_wrapper"]], "diofant.integrals.integrals": [[43, 2, 1, "", "Integral"], [43, 1, 1, "", "integrate"], [43, 1, 1, "", "line_integrate"]], "diofant.integrals.integrals.Integral": [[43, 3, 1, "", "as_sum"], [43, 3, 1, "", "doit"], [43, 5, 1, "", "free_symbols"], [43, 6, 1, "", "is_commutative"], [43, 3, 1, "", "transform"]], "diofant.integrals": [[6, 0, 0, "-", "meijerint_doc"], [43, 0, 0, "-", "quadrature"], [43, 0, 0, "-", "transforms"]], "diofant.integrals.quadrature": [[43, 1, 1, "", "gauss_chebyshev_t"], [43, 1, 1, "", "gauss_chebyshev_u"], [43, 1, 1, "", "gauss_gen_laguerre"], [43, 1, 1, "", "gauss_hermite"], [43, 1, 1, "", "gauss_jacobi"], [43, 1, 1, "", "gauss_laguerre"], [43, 1, 1, "", "gauss_legendre"]], "diofant.integrals.rationaltools": [[43, 1, 1, "", "ratint"], [43, 1, 1, "", "ratint_logpart"], [43, 1, 1, "", "ratint_ratpart"]], "diofant.integrals.transforms": [[43, 2, 1, "", "CosineTransform"], [43, 2, 1, "", "FourierTransform"], [43, 2, 1, "", "HankelTransform"], [43, 2, 1, "", "IntegralTransform"], [43, 2, 1, "", "InverseCosineTransform"], [43, 2, 1, "", "InverseFourierTransform"], [43, 2, 1, "", "InverseHankelTransform"], [43, 2, 1, "", "InverseLaplaceTransform"], [43, 2, 1, "", "InverseMellinTransform"], [43, 2, 1, "", "InverseSineTransform"], [43, 2, 1, "", "LaplaceTransform"], [43, 2, 1, "", "MellinTransform"], [43, 2, 1, "", "SineTransform"], [43, 1, 1, "", "cosine_transform"], [43, 1, 1, "", "fourier_transform"], [43, 1, 1, "", "hankel_transform"], [43, 1, 1, "", "inverse_cosine_transform"], [43, 1, 1, "", "inverse_fourier_transform"], [43, 1, 1, "", "inverse_hankel_transform"], [43, 1, 1, "", "inverse_laplace_transform"], [43, 1, 1, "", "inverse_mellin_transform"], [43, 1, 1, "", "inverse_sine_transform"], [43, 1, 1, "", "laplace_transform"], [43, 1, 1, "", "mellin_transform"], [43, 1, 1, "", "sine_transform"]], "diofant.integrals.transforms.IntegralTransform": [[43, 3, 1, "", "doit"], [43, 5, 1, "", "free_symbols"], [43, 5, 1, "", "function"], [43, 5, 1, "", "function_variable"], [43, 5, 1, "", "transform_variable"]], "diofant.integrals.trigonometry": [[43, 1, 1, "", "trigintegrate"]], "diofant.interactive": [[44, 0, 0, "-", "printing"], [44, 0, 0, "-", "session"]], "diofant.interactive.printing": [[44, 1, 1, "", "init_printing"]], "diofant.interactive.session": [[44, 2, 1, "", "AutomaticSymbols"], [44, 2, 1, "", "FloatRationalizer"], [44, 2, 1, "", "IntegerDivisionWrapper"], [44, 1, 1, "", "unicode_identifiers"]], "diofant.logic.boolalg": [[45, 2, 1, "", "And"], [45, 2, 1, "", "BooleanFalse"], [45, 2, 1, "", "BooleanTrue"], [45, 2, 1, "", "Equivalent"], [45, 2, 1, "", "ITE"], [45, 2, 1, "", "Implies"], [45, 2, 1, "", "Nand"], [45, 2, 1, "", "Nor"], [45, 2, 1, "", "Not"], [45, 2, 1, "", "Or"], [45, 2, 1, "", "Xor"], [45, 1, 1, "", "is_cnf"], [45, 1, 1, "", "is_dnf"], [45, 1, 1, "", "is_nnf"], [45, 1, 1, "", "simplify_logic"], [45, 1, 1, "", "to_cnf"], [45, 1, 1, "", "to_dnf"], [45, 1, 1, "", "to_nnf"]], "diofant.logic.inference": [[45, 1, 1, "", "satisfiable"]], "diofant.matrices": [[49, 2, 1, "", "Matrix"], [46, 0, 0, "-", "dense"], [47, 0, 0, "-", "expressions"], [48, 0, 0, "-", "immutable"], [50, 0, 0, "-", "matrices"], [51, 0, 0, "-", "sparse"]], "diofant.matrices.dense": [[46, 2, 1, "", "DenseMatrix"], [50, 1, 1, "", "GramSchmidt"], [46, 2, 1, "", "MutableDenseMatrix"], [46, 4, 1, "", "MutableMatrix"], [50, 1, 1, "", "casoratian"], [50, 1, 1, "", "diag"], [50, 1, 1, "", "eye"], [50, 1, 1, "", "hessian"], [50, 1, 1, "", "jordan_cell"], [50, 1, 1, "", "list2numpy"], [50, 1, 1, "", "matrix2numpy"], [50, 1, 1, "", "matrix_multiply_elementwise"], [50, 1, 1, "", "ones"], [50, 1, 1, "", "randMatrix"], [50, 1, 1, "", "rot_axis1"], [50, 1, 1, "", "rot_axis2"], [50, 1, 1, "", "rot_axis3"], [50, 1, 1, "", "symarray"], [50, 1, 1, "", "wronskian"], [50, 1, 1, "", "zeros"]], "diofant.matrices.dense.DenseMatrix": [[46, 3, 1, "", "__getitem__"], [46, 3, 1, "", "__mul__"], [46, 3, 1, "", "applyfunc"], [46, 3, 1, "", "as_immutable"], [46, 3, 1, "", "as_mutable"], [46, 3, 1, "", "equals"], [46, 3, 1, "", "eye"], [46, 3, 1, "", "reshape"], [46, 3, 1, "", "tolist"], [46, 3, 1, "", "zeros"]], "diofant.matrices.dense.MutableDenseMatrix": [[46, 3, 1, "", "col_op"], [46, 3, 1, "", "col_swap"], [46, 3, 1, "", "copyin_list"], [46, 3, 1, "", "copyin_matrix"], [46, 3, 1, "", "fill"], [46, 3, 1, "", "row_op"], [46, 3, 1, "", "row_swap"], [46, 3, 1, "", "simplify"], [46, 3, 1, "", "zip_row_op"]], "diofant.matrices.expressions": [[47, 2, 1, "", "FunctionMatrix"], [47, 2, 1, "", "Identity"], [47, 2, 1, "", "Inverse"], [47, 2, 1, "", "MatAdd"], [47, 2, 1, "", "MatMul"], [47, 2, 1, "", "MatPow"], [47, 2, 1, "", "MatrixExpr"], [47, 2, 1, "", "MatrixSymbol"], [47, 2, 1, "", "Trace"], [47, 2, 1, "", "Transpose"], [47, 2, 1, "", "ZeroMatrix"], [47, 0, 0, "-", "blockmatrix"]], "diofant.matrices.expressions.MatrixExpr": [[47, 5, 1, "", "T"], [47, 3, 1, "", "as_explicit"], [47, 3, 1, "", "as_mutable"], [47, 3, 1, "", "equals"]], "diofant.matrices.expressions.blockmatrix": [[47, 2, 1, "", "BlockDiagMatrix"], [47, 2, 1, "", "BlockMatrix"], [47, 1, 1, "", "block_collapse"]], "diofant.matrices.expressions.blockmatrix.BlockMatrix": [[47, 3, 1, "", "transpose"]], "diofant.matrices.immutable": [[48, 2, 1, "", "ImmutableMatrix"], [51, 2, 1, "", "ImmutableSparseMatrix"]], "diofant.matrices.immutable.ImmutableMatrix": [[48, 5, 1, "", "C"], [48, 3, 1, "", "adjoint"], [48, 3, 1, "", "as_mutable"], [48, 3, 1, "", "conjugate"], [48, 3, 1, "", "diff"], [48, 3, 1, "", "equals"], [48, 3, 1, "", "integrate"], [48, 3, 1, "", "limit"]], "diofant.matrices.immutable.ImmutableSparseMatrix": [[51, 3, 1, "", "subs"], [51, 3, 1, "", "xreplace"]], "diofant.matrices.matrices": [[50, 2, 1, "", "MatrixBase"], [50, 2, 1, "", "MatrixError"], [50, 2, 1, "", "NonSquareMatrixError"], [50, 2, 1, "", "ShapeError"], [50, 1, 1, "", "a2idx"], [50, 1, 1, "", "classof"]], "diofant.matrices.matrices.MatrixBase": [[50, 5, 1, "", "C"], [50, 5, 1, "", "D"], [50, 5, 1, "", "H"], [50, 3, 1, "", "LDLdecomposition"], [50, 3, 1, "", "LDLsolve"], [50, 3, 1, "", "LUdecomposition"], [50, 3, 1, "", "LUdecompositionFF"], [50, 3, 1, "", "LUdecomposition_Simple"], [50, 3, 1, "", "LUsolve"], [50, 3, 1, "", "QRdecomposition"], [50, 3, 1, "", "QRsolve"], [50, 5, 1, "", "T"], [50, 3, 1, "", "add"], [50, 3, 1, "", "adjoint"], [50, 3, 1, "", "adjugate"], [50, 3, 1, "", "atoms"], [50, 3, 1, "", "berkowitz"], [50, 3, 1, "", "berkowitz_charpoly"], [50, 3, 1, "", "berkowitz_det"], [50, 3, 1, "", "berkowitz_eigenvals"], [50, 3, 1, "", "berkowitz_minors"], [50, 3, 1, "", "charpoly"], [50, 3, 1, "", "cholesky"], [50, 3, 1, "", "cholesky_solve"], [50, 3, 1, "", "cofactor"], [50, 3, 1, "", "cofactorMatrix"], [50, 3, 1, "", "col_insert"], [50, 3, 1, "", "col_join"], [50, 3, 1, "", "condition_number"], [50, 3, 1, "", "conjugate"], [50, 3, 1, "", "copy"], [50, 3, 1, "", "cross"], [50, 3, 1, "", "det"], [50, 3, 1, "", "det_LU_decomposition"], [50, 3, 1, "", "det_bareiss"], [50, 3, 1, "", "diagonal_solve"], [50, 3, 1, "", "diagonalize"], [50, 3, 1, "", "diff"], [50, 3, 1, "", "dot"], [50, 3, 1, "", "dual"], [50, 3, 1, "", "eigenvals"], [50, 3, 1, "", "eigenvects"], [50, 3, 1, "", "evalf"], [50, 3, 1, "", "exp"], [50, 3, 1, "", "expand"], [50, 3, 1, "", "extract"], [50, 5, 1, "", "free_symbols"], [50, 3, 1, "", "get_diag_blocks"], [50, 3, 1, "", "has"], [50, 3, 1, "", "hstack"], [50, 3, 1, "", "integrate"], [50, 3, 1, "", "inv"], [50, 3, 1, "", "inv_mod"], [50, 3, 1, "", "inverse_ADJ"], [50, 3, 1, "", "inverse_GE"], [50, 3, 1, "", "inverse_LU"], [50, 3, 1, "", "is_anti_symmetric"], [50, 3, 1, "", "is_diagonal"], [50, 3, 1, "", "is_diagonalizable"], [50, 5, 1, "", "is_hermitian"], [50, 5, 1, "", "is_lower"], [50, 5, 1, "", "is_lower_hessenberg"], [50, 3, 1, "", "is_nilpotent"], [50, 5, 1, "", "is_square"], [50, 3, 1, "", "is_symbolic"], [50, 3, 1, "", "is_symmetric"], [50, 5, 1, "", "is_upper"], [50, 5, 1, "", "is_upper_hessenberg"], [50, 5, 1, "", "is_zero"], [50, 3, 1, "", "jacobian"], [50, 3, 1, "", "jordan_cells"], [50, 3, 1, "", "jordan_form"], [50, 3, 1, "", "key2bounds"], [50, 3, 1, "", "key2ij"], [50, 3, 1, "", "limit"], [50, 3, 1, "", "lower_triangular_solve"], [50, 3, 1, "", "minorEntry"], [50, 3, 1, "", "minorMatrix"], [50, 3, 1, "", "multiply"], [50, 3, 1, "", "multiply_elementwise"], [50, 3, 1, "", "norm"], [50, 3, 1, "", "normalized"], [50, 3, 1, "", "nullspace"], [50, 3, 1, "", "permuteBkwd"], [50, 3, 1, "", "permuteFwd"], [50, 3, 1, "", "pinv"], [50, 3, 1, "", "pinv_solve"], [50, 3, 1, "", "print_nonzero"], [50, 3, 1, "", "project"], [50, 3, 1, "", "rank"], [50, 3, 1, "", "replace"], [50, 3, 1, "", "row_insert"], [50, 3, 1, "", "row_join"], [50, 3, 1, "", "rref"], [50, 5, 1, "", "shape"], [50, 3, 1, "", "simplify"], [50, 3, 1, "", "singular_values"], [50, 3, 1, "", "solve_least_squares"], [50, 3, 1, "", "subs"], [50, 3, 1, "", "table"], [50, 3, 1, "", "trace"], [50, 3, 1, "", "transpose"], [50, 3, 1, "", "upper_triangular_solve"], [50, 3, 1, "", "values"], [50, 3, 1, "", "vec"], [50, 3, 1, "", "vech"], [50, 3, 1, "", "vstack"], [50, 3, 1, "", "xreplace"]], "diofant.matrices.sparse": [[51, 2, 1, "", "MutableSparseMatrix"], [51, 4, 1, "", "SparseMatrix"], [51, 2, 1, "", "SparseMatrixBase"]], "diofant.matrices.sparse.MutableSparseMatrix": [[51, 3, 1, "", "col_join"], [51, 3, 1, "", "col_op"], [51, 3, 1, "", "col_swap"], [51, 3, 1, "", "fill"], [51, 3, 1, "", "row_join"], [51, 3, 1, "", "row_op"], [51, 3, 1, "", "row_swap"], [51, 3, 1, "", "zip_row_op"]], "diofant.matrices.sparse.SparseMatrixBase": [[51, 5, 1, "", "CL"], [51, 3, 1, "", "LDLdecomposition"], [51, 5, 1, "", "RL"], [51, 3, 1, "", "add"], [51, 3, 1, "", "applyfunc"], [51, 3, 1, "", "as_immutable"], [51, 3, 1, "", "as_mutable"], [51, 3, 1, "", "cholesky"], [51, 3, 1, "", "col_list"], [51, 3, 1, "", "extract"], [51, 3, 1, "", "eye"], [51, 3, 1, "", "has"], [51, 5, 1, "", "is_hermitian"], [51, 3, 1, "", "is_symmetric"], [51, 3, 1, "", "liupc"], [51, 3, 1, "", "multiply"], [51, 3, 1, "", "nnz"], [51, 3, 1, "", "reshape"], [51, 3, 1, "", "row_list"], [51, 3, 1, "", "row_structure_symbolic_cholesky"], [51, 3, 1, "", "scalar_multiply"], [51, 3, 1, "", "solve"], [51, 3, 1, "", "solve_least_squares"], [51, 3, 1, "", "tolist"], [51, 3, 1, "", "zeros"]], "diofant.ntheory": [[52, 0, 0, "-", "continued_fraction"], [52, 0, 0, "-", "egyptian_fraction"], [52, 0, 0, "-", "factor_"], [52, 0, 0, "-", "generate"], [52, 0, 0, "-", "modular"], [52, 0, 0, "-", "multinomial"], [52, 0, 0, "-", "partitions_"], [52, 0, 0, "-", "primetest"], [52, 0, 0, "-", "residue_ntheory"]], "diofant.ntheory.continued_fraction": [[52, 1, 1, "", "continued_fraction_convergents"], [52, 1, 1, "", "continued_fraction_iterator"], [52, 1, 1, "", "continued_fraction_periodic"], [52, 1, 1, "", "continued_fraction_reduce"]], "diofant.ntheory.egyptian_fraction": [[52, 1, 1, "", "egyptian_fraction"]], "diofant.ntheory.factor_": [[52, 1, 1, "", "antidivisor_count"], [52, 1, 1, "", "antidivisors"], [52, 1, 1, "", "core"], [52, 1, 1, "", "divisor_count"], [52, 2, 1, "", "divisor_sigma"], [52, 1, 1, "", "divisors"], [52, 1, 1, "", "factorint"], [52, 1, 1, "", "factorrat"], [52, 1, 1, "", "multiplicity"], [52, 1, 1, "", "perfect_power"], [52, 1, 1, "", "pollard_pm1"], [52, 1, 1, "", "pollard_rho"], [52, 1, 1, "", "primefactors"], [52, 1, 1, "", "smoothness"], [52, 1, 1, "", "smoothness_p"], [52, 1, 1, "", "square_factor"], [52, 2, 1, "", "totient"], [52, 1, 1, "", "trailing"]], "diofant.ntheory.generate": [[52, 2, 1, "", "Sieve"], [52, 1, 1, "", "cycle_length"], [52, 1, 1, "", "nextprime"], [52, 1, 1, "", "prevprime"], [52, 1, 1, "", "prime"], [52, 1, 1, "", "primepi"], [52, 1, 1, "", "primerange"], [52, 1, 1, "", "primorial"], [52, 1, 1, "", "randprime"]], "diofant.ntheory.generate.Sieve": [[52, 3, 1, "", "extend"], [52, 3, 1, "", "extend_to_no"], [52, 3, 1, "", "primerange"], [52, 3, 1, "", "search"]], "diofant.ntheory.modular": [[52, 1, 1, "", "crt"], [52, 1, 1, "", "crt1"], [52, 1, 1, "", "crt2"], [52, 1, 1, "", "integer_rational_reconstruction"], [52, 1, 1, "", "solve_congruence"], [52, 1, 1, "", "symmetric_residue"]], "diofant.ntheory.multinomial": [[52, 1, 1, "", "binomial_coefficients"], [52, 1, 1, "", "binomial_coefficients_list"], [52, 1, 1, "", "multinomial_coefficients"], [52, 1, 1, "", "multinomial_coefficients_iterator"]], "diofant.ntheory.partitions_": [[52, 1, 1, "", "npartitions"]], "diofant.ntheory.primetest": [[52, 1, 1, "", "is_square"], [52, 1, 1, "", "isprime"], [52, 1, 1, "", "mr"]], "diofant.ntheory.residue_ntheory": [[52, 1, 1, "", "discrete_log"], [52, 1, 1, "", "is_nthpow_residue"], [52, 1, 1, "", "is_primitive_root"], [52, 1, 1, "", "is_quad_residue"], [52, 1, 1, "", "jacobi_symbol"], [52, 1, 1, "", "legendre_symbol"], [52, 2, 1, "", "mobius"], [52, 1, 1, "", "n_order"], [52, 1, 1, "", "nthroot_mod"], [52, 1, 1, "", "primitive_root"], [52, 1, 1, "", "quadratic_residues"], [52, 1, 1, "", "sqrt_mod"], [52, 1, 1, "", "sqrt_mod_iter"]], "diofant.parsing.mathematica": [[53, 1, 1, "", "mathematica"]], "diofant.parsing.maxima": [[53, 1, 1, "", "parse_maxima"]], "diofant.parsing.sympy_parser": [[53, 1, 1, "", "auto_number"], [53, 1, 1, "", "auto_symbol"], [53, 1, 1, "", "convert_xor"], [53, 1, 1, "", "eval_expr"], [53, 1, 1, "", "function_exponentiation"], [53, 1, 1, "", "implicit_application"], [53, 1, 1, "", "implicit_multiplication"], [53, 1, 1, "", "implicit_multiplication_application"], [53, 1, 1, "", "parse_expr"], [53, 1, 1, "", "rationalize"], [53, 1, 1, "", "split_symbols"], [53, 1, 1, "", "split_symbols_custom"], [53, 6, 1, "", "standard_transformations"], [53, 1, 1, "", "stringify_expr"]], "diofant.plotting.plot": [[54, 2, 1, "", "BaseSeries"], [54, 2, 1, "", "Line2DBaseSeries"], [54, 2, 1, "", "Line3DBaseSeries"], [54, 2, 1, "", "LineOver1DRangeSeries"], [54, 2, 1, "", "Parametric2DLineSeries"], [54, 2, 1, "", "Parametric3DLineSeries"], [54, 2, 1, "", "ParametricSurfaceSeries"], [54, 2, 1, "", "Plot"], [54, 2, 1, "", "SurfaceBaseSeries"], [54, 2, 1, "", "SurfaceOver2DRangeSeries"], [54, 1, 1, "", "plot"], [54, 1, 1, "", "plot3d"], [54, 1, 1, "", "plot3d_parametric_line"], [54, 1, 1, "", "plot3d_parametric_surface"], [54, 1, 1, "", "plot_parametric"]], "diofant.plotting.plot.LineOver1DRangeSeries": [[54, 3, 1, "", "get_segments"]], "diofant.plotting.plot.Parametric2DLineSeries": [[54, 3, 1, "", "get_segments"]], "diofant.plotting.plot.Plot": [[54, 3, 1, "", "append"], [54, 3, 1, "", "extend"]], "diofant.plotting.plot_implicit": [[54, 2, 1, "", "ImplicitSeries"], [54, 1, 1, "", "plot_implicit"]], "diofant.polys": [[55, 0, 0, "-", "constructor"], [10, 0, 0, "-", "euclidtools"], [10, 0, 0, "-", "factorization_alg_field"], [10, 0, 0, "-", "factortools"], [10, 0, 0, "-", "groebnertools"], [10, 0, 0, "-", "modulargcd"], [55, 0, 0, "-", "monomials"], [55, 0, 0, "-", "numberfields"], [55, 0, 0, "-", "orderings"], [55, 0, 0, "-", "orthopolys"], [55, 0, 0, "-", "partfrac"], [10, 0, 0, "-", "polyerrors"], [55, 0, 0, "-", "polyfuncs"], [10, 0, 0, "-", "polyoptions"], [55, 0, 0, "-", "polyroots"], [55, 0, 0, "-", "polytools"], [55, 0, 0, "-", "rationaltools"], [10, 0, 0, "-", "rootisolation"], [55, 0, 0, "-", "rootoftools"], [55, 0, 0, "-", "specialpolys"], [10, 0, 0, "-", "sqfreetools"]], "diofant.polys.constructor": [[55, 1, 1, "", "construct_domain"]], "diofant.polys.euclidtools._GCD": [[10, 3, 1, "", "_zz_heu_gcd"]], "diofant.polys.factorization_alg_field": [[10, 1, 1, "", "_alpha_to_z"], [10, 1, 1, "", "_denominator"], [10, 1, 1, "", "_diophantine"], [10, 1, 1, "", "_diophantine_univariate"], [10, 1, 1, "", "_distinct_prime_divisors"], [10, 1, 1, "", "_div"], [10, 1, 1, "", "_extended_euclidean_algorithm"], [10, 1, 1, "", "_factor"], [10, 1, 1, "", "_hensel_lift"], [10, 1, 1, "", "_leading_coeffs"], [10, 1, 1, "", "_monic_associate"], [10, 1, 1, "", "_padic_lift"], [10, 1, 1, "", "_sqf_p"], [10, 1, 1, "", "_subs_ground"], [10, 1, 1, "", "_test_evaluation_points"], [10, 1, 1, "", "_test_prime"], [10, 1, 1, "", "_z_to_alpha"], [10, 1, 1, "", "efactor"]], "diofant.polys.fields": [[10, 2, 1, "", "FracElement"], [29, 2, 1, "", "FractionField"]], "diofant.polys.fields.FracElement": [[10, 3, 1, "", "compose"], [10, 3, 1, "", "diff"]], "diofant.polys.groebnertools": [[10, 1, 1, "", "buchberger"], [10, 1, 1, "", "cp_key"], [10, 1, 1, "", "critical_pair"], [10, 1, 1, "", "f5_reduce"], [10, 1, 1, "", "f5b"], [10, 1, 1, "", "groebner"], [10, 1, 1, "", "groebner_gcd"], [10, 1, 1, "", "groebner_lcm"], [10, 1, 1, "", "is_groebner"], [10, 1, 1, "", "is_minimal"], [10, 1, 1, "", "is_rewritable_or_comparable"], [10, 1, 1, "", "lbp_cmp"], [10, 1, 1, "", "lbp_key"], [10, 1, 1, "", "lbp_mul_term"], [10, 1, 1, "", "lbp_sub"], [10, 1, 1, "", "matrix_fglm"], [10, 1, 1, "", "red_groebner"], [10, 1, 1, "", "s_poly"], [10, 1, 1, "", "sig_cmp"], [10, 1, 1, "", "sig_key"], [10, 1, 1, "", "sig_mult"], [10, 1, 1, "", "spoly"]], "diofant.polys.modulargcd": [[10, 1, 1, "", "_chinese_remainder_reconstruction"], [10, 1, 1, "", "_euclidean_algorithm"], [10, 1, 1, "", "_evaluate_ground"], [10, 1, 1, "", "_func_field_modgcd_m"], [10, 1, 1, "", "_func_field_modgcd_p"], [10, 1, 1, "", "_gf_gcdex"], [10, 1, 1, "", "_interpolate"], [10, 1, 1, "", "_minpoly_from_dense"], [10, 1, 1, "", "_modgcd_p"], [10, 1, 1, "", "_primitive_in_x0"], [10, 1, 1, "", "_rational_function_reconstruction"], [10, 1, 1, "", "_rational_reconstruction_func_coeffs"], [10, 1, 1, "", "_rational_reconstruction_int_coeffs"], [10, 1, 1, "", "_to_ANP_poly"], [10, 1, 1, "", "_to_ZZ_poly"], [10, 1, 1, "", "_trunc"], [10, 1, 1, "", "func_field_modgcd"], [10, 1, 1, "", "modgcd"], [10, 1, 1, "", "trial_division"]], "diofant.polys.monomials": [[55, 2, 1, "", "Monomial"], [55, 1, 1, "", "itermonomials"]], "diofant.polys.monomials.Monomial": [[55, 3, 1, "", "as_expr"], [55, 3, 1, "", "divides"], [55, 3, 1, "", "gcd"], [55, 3, 1, "", "lcm"]], "diofant.polys.numberfields": [[55, 1, 1, "", "field_isomorphism"], [55, 1, 1, "", "minimal_polynomial"], [10, 1, 1, "", "minpoly_groebner"], [55, 1, 1, "", "primitive_element"]], "diofant.polys.orderings": [[55, 2, 1, "", "GradedLexOrder"], [55, 2, 1, "", "LexOrder"], [55, 2, 1, "", "ReversedGradedLexOrder"]], "diofant.polys.orthopolys": [[55, 1, 1, "", "chebyshevt_poly"], [55, 1, 1, "", "chebyshevu_poly"], [55, 1, 1, "", "gegenbauer_poly"], [55, 1, 1, "", "hermite_poly"], [55, 1, 1, "", "jacobi_poly"], [55, 1, 1, "", "laguerre_poly"], [55, 1, 1, "", "legendre_poly"], [55, 1, 1, "", "spherical_bessel_fn"]], "diofant.polys.partfrac": [[55, 1, 1, "", "apart"], [55, 1, 1, "", "apart_list"], [55, 1, 1, "", "assemble_partfrac_list"]], "diofant.polys.polyerrors": [[10, 7, 1, "", "BasePolynomialError"], [10, 7, 1, "", "CoercionFailedError"], [10, 7, 1, "", "ComputationFailedError"], [10, 7, 1, "", "DomainError"], [10, 7, 1, "", "EvaluationFailedError"], [10, 7, 1, "", "ExactQuotientFailedError"], [10, 7, 1, "", "ExtraneousFactorsError"], [10, 7, 1, "", "FlagError"], [10, 7, 1, "", "GeneratorsError"], [10, 7, 1, "", "GeneratorsNeededError"], [10, 7, 1, "", "HeuristicGCDFailedError"], [10, 7, 1, "", "HomomorphismFailedError"], [10, 7, 1, "", "IsomorphismFailedError"], [10, 7, 1, "", "ModularGCDFailedError"], [10, 7, 1, "", "MultivariatePolynomialError"], [10, 7, 1, "", "NotAlgebraicError"], [10, 7, 1, "", "NotInvertibleError"], [10, 7, 1, "", "NotReversibleError"], [10, 7, 1, "", "OperationNotSupportedError"], [10, 7, 1, "", "OptionError"], [10, 7, 1, "", "PolificationFailedError"], [10, 7, 1, "", "PolynomialDivisionFailedError"], [10, 7, 1, "", "PolynomialError"], [10, 7, 1, "", "RefinementFailedError"], [10, 7, 1, "", "UnificationFailedError"], [10, 7, 1, "", "UnivariatePolynomialError"], [10, 7, 1, "", "UnluckyLeadingCoefficientError"]], "diofant.polys.polyfuncs": [[55, 1, 1, "", "horner"], [55, 1, 1, "", "interpolate"], [55, 1, 1, "", "symmetrize"], [55, 1, 1, "", "viete"]], "diofant.polys.polyoptions": [[10, 2, 1, "", "Options"], [10, 2, 1, "", "Order"]], "diofant.polys.polyoptions.Options": [[10, 3, 1, "", "clone"]], "diofant.polys.polyroots": [[55, 1, 1, "", "roots"]], "diofant.polys.polytools": [[55, 2, 1, "", "GroebnerBasis"], [55, 1, 1, "", "LC"], [55, 1, 1, "", "LM"], [55, 1, 1, "", "LT"], [55, 2, 1, "", "Poly"], [55, 2, 1, "", "PurePoly"], [55, 1, 1, "", "cancel"], [55, 1, 1, "", "cofactors"], [55, 1, 1, "", "compose"], [55, 1, 1, "", "content"], [55, 1, 1, "", "count_roots"], [55, 1, 1, "", "decompose"], [55, 1, 1, "", "degree"], [55, 1, 1, "", "discriminant"], [55, 1, 1, "", "div"], [55, 1, 1, "", "exquo"], [55, 1, 1, "", "factor"], [55, 1, 1, "", "factor_list"], [55, 1, 1, "", "gcd"], [55, 1, 1, "", "gcdex"], [55, 1, 1, "", "groebner"], [55, 1, 1, "", "half_gcdex"], [55, 1, 1, "", "invert"], [55, 1, 1, "", "lcm"], [55, 1, 1, "", "monic"], [55, 1, 1, "", "nroots"], [55, 1, 1, "", "parallel_poly_from_expr"], [55, 1, 1, "", "primitive"], [55, 1, 1, "", "quo"], [55, 1, 1, "", "real_roots"], [55, 1, 1, "", "reduced"], [55, 1, 1, "", "rem"], [55, 1, 1, "", "resultant"], [55, 1, 1, "", "sqf"], [55, 1, 1, "", "sqf_list"], [55, 1, 1, "", "sqf_norm"], [55, 1, 1, "", "sqf_part"], [55, 1, 1, "", "subresultants"], [55, 1, 1, "", "terms_gcd"], [55, 1, 1, "", "trunc"]], "diofant.polys.polytools.GroebnerBasis": [[55, 3, 1, "", "contains"], [55, 5, 1, "", "dimension"], [55, 5, 1, "", "independent_sets"], [55, 3, 1, "", "reduce"], [55, 3, 1, "", "set_order"]], "diofant.polys.polytools.Poly": [[55, 3, 1, "", "EC"], [55, 3, 1, "", "EM"], [55, 3, 1, "", "ET"], [55, 3, 1, "", "LC"], [55, 3, 1, "", "LM"], [55, 3, 1, "", "LT"], [55, 3, 1, "", "TC"], [55, 3, 1, "", "all_coeffs"], [55, 3, 1, "", "all_roots"], [55, 5, 1, "", "args"], [55, 3, 1, "", "as_dict"], [55, 3, 1, "", "as_expr"], [55, 3, 1, "", "cancel"], [55, 3, 1, "", "clear_denoms"], [55, 3, 1, "", "coeff_monomial"], [55, 3, 1, "", "coeffs"], [55, 3, 1, "", "cofactors"], [55, 3, 1, "", "compose"], [55, 3, 1, "", "content"], [55, 3, 1, "", "count_roots"], [55, 3, 1, "", "decompose"], [55, 3, 1, "", "degree"], [55, 3, 1, "", "discriminant"], [55, 3, 1, "", "dispersionset"], [55, 3, 1, "", "div"], [55, 5, 1, "", "domain"], [55, 3, 1, "", "eject"], [55, 3, 1, "", "eval"], [55, 3, 1, "", "exclude"], [55, 3, 1, "", "exquo"], [55, 3, 1, "", "exquo_ground"], [55, 3, 1, "", "factor_list"], [55, 5, 1, "", "free_symbols"], [55, 5, 1, "", "free_symbols_in_domain"], [55, 3, 1, "", "from_dict"], [55, 3, 1, "", "from_expr"], [55, 3, 1, "", "from_list"], [55, 3, 1, "", "from_poly"], [55, 3, 1, "", "gcd"], [55, 3, 1, "", "gcdex"], [55, 5, 1, "", "gen"], [55, 3, 1, "", "get_modulus"], [55, 3, 1, "", "half_gcdex"], [55, 3, 1, "", "has_only_gens"], [55, 3, 1, "", "inject"], [55, 3, 1, "", "integrate"], [55, 3, 1, "", "invert"], [55, 5, 1, "", "is_cyclotomic"], [55, 5, 1, "", "is_ground"], [55, 5, 1, "", "is_homogeneous"], [55, 5, 1, "", "is_irreducible"], [55, 5, 1, "", "is_linear"], [55, 5, 1, "", "is_multivariate"], [55, 5, 1, "", "is_one"], [55, 5, 1, "", "is_quadratic"], [55, 5, 1, "", "is_squarefree"], [55, 5, 1, "", "is_term"], [55, 5, 1, "", "is_univariate"], [55, 5, 1, "", "is_zero"], [55, 3, 1, "", "lcm"], [55, 3, 1, "", "length"], [55, 3, 1, "", "monic"], [55, 3, 1, "", "monoms"], [55, 3, 1, "", "new"], [55, 3, 1, "", "nroots"], [55, 3, 1, "", "per"], [55, 3, 1, "", "primitive"], [55, 3, 1, "", "quo"], [55, 3, 1, "", "quo_ground"], [55, 3, 1, "", "rat_clear_denoms"], [55, 3, 1, "", "real_roots"], [55, 3, 1, "", "rem"], [55, 3, 1, "", "reorder"], [55, 3, 1, "", "replace"], [55, 3, 1, "", "resultant"], [55, 3, 1, "", "retract"], [55, 3, 1, "", "root"], [55, 3, 1, "", "set_domain"], [55, 3, 1, "", "set_modulus"], [55, 3, 1, "", "shift"], [55, 3, 1, "", "slice"], [55, 3, 1, "", "sqf_list"], [55, 3, 1, "", "sqf_norm"], [55, 3, 1, "", "sqf_part"], [55, 3, 1, "", "subresultants"], [55, 3, 1, "", "terms"], [55, 3, 1, "", "terms_gcd"], [55, 3, 1, "", "termwise"], [55, 3, 1, "", "to_exact"], [55, 3, 1, "", "to_field"], [55, 3, 1, "", "to_ring"], [55, 3, 1, "", "total_degree"], [55, 3, 1, "", "trunc"], [55, 3, 1, "", "unify"]], "diofant.polys.polytools.PurePoly": [[55, 5, 1, "", "free_symbols"]], "diofant.polys.rationaltools": [[55, 1, 1, "", "together"]], "diofant.polys.rings": [[10, 2, 1, "", "PolyElement"], [29, 2, 1, "", "PolynomialRing"], [10, 1, 1, "", "ring"]], "diofant.polys.rings.PolyElement": [[10, 3, 1, "", "__add__"], [10, 3, 1, "", "__eq__"], [10, 3, 1, "", "__getitem__"], [10, 3, 1, "", "__mul__"], [10, 3, 1, "", "__pow__"], [10, 3, 1, "", "__rmul__"], [10, 3, 1, "", "__rsub__"], [10, 3, 1, "", "__sub__"], [10, 4, 1, "", "__weakref__"], [10, 3, 1, "", "cancel"], [10, 3, 1, "", "compose"], [10, 3, 1, "", "content"], [10, 3, 1, "", "copy"], [10, 3, 1, "", "degree"], [10, 3, 1, "", "diff"], [10, 3, 1, "", "discriminant"], [10, 3, 1, "", "div"], [10, 3, 1, "", "gcdex"], [10, 3, 1, "", "integrate"], [10, 3, 1, "", "leading_expv"], [10, 3, 1, "", "leading_term"], [10, 3, 1, "", "monic"], [10, 3, 1, "", "prem"], [10, 3, 1, "", "primitive"], [10, 3, 1, "", "resultant"], [10, 3, 1, "", "subresultants"], [10, 3, 1, "", "tail_degree"], [10, 3, 1, "", "total_degree"]], "diofant.polys.rings.PolynomialRing": [[29, 3, 1, "", "drop"], [29, 3, 1, "", "eject"], [29, 5, 1, "", "field"], [29, 3, 1, "", "gcdex"], [29, 3, 1, "", "half_gcdex"], [29, 3, 1, "", "index"]], "diofant.polys.rootisolation": [[10, 2, 1, "", "ComplexInterval"], [10, 2, 1, "", "RealInterval"]], "diofant.polys.rootisolation.ComplexInterval": [[10, 3, 1, "", "as_tuple"], [10, 5, 1, "", "ax"], [10, 5, 1, "", "ay"], [10, 5, 1, "", "bx"], [10, 5, 1, "", "by"], [10, 5, 1, "", "center"], [10, 3, 1, "", "conjugate"], [10, 3, 1, "", "is_disjoint"], [10, 3, 1, "", "refine"]], "diofant.polys.rootisolation.RealInterval": [[10, 5, 1, "", "a"], [10, 3, 1, "", "as_tuple"], [10, 5, 1, "", "b"], [10, 5, 1, "", "center"], [10, 3, 1, "", "is_disjoint"], [10, 3, 1, "", "refine"]], "diofant.polys.rootoftools": [[55, 2, 1, "", "RootOf"], [55, 2, 1, "", "RootSum"]], "diofant.polys.rootoftools.RootOf": [[55, 3, 1, "", "all_roots"], [55, 3, 1, "", "eval_rational"], [55, 5, 1, "", "interval"], [55, 3, 1, "", "real_roots"], [55, 3, 1, "", "refine"]], "diofant.polys.rootoftools.RootSum": [[55, 3, 1, "", "new"]], "diofant.polys.specialpolys": [[55, 1, 1, "", "cyclotomic_poly"], [55, 1, 1, "", "interpolating_poly"], [55, 1, 1, "", "random_poly"], [55, 1, 1, "", "swinnerton_dyer_poly"], [55, 1, 1, "", "symmetric_poly"]], "diofant.polys.univar": [[10, 2, 1, "", "UnivarPolyElement"], [29, 2, 1, "", "UnivarPolynomialRing"]], "diofant.polys.univar.UnivarPolyElement": [[10, 3, 1, "", "decompose"], [10, 3, 1, "", "half_gcdex"], [10, 3, 1, "", "sturm"]], "diofant.polys.univar.UnivarPolynomialRing": [[29, 3, 1, "", "dispersionset"]], "diofant.printing": [[56, 0, 0, "-", "ccode"], [56, 0, 0, "-", "codeprinter"], [56, 0, 0, "-", "conventions"], [56, 0, 0, "-", "fcode"], [56, 0, 0, "-", "lambdarepr"], [56, 0, 0, "-", "latex"], [56, 0, 0, "-", "mathematica"], [56, 0, 0, "-", "mathml"], [56, 0, 0, "-", "precedence"], [56, 0, 0, "-", "printer"], [56, 0, 0, "-", "python"], [56, 0, 0, "-", "repr"], [56, 0, 0, "-", "str"]], "diofant.printing.ccode": [[56, 2, 1, "", "CCodePrinter"], [56, 1, 1, "", "ccode"]], "diofant.printing.ccode.CCodePrinter": [[56, 3, 1, "", "indent_code"], [56, 4, 1, "", "printmethod"]], "diofant.printing.codeprinter": [[56, 7, 1, "", "AssignmentError"], [56, 2, 1, "", "CodePrinter"]], "diofant.printing.codeprinter.CodePrinter": [[56, 4, 1, "", "printmethod"]], "diofant.printing.conventions": [[56, 1, 1, "", "split_super_sub"]], "diofant.printing.dot": [[56, 1, 1, "", "dotprint"]], "diofant.printing.fcode": [[56, 2, 1, "", "FCodePrinter"], [56, 1, 1, "", "fcode"]], "diofant.printing.fcode.FCodePrinter": [[56, 3, 1, "", "indent_code"], [56, 4, 1, "", "printmethod"]], "diofant.printing.lambdarepr": [[56, 2, 1, "", "LambdaPrinter"], [56, 1, 1, "", "lambdarepr"]], "diofant.printing.lambdarepr.LambdaPrinter": [[56, 4, 1, "", "printmethod"]], "diofant.printing.latex": [[56, 2, 1, "", "LatexPrinter"], [56, 6, 1, "", "accepted_latex_functions"], [56, 1, 1, "", "latex"]], "diofant.printing.latex.LatexPrinter": [[56, 4, 1, "", "printmethod"]], "diofant.printing.mathematica": [[56, 2, 1, "", "MCodePrinter"], [56, 1, 1, "", "mathematica_code"]], "diofant.printing.mathematica.MCodePrinter": [[56, 3, 1, "", "doprint"], [56, 4, 1, "", "printmethod"]], "diofant.printing.mathml": [[56, 2, 1, "", "MathMLPrinter"], [56, 1, 1, "", "mathml"]], "diofant.printing.mathml.MathMLPrinter": [[56, 3, 1, "", "doprint"], [56, 3, 1, "", "mathml_tag"], [56, 4, 1, "", "printmethod"]], "diofant.printing.pretty": [[56, 0, 0, "-", "pretty"], [56, 0, 0, "-", "pretty_symbology"], [56, 0, 0, "-", "stringpict"]], "diofant.printing.pretty.pretty": [[56, 2, 1, "", "PrettyPrinter"], [56, 1, 1, "", "pprint"], [56, 1, 1, "", "pretty"], [56, 1, 1, "", "pretty_print"]], "diofant.printing.pretty.pretty_symbology": [[56, 1, 1, "", "G"], [56, 1, 1, "", "U"], [56, 1, 1, "", "annotated"], [56, 1, 1, "", "g"], [56, 6, 1, "", "greek_letters"], [56, 1, 1, "", "hobj"], [56, 1, 1, "", "pretty_atom"], [56, 1, 1, "", "pretty_symbol"], [56, 1, 1, "", "pretty_use_unicode"], [56, 1, 1, "", "vobj"], [56, 1, 1, "", "xobj"], [56, 1, 1, "", "xsym"]], "diofant.printing.pretty.stringpict": [[56, 2, 1, "", "prettyForm"], [56, 2, 1, "", "stringPict"]], "diofant.printing.pretty.stringpict.stringPict": [[56, 3, 1, "", "above"], [56, 3, 1, "", "below"], [56, 3, 1, "", "height"], [56, 3, 1, "", "left"], [56, 3, 1, "", "next"], [56, 3, 1, "", "parens"], [56, 3, 1, "", "render"], [56, 3, 1, "", "right"], [56, 3, 1, "", "stack"], [56, 3, 1, "", "terminal_width"], [56, 3, 1, "", "width"]], "diofant.printing.printer": [[56, 2, 1, "", "Printer"]], "diofant.printing.printer.Printer": [[56, 3, 1, "", "_print"], [56, 3, 1, "", "doprint"], [56, 4, 1, "", "printmethod"], [56, 3, 1, "", "set_global_settings"]], "diofant.printing.repr": [[56, 2, 1, "", "ReprPrinter"], [56, 1, 1, "", "srepr"]], "diofant.printing.repr.ReprPrinter": [[56, 3, 1, "", "emptyPrinter"], [56, 4, 1, "", "printmethod"], [56, 3, 1, "", "reprify"]], "diofant.printing.str": [[56, 2, 1, "", "StrPrinter"], [56, 1, 1, "", "sstr"], [56, 1, 1, "", "sstrrepr"]], "diofant.printing.str.StrPrinter": [[56, 4, 1, "", "printmethod"]], "diofant.sets": [[57, 0, 0, "-", "fancysets"], [57, 0, 0, "-", "sets"]], "diofant.sets.fancysets": [[57, 2, 1, "", "ExtendedReals"], [57, 2, 1, "", "ImageSet"], [57, 2, 1, "", "Integers"], [57, 2, 1, "", "Naturals"], [57, 2, 1, "", "Naturals0"], [57, 2, 1, "", "Range"], [57, 2, 1, "", "Rationals"], [57, 2, 1, "", "Reals"]], "diofant.sets.sets": [[57, 2, 1, "", "Complement"], [57, 2, 1, "", "EmptySet"], [57, 2, 1, "", "FiniteSet"], [57, 2, 1, "", "Intersection"], [57, 2, 1, "", "Interval"], [57, 2, 1, "", "ProductSet"], [57, 2, 1, "", "Set"], [57, 2, 1, "", "Union"], [57, 2, 1, "", "UniversalSet"], [57, 1, 1, "", "imageset"]], "diofant.sets.sets.Complement": [[57, 3, 1, "", "reduce"]], "diofant.sets.sets.FiniteSet": [[57, 3, 1, "", "as_relational"]], "diofant.sets.sets.Intersection": [[57, 3, 1, "", "as_relational"], [57, 3, 1, "", "reduce"]], "diofant.sets.sets.Interval": [[57, 3, 1, "", "Lopen"], [57, 3, 1, "", "Ropen"], [57, 3, 1, "", "as_relational"], [57, 5, 1, "", "end"], [57, 5, 1, "", "inf"], [57, 5, 1, "", "is_left_unbounded"], [57, 5, 1, "", "is_right_unbounded"], [57, 5, 1, "", "left"], [57, 5, 1, "", "left_open"], [57, 3, 1, "", "open"], [57, 5, 1, "", "right"], [57, 5, 1, "", "right_open"], [57, 5, 1, "", "start"], [57, 5, 1, "", "sup"]], "diofant.sets.sets.Set": [[57, 5, 1, "", "boundary"], [57, 5, 1, "", "closure"], [57, 3, 1, "", "complement"], [57, 3, 1, "", "contains"], [57, 5, 1, "", "inf"], [57, 5, 1, "", "interior"], [57, 3, 1, "", "intersection"], [57, 5, 1, "", "is_closed"], [57, 3, 1, "", "is_disjoint"], [57, 5, 1, "", "is_open"], [57, 3, 1, "", "is_proper_subset"], [57, 3, 1, "", "is_proper_superset"], [57, 3, 1, "", "is_subset"], [57, 3, 1, "", "is_superset"], [57, 3, 1, "", "isdisjoint"], [57, 3, 1, "", "issubset"], [57, 3, 1, "", "issuperset"], [57, 5, 1, "", "measure"], [57, 3, 1, "", "powerset"], [57, 5, 1, "", "sup"], [57, 3, 1, "", "symmetric_difference"], [57, 3, 1, "", "union"]], "diofant.sets.sets.Union": [[57, 3, 1, "", "as_relational"], [57, 3, 1, "", "reduce"]], "diofant.simplify": [[58, 0, 0, "-", "combsimp"], [58, 0, 0, "-", "cse_main"], [58, 0, 0, "-", "epathtools"], [58, 0, 0, "-", "fu"], [58, 0, 0, "-", "hyperexpand"], [8, 0, 0, "-", "hyperexpand_doc"], [58, 0, 0, "-", "powsimp"], [58, 0, 0, "-", "radsimp"], [58, 0, 0, "-", "ratsimp"], [58, 0, 0, "-", "sqrtdenest"], [58, 0, 0, "-", "traversaltools"], [58, 0, 0, "-", "trigsimp"]], "diofant.simplify.combsimp": [[58, 1, 1, "", "combsimp"]], "diofant.simplify.cse_main": [[58, 1, 1, "", "cse"], [58, 1, 1, "", "opt_cse"], [58, 1, 1, "", "tree_cse"]], "diofant.simplify.epathtools": [[58, 2, 1, "", "EPath"], [58, 1, 1, "", "epath"]], "diofant.simplify.epathtools.EPath": [[58, 3, 1, "", "apply"], [58, 3, 1, "", "select"]], "diofant.simplify.fu": [[58, 1, 1, "", "fu"]], "diofant.simplify.hyperexpand": [[8, 1, 1, "", "add_formulae"], [58, 1, 1, "", "hyperexpand"]], "diofant.simplify.powsimp": [[58, 1, 1, "", "powdenest"], [58, 1, 1, "", "powsimp"]], "diofant.simplify.radsimp": [[58, 1, 1, "", "collect"], [58, 1, 1, "", "collect_const"], [58, 1, 1, "", "collect_sqrt"], [58, 1, 1, "", "fraction"], [58, 1, 1, "", "rad_rationalize"], [58, 1, 1, "", "radsimp"], [58, 1, 1, "", "rcollect"]], "diofant.simplify.ratsimp": [[58, 1, 1, "", "ratsimp"]], "diofant.simplify.simplify": [[58, 1, 1, "", "besselsimp"], [58, 1, 1, "", "hypersimilar"], [58, 1, 1, "", "hypersimp"], [58, 1, 1, "", "logcombine"], [58, 1, 1, "", "nsimplify"], [58, 1, 1, "", "nthroot"], [58, 1, 1, "", "posify"], [58, 1, 1, "", "separatevars"], [58, 1, 1, "", "simplify"]], "diofant.simplify.sqrtdenest": [[58, 1, 1, "", "sqrtdenest"], [58, 1, 1, "", "unrad"]], "diofant.simplify.traversaltools": [[58, 1, 1, "", "use"]], "diofant.simplify.trigsimp": [[58, 1, 1, "", "futrig"], [58, 1, 1, "", "trigsimp"]], "diofant.solvers": [[66, 0, 0, "-", "deutils"], [59, 0, 0, "-", "diophantine"], [61, 0, 0, "-", "inequalities"], [62, 0, 0, "-", "ode"], [63, 0, 0, "-", "pde"], [65, 0, 0, "-", "polysys"], [64, 0, 0, "-", "recurr"], [65, 0, 0, "-", "solvers"], [66, 0, 0, "-", "utils"]], "diofant.solvers.deutils": [[66, 1, 1, "", "ode_order"]], "diofant.solvers.diophantine": [[59, 1, 1, "", "PQa"], [59, 1, 1, "", "base_solution_linear"], [59, 1, 1, "", "classify_diop"], [59, 1, 1, "", "cornacchia"], [59, 1, 1, "", "descent"], [59, 1, 1, "", "diop_DN"], [59, 1, 1, "", "diop_bf_DN"], [59, 1, 1, "", "diop_general_pythagorean"], [59, 1, 1, "", "diop_general_sum_of_even_powers"], [59, 1, 1, "", "diop_general_sum_of_squares"], [59, 1, 1, "", "diop_linear"], [59, 1, 1, "", "diop_quadratic"], [59, 1, 1, "", "diop_solve"], [59, 1, 1, "", "diop_ternary_quadratic"], [59, 1, 1, "", "diop_ternary_quadratic_normal"], [59, 1, 1, "", "diophantine"], [59, 1, 1, "", "divisible"], [59, 1, 1, "", "equivalent"], [59, 1, 1, "", "find_DN"], [59, 1, 1, "", "gaussian_reduce"], [59, 1, 1, "", "holzer"], [59, 1, 1, "", "ldescent"], [59, 1, 1, "", "merge_solution"], [59, 1, 1, "", "parametrize_ternary_quadratic"], [59, 1, 1, "", "partition"], [59, 1, 1, "", "power_representation"], [59, 1, 1, "", "prime_as_sum_of_two_squares"], [59, 1, 1, "", "reconstruct"], [59, 1, 1, "", "sqf_normal"], [59, 1, 1, "", "square_factor"], [59, 1, 1, "", "sum_of_four_squares"], [59, 1, 1, "", "sum_of_powers"], [59, 1, 1, "", "sum_of_squares"], [59, 1, 1, "", "sum_of_three_squares"], [59, 1, 1, "", "transformation_to_DN"], [59, 1, 1, "", "transformation_to_normal"]], "diofant.solvers.inequalities": [[61, 1, 1, "", "reduce_inequalities"]], "diofant.solvers.ode": [[62, 1, 1, "", "_handle_Integral"], [62, 1, 1, "", "_linear_2eq_order1_type3"], [62, 1, 1, "", "_linear_2eq_order1_type4"], [62, 1, 1, "", "_linear_2eq_order1_type5"], [62, 1, 1, "", "_linear_2eq_order1_type6"], [62, 1, 1, "", "_linear_2eq_order1_type7"], [62, 1, 1, "", "_linear_2eq_order2_type1"], [62, 1, 1, "", "_linear_2eq_order2_type11"], [62, 1, 1, "", "_linear_2eq_order2_type2"], [62, 1, 1, "", "_linear_2eq_order2_type3"], [62, 1, 1, "", "_linear_2eq_order2_type5"], [62, 1, 1, "", "_linear_2eq_order2_type6"], [62, 1, 1, "", "_linear_2eq_order2_type7"], [62, 1, 1, "", "_linear_2eq_order2_type8"], [62, 1, 1, "", "_linear_2eq_order2_type9"], [62, 1, 1, "", "_linear_3eq_order1_type4"], [62, 1, 1, "", "_nonlinear_2eq_order1_type1"], [62, 1, 1, "", "_nonlinear_2eq_order1_type2"], [62, 1, 1, "", "_nonlinear_2eq_order1_type3"], [62, 1, 1, "", "_nonlinear_2eq_order1_type4"], [62, 1, 1, "", "_nonlinear_2eq_order1_type5"], [62, 1, 1, "", "_nonlinear_3eq_order1_type1"], [62, 1, 1, "", "_nonlinear_3eq_order1_type2"], [62, 1, 1, "", "_undetermined_coefficients_match"], [62, 6, 1, "", "allhints"], [62, 1, 1, "", "checkinfsol"], [62, 1, 1, "", "checkodesol"], [62, 1, 1, "", "classify_ode"], [62, 1, 1, "", "constant_renumber"], [62, 1, 1, "", "constantsimp"], [62, 1, 1, "", "dsolve"], [62, 1, 1, "", "homogeneous_order"], [62, 1, 1, "", "infinitesimals"], [62, 1, 1, "", "lie_heuristic_abaco1_product"], [62, 1, 1, "", "lie_heuristic_abaco1_simple"], [62, 1, 1, "", "lie_heuristic_abaco2_similar"], [62, 1, 1, "", "lie_heuristic_abaco2_unique_unknown"], [62, 1, 1, "", "lie_heuristic_bivariate"], [62, 1, 1, "", "lie_heuristic_chi"], [62, 1, 1, "", "lie_heuristic_function_sum"], [62, 1, 1, "", "lie_heuristic_linear"], [62, 1, 1, "", "ode_1st_exact"], [62, 1, 1, "", "ode_1st_homogeneous_coeff_best"], [62, 1, 1, "", "ode_1st_homogeneous_coeff_subs_dep_div_indep"], [62, 1, 1, "", "ode_1st_homogeneous_coeff_subs_indep_div_dep"], [62, 1, 1, "", "ode_1st_linear"], [62, 1, 1, "", "ode_1st_power_series"], [62, 1, 1, "", "ode_2nd_power_series_ordinary"], [62, 1, 1, "", "ode_2nd_power_series_regular"], [62, 1, 1, "", "ode_Bernoulli"], [62, 1, 1, "", "ode_Liouville"], [62, 1, 1, "", "ode_Riccati_special_minus2"], [62, 1, 1, "", "ode_almost_linear"], [62, 1, 1, "", "ode_lie_group"], [62, 1, 1, "", "ode_linear_coefficients"], [62, 1, 1, "", "ode_nth_linear_constant_coeff_homogeneous"], [62, 1, 1, "", "ode_nth_linear_constant_coeff_undetermined_coefficients"], [62, 1, 1, "", "ode_nth_linear_constant_coeff_variation_of_parameters"], [62, 1, 1, "", "ode_separable"], [62, 1, 1, "", "ode_separable_reduced"], [62, 1, 1, "", "ode_sol_simplicity"], [62, 1, 1, "", "odesimp"], [62, 1, 1, "", "sysode_linear_neq_order1"]], "diofant.solvers.pde": [[63, 1, 1, "", "checkpdesol"], [63, 1, 1, "", "classify_pde"], [63, 1, 1, "", "pde_1st_linear_constant_coeff"], [63, 1, 1, "", "pde_1st_linear_constant_coeff_homogeneous"], [63, 1, 1, "", "pde_1st_linear_variable_coeff"], [63, 1, 1, "", "pde_separate"], [63, 1, 1, "", "pde_separate_add"], [63, 1, 1, "", "pde_separate_mul"], [63, 1, 1, "", "pdsolve"]], "diofant.solvers.polysys": [[65, 1, 1, "", "solve_linear_system"], [65, 1, 1, "", "solve_poly_system"], [65, 1, 1, "", "solve_surd_system"]], "diofant.solvers.recurr": [[64, 1, 1, "", "rsolve"], [64, 1, 1, "", "rsolve_hyper"], [64, 1, 1, "", "rsolve_poly"], [64, 1, 1, "", "rsolve_ratio"]], "diofant.solvers.solvers": [[65, 1, 1, "", "minsolve_linear_system"], [65, 1, 1, "", "solve"], [65, 1, 1, "", "solve_linear"]], "diofant.solvers.utils": [[66, 1, 1, "", "checksol"]], "diofant.stats": [[67, 1, 1, "", "Arcsin"], [67, 1, 1, "", "Benini"], [67, 1, 1, "", "Bernoulli"], [67, 1, 1, "", "Beta"], [67, 1, 1, "", "BetaPrime"], [67, 1, 1, "", "Binomial"], [67, 1, 1, "", "Cauchy"], [67, 1, 1, "", "Chi"], [67, 1, 1, "", "ChiNoncentral"], [67, 1, 1, "", "ChiSquared"], [67, 1, 1, "", "Coin"], [67, 1, 1, "", "ContinuousRV"], [67, 1, 1, "", "Dagum"], [67, 1, 1, "", "Die"], [67, 1, 1, "", "DiscreteUniform"], [67, 1, 1, "", "E"], [67, 1, 1, "", "Erlang"], [67, 1, 1, "", "Exponential"], [67, 1, 1, "", "FDistribution"], [67, 1, 1, "", "FiniteRV"], [67, 1, 1, "", "FisherZ"], [67, 1, 1, "", "Frechet"], [67, 1, 1, "", "Gamma"], [67, 1, 1, "", "GammaInverse"], [67, 1, 1, "", "Geometric"], [67, 1, 1, "", "Hypergeometric"], [67, 1, 1, "", "Kumaraswamy"], [67, 1, 1, "", "Laplace"], [67, 1, 1, "", "LogNormal"], [67, 1, 1, "", "Logistic"], [67, 1, 1, "", "Maxwell"], [67, 1, 1, "", "Nakagami"], [67, 1, 1, "", "Normal"], [67, 1, 1, "", "P"], [67, 1, 1, "", "Pareto"], [67, 1, 1, "", "Poisson"], [67, 1, 1, "", "QuadraticU"], [67, 1, 1, "", "RaisedCosine"], [67, 1, 1, "", "Rayleigh"], [67, 1, 1, "", "StudentT"], [67, 1, 1, "", "Triangular"], [67, 1, 1, "", "Uniform"], [67, 1, 1, "", "UniformSum"], [67, 1, 1, "", "VonMises"], [67, 1, 1, "", "Weibull"], [67, 1, 1, "", "WignerSemicircle"], [67, 0, 0, "-", "crv"], [67, 0, 0, "-", "crv_types"], [67, 1, 1, "", "density"], [67, 0, 0, "-", "frv"], [67, 0, 0, "-", "frv_types"], [67, 1, 1, "", "given"], [67, 0, 0, "-", "rv"], [67, 1, 1, "", "sample"], [67, 1, 1, "", "sample_iter"], [67, 1, 1, "", "std"], [67, 1, 1, "", "variance"], [67, 1, 1, "", "where"]], "diofant.stats.crv": [[67, 2, 1, "", "ContinuousDomain"], [67, 2, 1, "", "ContinuousPSpace"]], "diofant.stats.crv_types": [[67, 2, 1, "", "NormalPSpace"]], "diofant.stats.crv_types.diofant.stats": [[67, 1, 1, "", "Die"], [67, 1, 1, "", "Normal"]], "diofant.stats.frv": [[67, 2, 1, "", "FiniteDomain"], [67, 2, 1, "", "FinitePSpace"]], "diofant.stats.frv_types": [[67, 2, 1, "", "DiePSpace"]], "diofant.stats.rv": [[67, 2, 1, "", "ConditionalDomain"], [67, 2, 1, "", "PSpace"], [67, 2, 1, "", "ProductDomain"], [67, 2, 1, "", "ProductPSpace"], [67, 2, 1, "", "RandomDomain"], [67, 2, 1, "", "RandomSymbol"], [67, 2, 1, "", "SingleDomain"], [67, 2, 1, "", "SinglePSpace"], [67, 1, 1, "", "dependent"], [67, 1, 1, "", "independent"], [67, 1, 1, "", "pspace"], [67, 1, 1, "", "random_symbols"], [67, 1, 1, "", "rs_swap"], [67, 1, 1, "", "sampling_E"], [67, 1, 1, "", "sampling_P"], [67, 1, 1, "", "sampling_density"]], "diofant.tensor": [[68, 0, 0, "-", "array"], [70, 0, 0, "-", "index_methods"], [71, 0, 0, "-", "indexed"], [72, 0, 0, "-", "tensor"]], "diofant.tensor.array": [[68, 2, 1, "", "Array"], [68, 2, 1, "", "ImmutableDenseNDimArray"], [68, 2, 1, "", "ImmutableSparseNDimArray"], [68, 2, 1, "", "MutableDenseNDimArray"], [68, 2, 1, "", "MutableSparseNDimArray"], [68, 1, 1, "", "derive_by_array"], [68, 1, 1, "", "permutedims"], [68, 1, 1, "", "tensorcontraction"], [68, 1, 1, "", "tensorproduct"]], "diofant.tensor.index_methods": [[70, 7, 1, "", "IndexConformanceExceptionError"], [70, 1, 1, "", "get_contraction_structure"], [70, 1, 1, "", "get_indices"]], "diofant.tensor.indexed": [[71, 2, 1, "", "Idx"], [71, 7, 1, "", "IndexExceptionError"], [71, 2, 1, "", "Indexed"], [71, 2, 1, "", "IndexedBase"]], "diofant.tensor.indexed.Idx": [[71, 5, 1, "", "label"], [71, 5, 1, "", "lower"], [71, 5, 1, "", "upper"]], "diofant.tensor.indexed.Indexed": [[71, 5, 1, "", "base"], [71, 5, 1, "", "indices"], [71, 5, 1, "", "ranges"], [71, 5, 1, "", "rank"], [71, 5, 1, "", "shape"]], "diofant.tensor.indexed.IndexedBase": [[71, 5, 1, "", "args"], [71, 5, 1, "", "label"], [71, 5, 1, "", "shape"]], "diofant.tensor.tensor": [[72, 2, 1, "", "TensAdd"], [72, 2, 1, "", "TensExpr"], [72, 2, 1, "", "TensMul"], [72, 2, 1, "", "TensorHead"], [72, 2, 1, "", "TensorIndex"], [72, 2, 1, "", "TensorIndexType"], [72, 2, 1, "", "TensorSymmetry"], [72, 2, 1, "", "TensorType"], [72, 2, 1, "", "_TensorManager"], [72, 1, 1, "", "canon_bp"], [72, 1, 1, "", "riemann_cyclic"], [72, 1, 1, "", "riemann_cyclic_replace"], [72, 1, 1, "", "tensor_indices"], [72, 1, 1, "", "tensor_mul"], [72, 1, 1, "", "tensorsymmetry"]], "diofant.tensor.tensor.TensAdd": [[72, 3, 1, "", "canon_bp"], [72, 3, 1, "", "contract_metric"], [72, 3, 1, "", "from_TIDS_list"], [72, 3, 1, "", "fun_eval"], [72, 3, 1, "", "substitute_indices"]], "diofant.tensor.tensor.TensExpr": [[72, 3, 1, "", "get_matrix"]], "diofant.tensor.tensor.TensMul": [[72, 3, 1, "", "canon_bp"], [72, 3, 1, "", "contract_metric"], [72, 3, 1, "", "fun_eval"], [72, 3, 1, "", "get_indices"], [72, 3, 1, "", "perm2tensor"], [72, 3, 1, "", "sorted_components"], [72, 3, 1, "", "split"]], "diofant.tensor.tensor.TensorHead": [[72, 3, 1, "", "commutes_with"]], "diofant.tensor.tensor._TensorManager": [[72, 3, 1, "", "clear"], [72, 3, 1, "", "comm_i2symbol"], [72, 3, 1, "", "comm_symbols2i"], [72, 3, 1, "", "get_comm"], [72, 3, 1, "", "set_comm"], [72, 3, 1, "", "set_comms"]], "diofant.utilities": [[73, 0, 0, "-", "autowrap"], [74, 0, 0, "-", "codegen"], [75, 0, 0, "-", "decorator"], [76, 0, 0, "-", "enumerative"], [78, 0, 0, "-", "iterables"], [79, 0, 0, "-", "lambdify"], [80, 0, 0, "-", "memoization"], [81, 0, 0, "-", "misc"], [82, 0, 0, "-", "randtest"]], "diofant.utilities.autowrap": [[73, 7, 1, "", "CodeWrapError"], [73, 2, 1, "", "CodeWrapper"], [73, 2, 1, "", "CythonCodeWrapper"], [73, 2, 1, "", "DummyWrapper"], [73, 2, 1, "", "F2PyCodeWrapper"], [73, 2, 1, "", "UfuncifyCodeWrapper"], [73, 1, 1, "", "autowrap"], [73, 1, 1, "", "binary_function"], [73, 1, 1, "", "ufuncify"]], "diofant.utilities.autowrap.CythonCodeWrapper": [[73, 3, 1, "", "dump_pyx"]], "diofant.utilities.autowrap.UfuncifyCodeWrapper": [[73, 3, 1, "", "dump_c"]], "diofant.utilities.codegen": [[74, 2, 1, "", "Argument"], [74, 2, 1, "", "CCodeGen"], [74, 2, 1, "", "CodeGen"], [74, 2, 1, "", "DataType"], [74, 2, 1, "", "FCodeGen"], [74, 2, 1, "", "InputArgument"], [74, 2, 1, "", "OctaveCodeGen"], [74, 2, 1, "", "OutputArgument"], [74, 2, 1, "", "Result"], [74, 2, 1, "", "Routine"], [74, 1, 1, "", "codegen"], [74, 1, 1, "", "get_default_datatype"], [74, 1, 1, "", "make_routine"]], "diofant.utilities.codegen.CCodeGen": [[74, 3, 1, "", "dump_c"], [74, 3, 1, "", "dump_h"], [74, 3, 1, "", "get_prototype"]], "diofant.utilities.codegen.CodeGen": [[74, 3, 1, "", "dump_code"], [74, 3, 1, "", "routine"], [74, 3, 1, "", "write"]], "diofant.utilities.codegen.FCodeGen": [[74, 3, 1, "", "dump_f95"], [74, 3, 1, "", "dump_h"], [74, 3, 1, "", "get_interface"]], "diofant.utilities.codegen.OctaveCodeGen": [[74, 3, 1, "", "dump_m"], [74, 3, 1, "", "routine"]], "diofant.utilities.codegen.Routine": [[74, 5, 1, "", "result_variables"], [74, 5, 1, "", "variables"]], "diofant.utilities.decorator": [[75, 1, 1, "", "conserve_mpmath_dps"], [75, 1, 1, "", "doctest_depends_on"], [75, 2, 1, "", "no_attrs_in_subclass"]], "diofant.utilities.enumerative": [[76, 2, 1, "", "MultisetPartitionTraverser"], [76, 1, 1, "", "factoring_visitor"], [76, 1, 1, "", "list_visitor"], [76, 1, 1, "", "multiset_partitions_taocp"]], "diofant.utilities.enumerative.MultisetPartitionTraverser": [[76, 3, 1, "", "count_partitions"], [76, 3, 1, "", "enum_all"], [76, 3, 1, "", "enum_large"], [76, 3, 1, "", "enum_range"], [76, 3, 1, "", "enum_small"]], "diofant.utilities.iterables": [[78, 1, 1, "", "binary_partitions"], [78, 1, 1, "", "bracelets"], [78, 1, 1, "", "cantor_product"], [78, 1, 1, "", "capture"], [78, 1, 1, "", "common_prefix"], [78, 1, 1, "", "common_suffix"], [78, 1, 1, "", "default_sort_key"], [78, 1, 1, "", "filter_symbols"], [78, 1, 1, "", "flatten"], [78, 1, 1, "", "generate_derangements"], [78, 1, 1, "", "generate_involutions"], [78, 1, 1, "", "group"], [78, 1, 1, "", "has_dups"], [78, 1, 1, "", "has_variety"], [78, 1, 1, "", "minlex"], [78, 1, 1, "", "multiset"], [78, 1, 1, "", "multiset_combinations"], [78, 1, 1, "", "multiset_partitions"], [78, 1, 1, "", "multiset_permutations"], [78, 1, 1, "", "necklaces"], [78, 1, 1, "", "numbered_symbols"], [78, 1, 1, "", "ordered"], [78, 1, 1, "", "ordered_partitions"], [78, 1, 1, "", "partitions"], [78, 1, 1, "", "permute_signs"], [78, 1, 1, "", "postfixes"], [78, 1, 1, "", "postorder_traversal"], [78, 1, 1, "", "prefixes"], [78, 1, 1, "", "rotate_left"], [78, 1, 1, "", "rotate_right"], [78, 1, 1, "", "runs"], [78, 1, 1, "", "sift"], [78, 1, 1, "", "signed_permutations"], [78, 1, 1, "", "subsets"], [78, 1, 1, "", "topological_sort"], [78, 1, 1, "", "unflatten"], [78, 1, 1, "", "uniq"], [78, 1, 1, "", "variations"]], "diofant.utilities.lambdify": [[79, 1, 1, "", "implemented_function"], [79, 1, 1, "", "lambdastr"], [79, 1, 1, "", "lambdify"]], "diofant.utilities.memoization": [[80, 1, 1, "", "recurrence_memo"]], "diofant.utilities.misc": [[81, 1, 1, "", "filldedent"]], "diofant.utilities.randtest": [[82, 1, 1, "", "random_complex_number"], [82, 1, 1, "", "verify_derivative_numerically"], [82, 1, 1, "", "verify_numerically"]], "python--m-diofant": [[1, 8, 1, "cmdoption-python-m-diofant-a", "--auto-symbols"], [1, 8, 1, "cmdoption-python-m-diofant-h", "--help"], [1, 8, 1, "cmdoption-python-m-diofant-no-ipython", "--no-ipython"], [1, 8, 1, "cmdoption-python-m-diofant-no-wrap-division", "--no-wrap-division"], [1, 8, 1, "cmdoption-python-m-diofant-a", "-a"], [1, 8, 1, "cmdoption-python-m-diofant-h", "-h"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception", "8": "std:cmdoption"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"], "8": ["std", "cmdoption", "program option"]}, "titleterms": {"about": 0, "licens": 0, "command": 1, "line": [1, 38], "usag": [1, 37], "python": 1, "m": 1, "diofant": [1, 3, 4, 31, 84, 85, 86, 87, 88, 120, 121], "develop": [2, 84, 85, 86, 87, 88, 120, 121], "report": 2, "issu": [2, 84, 85, 86, 87, 88, 120, 121], "contribut": 2, "code": [2, 12, 56], "rosetta": 2, "stone": 2, "version": 2, "releas": [2, 83, 122], "procedur": 2, "": 3, "document": 3, "instal": 4, "from": 4, "sourc": 4, "run": 4, "feedback": 4, "numer": [5, 43, 124], "evalu": [5, 27], "float": [5, 27], "point": [5, 39], "number": [5, 6, 10, 27, 52, 55, 126], "accuraci": 5, "error": [5, 33], "handl": 5, "sum": [5, 125], "integr": [5, 6, 33, 43, 125], "simplif": [5, 45, 58, 133], "ufuncifi": 5, "comput": 6, "us": [6, 58], "meijer": [6, 8], "g": [6, 8], "function": [6, 8, 25, 27, 31, 32, 33, 45, 50, 53, 54, 55, 56, 58, 59, 62, 63, 68, 126, 133], "overview": 6, "polar": 6, "branch": 6, "repres": 6, "argand": 6, "plane": 6, "tabl": [6, 8], "lookup": 6, "invers": [6, 31], "mellin": 6, "transform": [6, 43, 53], "appli": [6, 8], "theorem": [6, 37], "The": [6, 7, 8], "condit": 6, "converg": 6, "1": [6, 90, 106, 114], "2": [6, 97, 107, 115], "laplac": 6, "how": 6, "when": 6, "thi": 6, "i": 6, "valid": 6, "exist": 6, "implement": [6, 8, 29, 56, 73, 74], "formula": [6, 8], "gruntz": 7, "algorithm": [7, 8, 10, 55], "detail": [8, 73, 74], "hypergeometr": [8, 25, 33, 58], "expans": [8, 58, 125], "notat": 8, "increment": 8, "decrement": 8, "indic": 8, "reduct": 8, "order": [8, 55], "move": 8, "around": 8, "paramet": 8, "space": 8, "oper": [8, 50, 130], "loos": 8, "end": 8, "finit": [8, 67], "confluenc": 8, "extend": 8, "an": [8, 37], "exampl": [8, 37, 43], "intern": [9, 10, 43, 59], "polynomi": [10, 33, 55, 65, 131], "manipul": [10, 50, 55], "modul": [10, 59, 62, 63, 73], "spars": [10, 51], "distribut": 10, "factor": [10, 131], "classic": 10, "remaind": 10, "sequenc": [10, 20], "simplifi": [10, 58], "subresult": 10, "gr\u00f6bner": [10, 131], "basi": 10, "algebra": [10, 50, 55, 65, 130, 134], "field": [10, 55], "over": 10, "modular": 10, "gcd": [10, 131], "heurist": [10, 62], "further": 10, "tool": [10, 58], "undocu": 10, "calculu": [11, 125], "grai": 12, "group": [13, 15, 17], "constructor": [13, 55], "combinator": 14, "content": [14, 32, 49, 60, 69, 77, 127], "name": [15, 126], "partit": [16, 59, 78], "permut": [17, 18], "gener": 18, "polyhedron": 19, "prufer": 20, "subset": 21, "tensor": [22, 33, 69, 72], "canonic": 22, "test": [23, 45, 82], "util": [23, 24, 41, 50, 66, 77], "concret": [25, 29], "mathemat": [25, 32], "term": 25, "class": [25, 28, 46, 48, 50, 51, 54, 56, 58, 68], "refer": [25, 28, 42, 43, 46, 47, 48, 50, 51, 53, 54, 59, 73, 74], "config": 26, "core": [27, 47], "sympifi": 27, "assumpt": [27, 124], "cach": 27, "cacheit": 27, "basic": [27, 50, 55, 124], "singleton": [27, 57], "expr": 27, "atomicexpr": 27, "symbol": [27, 55], "wild": 27, "dummi": 27, "var": 27, "ration": [27, 55, 133], "integ": [27, 31], "numbersymbol": 27, "mod_invers": 27, "integer_digit": 27, "zero": 27, "One": 27, "negativeon": 27, "half": 27, "nan": 27, "infin": 27, "negativeinfin": 27, "complexinfin": 27, "exp1": 27, "imaginaryunit": 27, "pi": 27, "eulergamma": 27, "catalan": [27, 30], "goldenratio": 27, "power": [27, 58, 133], "pow": 27, "integer_nthroot": 27, "mul": 27, "add": 27, "mod": 27, "relat": [27, 33], "rel": 27, "eq": 27, "ne": 27, "lt": 27, "le": 27, "gt": 27, "ge": 27, "equal": [27, 126], "greaterthan": 27, "lessthan": 27, "unequ": 27, "strictgreaterthan": 27, "strictlessthan": 27, "multidimension": 27, "vector": 27, "lambda": 27, "wildfunct": 27, "deriv": [27, 68, 125], "diff": 27, "functionclass": 27, "sub": 27, "expand": 27, "poleerror": 27, "count_op": 27, "expand_mul": 27, "expand_log": 27, "expand_func": 27, "expand_trig": 27, "expand_complex": 27, "expand_multinomi": 27, "expand_power_exp": 27, "expand_power_bas": 27, "nfloat": 27, "evalf": 27, "precisionexhaust": 27, "n": [27, 68], "contain": [27, 66], "tupl": [27, 55], "dict": 27, "compat": [27, 84, 85, 86, 87, 88, 113, 115, 116, 117, 118, 119, 120, 121], "exprtool": 27, "gcd_term": 27, "factor_term": 27, "differenti": [28, 134], "geometri": [28, 37], "introduct": [28, 37, 45, 54, 128], "base": [28, 131], "domain": [29, 55], "abstract": 29, "element": 29, "combinatori": [30, 58], "bell": 30, "bernoulli": [30, 62], "binomi": 30, "euler": 30, "factori": 30, "subfactori": 30, "factorial2": 30, "doubl": 30, "fallingfactori": 30, "fibonacci": 30, "harmon": [30, 33], "luca": 30, "risingfactori": 30, "stirl": 30, "enumer": 30, "elementari": [31, 57], "complex": 31, "re": 31, "im": 31, "sign": 31, "ab": 31, "adjoint": 31, "arg": 31, "conjug": 31, "polar_lift": 31, "periodic_argu": 31, "principal_branch": 31, "transpos": 31, "trigonometr": [31, 33, 58, 133], "sin": 31, "co": 31, "tan": 31, "cot": 31, "sec": 31, "csc": 31, "asin": 31, "aco": 31, "asec": 31, "atan": 31, "acot": 31, "acsc": 31, "atan2": 31, "hyperbol": 31, "hyperbolicfunct": 31, "sinh": 31, "cosh": 31, "tanh": 31, "coth": 31, "sech": 31, "csch": 31, "asinh": 31, "acosh": 31, "atanh": 31, "acoth": 31, "ceil": 31, "floor": 31, "roundfunct": 31, "exponenti": [31, 33], "exp": 31, "exp_polar": 31, "lambertw": 31, "log": 31, "piecewis": 31, "exprcondpair": 31, "miscellan": [31, 37, 81], "identityfunct": 31, "min": 31, "max": 31, "root": [31, 55, 58], "real_root": 31, "sqrt": 31, "special": [33, 55, 57, 130, 133], "diracdelta": 33, "heavisid": 33, "gamma": 33, "beta": 33, "fresnel": 33, "logarithm": [33, 133], "bessel": 33, "type": [33, 67], "airi": 33, "b": 33, "spline": 33, "riemann": 33, "zeta": 33, "ellipt": 33, "orthogon": [33, 55], "jacobi": 33, "gegenbau": 33, "chebyshev": 33, "legendr": 33, "hermit": 33, "laguerr": 33, "spheric": 33, "curv": 34, "ellips": 35, "entiti": [36, 37], "avail": 37, "intersect": 37, "median": 37, "depth": 37, "pappu": 37, "hexagon": 37, "note": [37, 83], "futur": 37, "work": 37, "truth": 37, "set": [37, 57], "express": [37, 45, 47, 129], "three": 37, "dimens": 37, "beyond": 37, "submodul": 37, "polygon": 40, "api": [43, 73, 74], "interact": 44, "logic": 45, "form": 45, "boolean": 45, "equival": [45, 59], "infer": 45, "dens": 46, "matric": [46, 47, 48, 49, 50, 51, 130], "matrix": [46, 47, 50], "immutablematrix": [46, 48], "block": 47, "immut": 48, "linear": [50, 62], "creat": 50, "entri": 50, "matrixbas": 50, "except": 50, "numpi": 50, "immutablesparsematrix": 51, "theori": 52, "pars": 53, "plot": 54, "seri": [54, 125], "extra": 55, "monomi": 55, "encod": 55, "formal": 55, "find": 55, "partial": 55, "fraction": [55, 58], "decomposit": 55, "print": [56, 132], "printer": [56, 132], "prettyprint": 56, "ccodeprint": 56, "fortran": 56, "mathematica": 56, "lambdaprint": 56, "latexprint": 56, "mathmlprint": 56, "pythonprint": 56, "reprprint": 56, "strprinter": 56, "helper": 56, "codeprint": 56, "preced": 56, "pretti": [56, 132], "dotprint": 56, "compound": 57, "separatevar": 58, "nthroot": 58, "besselsimp": 58, "hypersimp": 58, "hypersimilar": 58, "nsimplifi": 58, "posifi": 58, "logcombin": 58, "radsimp": 58, "rad_ration": 58, "collect": 58, "collect_sqrt": 58, "collect_const": 58, "ratsimp": 58, "trigsimp": 58, "futrig": 58, "fu": 58, "powsimp": 58, "powdenest": 58, "combsimp": 58, "squar": [58, 131], "denest": 58, "sqrtdenest": 58, "unrad": 58, "common": 58, "subexpres": 58, "elimin": 58, "cse": [58, 133], "opt_cs": 58, "tree_cs": 58, "hyperexpand": 58, "travers": 58, "epath": 58, "diophantin": 59, "equat": [59, 64, 65, 134], "structur": 59, "tutori": [59, 127], "user": [59, 62, 63], "classify_diop": 59, "diop_solv": 59, "diop_linear": 59, "base_solution_linear": 59, "diop_quadrat": 59, "diop_dn": 59, "cornacchia": 59, "diop_bf_dn": 59, "transformation_to_dn": 59, "find_dn": 59, "diop_ternary_quadrat": 59, "descent": 59, "diop_general_pythagorean": 59, "diop_general_sum_of_squar": 59, "diop_general_sum_of_even_pow": 59, "sum_of_three_squar": 59, "sum_of_four_squar": 59, "power_represent": 59, "sum_of_squar": 59, "merge_solut": 59, "divis": [59, 131], "pqa": 59, "parametrize_ternary_quadrat": 59, "diop_ternary_quadratic_norm": 59, "ldescent": 59, "gaussian_reduc": 59, "holzer": 59, "prime_as_sum_of_two_squar": 59, "square_factor": 59, "sqf_normal": 59, "reconstruct": 59, "transformation_to_norm": 59, "solver": [60, 61, 134], "inequ": 61, "od": 62, "dsolv": 62, "classify_od": 62, "checkodesol": 62, "homogeneous_ord": 62, "infinitesim": 62, "checkinfsol": 62, "hint": [62, 63], "allhint": 62, "odesimp": 62, "constant_renumb": 62, "constantsimp": 62, "sol_simpl": 62, "1st_exact": 62, "1st_homogeneous_coeff_best": 62, "1st_homogeneous_coeff_subs_dep_div_indep": 62, "1st_homogeneous_coeff_subs_indep_div_dep": 62, "1st_linear": 62, "liouvil": 62, "riccati_special_minus2": 62, "nth_linear_constant_coeff_homogen": 62, "nth_linear_constant_coeff_undetermined_coeffici": 62, "nth_linear_constant_coeff_variation_of_paramet": 62, "separ": 62, "almost_linear": 62, "linear_coeffici": 62, "separable_reduc": 62, "lie_group": 62, "1st_power_seri": 62, "2nd_power_series_ordinari": 62, "2nd_power_series_regular": 62, "lie": 62, "abaco1_simpl": 62, "abaco1_product": 62, "bivari": 62, "chi": 62, "abaco2_similar": 62, "function_sum": 62, "abaco2_unique_unknown": 62, "system": [62, 65], "system_of_odes_linear_2eq_order1_type3": 62, "system_of_odes_linear_2eq_order1_type4": 62, "system_of_odes_linear_2eq_order1_type5": 62, "system_of_odes_linear_2eq_order1_type6": 62, "system_of_odes_linear_2eq_order1_type7": 62, "system_of_odes_linear_2eq_order2_type1": 62, "system_of_odes_linear_2eq_order2_type2": 62, "system_of_odes_linear_2eq_order2_type3": 62, "system_of_odes_linear_2eq_order2_type5": 62, "system_of_odes_linear_2eq_order2_type6": 62, "system_of_odes_linear_2eq_order2_type7": 62, "system_of_odes_linear_2eq_order2_type8": 62, "system_of_odes_linear_2eq_order2_type9": 62, "system_of_odes_linear_2eq_order2_type11": 62, "system_of_odes_linear_3eq_order1_type4": 62, "system_of_odes_linear_neq_order1_type1": 62, "system_of_odes_nonlinear_2eq_order1_type1": 62, "system_of_odes_nonlinear_2eq_order1_type2": 62, "system_of_odes_nonlinear_2eq_order1_type3": 62, "system_of_odes_nonlinear_2eq_order1_type4": 62, "system_of_odes_nonlinear_2eq_order1_type5": 62, "system_of_odes_nonlinear_3eq_order1_type1": 62, "system_of_odes_nonlinear_3eq_order1_type2": 62, "inform": [62, 63], "pde": 63, "pde_separ": 63, "pde_separate_add": 63, "pde_separate_mul": 63, "pdsolv": 63, "classify_pd": 63, "checkpdesol": 63, "method": [63, 70, 130], "pde_1st_linear_constant_coeff_homogen": 63, "pde_1st_linear_constant_coeff": 63, "pde_1st_linear_variable_coeff": 63, "recurr": [64, 134], "solv": 66, "stat": 67, "random": 67, "variabl": 67, "discret": 67, "continu": 67, "interfac": 67, "mechan": 67, "dim": 68, "arrai": 68, "product": [68, 125], "contract": 68, "index": [71, 130], "object": 71, "autowrap": 73, "codegen": 74, "routin": 74, "decor": 75, "enum": 76, "iter": 78, "variat": 78, "docstr": 78, "lambdifi": 79, "memoiz": 80, "randomis": 82, "0": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "10": [84, 91], "new": [84, 85, 86, 87, 88, 119, 120, 121], "featur": [84, 85, 86, 87, 88, 119, 120, 121], "major": [84, 85, 86, 87, 88, 113, 114, 115, 116, 117, 118, 120, 121], "chang": [84, 85, 86, 87, 88, 113, 114, 115, 116, 117, 118, 119, 120, 121], "break": [84, 85, 86, 87, 88, 113, 115, 116, 117, 118, 119, 120, 121], "minor": [84, 85, 86, 87, 88, 115, 116, 118, 119, 120, 121], "close": [84, 85, 86, 87, 88, 120, 121], "11": [85, 92], "12": [86, 93], "13": [87, 94], "14": [88, 95], "sympi": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122], "5": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 118], "15": 96, "3": [98, 108, 116], "4": [99, 109, 117], "6": [101, 105, 106, 107, 108, 109, 110, 111, 112, 119], "7": [102, 112, 113, 114, 115, 116, 117, 118, 119], "8": [103, 120], "9": [104, 121], "bibliographi": 123, "substitut": 124, "limit": 125, "gotcha": 126, "tree": 129, "walk": 129, "reshap": 130, "rearrang": 130, "advanc": 130, "lcm": 131, "free": 131, "str": 132, "repr": 132, "2d": 132, "latex": 132, "dot": 132}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinxcontrib.bibtex": 9, "sphinx": 57}, "alltitles": {"About": [[0, "about"]], "License": [[0, "license"]], "Command-Line Usage": [[1, "command-line-usage"]], "python -m diofant": [[1, "python-m-diofant"]], "Development": [[2, "development"]], "Reporting Issues": [[2, "reporting-issues"]], "Contributing Code": [[2, "contributing-code"]], "Rosetta Stone": [[2, "rosetta-stone"]], "Versioning and Release Procedure": [[2, "versioning-and-release-procedure"]], "Diofant\u2019s documentation": [[3, "diofant-s-documentation"]], "Installation": [[4, "installation"]], "From Sources": [[4, "from-sources"]], "Run Diofant": [[4, "run-diofant"]], "Feedback": [[4, "feedback"]], "Numerical evaluation": [[5, "numerical-evaluation"]], "Floating-point numbers": [[5, "floating-point-numbers"]], "Accuracy and error handling": [[5, "accuracy-and-error-handling"]], "Sums and integrals": [[5, "sums-and-integrals"]], "Numerical simplification": [[5, "numerical-simplification"]], "uFuncify": [[5, "ufuncify"]], "Computing Integrals using Meijer G-Functions": [[6, "computing-integrals-using-meijer-g-functions"]], "Overview": [[6, "overview"]], "Polar Numbers and Branched Functions": [[6, "polar-numbers-and-branched-functions"]], "Representing Branched Functions on the Argand Plane": [[6, "representing-branched-functions-on-the-argand-plane"]], "Table Lookups and Inverse Mellin Transforms": [[6, "table-lookups-and-inverse-mellin-transforms"]], "Applying the Integral Theorems": [[6, "applying-the-integral-theorems"]], "The G-Function Integration Theorems": [[6, "the-g-function-integration-theorems"]], "Conditions of Convergence for Integral (1)": [[6, "conditions-of-convergence-for-integral-1"]], "Conditions of Convergence for Integral (2)": [[6, "conditions-of-convergence-for-integral-2"]], "The Inverse Laplace Transform of a G-function": [[6, "the-inverse-laplace-transform-of-a-g-function"]], "How to compute the integral": [[6, "how-to-compute-the-integral"]], "When this computation is valid": [[6, "when-this-computation-is-valid"]], "When the integral exists": [[6, "when-the-integral-exists"]], "Implemented G-Function Formulae": [[6, "implemented-g-function-formulae"]], "The Gruntz Algorithm": [[7, "the-gruntz-algorithm"]], "Details on the Hypergeometric Function Expansion": [[8, "details-on-the-hypergeometric-function-expansion"]], "Hypergeometric Function Expansion Algorithm": [[8, "hypergeometric-function-expansion-algorithm"]], "Notation": [[8, "notation"]], "Incrementing and decrementing indices": [[8, "incrementing-and-decrementing-indices"]], "Reduction of Order": [[8, "reduction-of-order"]], "Moving Around in the Parameter Space": [[8, "moving-around-in-the-parameter-space"]], "Applying the Operators": [[8, "applying-the-operators"]], "Loose Ends": [[8, "loose-ends"]], "Meijer G-Functions of Finite Confluence": [[8, "meijer-g-functions-of-finite-confluence"]], "Extending The Hypergeometric Tables": [[8, "extending-the-hypergeometric-tables"]], "An example": [[8, "an-example"]], "Implemented Hypergeometric Formulae": [[8, "implemented-hypergeometric-formulae"]], "Internals": [[9, "internals"], [43, "internals"]], "Internals of the Polynomial Manipulation Module": [[10, "internals-of-the-polynomial-manipulation-module"]], "Manipulation of sparse, distributed polynomials": [[10, "manipulation-of-sparse-distributed-polynomials"]], "Polynomial factorization algorithms": [[10, "polynomial-factorization-algorithms"]], "Classical remainder sequence": [[10, "classical-remainder-sequence"]], "Simplified remainder sequences": [[10, "simplified-remainder-sequences"]], "Subresultant sequence": [[10, "subresultant-sequence"]], "Gr\u00f6bner basis algorithms": [[10, "grobner-basis-algorithms"]], "Algebraic number fields": [[10, "algebraic-number-fields"], [55, "module-diofant.polys.numberfields"]], "Factorization over algebraic number fields": [[10, "module-diofant.polys.factorization_alg_field"]], "Modular GCD": [[10, "module-diofant.polys.modulargcd"]], "Heuristic GCD": [[10, "heuristic-gcd"]], "Further tools": [[10, "module-diofant.polys.rootisolation"]], "Undocumented": [[10, "undocumented"]], "Calculus": [[11, "module-diofant.calculus"], [125, "calculus"]], "Gray Code": [[12, "module-diofant.combinatorics.graycode"]], "Group constructors": [[13, "module-diofant.combinatorics.group_constructs"]], "Combinatorics": [[14, "combinatorics"]], "Contents": [[14, null], [32, null], [49, null], [60, null], [69, null], [77, null], [127, null]], "Named Groups": [[15, "module-diofant.combinatorics.named_groups"]], "Partitions": [[16, "module-diofant.combinatorics.partitions"]], "Permutation Groups": [[17, "module-diofant.combinatorics.perm_groups"]], "Permutations": [[18, "module-diofant.combinatorics.permutations"]], "Generators": [[18, "module-diofant.combinatorics.generators"]], "Polyhedron": [[19, "module-diofant.combinatorics.polyhedron"]], "Prufer Sequences": [[20, "module-diofant.combinatorics.prufer"]], "Subsets": [[21, "module-diofant.combinatorics.subsets"]], "Tensor Canonicalization": [[22, "module-diofant.combinatorics.tensor_can"]], "Test Utilities": [[23, "module-diofant.combinatorics.testutil"]], "Utilities": [[24, "module-diofant.combinatorics.util"], [77, "module-diofant.utilities"]], "Concrete Mathematics": [[25, "concrete-mathematics"]], "Hypergeometric terms": [[25, "hypergeometric-terms"]], "Concrete Class Reference": [[25, "concrete-class-reference"]], "Concrete Functions Reference": [[25, "concrete-functions-reference"]], "Config": [[26, "module-diofant.config"]], "Core": [[27, "module-diofant.core"]], "sympify": [[27, "module-diofant.core.sympify"], [27, "id1"]], "assumptions": [[27, "module-diofant.core.assumptions"]], "cache": [[27, "module-diofant.core.cache"]], "cacheit": [[27, "cacheit"]], "basic": [[27, "module-diofant.core.basic"]], "core": [[27, "id2"]], "singleton": [[27, "module-diofant.core.singleton"]], "evaluate": [[27, "module-diofant.core.evaluate"]], "expr": [[27, "module-diofant.core.expr"]], "Expr": [[27, "id3"]], "AtomicExpr": [[27, "atomicexpr"]], "symbol": [[27, "module-diofant.core.symbol"]], "Symbol": [[27, "id5"]], "Wild": [[27, "wild"]], "Dummy": [[27, "dummy"]], "symbols": [[27, "symbols"]], "var": [[27, "var"]], "numbers": [[27, "module-diofant.core.numbers"]], "Number": [[27, "number"]], "Float": [[27, "float"]], "Rational": [[27, "rational"]], "Integer": [[27, "integer"]], "NumberSymbol": [[27, "numbersymbol"]], "mod_inverse": [[27, "mod-inverse"]], "integer_digits": [[27, "integer-digits"]], "Zero": [[27, "zero"]], "One": [[27, "one"]], "NegativeOne": [[27, "negativeone"]], "Half": [[27, "half"]], "NaN": [[27, "nan"]], "Infinity": [[27, "infinity"]], "NegativeInfinity": [[27, "negativeinfinity"]], "ComplexInfinity": [[27, "complexinfinity"]], "Exp1": [[27, "exp1"]], "ImaginaryUnit": [[27, "imaginaryunit"]], "Pi": [[27, "pi"]], "EulerGamma": [[27, "eulergamma"]], "Catalan": [[27, "catalan"]], "GoldenRatio": [[27, "goldenratio"]], "power": [[27, "module-diofant.core.power"]], "Pow": [[27, "pow"]], "integer_nthroot": [[27, "integer-nthroot"]], "mul": [[27, "module-diofant.core.mul"]], "Mul": [[27, "id6"]], "add": [[27, "module-diofant.core.add"]], "Add": [[27, "id7"]], "mod": [[27, "module-diofant.core.mod"]], "Mod": [[27, "id8"]], "relational": [[27, "module-diofant.core.relational"]], "Rel": [[27, "rel"]], "Eq": [[27, "eq"]], "Ne": [[27, "ne"]], "Lt": [[27, "lt"]], "Le": [[27, "le"]], "Gt": [[27, "gt"]], "Ge": [[27, "ge"]], "Relational": [[27, "id9"]], "Equality": [[27, "equality"], [126, "equality"]], "GreaterThan": [[27, "greaterthan"]], "LessThan": [[27, "lessthan"]], "Unequality": [[27, "unequality"]], "StrictGreaterThan": [[27, "strictgreaterthan"]], "StrictLessThan": [[27, "strictlessthan"]], "multidimensional": [[27, "module-diofant.core.multidimensional"]], "vectorize": [[27, "vectorize"]], "function": [[27, "module-diofant.core.function"]], "Lambda": [[27, "lambda"]], "WildFunction": [[27, "wildfunction"]], "Derivative": [[27, "derivative"]], "diff": [[27, "diff"]], "FunctionClass": [[27, "functionclass"]], "Function": [[27, "id10"]], "Subs": [[27, "subs"]], "expand": [[27, "expand"]], "PoleError": [[27, "poleerror"]], "count_ops": [[27, "count-ops"]], "expand_mul": [[27, "expand-mul"]], "expand_log": [[27, "expand-log"]], "expand_func": [[27, "expand-func"]], "expand_trig": [[27, "expand-trig"]], "expand_complex": [[27, "expand-complex"]], "expand_multinomial": [[27, "expand-multinomial"]], "expand_power_exp": [[27, "expand-power-exp"]], "expand_power_base": [[27, "expand-power-base"]], "nfloat": [[27, "nfloat"]], "evalf": [[27, "module-diofant.core.evalf"]], "PrecisionExhausted": [[27, "precisionexhausted"]], "N": [[27, "n"]], "containers": [[27, "module-diofant.core.containers"]], "Tuple": [[27, "tuple"]], "Dict": [[27, "dict"]], "compatibility": [[27, "module-diofant.core.compatibility"]], "exprtools": [[27, "module-diofant.core.exprtools"]], "gcd_terms": [[27, "gcd-terms"]], "factor_terms": [[27, "factor-terms"]], "Differential Geometry": [[28, "module-diofant.diffgeom"]], "Introduction": [[28, "introduction"], [37, "introduction"], [45, "introduction"], [54, "introduction"], [128, "introduction"]], "Base Class Reference": [[28, "base-class-reference"]], "Domains": [[29, "module-diofant.domains"]], "Abstract Domains": [[29, "abstract-domains"]], "Concrete Domains": [[29, "concrete-domains"]], "Implementation Domains": [[29, "implementation-domains"]], "Domain Elements": [[29, "domain-elements"]], "Combinatorial": [[30, "combinatorial"]], "bell": [[30, "bell"]], "bernoulli": [[30, "bernoulli"]], "binomial": [[30, "binomial"]], "catalan": [[30, "catalan"]], "euler": [[30, "euler"]], "factorial": [[30, "factorial"]], "subfactorial": [[30, "subfactorial"]], "factorial2 / double factorial": [[30, "factorial2-double-factorial"]], "FallingFactorial": [[30, "fallingfactorial"]], "fibonacci": [[30, "fibonacci"]], "harmonic": [[30, "harmonic"]], "lucas": [[30, "lucas"]], "RisingFactorial": [[30, "risingfactorial"]], "stirling": [[30, "stirling"]], "Enumeration": [[30, "enumeration"]], "Elementary": [[31, "elementary"]], "diofant.functions.elementary.complexes": [[31, "diofant-functions-elementary-complexes"]], "re": [[31, "re"]], "im": [[31, "im"]], "sign": [[31, "sign"]], "Abs": [[31, "abs"]], "adjoint": [[31, "adjoint"]], "arg": [[31, "arg"]], "conjugate": [[31, "conjugate"]], "polar_lift": [[31, "polar-lift"]], "periodic_argument": [[31, "periodic-argument"]], "principal_branch": [[31, "principal-branch"]], "transpose": [[31, "transpose"]], "diofant.functions.elementary.trigonometric": [[31, "diofant-functions-elementary-trigonometric"]], "Trigonometric Functions": [[31, "trigonometric-functions"], [133, "trigonometric-functions"]], "sin": [[31, "sin"]], "cos": [[31, "cos"]], "tan": [[31, "tan"]], "cot": [[31, "cot"]], "sec": [[31, "sec"]], "csc": [[31, "csc"]], "Trigonometric Inverses": [[31, "trigonometric-inverses"]], "asin": [[31, "asin"]], "acos": [[31, "acos"]], "asec": [[31, "asec"]], "atan": [[31, "atan"]], "acot": [[31, "acot"]], "acsc": [[31, "acsc"]], "atan2": [[31, "atan2"]], "diofant.functions.elementary.hyperbolic": [[31, "diofant-functions-elementary-hyperbolic"]], "Hyperbolic Functions": [[31, "hyperbolic-functions"]], "HyperbolicFunction": [[31, "hyperbolicfunction"]], "sinh": [[31, "sinh"]], "cosh": [[31, "cosh"]], "tanh": [[31, "tanh"]], "coth": [[31, "coth"]], "sech": [[31, "sech"]], "csch": [[31, "csch"]], "Hyperbolic Inverses": [[31, "hyperbolic-inverses"]], "asinh": [[31, "asinh"]], "acosh": [[31, "acosh"]], "atanh": [[31, "atanh"]], "acoth": [[31, "acoth"]], "diofant.functions.elementary.integers": [[31, "diofant-functions-elementary-integers"]], "ceiling": [[31, "ceiling"]], "floor": [[31, "floor"]], "RoundFunction": [[31, "roundfunction"]], "diofant.functions.elementary.exponential": [[31, "diofant-functions-elementary-exponential"]], "exp": [[31, "exp"]], "exp_polar": [[31, "exp-polar"]], "LambertW": [[31, "lambertw"]], "log": [[31, "log"]], "diofant.functions.elementary.piecewise": [[31, "diofant-functions-elementary-piecewise"]], "ExprCondPair": [[31, "exprcondpair"]], "Piecewise": [[31, "piecewise"]], "diofant.functions.elementary.miscellaneous": [[31, "diofant-functions-elementary-miscellaneous"]], "IdentityFunction": [[31, "identityfunction"]], "Min": [[31, "min"]], "Max": [[31, "max"]], "root": [[31, "root"]], "real_root": [[31, "real-root"]], "sqrt": [[31, "sqrt"]], "Mathematical Functions": [[32, "module-diofant.functions"]], "Special": [[33, "special"]], "DiracDelta": [[33, "diracdelta"]], "Heaviside": [[33, "heaviside"]], "Gamma, Beta and related Functions": [[33, "module-diofant.functions.special.gamma_functions"]], "Error Functions and Fresnel Integrals": [[33, "module-diofant.functions.special.error_functions"]], "Exponential, Logarithmic and Trigonometric Integrals": [[33, "exponential-logarithmic-and-trigonometric-integrals"]], "Bessel Type Functions": [[33, "module-diofant.functions.special.bessel"]], "Airy Functions": [[33, "airy-functions"]], "B-Splines": [[33, "b-splines"]], "Riemann Zeta and Related Functions": [[33, "module-diofant.functions.special.zeta_functions"]], "Hypergeometric Functions": [[33, "hypergeometric-functions"]], "Elliptic integrals": [[33, "module-diofant.functions.special.elliptic_integrals"]], "Orthogonal Polynomials": [[33, "module-diofant.functions.special.polynomials"]], "Jacobi Polynomials": [[33, "jacobi-polynomials"]], "Gegenbauer Polynomials": [[33, "gegenbauer-polynomials"]], "Chebyshev Polynomials": [[33, "chebyshev-polynomials"]], "Legendre Polynomials": [[33, "legendre-polynomials"]], "Hermite Polynomials": [[33, "hermite-polynomials"]], "Laguerre Polynomials": [[33, "laguerre-polynomials"]], "Spherical Harmonics": [[33, "spherical-harmonics"]], "Tensor Functions": [[33, "tensor-functions"]], "Curves": [[34, "module-diofant.geometry.curve"]], "Ellipses": [[35, "module-diofant.geometry.ellipse"]], "Entities": [[36, "module-diofant.geometry.entity"]], "Geometry": [[37, "module-diofant.geometry"]], "Available Entities": [[37, "available-entities"]], "Example Usage": [[37, "example-usage"]], "Intersection of medians": [[37, "intersection-of-medians"]], "An in-depth example: Pappus\u2019 Hexagon Theorem": [[37, "an-in-depth-example-pappus-hexagon-theorem"]], "Miscellaneous Notes": [[37, "miscellaneous-notes"]], "Future Work": [[37, "future-work"]], "Truth Setting Expressions": [[37, "truth-setting-expressions"]], "Three Dimensions and Beyond": [[37, "three-dimensions-and-beyond"]], "Submodules": [[37, "submodules"]], "Lines": [[38, "module-diofant.geometry.line"]], "Points": [[39, "module-diofant.geometry.point"]], "Polygons": [[40, "module-diofant.geometry.polygon"]], "Utils": [[41, "module-diofant.geometry.util"]], "Reference": [[42, "module-diofant"]], "Integrals": [[43, "module-diofant.integrals"], [125, "integrals"]], "Examples": [[43, "examples"]], "Integral Transforms": [[43, "module-diofant.integrals.transforms"]], "API reference": [[43, "api-reference"]], "Numeric Integrals": [[43, "numeric-integrals"]], "Interactive": [[44, "module-diofant.interactive"]], "Logic": [[45, "module-diofant.logic"]], "Forming logical expressions": [[45, "forming-logical-expressions"]], "Boolean functions": [[45, "boolean-functions"]], "Simplification and equivalence-testing": [[45, "simplification-and-equivalence-testing"]], "Inference": [[45, "inference"]], "Dense Matrices": [[46, "module-diofant.matrices.dense"]], "Matrix Class Reference": [[46, "matrix-class-reference"]], "ImmutableMatrix Class Reference": [[46, "immutablematrix-class-reference"], [48, "module-diofant.matrices.immutable"]], "Matrix Expressions": [[47, "module-diofant.matrices.expressions"]], "Matrix Expressions Core Reference": [[47, "matrix-expressions-core-reference"]], "Block Matrices": [[47, "block-matrices"]], "Immutable Matrices": [[48, "immutable-matrices"]], "Matrices": [[49, "module-diofant.matrices"], [130, "matrices"]], "Matrices (linear algebra)": [[50, "module-diofant.matrices.matrices"]], "Creating Matrices": [[50, "creating-matrices"]], "Basic Manipulation": [[50, "basic-manipulation"]], "Operations on entries": [[50, "operations-on-entries"]], "Linear algebra": [[50, "linear-algebra"]], "MatrixBase Class Reference": [[50, "matrixbase-class-reference"]], "Matrix Exceptions Reference": [[50, "matrix-exceptions-reference"]], "Matrix Functions Reference": [[50, "matrix-functions-reference"]], "Numpy Utility Functions Reference": [[50, "numpy-utility-functions-reference"]], "Sparse Matrices": [[51, "module-diofant.matrices.sparse"]], "ImmutableSparseMatrix Class Reference": [[51, "immutablesparsematrix-class-reference"]], "Number Theory": [[52, "module-diofant.ntheory.generate"]], "Parsing": [[53, "module-diofant.parsing"]], "Parsing Functions Reference": [[53, "parsing-functions-reference"]], "Parsing Transformations Reference": [[53, "parsing-transformations-reference"]], "Plotting": [[54, "module-diofant.plotting"]], "Plot Class": [[54, "plot-class"]], "Plotting Function Reference": [[54, "plotting-function-reference"]], "Series Classes": [[54, "series-classes"]], "Polynomials": [[55, "module-diofant.polys"], [131, "polynomials"]], "Basic polynomial manipulation functions": [[55, "module-diofant.polys.polytools"]], "Extra polynomial manipulation functions": [[55, "module-diofant.polys.polyfuncs"]], "Domain constructors": [[55, "module-diofant.polys.constructor"]], "Monomials encoded as tuples": [[55, "module-diofant.polys.monomials"]], "Orderings of monomials": [[55, "module-diofant.polys.orderings"]], "Formal manipulation of roots of polynomials": [[55, "module-diofant.polys.rootoftools"]], "Symbolic root-finding algorithms": [[55, "module-diofant.polys.polyroots"]], "Special polynomials": [[55, "module-diofant.polys.specialpolys"]], "Orthogonal polynomials": [[55, "module-diofant.polys.orthopolys"]], "Manipulation of rational functions": [[55, "module-diofant.polys.rationaltools"]], "Partial fraction decomposition": [[55, "module-diofant.polys.partfrac"]], "Printing": [[56, "module-diofant.printing"], [132, "printing"]], "Printer Class": [[56, "module-diofant.printing.printer"]], "PrettyPrinter Class": [[56, "prettyprinter-class"]], "CCodePrinter": [[56, "module-diofant.printing.ccode"]], "Fortran Printing": [[56, "fortran-printing"]], "Mathematica code printing": [[56, "module-diofant.printing.mathematica"]], "LambdaPrinter": [[56, "module-diofant.printing.lambdarepr"]], "LatexPrinter": [[56, "module-diofant.printing.latex"]], "MathMLPrinter": [[56, "module-diofant.printing.mathml"]], "PythonPrinter": [[56, "module-diofant.printing.python"]], "ReprPrinter": [[56, "module-diofant.printing.repr"]], "StrPrinter": [[56, "module-diofant.printing.str"]], "Implementation - Helper Classes/Functions": [[56, "module-diofant.printing.conventions"]], "CodePrinter": [[56, "module-diofant.printing.codeprinter"]], "Precedence": [[56, "module-diofant.printing.precedence"]], "Pretty-Printing Implementation Helpers": [[56, "module-diofant.printing.pretty.pretty_symbology"]], "dotprint": [[56, "dotprint"]], "Sets": [[57, "module-diofant.sets.sets"]], "Elementary Sets": [[57, "elementary-sets"]], "Compound Sets": [[57, "compound-sets"]], "Singleton Sets": [[57, "singleton-sets"]], "Special Sets": [[57, "module-diofant.sets.fancysets"]], "Simplify": [[58, "simplify"]], "simplify": [[58, "id1"]], "separatevars": [[58, "separatevars"]], "nthroot": [[58, "nthroot"]], "besselsimp": [[58, "besselsimp"]], "hypersimp": [[58, "hypersimp"]], "hypersimilar": [[58, "hypersimilar"]], "nsimplify": [[58, "nsimplify"]], "posify": [[58, "posify"]], "logcombine": [[58, "logcombine"]], "Radsimp": [[58, "module-diofant.simplify.radsimp"]], "radsimp": [[58, "id2"]], "rad_rationalize": [[58, "rad-rationalize"]], "collect": [[58, "collect"]], "collect_sqrt": [[58, "collect-sqrt"]], "collect_const": [[58, "collect-const"]], "fraction": [[58, "fraction"]], "Ratsimp": [[58, "module-diofant.simplify.ratsimp"]], "ratsimp": [[58, "id3"]], "Trigonometric simplification": [[58, "module-diofant.simplify.trigsimp"]], "trigsimp": [[58, "trigsimp"]], "futrig": [[58, "futrig"]], "fu": [[58, "module-diofant.simplify.fu"]], "Power simplification": [[58, "module-diofant.simplify.powsimp"]], "powsimp": [[58, "powsimp"]], "powdenest": [[58, "powdenest"]], "Combinatorial simplification": [[58, "module-diofant.simplify.combsimp"]], "combsimp": [[58, "combsimp"]], "Square Root Denest": [[58, "module-diofant.simplify.sqrtdenest"]], "sqrtdenest": [[58, "sqrtdenest"]], "unrad": [[58, "unrad"]], "Common Subexpresion Elimination": [[58, "module-diofant.simplify.cse_main"]], "cse": [[58, "cse"]], "opt_cse": [[58, "opt-cse"]], "tree_cse": [[58, "tree-cse"]], "Hypergeometric Function Expansion": [[58, "module-diofant.simplify.hyperexpand"]], "hyperexpand": [[58, "hyperexpand"]], "Traversal Tools": [[58, "module-diofant.simplify.traversaltools"]], "use": [[58, "use"]], "EPath Tools": [[58, "module-diofant.simplify.epathtools"]], "EPath class": [[58, "epath-class"]], "epath": [[58, "epath"]], "Diophantine": [[59, "module-diofant.solvers.diophantine"]], "Diophantine equations": [[59, "diophantine-equations"]], "Module structure": [[59, "module-structure"]], "Tutorial": [[59, "tutorial"], [127, "tutorial"]], "References": [[59, "references"]], "User Functions": [[59, "user-functions"], [62, "user-functions"], [63, "user-functions"]], "diophantine": [[59, "id1"]], "classify_diop": [[59, "classify-diop"]], "Internal Functions": [[59, "internal-functions"]], "diop_solve": [[59, "diop-solve"]], "diop_linear": [[59, "diop-linear"]], "base_solution_linear": [[59, "base-solution-linear"]], "diop_quadratic": [[59, "diop-quadratic"]], "diop_DN": [[59, "diop-dn"]], "cornacchia": [[59, "cornacchia"]], "diop_bf_DN": [[59, "diop-bf-dn"]], "transformation_to_DN": [[59, "transformation-to-dn"]], "find_DN": [[59, "find-dn"]], "diop_ternary_quadratic": [[59, "diop-ternary-quadratic"]], "descent": [[59, "descent"]], "diop_general_pythagorean": [[59, "diop-general-pythagorean"]], "diop_general_sum_of_squares": [[59, "diop-general-sum-of-squares"]], "diop_general_sum_of_even_powers": [[59, "diop-general-sum-of-even-powers"]], "partition": [[59, "partition"]], "sum_of_three_squares": [[59, "sum-of-three-squares"]], "sum_of_four_squares": [[59, "sum-of-four-squares"]], "power_representation": [[59, "power-representation"]], "sum_of_squares": [[59, "sum-of-squares"]], "merge_solution": [[59, "merge-solution"]], "divisible": [[59, "divisible"]], "PQa": [[59, "pqa"]], "equivalent": [[59, "equivalent"]], "parametrize_ternary_quadratic": [[59, "parametrize-ternary-quadratic"]], "diop_ternary_quadratic_normal": [[59, "diop-ternary-quadratic-normal"]], "ldescent": [[59, "ldescent"]], "gaussian_reduce": [[59, "gaussian-reduce"]], "holzer": [[59, "holzer"]], "prime_as_sum_of_two_squares": [[59, "prime-as-sum-of-two-squares"]], "square_factor": [[59, "square-factor"]], "sqf_normal": [[59, "sqf-normal"]], "reconstruct": [[59, "reconstruct"]], "transformation_to_normal": [[59, "transformation-to-normal"]], "Solvers": [[60, "module-diofant.solvers"], [134, "solvers"]], "Inequality Solvers": [[61, "module-diofant.solvers.inequalities"]], "ODE": [[62, "ode"]], "dsolve": [[62, "dsolve"]], "classify_ode": [[62, "classify-ode"]], "checkodesol": [[62, "checkodesol"]], "homogeneous_order": [[62, "homogeneous-order"]], "infinitesimals": [[62, "infinitesimals"]], "checkinfsol": [[62, "checkinfsol"]], "Hint Functions": [[62, "hint-functions"]], "allhints": [[62, "allhints"]], "odesimp": [[62, "odesimp"]], "constant_renumber": [[62, "constant-renumber"]], "constantsimp": [[62, "constantsimp"]], "sol_simplicity": [[62, "sol-simplicity"]], "1st_exact": [[62, "st-exact"]], "1st_homogeneous_coeff_best": [[62, "st-homogeneous-coeff-best"]], "1st_homogeneous_coeff_subs_dep_div_indep": [[62, "st-homogeneous-coeff-subs-dep-div-indep"]], "1st_homogeneous_coeff_subs_indep_div_dep": [[62, "st-homogeneous-coeff-subs-indep-div-dep"]], "1st_linear": [[62, "st-linear"]], "Bernoulli": [[62, "bernoulli"]], "Liouville": [[62, "liouville"]], "Riccati_special_minus2": [[62, "riccati-special-minus2"]], "nth_linear_constant_coeff_homogeneous": [[62, "nth-linear-constant-coeff-homogeneous"]], "nth_linear_constant_coeff_undetermined_coefficients": [[62, "nth-linear-constant-coeff-undetermined-coefficients"]], "nth_linear_constant_coeff_variation_of_parameters": [[62, "nth-linear-constant-coeff-variation-of-parameters"]], "separable": [[62, "separable"]], "almost_linear": [[62, "almost-linear"]], "linear_coefficients": [[62, "linear-coefficients"]], "separable_reduced": [[62, "separable-reduced"]], "lie_group": [[62, "lie-group"]], "1st_power_series": [[62, "st-power-series"]], "2nd_power_series_ordinary": [[62, "nd-power-series-ordinary"]], "2nd_power_series_regular": [[62, "nd-power-series-regular"]], "Lie heuristics": [[62, "lie-heuristics"]], "abaco1_simple": [[62, "abaco1-simple"]], "abaco1_product": [[62, "abaco1-product"]], "bivariate": [[62, "bivariate"]], "chi": [[62, "chi"]], "abaco2_similar": [[62, "abaco2-similar"]], "function_sum": [[62, "function-sum"]], "abaco2_unique_unknown": [[62, "abaco2-unique-unknown"]], "linear": [[62, "linear"]], "System of ODEs": [[62, "system-of-odes"]], "system_of_odes_linear_2eq_order1_type3": [[62, "system-of-odes-linear-2eq-order1-type3"]], "system_of_odes_linear_2eq_order1_type4": [[62, "system-of-odes-linear-2eq-order1-type4"]], "system_of_odes_linear_2eq_order1_type5": [[62, "system-of-odes-linear-2eq-order1-type5"]], "system_of_odes_linear_2eq_order1_type6": [[62, "system-of-odes-linear-2eq-order1-type6"]], "system_of_odes_linear_2eq_order1_type7": [[62, "system-of-odes-linear-2eq-order1-type7"]], "system_of_odes_linear_2eq_order2_type1": [[62, "system-of-odes-linear-2eq-order2-type1"]], "system_of_odes_linear_2eq_order2_type2": [[62, "system-of-odes-linear-2eq-order2-type2"]], "system_of_odes_linear_2eq_order2_type3": [[62, "system-of-odes-linear-2eq-order2-type3"]], "system_of_odes_linear_2eq_order2_type5": [[62, "system-of-odes-linear-2eq-order2-type5"]], "system_of_odes_linear_2eq_order2_type6": [[62, "system-of-odes-linear-2eq-order2-type6"]], "system_of_odes_linear_2eq_order2_type7": [[62, "system-of-odes-linear-2eq-order2-type7"]], "system_of_odes_linear_2eq_order2_type8": [[62, "system-of-odes-linear-2eq-order2-type8"]], "system_of_odes_linear_2eq_order2_type9": [[62, "system-of-odes-linear-2eq-order2-type9"]], "system_of_odes_linear_2eq_order2_type11": [[62, "system-of-odes-linear-2eq-order2-type11"]], "system_of_odes_linear_3eq_order1_type4": [[62, "system-of-odes-linear-3eq-order1-type4"]], "system_of_odes_linear_neq_order1_type1": [[62, "system-of-odes-linear-neq-order1-type1"]], "system_of_odes_nonlinear_2eq_order1_type1": [[62, "system-of-odes-nonlinear-2eq-order1-type1"]], "system_of_odes_nonlinear_2eq_order1_type2": [[62, "system-of-odes-nonlinear-2eq-order1-type2"]], "system_of_odes_nonlinear_2eq_order1_type3": [[62, "system-of-odes-nonlinear-2eq-order1-type3"]], "system_of_odes_nonlinear_2eq_order1_type4": [[62, "system-of-odes-nonlinear-2eq-order1-type4"]], "system_of_odes_nonlinear_2eq_order1_type5": [[62, "system-of-odes-nonlinear-2eq-order1-type5"]], "system_of_odes_nonlinear_3eq_order1_type1": [[62, "system-of-odes-nonlinear-3eq-order1-type1"]], "system_of_odes_nonlinear_3eq_order1_type2": [[62, "system-of-odes-nonlinear-3eq-order1-type2"]], "Information on the ode module": [[62, "module-diofant.solvers.ode"]], "PDE": [[63, "pde"]], "pde_separate": [[63, "pde-separate"]], "pde_separate_add": [[63, "pde-separate-add"]], "pde_separate_mul": [[63, "pde-separate-mul"]], "pdsolve": [[63, "pdsolve"]], "classify_pde": [[63, "classify-pde"]], "checkpdesol": [[63, "checkpdesol"]], "Hint Methods": [[63, "hint-methods"]], "pde_1st_linear_constant_coeff_homogeneous": [[63, "pde-1st-linear-constant-coeff-homogeneous"]], "pde_1st_linear_constant_coeff": [[63, "pde-1st-linear-constant-coeff"]], "pde_1st_linear_variable_coeff": [[63, "pde-1st-linear-variable-coeff"]], "Information on the pde module": [[63, "module-diofant.solvers.pde"]], "Recurrence Equations": [[64, "module-diofant.solvers.recurr"], [134, "recurrence-equations"]], "Algebraic equations": [[65, "module-diofant.solvers.solvers"]], "Systems of Polynomial Equations": [[65, "module-diofant.solvers.polysys"]], "Utilities for solving": [[66, "module-diofant.solvers.utils"]], "Contains": [[66, "contains"]], "Stats": [[67, "module-diofant.stats"]], "Random Variable Types": [[67, "random-variable-types"]], "Finite Types": [[67, "finite-types"]], "Discrete Types": [[67, "discrete-types"]], "Continuous Types": [[67, "continuous-types"]], "Interface": [[67, "interface"]], "Mechanics": [[67, "module-diofant.stats.rv"]], "N-dim array": [[68, "module-diofant.tensor.array"]], "Products and contractions": [[68, "products-and-contractions"]], "Derivatives by array": [[68, "derivatives-by-array"]], "Classes": [[68, "classes"]], "Functions": [[68, "functions"]], "Tensors": [[69, "module-diofant.tensor"]], "Methods": [[70, "module-diofant.tensor.index_methods"]], "Indexed Objects": [[71, "module-diofant.tensor.indexed"]], "Tensor": [[72, "module-diofant.tensor.tensor"]], "Autowrap Module": [[73, "autowrap-module"]], "Implementation details": [[73, "implementation-details"]], "API Reference": [[73, "module-diofant.utilities.autowrap"], [74, "module-diofant.utilities.codegen"]], "Codegen": [[74, "codegen"]], "Implementation Details": [[74, "implementation-details"]], "Routine": [[74, "routine"]], "Decorator": [[75, "module-diofant.utilities.decorator"]], "Enumerative": [[76, "module-diofant.utilities.enumerative"]], "Iterables": [[78, "iterables"]], "variations": [[78, "variations"]], "partitions": [[78, "partitions"]], "Docstring": [[78, "module-diofant.utilities.iterables"]], "Lambdify": [[79, "module-diofant.utilities.lambdify"]], "Memoization": [[80, "module-diofant.utilities.memoization"]], "Miscellaneous": [[81, "module-diofant.utilities.misc"]], "Randomised Testing": [[82, "module-diofant.utilities.randtest"]], "Release Notes": [[83, "release-notes"]], "Diofant 0.10": [[84, "diofant-0-10"]], "New features": [[84, "new-features"], [85, "new-features"], [86, "new-features"], [87, "new-features"], [88, "new-features"], [119, "new-features"], [120, "new-features"], [121, "new-features"]], "Major changes": [[84, "major-changes"], [85, "major-changes"], [86, "major-changes"], [87, "major-changes"], [88, "major-changes"], [114, "major-changes"], [116, "major-changes"], [117, "major-changes"], [118, "major-changes"], [120, "major-changes"], [121, "major-changes"]], "Compatibility breaks": [[84, "compatibility-breaks"], [85, "compatibility-breaks"], [86, "compatibility-breaks"], [87, "compatibility-breaks"], [88, "compatibility-breaks"], [113, "compatibility-breaks"], [115, "compatibility-breaks"], [116, "compatibility-breaks"], [117, "compatibility-breaks"], [118, "compatibility-breaks"], [119, "compatibility-breaks"], [120, "compatibility-breaks"], [121, "compatibility-breaks"]], "Minor changes": [[84, "minor-changes"], [85, "minor-changes"], [86, "minor-changes"], [87, "minor-changes"], [88, "minor-changes"], [115, "minor-changes"], [116, "minor-changes"], [118, "minor-changes"], [119, "minor-changes"], [120, "minor-changes"], [121, "minor-changes"]], "Developer changes": [[84, "developer-changes"], [85, "developer-changes"], [86, "developer-changes"], [87, "developer-changes"], [88, "developer-changes"], [120, "developer-changes"], [121, "developer-changes"]], "Issues closed": [[84, "issues-closed"], [85, "issues-closed"], [86, "issues-closed"], [87, "issues-closed"], [88, "issues-closed"], [120, "issues-closed"], [121, "issues-closed"]], "Diofant 0.11": [[85, "diofant-0-11"]], "Diofant 0.12": [[86, "diofant-0-12"]], "Diofant 0.13": [[87, "diofant-0-13"]], "Diofant 0.14": [[88, "diofant-0-14"]], "SymPy 0.5.0": [[89, "sympy-0-5-0"]], "SymPy 0.5.1": [[90, "sympy-0-5-1"]], "SymPy 0.5.10": [[91, "sympy-0-5-10"]], "SymPy 0.5.11": [[92, "sympy-0-5-11"]], "SymPy 0.5.12": [[93, "sympy-0-5-12"]], "SymPy 0.5.13": [[94, "sympy-0-5-13"]], "SymPy 0.5.14": [[95, "sympy-0-5-14"]], "SymPy 0.5.15": [[96, "sympy-0-5-15"]], "SymPy 0.5.2": [[97, "sympy-0-5-2"]], "SymPy 0.5.3": [[98, "sympy-0-5-3"]], "SymPy 0.5.4": [[99, "sympy-0-5-4"]], "SymPy 0.5.5": [[100, "sympy-0-5-5"]], "SymPy 0.5.6": [[101, "sympy-0-5-6"]], "SymPy 0.5.7": [[102, "sympy-0-5-7"]], "SymPy 0.5.8": [[103, "sympy-0-5-8"]], "SymPy 0.5.9": [[104, "sympy-0-5-9"]], "SymPy 0.6.0": [[105, "sympy-0-6-0"]], "SymPy 0.6.1": [[106, "sympy-0-6-1"]], "SymPy 0.6.2": [[107, "sympy-0-6-2"]], "SymPy 0.6.3": [[108, "sympy-0-6-3"]], "SymPy 0.6.4": [[109, "sympy-0-6-4"]], "SymPy 0.6.5": [[110, "sympy-0-6-5"]], "SymPy 0.6.6": [[111, "sympy-0-6-6"]], "SymPy 0.6.7": [[112, "sympy-0-6-7"]], "SymPy 0.7.0": [[113, "sympy-0-7-0"]], "Major Changes": [[113, "major-changes"], [115, "major-changes"]], "SymPy 0.7.1": [[114, "sympy-0-7-1"]], "SymPy 0.7.2": [[115, "sympy-0-7-2"]], "SymPy 0.7.3": [[116, "sympy-0-7-3"]], "SymPy 0.7.4": [[117, "sympy-0-7-4"]], "SymPy 0.7.5": [[118, "sympy-0-7-5"]], "SymPy 0.7.6": [[119, "sympy-0-7-6"]], "Diofant 0.8": [[120, "diofant-0-8"]], "Diofant 0.9": [[121, "diofant-0-9"]], "SymPy releases": [[122, "sympy-releases"]], "Bibliography": [[123, "bibliography"]], "Basics": [[124, "basics"]], "Assumptions": [[124, "assumptions"]], "Substitution": [[124, "substitution"]], "Numerics": [[124, "numerics"]], "Derivatives": [[125, "derivatives"]], "Sums and Products": [[125, "sums-and-products"]], "Limits": [[125, "limits"]], "Series Expansion": [[125, "series-expansion"]], "Gotchas": [[126, "gotchas"]], "Numbers": [[126, "numbers"]], "Naming of Functions": [[126, "naming-of-functions"]], "Expression Trees": [[129, "expression-trees"]], "Walking the Tree": [[129, "walking-the-tree"]], "Indexing": [[130, "indexing"]], "Reshape and Rearrange": [[130, "reshape-and-rearrange"]], "Algebraic Operations": [[130, "algebraic-operations"]], "Special Matrices": [[130, "special-matrices"]], "Advanced Methods": [[130, "advanced-methods"]], "Division": [[131, "division"]], "GCD and LCM": [[131, "gcd-and-lcm"]], "Square-free factorization": [[131, "square-free-factorization"]], "Factorization": [[131, "factorization"]], "Gr\u00f6bner bases": [[131, "grobner-bases"]], "Str": [[132, "str"]], "Repr": [[132, "repr"]], "2D Pretty Printer": [[132, "d-pretty-printer"]], "LaTeX": [[132, "latex"]], "Dot": [[132, "dot"]], "Simplification": [[133, "simplification"]], "Rational Functions": [[133, "rational-functions"]], "Powers and Logarithms": [[133, "powers-and-logarithms"]], "Special Functions": [[133, "special-functions"]], "CSE": [[133, "cse"]], "Algebraic Equations": [[134, "algebraic-equations"]], "Differential Equations": [[134, "differential-equations"]]}, "indexentries": {"--auto-symbols": [[1, "cmdoption-python-m-diofant-a"]], "--help": [[1, "cmdoption-python-m-diofant-h"]], "--no-ipython": [[1, "cmdoption-python-m-diofant-no-ipython"]], "--no-wrap-division": [[1, "cmdoption-python-m-diofant-no-wrap-division"]], "-a": [[1, "cmdoption-python-m-diofant-a"]], "-h": [[1, "cmdoption-python-m-diofant-h"]], "python--m-diofant command line option": [[1, "cmdoption-python-m-diofant-a"], [1, "cmdoption-python-m-diofant-h"], [1, "cmdoption-python-m-diofant-no-ipython"], [1, "cmdoption-python-m-diofant-no-wrap-division"]], "diofant.integrals.meijerint_doc": [[6, "module-diofant.integrals.meijerint_doc"]], "module": [[6, "module-diofant.integrals.meijerint_doc"], [7, "module-diofant.calculus.gruntz"], [8, "module-diofant.simplify.hyperexpand_doc"], [10, "module-diofant.polys.euclidtools"], [10, "module-diofant.polys.factorization_alg_field"], [10, "module-diofant.polys.factortools"], [10, "module-diofant.polys.groebnertools"], [10, "module-diofant.polys.modulargcd"], [10, "module-diofant.polys.polyerrors"], [10, "module-diofant.polys.polyoptions"], [10, "module-diofant.polys.rootisolation"], [10, "module-diofant.polys.sqfreetools"], [11, "module-diofant.calculus"], [11, "module-diofant.calculus.limits"], [11, "module-diofant.calculus.optimization"], [11, "module-diofant.calculus.order"], [11, "module-diofant.calculus.residues"], [11, "module-diofant.calculus.singularities"], [12, "module-diofant.combinatorics.graycode"], [13, "module-diofant.combinatorics.group_constructs"], [15, "module-diofant.combinatorics.named_groups"], [16, "module-diofant.combinatorics.partitions"], [17, "module-diofant.combinatorics.perm_groups"], [18, "module-diofant.combinatorics.generators"], [18, "module-diofant.combinatorics.permutations"], [19, "module-diofant.combinatorics.polyhedron"], [20, "module-diofant.combinatorics.prufer"], [21, "module-diofant.combinatorics.subsets"], [22, "module-diofant.combinatorics.tensor_can"], [23, "module-diofant.combinatorics.testutil"], [24, "module-diofant.combinatorics.util"], [26, "module-diofant.config"], [27, "module-diofant.core"], [27, "module-diofant.core.add"], [27, "module-diofant.core.assumptions"], [27, "module-diofant.core.basic"], [27, "module-diofant.core.cache"], [27, "module-diofant.core.compatibility"], [27, "module-diofant.core.containers"], [27, "module-diofant.core.core"], [27, "module-diofant.core.evalf"], [27, "module-diofant.core.evaluate"], [27, "module-diofant.core.expr"], [27, "module-diofant.core.exprtools"], [27, "module-diofant.core.function"], [27, "module-diofant.core.mod"], [27, "module-diofant.core.mul"], [27, "module-diofant.core.multidimensional"], [27, "module-diofant.core.numbers"], [27, "module-diofant.core.power"], [27, "module-diofant.core.relational"], [27, "module-diofant.core.singleton"], [27, "module-diofant.core.symbol"], [27, "module-diofant.core.sympify"], [28, "module-diofant.diffgeom"], [29, "module-diofant.domains"], [32, "module-diofant.functions"], [33, "module-diofant.functions.special.bessel"], [33, "module-diofant.functions.special.beta_functions"], [33, "module-diofant.functions.special.elliptic_integrals"], [33, "module-diofant.functions.special.error_functions"], [33, "module-diofant.functions.special.gamma_functions"], [33, "module-diofant.functions.special.polynomials"], [33, "module-diofant.functions.special.zeta_functions"], [34, "module-diofant.geometry.curve"], [35, "module-diofant.geometry.ellipse"], [36, "module-diofant.geometry.entity"], [37, "module-diofant.geometry"], [38, "module-diofant.geometry.line"], [39, "module-diofant.geometry.point"], [40, "module-diofant.geometry.polygon"], [41, "module-diofant.geometry.exceptions"], [41, "module-diofant.geometry.util"], [42, "module-diofant"], [43, "module-diofant.integrals"], [43, "module-diofant.integrals.quadrature"], [43, "module-diofant.integrals.transforms"], [44, "module-diofant.interactive"], [44, "module-diofant.interactive.printing"], [44, "module-diofant.interactive.session"], [45, "module-diofant.logic"], [46, "module-diofant.matrices.dense"], [47, "module-diofant.matrices.expressions"], [47, "module-diofant.matrices.expressions.blockmatrix"], [48, "module-diofant.matrices.immutable"], [49, "module-diofant.matrices"], [50, "module-diofant.matrices.matrices"], [51, "module-diofant.matrices.sparse"], [52, "module-diofant.ntheory.continued_fraction"], [52, "module-diofant.ntheory.egyptian_fraction"], [52, "module-diofant.ntheory.factor_"], [52, "module-diofant.ntheory.generate"], [52, "module-diofant.ntheory.modular"], [52, "module-diofant.ntheory.multinomial"], [52, "module-diofant.ntheory.partitions_"], [52, "module-diofant.ntheory.primetest"], [52, "module-diofant.ntheory.residue_ntheory"], [53, "module-diofant.parsing"], [54, "module-diofant.plotting"], [55, "module-diofant.polys"], [55, "module-diofant.polys.constructor"], [55, "module-diofant.polys.monomials"], [55, "module-diofant.polys.numberfields"], [55, "module-diofant.polys.orderings"], [55, "module-diofant.polys.orthopolys"], [55, "module-diofant.polys.partfrac"], [55, "module-diofant.polys.polyfuncs"], [55, "module-diofant.polys.polyroots"], [55, "module-diofant.polys.polytools"], [55, "module-diofant.polys.rationaltools"], [55, "module-diofant.polys.rootoftools"], [55, "module-diofant.polys.specialpolys"], [56, "module-diofant.printing"], [56, "module-diofant.printing.ccode"], [56, "module-diofant.printing.codeprinter"], [56, "module-diofant.printing.conventions"], [56, "module-diofant.printing.fcode"], [56, "module-diofant.printing.lambdarepr"], [56, "module-diofant.printing.latex"], [56, "module-diofant.printing.mathematica"], [56, "module-diofant.printing.mathml"], [56, "module-diofant.printing.precedence"], [56, "module-diofant.printing.pretty.pretty"], [56, "module-diofant.printing.pretty.pretty_symbology"], [56, "module-diofant.printing.pretty.stringpict"], [56, "module-diofant.printing.printer"], [56, "module-diofant.printing.python"], [56, "module-diofant.printing.repr"], [56, "module-diofant.printing.str"], [57, "module-diofant.sets.fancysets"], [57, "module-diofant.sets.sets"], [58, "module-diofant.simplify.combsimp"], [58, "module-diofant.simplify.cse_main"], [58, "module-diofant.simplify.epathtools"], [58, "module-diofant.simplify.fu"], [58, "module-diofant.simplify.hyperexpand"], [58, "module-diofant.simplify.powsimp"], [58, "module-diofant.simplify.radsimp"], [58, "module-diofant.simplify.ratsimp"], [58, "module-diofant.simplify.sqrtdenest"], [58, "module-diofant.simplify.traversaltools"], [58, "module-diofant.simplify.trigsimp"], [59, "module-diofant.solvers.diophantine"], [60, "module-diofant.solvers"], [61, "module-diofant.solvers.inequalities"], [62, "module-diofant.solvers.ode"], [63, "module-diofant.solvers.pde"], [64, "module-diofant.solvers.recurr"], [65, "module-diofant.solvers.polysys"], [65, "module-diofant.solvers.solvers"], [66, "module-diofant.solvers.deutils"], [66, "module-diofant.solvers.utils"], [67, "module-diofant.stats"], [67, "module-diofant.stats.crv"], [67, "module-diofant.stats.crv_types"], [67, "module-diofant.stats.frv"], [67, "module-diofant.stats.frv_types"], [67, "module-diofant.stats.rv"], [68, "module-diofant.tensor.array"], [69, "module-diofant.tensor"], [70, "module-diofant.tensor.index_methods"], [71, "module-diofant.tensor.indexed"], [72, "module-diofant.tensor.tensor"], [73, "module-diofant.utilities.autowrap"], [74, "module-diofant.utilities.codegen"], [75, "module-diofant.utilities.decorator"], [76, "module-diofant.utilities.enumerative"], [77, "module-diofant.utilities"], [78, "module-diofant.utilities.iterables"], [79, "module-diofant.utilities.lambdify"], [80, "module-diofant.utilities.memoization"], [81, "module-diofant.utilities.misc"], [82, "module-diofant.utilities.randtest"]], "compare() (in module diofant.calculus.gruntz)": [[7, "diofant.calculus.gruntz.compare"]], "diofant.calculus.gruntz": [[7, "module-diofant.calculus.gruntz"]], "leadterm() (in module diofant.calculus.gruntz)": [[7, "diofant.calculus.gruntz.leadterm"]], "limitinf() (in module diofant.calculus.gruntz)": [[7, "diofant.calculus.gruntz.limitinf"]], "mrv() (in module diofant.calculus.gruntz)": [[7, "diofant.calculus.gruntz.mrv"]], "rewrite() (in module diofant.calculus.gruntz)": [[7, "diofant.calculus.gruntz.rewrite"]], "signinf() (in module diofant.calculus.gruntz)": [[7, "diofant.calculus.gruntz.signinf"]], "add_formulae() (in module diofant.simplify.hyperexpand)": [[8, "diofant.simplify.hyperexpand.add_formulae"]], "diofant.simplify.hyperexpand_doc": [[8, "module-diofant.simplify.hyperexpand_doc"]], "basepolynomialerror": [[10, "diofant.polys.polyerrors.BasePolynomialError"]], "coercionfailederror": [[10, "diofant.polys.polyerrors.CoercionFailedError"]], "complexinterval (class in diofant.polys.rootisolation)": [[10, "diofant.polys.rootisolation.ComplexInterval"]], "computationfailederror": [[10, "diofant.polys.polyerrors.ComputationFailedError"]], "domainerror": [[10, "diofant.polys.polyerrors.DomainError"]], "evaluationfailederror": [[10, "diofant.polys.polyerrors.EvaluationFailedError"]], "exactquotientfailederror": [[10, "diofant.polys.polyerrors.ExactQuotientFailedError"]], "extraneousfactorserror": [[10, "diofant.polys.polyerrors.ExtraneousFactorsError"]], "flagerror": [[10, "diofant.polys.polyerrors.FlagError"]], "fracelement (class in diofant.polys.fields)": [[10, "diofant.polys.fields.FracElement"]], "generatorserror": [[10, "diofant.polys.polyerrors.GeneratorsError"]], "generatorsneedederror": [[10, "diofant.polys.polyerrors.GeneratorsNeededError"]], "heuristicgcdfailederror": [[10, "diofant.polys.polyerrors.HeuristicGCDFailedError"]], "homomorphismfailederror": [[10, "diofant.polys.polyerrors.HomomorphismFailedError"]], "isomorphismfailederror": [[10, "diofant.polys.polyerrors.IsomorphismFailedError"]], "modulargcdfailederror": [[10, "diofant.polys.polyerrors.ModularGCDFailedError"]], "multivariatepolynomialerror": [[10, "diofant.polys.polyerrors.MultivariatePolynomialError"]], "notalgebraicerror": [[10, "diofant.polys.polyerrors.NotAlgebraicError"]], "notinvertibleerror": [[10, "diofant.polys.polyerrors.NotInvertibleError"]], "notreversibleerror": [[10, "diofant.polys.polyerrors.NotReversibleError"]], "operationnotsupportederror": [[10, "diofant.polys.polyerrors.OperationNotSupportedError"]], "optionerror": [[10, "diofant.polys.polyerrors.OptionError"]], "options (class in diofant.polys.polyoptions)": [[10, "diofant.polys.polyoptions.Options"]], "order (class in diofant.polys.polyoptions)": [[10, "diofant.polys.polyoptions.Order"]], "polificationfailederror": [[10, "diofant.polys.polyerrors.PolificationFailedError"]], "polyelement (class in diofant.polys.rings)": [[10, "diofant.polys.rings.PolyElement"]], "polynomialdivisionfailederror": [[10, "diofant.polys.polyerrors.PolynomialDivisionFailedError"]], "polynomialerror": [[10, "diofant.polys.polyerrors.PolynomialError"]], "realinterval (class in diofant.polys.rootisolation)": [[10, "diofant.polys.rootisolation.RealInterval"]], "refinementfailederror": [[10, "diofant.polys.polyerrors.RefinementFailedError"]], "unificationfailederror": [[10, "diofant.polys.polyerrors.UnificationFailedError"]], "univarpolyelement (class in diofant.polys.univar)": [[10, "diofant.polys.univar.UnivarPolyElement"]], "univariatepolynomialerror": [[10, "diofant.polys.polyerrors.UnivariatePolynomialError"]], "unluckyleadingcoefficienterror": [[10, "diofant.polys.polyerrors.UnluckyLeadingCoefficientError"]], "__add__() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.__add__"]], "__eq__() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.__eq__"]], "__getitem__() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.__getitem__"]], "__mul__() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.__mul__"]], "__pow__() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.__pow__"]], "__rmul__() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.__rmul__"]], "__rsub__() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.__rsub__"]], "__sub__() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.__sub__"]], "__weakref__ (diofant.polys.rings.polyelement attribute)": [[10, "diofant.polys.rings.PolyElement.__weakref__"]], "_alpha_to_z() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._alpha_to_z"]], "_chinese_remainder_reconstruction() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._chinese_remainder_reconstruction"]], "_denominator() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._denominator"]], "_diophantine() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._diophantine"]], "_diophantine_univariate() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._diophantine_univariate"]], "_distinct_prime_divisors() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._distinct_prime_divisors"]], "_div() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._div"]], "_euclidean_algorithm() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._euclidean_algorithm"]], "_evaluate_ground() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._evaluate_ground"]], "_extended_euclidean_algorithm() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._extended_euclidean_algorithm"]], "_factor() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._factor"]], "_func_field_modgcd_m() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._func_field_modgcd_m"]], "_func_field_modgcd_p() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._func_field_modgcd_p"]], "_gf_gcdex() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._gf_gcdex"]], "_hensel_lift() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._hensel_lift"]], "_interpolate() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._interpolate"]], "_leading_coeffs() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._leading_coeffs"]], "_minpoly_from_dense() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._minpoly_from_dense"]], "_modgcd_p() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._modgcd_p"]], "_monic_associate() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._monic_associate"]], "_padic_lift() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._padic_lift"]], "_primitive_in_x0() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._primitive_in_x0"]], "_rational_function_reconstruction() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._rational_function_reconstruction"]], "_rational_reconstruction_func_coeffs() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._rational_reconstruction_func_coeffs"]], "_rational_reconstruction_int_coeffs() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._rational_reconstruction_int_coeffs"]], "_sqf_p() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._sqf_p"]], "_subs_ground() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._subs_ground"]], "_test_evaluation_points() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._test_evaluation_points"]], "_test_prime() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._test_prime"]], "_to_anp_poly() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._to_ANP_poly"]], "_to_zz_poly() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._to_ZZ_poly"]], "_trunc() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd._trunc"]], "_z_to_alpha() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field._z_to_alpha"]], "_zz_heu_gcd() (diofant.polys.euclidtools._gcd method)": [[10, "diofant.polys.euclidtools._GCD._zz_heu_gcd"]], "a (diofant.polys.rootisolation.realinterval property)": [[10, "diofant.polys.rootisolation.RealInterval.a"]], "as_tuple() (diofant.polys.rootisolation.complexinterval method)": [[10, "diofant.polys.rootisolation.ComplexInterval.as_tuple"]], "as_tuple() (diofant.polys.rootisolation.realinterval method)": [[10, "diofant.polys.rootisolation.RealInterval.as_tuple"]], "ax (diofant.polys.rootisolation.complexinterval property)": [[10, "diofant.polys.rootisolation.ComplexInterval.ax"]], "ay (diofant.polys.rootisolation.complexinterval property)": [[10, "diofant.polys.rootisolation.ComplexInterval.ay"]], "b (diofant.polys.rootisolation.realinterval property)": [[10, "diofant.polys.rootisolation.RealInterval.b"]], "buchberger() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.buchberger"]], "bx (diofant.polys.rootisolation.complexinterval property)": [[10, "diofant.polys.rootisolation.ComplexInterval.bx"]], "by (diofant.polys.rootisolation.complexinterval property)": [[10, "diofant.polys.rootisolation.ComplexInterval.by"]], "cancel() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.cancel"]], "center (diofant.polys.rootisolation.complexinterval property)": [[10, "diofant.polys.rootisolation.ComplexInterval.center"]], "center (diofant.polys.rootisolation.realinterval property)": [[10, "diofant.polys.rootisolation.RealInterval.center"]], "clone() (diofant.polys.polyoptions.options method)": [[10, "diofant.polys.polyoptions.Options.clone"]], "compose() (diofant.polys.fields.fracelement method)": [[10, "diofant.polys.fields.FracElement.compose"]], "compose() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.compose"]], "conjugate() (diofant.polys.rootisolation.complexinterval method)": [[10, "diofant.polys.rootisolation.ComplexInterval.conjugate"]], "content() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.content"]], "copy() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.copy"]], "cp_key() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.cp_key"]], "critical_pair() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.critical_pair"]], "decompose() (diofant.polys.univar.univarpolyelement method)": [[10, "diofant.polys.univar.UnivarPolyElement.decompose"]], "degree() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.degree"]], "diff() (diofant.polys.fields.fracelement method)": [[10, "diofant.polys.fields.FracElement.diff"]], "diff() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.diff"]], "diofant.polys.euclidtools": [[10, "module-diofant.polys.euclidtools"]], "diofant.polys.factorization_alg_field": [[10, "module-diofant.polys.factorization_alg_field"]], "diofant.polys.factortools": [[10, "module-diofant.polys.factortools"]], "diofant.polys.groebnertools": [[10, "module-diofant.polys.groebnertools"]], "diofant.polys.modulargcd": [[10, "module-diofant.polys.modulargcd"]], "diofant.polys.polyerrors": [[10, "module-diofant.polys.polyerrors"]], "diofant.polys.polyoptions": [[10, "module-diofant.polys.polyoptions"]], "diofant.polys.rootisolation": [[10, "module-diofant.polys.rootisolation"]], "diofant.polys.sqfreetools": [[10, "module-diofant.polys.sqfreetools"]], "discriminant() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.discriminant"]], "div() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.div"]], "efactor() (in module diofant.polys.factorization_alg_field)": [[10, "diofant.polys.factorization_alg_field.efactor"]], "f5_reduce() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.f5_reduce"]], "f5b() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.f5b"]], "func_field_modgcd() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd.func_field_modgcd"]], "gcdex() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.gcdex"]], "groebner() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.groebner"]], "groebner_gcd() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.groebner_gcd"]], "groebner_lcm() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.groebner_lcm"]], "half_gcdex() (diofant.polys.univar.univarpolyelement method)": [[10, "diofant.polys.univar.UnivarPolyElement.half_gcdex"]], "integrate() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.integrate"]], "is_disjoint() (diofant.polys.rootisolation.complexinterval method)": [[10, "diofant.polys.rootisolation.ComplexInterval.is_disjoint"]], "is_disjoint() (diofant.polys.rootisolation.realinterval method)": [[10, "diofant.polys.rootisolation.RealInterval.is_disjoint"]], "is_groebner() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.is_groebner"]], "is_minimal() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.is_minimal"]], "is_rewritable_or_comparable() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.is_rewritable_or_comparable"]], "lbp_cmp() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.lbp_cmp"]], "lbp_key() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.lbp_key"]], "lbp_mul_term() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.lbp_mul_term"]], "lbp_sub() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.lbp_sub"]], "leading_expv() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.leading_expv"]], "leading_term() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.leading_term"]], "matrix_fglm() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.matrix_fglm"]], "minpoly_groebner() (in module diofant.polys.numberfields)": [[10, "diofant.polys.numberfields.minpoly_groebner"]], "modgcd() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd.modgcd"]], "monic() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.monic"]], "prem() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.prem"]], "primitive() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.primitive"]], "red_groebner() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.red_groebner"]], "refine() (diofant.polys.rootisolation.complexinterval method)": [[10, "diofant.polys.rootisolation.ComplexInterval.refine"]], "refine() (diofant.polys.rootisolation.realinterval method)": [[10, "diofant.polys.rootisolation.RealInterval.refine"]], "resultant() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.resultant"]], "ring() (in module diofant.polys.rings)": [[10, "diofant.polys.rings.ring"]], "s_poly() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.s_poly"]], "sig_cmp() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.sig_cmp"]], "sig_key() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.sig_key"]], "sig_mult() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.sig_mult"]], "spoly() (in module diofant.polys.groebnertools)": [[10, "diofant.polys.groebnertools.spoly"]], "sturm() (diofant.polys.univar.univarpolyelement method)": [[10, "diofant.polys.univar.UnivarPolyElement.sturm"]], "subresultants() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.subresultants"]], "tail_degree() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.tail_degree"]], "total_degree() (diofant.polys.rings.polyelement method)": [[10, "diofant.polys.rings.PolyElement.total_degree"]], "trial_division() (in module diofant.polys.modulargcd)": [[10, "diofant.polys.modulargcd.trial_division"]], "limit (class in diofant.calculus.limits)": [[11, "diofant.calculus.limits.Limit"]], "o (in module diofant.calculus.order)": [[11, "diofant.calculus.order.O"]], "order (class in diofant.calculus.order)": [[11, "diofant.calculus.order.Order"]], "contains() (diofant.calculus.order.order method)": [[11, "diofant.calculus.order.Order.contains"]], "diofant.calculus": [[11, "module-diofant.calculus"]], "diofant.calculus.limits": [[11, "module-diofant.calculus.limits"]], "diofant.calculus.optimization": [[11, "module-diofant.calculus.optimization"]], "diofant.calculus.order": [[11, "module-diofant.calculus.order"]], "diofant.calculus.residues": [[11, "module-diofant.calculus.residues"]], "diofant.calculus.singularities": [[11, "module-diofant.calculus.singularities"]], "doit() (diofant.calculus.limits.limit method)": [[11, "diofant.calculus.limits.Limit.doit"]], "limit() (in module diofant.calculus.limits)": [[11, "diofant.calculus.limits.limit"]], "maximize() (in module diofant.calculus.optimization)": [[11, "diofant.calculus.optimization.maximize"]], "minimize() (in module diofant.calculus.optimization)": [[11, "diofant.calculus.optimization.minimize"]], "residue() (in module diofant.calculus.residues)": [[11, "diofant.calculus.residues.residue"]], "singularities() (in module diofant.calculus.singularities)": [[11, "diofant.calculus.singularities.singularities"]], "graycode (class in diofant.combinatorics.graycode)": [[12, "diofant.combinatorics.graycode.GrayCode"]], "bin_to_gray() (diofant.combinatorics.graycode method)": [[12, "diofant.combinatorics.graycode.bin_to_gray"]], "current (diofant.combinatorics.graycode.graycode property)": [[12, "diofant.combinatorics.graycode.GrayCode.current"]], "diofant.combinatorics.graycode": [[12, "module-diofant.combinatorics.graycode"]], "generate_gray() (diofant.combinatorics.graycode.graycode method)": [[12, "diofant.combinatorics.graycode.GrayCode.generate_gray"]], "get_subset_from_bitstring() (diofant.combinatorics.graycode method)": [[12, "diofant.combinatorics.graycode.get_subset_from_bitstring"]], "gray_to_bin() (diofant.combinatorics.graycode method)": [[12, "diofant.combinatorics.graycode.gray_to_bin"]], "graycode_subsets() (diofant.combinatorics.graycode method)": [[12, "diofant.combinatorics.graycode.graycode_subsets"]], "n (diofant.combinatorics.graycode.graycode property)": [[12, "diofant.combinatorics.graycode.GrayCode.n"]], "next() (diofant.combinatorics.graycode.graycode method)": [[12, "diofant.combinatorics.graycode.GrayCode.next"]], "random_bitstring() (diofant.combinatorics.graycode method)": [[12, "diofant.combinatorics.graycode.random_bitstring"]], "rank (diofant.combinatorics.graycode.graycode property)": [[12, "diofant.combinatorics.graycode.GrayCode.rank"]], "selections (diofant.combinatorics.graycode.graycode property)": [[12, "diofant.combinatorics.graycode.GrayCode.selections"]], "skip() (diofant.combinatorics.graycode.graycode method)": [[12, "diofant.combinatorics.graycode.GrayCode.skip"]], "unrank() (diofant.combinatorics.graycode.graycode class method)": [[12, "diofant.combinatorics.graycode.GrayCode.unrank"]], "directproduct() (in module diofant.combinatorics.group_constructs)": [[13, "diofant.combinatorics.group_constructs.DirectProduct"]], "diofant.combinatorics.group_constructs": [[13, "module-diofant.combinatorics.group_constructs"]], "abeliangroup() (in module diofant.combinatorics.named_groups)": [[15, "diofant.combinatorics.named_groups.AbelianGroup"]], "alternatinggroup() (in module diofant.combinatorics.named_groups)": [[15, "diofant.combinatorics.named_groups.AlternatingGroup"]], "cyclicgroup() (in module diofant.combinatorics.named_groups)": [[15, "diofant.combinatorics.named_groups.CyclicGroup"]], "dihedralgroup() (in module diofant.combinatorics.named_groups)": [[15, "diofant.combinatorics.named_groups.DihedralGroup"]], "symmetricgroup() (in module diofant.combinatorics.named_groups)": [[15, "diofant.combinatorics.named_groups.SymmetricGroup"]], "diofant.combinatorics.named_groups": [[15, "module-diofant.combinatorics.named_groups"]], "integerpartition (class in diofant.combinatorics.partitions)": [[16, "diofant.combinatorics.partitions.IntegerPartition"]], "partition (class in diofant.combinatorics.partitions)": [[16, "diofant.combinatorics.partitions.Partition"]], "rgs (diofant.combinatorics.partitions.partition property)": [[16, "diofant.combinatorics.partitions.Partition.RGS"]], "rgs_enum() (in module diofant.combinatorics.partitions)": [[16, "diofant.combinatorics.partitions.RGS_enum"]], "rgs_generalized() (in module diofant.combinatorics.partitions)": [[16, "diofant.combinatorics.partitions.RGS_generalized"]], "rgs_rank() (in module diofant.combinatorics.partitions)": [[16, "diofant.combinatorics.partitions.RGS_rank"]], "rgs_unrank() (in module diofant.combinatorics.partitions)": [[16, "diofant.combinatorics.partitions.RGS_unrank"]], "as_dict() (diofant.combinatorics.partitions.integerpartition method)": [[16, "diofant.combinatorics.partitions.IntegerPartition.as_dict"]], "as_ferrers() (diofant.combinatorics.partitions.integerpartition method)": [[16, "diofant.combinatorics.partitions.IntegerPartition.as_ferrers"]], "conjugate (diofant.combinatorics.partitions.integerpartition property)": [[16, "diofant.combinatorics.partitions.IntegerPartition.conjugate"]], "diofant.combinatorics.partitions": [[16, "module-diofant.combinatorics.partitions"]], "from_rgs() (diofant.combinatorics.partitions.partition class method)": [[16, "diofant.combinatorics.partitions.Partition.from_rgs"]], "next_lex() (diofant.combinatorics.partitions.integerpartition method)": [[16, "diofant.combinatorics.partitions.IntegerPartition.next_lex"]], "partition (diofant.combinatorics.partitions.partition property)": [[16, "diofant.combinatorics.partitions.Partition.partition"]], "prev_lex() (diofant.combinatorics.partitions.integerpartition method)": [[16, "diofant.combinatorics.partitions.IntegerPartition.prev_lex"]], "random_integer_partition() (in module diofant.combinatorics.partitions)": [[16, "diofant.combinatorics.partitions.random_integer_partition"]], "rank (diofant.combinatorics.partitions.partition property)": [[16, "diofant.combinatorics.partitions.Partition.rank"]], "sort_key() (diofant.combinatorics.partitions.partition method)": [[16, "diofant.combinatorics.partitions.Partition.sort_key"]], "permutationgroup (class in diofant.combinatorics.perm_groups)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup"]], "__contains__() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.__contains__"]], "__eq__() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.__eq__"]], "__mul__() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.__mul__"]], "__new__() (diofant.combinatorics.perm_groups.permutationgroup static method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.__new__"]], "_union_find_merge() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup._union_find_merge"]], "_union_find_rep() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup._union_find_rep"]], "base (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.base"]], "baseswap() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.baseswap"]], "basic_orbits (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.basic_orbits"]], "basic_stabilizers (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.basic_stabilizers"]], "basic_transversals (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.basic_transversals"]], "center() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.center"]], "centralizer() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.centralizer"]], "commutator() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.commutator"]], "contains() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.contains"]], "coset_factor() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.coset_factor"]], "coset_rank() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.coset_rank"]], "coset_unrank() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.coset_unrank"]], "degree (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.degree"]], "derived_series() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.derived_series"]], "derived_subgroup() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.derived_subgroup"]], "diofant.combinatorics.perm_groups": [[17, "module-diofant.combinatorics.perm_groups"]], "elements (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.elements"]], "generate() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.generate"]], "generate_dimino() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.generate_dimino"]], "generate_schreier_sims() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.generate_schreier_sims"]], "generators (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.generators"]], "is_abelian (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.is_abelian"]], "is_alt_sym() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.is_alt_sym"]], "is_nilpotent (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.is_nilpotent"]], "is_normal() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.is_normal"]], "is_primitive() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.is_primitive"]], "is_solvable (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.is_solvable"]], "is_subgroup() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.is_subgroup"]], "is_transitive() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.is_transitive"]], "is_trivial (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.is_trivial"]], "lower_central_series() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.lower_central_series"]], "make_perm() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.make_perm"]], "max_div (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.max_div"]], "minimal_block() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.minimal_block"]], "normal_closure() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.normal_closure"]], "orbit() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.orbit"]], "orbit_rep() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.orbit_rep"]], "orbit_transversal() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.orbit_transversal"]], "orbits() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.orbits"]], "order() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.order"]], "pointwise_stabilizer() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.pointwise_stabilizer"]], "random() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.random"]], "random_pr() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.random_pr"]], "random_stab() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.random_stab"]], "schreier_sims() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.schreier_sims"]], "schreier_sims_incremental() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.schreier_sims_incremental"]], "schreier_sims_random() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.schreier_sims_random"]], "schreier_vector() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.schreier_vector"]], "stabilizer() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.stabilizer"]], "strong_gens (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.strong_gens"]], "subgroup_search() (diofant.combinatorics.perm_groups.permutationgroup method)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.subgroup_search"]], "transitivity_degree (diofant.combinatorics.perm_groups.permutationgroup property)": [[17, "diofant.combinatorics.perm_groups.PermutationGroup.transitivity_degree"]], "cycle (class in diofant.combinatorics.permutations)": [[18, "diofant.combinatorics.permutations.Cycle"]], "permutation (class in diofant.combinatorics.permutations)": [[18, "diofant.combinatorics.permutations.Permutation"]], "_af_parity() (in module diofant.combinatorics.permutations)": [[18, "diofant.combinatorics.permutations._af_parity"]], "alternating() (diofant.combinatorics.generators method)": [[18, "diofant.combinatorics.generators.alternating"]], "array_form (diofant.combinatorics.permutations.permutation property)": [[18, "diofant.combinatorics.permutations.Permutation.array_form"]], "ascents() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.ascents"]], "atoms() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.atoms"]], "cardinality (diofant.combinatorics.permutations.permutation property)": [[18, "diofant.combinatorics.permutations.Permutation.cardinality"]], "commutator() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.commutator"]], "commutes_with() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.commutes_with"]], "cycle_structure (diofant.combinatorics.permutations.permutation property)": [[18, "diofant.combinatorics.permutations.Permutation.cycle_structure"]], "cycles (diofant.combinatorics.permutations.permutation property)": [[18, "diofant.combinatorics.permutations.Permutation.cycles"]], "cyclic() (diofant.combinatorics.generators method)": [[18, "diofant.combinatorics.generators.cyclic"]], "cyclic_form (diofant.combinatorics.permutations.permutation property)": [[18, "diofant.combinatorics.permutations.Permutation.cyclic_form"]], "descents() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.descents"]], "dihedral() (diofant.combinatorics.generators method)": [[18, "diofant.combinatorics.generators.dihedral"]], "diofant.combinatorics.generators": [[18, "module-diofant.combinatorics.generators"]], "diofant.combinatorics.permutations": [[18, "module-diofant.combinatorics.permutations"]], "from_inversion_vector() (diofant.combinatorics.permutations.permutation class method)": [[18, "diofant.combinatorics.permutations.Permutation.from_inversion_vector"]], "from_sequence() (diofant.combinatorics.permutations.permutation class method)": [[18, "diofant.combinatorics.permutations.Permutation.from_sequence"]], "full_cyclic_form (diofant.combinatorics.permutations.permutation property)": [[18, "diofant.combinatorics.permutations.Permutation.full_cyclic_form"]], "get_adjacency_distance() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.get_adjacency_distance"]], "get_adjacency_matrix() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.get_adjacency_matrix"]], "get_positional_distance() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.get_positional_distance"]], "get_precedence_distance() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.get_precedence_distance"]], "get_precedence_matrix() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.get_precedence_matrix"]], "index() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.index"]], "inversion_vector() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.inversion_vector"]], "inversions() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.inversions"]], "is_empty (diofant.combinatorics.permutations.permutation property)": [[18, "diofant.combinatorics.permutations.Permutation.is_Empty"]], "is_identity (diofant.combinatorics.permutations.permutation property)": [[18, "diofant.combinatorics.permutations.Permutation.is_Identity"]], "is_singleton (diofant.combinatorics.permutations.permutation property)": [[18, "diofant.combinatorics.permutations.Permutation.is_Singleton"]], "is_even (diofant.combinatorics.permutations.permutation property)": [[18, "diofant.combinatorics.permutations.Permutation.is_even"]], "is_odd (diofant.combinatorics.permutations.permutation property)": [[18, "diofant.combinatorics.permutations.Permutation.is_odd"]], "josephus() (diofant.combinatorics.permutations.permutation class method)": [[18, "diofant.combinatorics.permutations.Permutation.josephus"]], "length() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.length"]], "list() (diofant.combinatorics.permutations.cycle method)": [[18, "diofant.combinatorics.permutations.Cycle.list"]], "list() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.list"]], "max() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.max"]], "min() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.min"]], "mul_inv() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.mul_inv"]], "next_lex() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.next_lex"]], "next_nonlex() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.next_nonlex"]], "next_trotterjohnson() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.next_trotterjohnson"]], "order() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.order"]], "parity() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.parity"]], "random() (diofant.combinatorics.permutations.permutation class method)": [[18, "diofant.combinatorics.permutations.Permutation.random"]], "rank() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.rank"]], "rank_nonlex() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.rank_nonlex"]], "rank_trotterjohnson() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.rank_trotterjohnson"]], "rmul() (diofant.combinatorics.permutations.permutation static method)": [[18, "diofant.combinatorics.permutations.Permutation.rmul"]], "rmul_with_af() (diofant.combinatorics.permutations.permutation static method)": [[18, "diofant.combinatorics.permutations.Permutation.rmul_with_af"]], "runs() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.runs"]], "signature() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.signature"]], "size (diofant.combinatorics.permutations.permutation property)": [[18, "diofant.combinatorics.permutations.Permutation.size"]], "support() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.support"]], "symmetric() (diofant.combinatorics.generators method)": [[18, "diofant.combinatorics.generators.symmetric"]], "transpositions() (diofant.combinatorics.permutations.permutation method)": [[18, "diofant.combinatorics.permutations.Permutation.transpositions"]], "unrank_lex() (diofant.combinatorics.permutations.permutation class method)": [[18, "diofant.combinatorics.permutations.Permutation.unrank_lex"]], "unrank_nonlex() (diofant.combinatorics.permutations.permutation class method)": [[18, "diofant.combinatorics.permutations.Permutation.unrank_nonlex"]], "unrank_trotterjohnson() (diofant.combinatorics.permutations.permutation class method)": [[18, "diofant.combinatorics.permutations.Permutation.unrank_trotterjohnson"]], "polyhedron (class in diofant.combinatorics.polyhedron)": [[19, "diofant.combinatorics.polyhedron.Polyhedron"]], "array_form (diofant.combinatorics.polyhedron.polyhedron property)": [[19, "diofant.combinatorics.polyhedron.Polyhedron.array_form"]], "corners (diofant.combinatorics.polyhedron.polyhedron property)": [[19, "diofant.combinatorics.polyhedron.Polyhedron.corners"]], "cyclic_form (diofant.combinatorics.polyhedron.polyhedron property)": [[19, "diofant.combinatorics.polyhedron.Polyhedron.cyclic_form"]], "diofant.combinatorics.polyhedron": [[19, "module-diofant.combinatorics.polyhedron"]], "edges (diofant.combinatorics.polyhedron.polyhedron property)": [[19, "diofant.combinatorics.polyhedron.Polyhedron.edges"]], "faces (diofant.combinatorics.polyhedron.polyhedron property)": [[19, "diofant.combinatorics.polyhedron.Polyhedron.faces"]], "pgroup (diofant.combinatorics.polyhedron.polyhedron property)": [[19, "diofant.combinatorics.polyhedron.Polyhedron.pgroup"]], "reset() (diofant.combinatorics.polyhedron.polyhedron method)": [[19, "diofant.combinatorics.polyhedron.Polyhedron.reset"]], "rotate() (diofant.combinatorics.polyhedron.polyhedron method)": [[19, "diofant.combinatorics.polyhedron.Polyhedron.rotate"]], "size (diofant.combinatorics.polyhedron.polyhedron property)": [[19, "diofant.combinatorics.polyhedron.Polyhedron.size"]], "vertices (diofant.combinatorics.polyhedron.polyhedron property)": [[19, "diofant.combinatorics.polyhedron.Polyhedron.vertices"]], "prufer (class in diofant.combinatorics.prufer)": [[20, "diofant.combinatorics.prufer.Prufer"]], "diofant.combinatorics.prufer": [[20, "module-diofant.combinatorics.prufer"]], "edges() (diofant.combinatorics.prufer.prufer static method)": [[20, "diofant.combinatorics.prufer.Prufer.edges"]], "next() (diofant.combinatorics.prufer.prufer method)": [[20, "diofant.combinatorics.prufer.Prufer.next"]], "nodes (diofant.combinatorics.prufer.prufer property)": [[20, "diofant.combinatorics.prufer.Prufer.nodes"]], "prev() (diofant.combinatorics.prufer.prufer method)": [[20, "diofant.combinatorics.prufer.Prufer.prev"]], "prufer_rank() (diofant.combinatorics.prufer.prufer method)": [[20, "diofant.combinatorics.prufer.Prufer.prufer_rank"]], "prufer_repr (diofant.combinatorics.prufer.prufer property)": [[20, "diofant.combinatorics.prufer.Prufer.prufer_repr"]], "rank (diofant.combinatorics.prufer.prufer property)": [[20, "diofant.combinatorics.prufer.Prufer.rank"]], "size (diofant.combinatorics.prufer.prufer property)": [[20, "diofant.combinatorics.prufer.Prufer.size"]], "to_prufer() (diofant.combinatorics.prufer.prufer static method)": [[20, "diofant.combinatorics.prufer.Prufer.to_prufer"]], "to_tree() (diofant.combinatorics.prufer.prufer static method)": [[20, "diofant.combinatorics.prufer.Prufer.to_tree"]], "tree_repr (diofant.combinatorics.prufer.prufer property)": [[20, "diofant.combinatorics.prufer.Prufer.tree_repr"]], "unrank() (diofant.combinatorics.prufer.prufer class method)": [[20, "diofant.combinatorics.prufer.Prufer.unrank"]], "subset (class in diofant.combinatorics.subsets)": [[21, "diofant.combinatorics.subsets.Subset"]], "bitlist_from_subset() (diofant.combinatorics.subsets.subset class method)": [[21, "diofant.combinatorics.subsets.Subset.bitlist_from_subset"]], "cardinality (diofant.combinatorics.subsets.subset property)": [[21, "diofant.combinatorics.subsets.Subset.cardinality"]], "diofant.combinatorics.subsets": [[21, "module-diofant.combinatorics.subsets"]], "iterate_binary() (diofant.combinatorics.subsets.subset method)": [[21, "diofant.combinatorics.subsets.Subset.iterate_binary"]], "iterate_graycode() (diofant.combinatorics.subsets.subset method)": [[21, "diofant.combinatorics.subsets.Subset.iterate_graycode"]], "ksubsets() (diofant.combinatorics.subsets method)": [[21, "diofant.combinatorics.subsets.ksubsets"]], "next_binary() (diofant.combinatorics.subsets.subset method)": [[21, "diofant.combinatorics.subsets.Subset.next_binary"]], "next_gray() (diofant.combinatorics.subsets.subset method)": [[21, "diofant.combinatorics.subsets.Subset.next_gray"]], "next_lexicographic() (diofant.combinatorics.subsets.subset method)": [[21, "diofant.combinatorics.subsets.Subset.next_lexicographic"]], "prev_binary() (diofant.combinatorics.subsets.subset method)": [[21, "diofant.combinatorics.subsets.Subset.prev_binary"]], "prev_gray() (diofant.combinatorics.subsets.subset method)": [[21, "diofant.combinatorics.subsets.Subset.prev_gray"]], "prev_lexicographic() (diofant.combinatorics.subsets.subset method)": [[21, "diofant.combinatorics.subsets.Subset.prev_lexicographic"]], "rank_binary (diofant.combinatorics.subsets.subset property)": [[21, "diofant.combinatorics.subsets.Subset.rank_binary"]], "rank_gray (diofant.combinatorics.subsets.subset property)": [[21, "diofant.combinatorics.subsets.Subset.rank_gray"]], "rank_lexicographic (diofant.combinatorics.subsets.subset property)": [[21, "diofant.combinatorics.subsets.Subset.rank_lexicographic"]], "size (diofant.combinatorics.subsets.subset property)": [[21, "diofant.combinatorics.subsets.Subset.size"]], "subset (diofant.combinatorics.subsets.subset property)": [[21, "diofant.combinatorics.subsets.Subset.subset"]], "subset_from_bitlist() (diofant.combinatorics.subsets.subset class method)": [[21, "diofant.combinatorics.subsets.Subset.subset_from_bitlist"]], "subset_indices() (diofant.combinatorics.subsets.subset class method)": [[21, "diofant.combinatorics.subsets.Subset.subset_indices"]], "superset (diofant.combinatorics.subsets.subset property)": [[21, "diofant.combinatorics.subsets.Subset.superset"]], "superset_size (diofant.combinatorics.subsets.subset property)": [[21, "diofant.combinatorics.subsets.Subset.superset_size"]], "unrank_binary() (diofant.combinatorics.subsets.subset class method)": [[21, "diofant.combinatorics.subsets.Subset.unrank_binary"]], "unrank_gray() (diofant.combinatorics.subsets.subset class method)": [[21, "diofant.combinatorics.subsets.Subset.unrank_gray"]], "bsgs_direct_product() (in module diofant.combinatorics.tensor_can)": [[22, "diofant.combinatorics.tensor_can.bsgs_direct_product"]], "canonicalize() (in module diofant.combinatorics.tensor_can)": [[22, "diofant.combinatorics.tensor_can.canonicalize"]], "diofant.combinatorics.tensor_can": [[22, "module-diofant.combinatorics.tensor_can"]], "double_coset_can_rep() (in module diofant.combinatorics.tensor_can)": [[22, "diofant.combinatorics.tensor_can.double_coset_can_rep"]], "get_symmetric_group_sgs() (in module diofant.combinatorics.tensor_can)": [[22, "diofant.combinatorics.tensor_can.get_symmetric_group_sgs"]], "_cmp_perm_lists() (in module diofant.combinatorics.testutil)": [[23, "diofant.combinatorics.testutil._cmp_perm_lists"]], "_naive_list_centralizer() (in module diofant.combinatorics.testutil)": [[23, "diofant.combinatorics.testutil._naive_list_centralizer"]], "_verify_bsgs() (in module diofant.combinatorics.testutil)": [[23, "diofant.combinatorics.testutil._verify_bsgs"]], "_verify_centralizer() (in module diofant.combinatorics.testutil)": [[23, "diofant.combinatorics.testutil._verify_centralizer"]], "_verify_normal_closure() (in module diofant.combinatorics.testutil)": [[23, "diofant.combinatorics.testutil._verify_normal_closure"]], "diofant.combinatorics.testutil": [[23, "module-diofant.combinatorics.testutil"]], "_base_ordering() (in module diofant.combinatorics.util)": [[24, "diofant.combinatorics.util._base_ordering"]], "_check_cycles_alt_sym() (in module diofant.combinatorics.util)": [[24, "diofant.combinatorics.util._check_cycles_alt_sym"]], "_distribute_gens_by_base() (in module diofant.combinatorics.util)": [[24, "diofant.combinatorics.util._distribute_gens_by_base"]], "_handle_precomputed_bsgs() (in module diofant.combinatorics.util)": [[24, "diofant.combinatorics.util._handle_precomputed_bsgs"]], "_orbits_transversals_from_bsgs() (in module diofant.combinatorics.util)": [[24, "diofant.combinatorics.util._orbits_transversals_from_bsgs"]], "_remove_gens() (in module diofant.combinatorics.util)": [[24, "diofant.combinatorics.util._remove_gens"]], "_strip() (in module diofant.combinatorics.util)": [[24, "diofant.combinatorics.util._strip"]], "_strong_gens_from_distr() (in module diofant.combinatorics.util)": [[24, "diofant.combinatorics.util._strong_gens_from_distr"]], "diofant.combinatorics.util": [[24, "module-diofant.combinatorics.util"]], "exprwithintlimits (class in diofant.concrete.expr_with_intlimits)": [[25, "diofant.concrete.expr_with_intlimits.ExprWithIntLimits"]], "exprwithlimits (class in diofant.concrete.expr_with_limits)": [[25, "diofant.concrete.expr_with_limits.ExprWithLimits"]], "product (class in diofant.concrete.products)": [[25, "diofant.concrete.products.Product"]], "sum (class in diofant.concrete.summations)": [[25, "diofant.concrete.summations.Sum"]], "as_dummy() (diofant.concrete.expr_with_limits.exprwithlimits method)": [[25, "diofant.concrete.expr_with_limits.ExprWithLimits.as_dummy"]], "change_index() (diofant.concrete.expr_with_intlimits.exprwithintlimits method)": [[25, "diofant.concrete.expr_with_intlimits.ExprWithIntLimits.change_index"]], "euler_maclaurin() (diofant.concrete.summations.sum method)": [[25, "diofant.concrete.summations.Sum.euler_maclaurin"]], "findrecur() (diofant.concrete.summations.sum method)": [[25, "diofant.concrete.summations.Sum.findrecur"]], "free_symbols (diofant.concrete.expr_with_limits.exprwithlimits property)": [[25, "diofant.concrete.expr_with_limits.ExprWithLimits.free_symbols"]], "function (diofant.concrete.expr_with_limits.exprwithlimits property)": [[25, "diofant.concrete.expr_with_limits.ExprWithLimits.function"]], "gosper_normal() (in module diofant.concrete.gosper)": [[25, "diofant.concrete.gosper.gosper_normal"]], "gosper_sum() (in module diofant.concrete.gosper)": [[25, "diofant.concrete.gosper.gosper_sum"]], "gosper_term() (in module diofant.concrete.gosper)": [[25, "diofant.concrete.gosper.gosper_term"]], "index() (diofant.concrete.expr_with_intlimits.exprwithintlimits method)": [[25, "diofant.concrete.expr_with_intlimits.ExprWithIntLimits.index"]], "is_number (diofant.concrete.expr_with_limits.exprwithlimits property)": [[25, "diofant.concrete.expr_with_limits.ExprWithLimits.is_number"]], "limits (diofant.concrete.expr_with_limits.exprwithlimits property)": [[25, "diofant.concrete.expr_with_limits.ExprWithLimits.limits"]], "product() (in module diofant.concrete.products)": [[25, "diofant.concrete.products.product"]], "reorder() (diofant.concrete.expr_with_intlimits.exprwithintlimits method)": [[25, "diofant.concrete.expr_with_intlimits.ExprWithIntLimits.reorder"]], "reorder_limit() (diofant.concrete.expr_with_intlimits.exprwithintlimits method)": [[25, "diofant.concrete.expr_with_intlimits.ExprWithIntLimits.reorder_limit"]], "reverse_order() (diofant.concrete.products.product method)": [[25, "diofant.concrete.products.Product.reverse_order"]], "reverse_order() (diofant.concrete.summations.sum method)": [[25, "diofant.concrete.summations.Sum.reverse_order"]], "summation() (in module diofant.concrete.summations)": [[25, "diofant.concrete.summations.summation"]], "variables (diofant.concrete.expr_with_limits.exprwithlimits property)": [[25, "diofant.concrete.expr_with_limits.ExprWithLimits.variables"]], "diofant.config": [[26, "module-diofant.config"]], "setup() (in module diofant.config)": [[26, "diofant.config.setup"]], "add (class in diofant.core.add)": [[27, "diofant.core.add.Add"]], "atom (class in diofant.core.basic)": [[27, "diofant.core.basic.Atom"]], "atomicexpr (class in diofant.core.expr)": [[27, "diofant.core.expr.AtomicExpr"]], "basic (class in diofant.core.basic)": [[27, "diofant.core.basic.Basic"]], "catalan (class in diofant.core.numbers)": [[27, "diofant.core.numbers.Catalan"]], "complexinfinity (class in diofant.core.numbers)": [[27, "diofant.core.numbers.ComplexInfinity"]], "derivative (class in diofant.core.function)": [[27, "diofant.core.function.Derivative"]], "dict (class in diofant.core.containers)": [[27, "diofant.core.containers.Dict"]], "dummy (class in diofant.core.symbol)": [[27, "diofant.core.symbol.Dummy"]], "eq (in module diofant.core.relational)": [[27, "diofant.core.relational.Eq"]], "equality (class in diofant.core.relational)": [[27, "diofant.core.relational.Equality"]], "eulergamma (class in diofant.core.numbers)": [[27, "diofant.core.numbers.EulerGamma"]], "evalfmixin (class in diofant.core.evalf)": [[27, "diofant.core.evalf.EvalfMixin"]], "exp1 (class in diofant.core.numbers)": [[27, "diofant.core.numbers.Exp1"]], "expr (class in diofant.core.expr)": [[27, "diofant.core.expr.Expr"]], "float (class in diofant.core.numbers)": [[27, "diofant.core.numbers.Float"]], "function (class in diofant.core.function)": [[27, "diofant.core.function.Function"]], "functionclass (class in diofant.core.function)": [[27, "diofant.core.function.FunctionClass"]], "ge (in module diofant.core.relational)": [[27, "diofant.core.relational.Ge"]], "goldenratio (class in diofant.core.numbers)": [[27, "diofant.core.numbers.GoldenRatio"]], "greaterthan (class in diofant.core.relational)": [[27, "diofant.core.relational.GreaterThan"]], "gt (in module diofant.core.relational)": [[27, "diofant.core.relational.Gt"]], "half (class in diofant.core.numbers)": [[27, "diofant.core.numbers.Half"]], "imaginaryunit (class in diofant.core.numbers)": [[27, "diofant.core.numbers.ImaginaryUnit"]], "infinity (class in diofant.core.numbers)": [[27, "diofant.core.numbers.Infinity"]], "integer (class in diofant.core.numbers)": [[27, "diofant.core.numbers.Integer"]], "lambda (class in diofant.core.function)": [[27, "diofant.core.function.Lambda"]], "le (in module diofant.core.relational)": [[27, "diofant.core.relational.Le"]], "lessthan (class in diofant.core.relational)": [[27, "diofant.core.relational.LessThan"]], "lt (in module diofant.core.relational)": [[27, "diofant.core.relational.Lt"]], "managedproperties (class in diofant.core.assumptions)": [[27, "diofant.core.assumptions.ManagedProperties"]], "mod (class in diofant.core.mod)": [[27, "diofant.core.mod.Mod"]], "mul (class in diofant.core.mul)": [[27, "diofant.core.mul.Mul"]], "n() (in module diofant.core.evalf)": [[27, "diofant.core.evalf.N"]], "nan (class in diofant.core.numbers)": [[27, "diofant.core.numbers.NaN"]], "ne (in module diofant.core.relational)": [[27, "diofant.core.relational.Ne"]], "negativeinfinity (class in diofant.core.numbers)": [[27, "diofant.core.numbers.NegativeInfinity"]], "negativeone (class in diofant.core.numbers)": [[27, "diofant.core.numbers.NegativeOne"]], "notiterable (class in diofant.core.compatibility)": [[27, "diofant.core.compatibility.NotIterable"]], "number (class in diofant.core.numbers)": [[27, "diofant.core.numbers.Number"]], "numbersymbol (class in diofant.core.numbers)": [[27, "diofant.core.numbers.NumberSymbol"]], "one (class in diofant.core.numbers)": [[27, "diofant.core.numbers.One"]], "pi (class in diofant.core.numbers)": [[27, "diofant.core.numbers.Pi"]], "poleerror (class in diofant.core.function)": [[27, "diofant.core.function.PoleError"]], "pow (class in diofant.core.power)": [[27, "diofant.core.power.Pow"]], "precisionexhausted (class in diofant.core.evalf)": [[27, "diofant.core.evalf.PrecisionExhausted"]], "rational (class in diofant.core.numbers)": [[27, "diofant.core.numbers.Rational"]], "rel (in module diofant.core.relational)": [[27, "diofant.core.relational.Rel"]], "relational (class in diofant.core.relational)": [[27, "diofant.core.relational.Relational"]], "s (in module diofant.core.singleton)": [[27, "diofant.core.singleton.S"]], "singleton (class in diofant.core.singleton)": [[27, "diofant.core.singleton.Singleton"]], "singletonregistry (class in diofant.core.singleton)": [[27, "diofant.core.singleton.SingletonRegistry"]], "singletonwithmanagedproperties (class in diofant.core.singleton)": [[27, "diofant.core.singleton.SingletonWithManagedProperties"]], "stdfactkb (class in diofant.core.assumptions)": [[27, "diofant.core.assumptions.StdFactKB"]], "strictgreaterthan (class in diofant.core.relational)": [[27, "diofant.core.relational.StrictGreaterThan"]], "strictlessthan (class in diofant.core.relational)": [[27, "diofant.core.relational.StrictLessThan"]], "subs (class in diofant.core.function)": [[27, "diofant.core.function.Subs"]], "symbol (class in diofant.core.symbol)": [[27, "diofant.core.symbol.Symbol"]], "tuple (class in diofant.core.containers)": [[27, "diofant.core.containers.Tuple"]], "unequality (class in diofant.core.relational)": [[27, "diofant.core.relational.Unequality"]], "wild (class in diofant.core.symbol)": [[27, "diofant.core.symbol.Wild"]], "wildfunction (class in diofant.core.function)": [[27, "diofant.core.function.WildFunction"]], "zero (class in diofant.core.numbers)": [[27, "diofant.core.numbers.Zero"]], "adjoint() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.adjoint"]], "apart() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.apart"]], "approximation_interval() (diofant.core.numbers.numbersymbol method)": [[27, "diofant.core.numbers.NumberSymbol.approximation_interval"]], "args (diofant.core.basic.basic property)": [[27, "diofant.core.basic.Basic.args"]], "args (diofant.core.containers.dict property)": [[27, "diofant.core.containers.Dict.args"]], "args_cnc() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.args_cnc"]], "as_base_exp() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_base_exp"]], "as_base_exp() (diofant.core.mul.mul method)": [[27, "diofant.core.mul.Mul.as_base_exp"]], "as_base_exp() (diofant.core.power.pow method)": [[27, "diofant.core.power.Pow.as_base_exp"]], "as_coeff_add() (diofant.core.add.add method)": [[27, "diofant.core.add.Add.as_coeff_Add"], [27, "diofant.core.add.Add.as_coeff_add"]], "as_coeff_add() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_coeff_Add"], [27, "diofant.core.expr.Expr.as_coeff_add"]], "as_coeff_add() (diofant.core.numbers.number method)": [[27, "diofant.core.numbers.Number.as_coeff_Add"], [27, "diofant.core.numbers.Number.as_coeff_add"]], "as_coeff_mul() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_coeff_Mul"], [27, "diofant.core.expr.Expr.as_coeff_mul"]], "as_coeff_mul() (diofant.core.mul.mul method)": [[27, "diofant.core.mul.Mul.as_coeff_Mul"], [27, "diofant.core.mul.Mul.as_coeff_mul"]], "as_coeff_mul() (diofant.core.numbers.number method)": [[27, "diofant.core.numbers.Number.as_coeff_Mul"], [27, "diofant.core.numbers.Number.as_coeff_mul"]], "as_coeff_exponent() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_coeff_exponent"]], "as_coefficient() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_coefficient"]], "as_coefficients_dict() (diofant.core.add.add method)": [[27, "diofant.core.add.Add.as_coefficients_dict"]], "as_coefficients_dict() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_coefficients_dict"]], "as_content_primitive() (diofant.core.add.add method)": [[27, "diofant.core.add.Add.as_content_primitive"]], "as_content_primitive() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_content_primitive"]], "as_content_primitive() (diofant.core.mul.mul method)": [[27, "diofant.core.mul.Mul.as_content_primitive"]], "as_content_primitive() (diofant.core.numbers.rational method)": [[27, "diofant.core.numbers.Rational.as_content_primitive"]], "as_content_primitive() (diofant.core.power.pow method)": [[27, "diofant.core.power.Pow.as_content_primitive"]], "as_expr() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_expr"]], "as_independent() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_independent"]], "as_int() (in module diofant.core.compatibility)": [[27, "diofant.core.compatibility.as_int"]], "as_leading_term() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_leading_term"]], "as_numer_denom() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_numer_denom"]], "as_ordered_factors() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_ordered_factors"]], "as_ordered_factors() (diofant.core.mul.mul method)": [[27, "diofant.core.mul.Mul.as_ordered_factors"]], "as_ordered_terms() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_ordered_terms"]], "as_poly() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_poly"]], "as_powers_dict() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_powers_dict"]], "as_powers_dict() (diofant.core.mul.mul method)": [[27, "diofant.core.mul.Mul.as_powers_dict"]], "as_property() (in module diofant.core.assumptions)": [[27, "diofant.core.assumptions.as_property"]], "as_real_imag() (diofant.core.add.add method)": [[27, "diofant.core.add.Add.as_real_imag"]], "as_real_imag() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_real_imag"]], "as_real_imag() (diofant.core.mul.mul method)": [[27, "diofant.core.mul.Mul.as_real_imag"]], "as_real_imag() (diofant.core.power.pow method)": [[27, "diofant.core.power.Pow.as_real_imag"]], "as_set() (diofant.core.relational.relational method)": [[27, "diofant.core.relational.Relational.as_set"]], "as_terms() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.as_terms"]], "as_two_terms() (diofant.core.add.add method)": [[27, "diofant.core.add.Add.as_two_terms"]], "as_two_terms() (diofant.core.mul.mul method)": [[27, "diofant.core.mul.Mul.as_two_terms"]], "aseries() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.aseries"]], "atoms() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.atoms"]], "base (diofant.core.power.pow property)": [[27, "diofant.core.power.Pow.base"]], "cacheit() (in module diofant.core.cache)": [[27, "diofant.core.cache.cacheit"]], "cancel() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.cancel"]], "canonical (diofant.core.relational.relational property)": [[27, "diofant.core.relational.Relational.canonical"]], "canonical_variables (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.canonical_variables"]], "ceiling() (diofant.core.numbers.float method)": [[27, "diofant.core.numbers.Float.ceiling"]], "check_assumptions() (in module diofant.core.assumptions)": [[27, "diofant.core.assumptions.check_assumptions"]], "class_key() (diofant.core.add.add class method)": [[27, "diofant.core.add.Add.class_key"]], "class_key() (diofant.core.basic.atom class method)": [[27, "diofant.core.basic.Atom.class_key"]], "class_key() (diofant.core.basic.basic class method)": [[27, "diofant.core.basic.Basic.class_key"]], "class_key() (diofant.core.function.function class method)": [[27, "diofant.core.function.Function.class_key"]], "class_key() (diofant.core.mul.mul class method)": [[27, "diofant.core.mul.Mul.class_key"]], "class_key() (diofant.core.numbers.number class method)": [[27, "diofant.core.numbers.Number.class_key"]], "class_key() (diofant.core.power.pow class method)": [[27, "diofant.core.power.Pow.class_key"]], "class_key() (diofant.core.symbol.dummy class method)": [[27, "diofant.core.symbol.Dummy.class_key"]], "coeff() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.coeff"]], "cofactors() (diofant.core.numbers.number method)": [[27, "diofant.core.numbers.Number.cofactors"]], "collect() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.collect"]], "combsimp() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.combsimp"]], "compute_leading_term() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.compute_leading_term"]], "conjugate() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.conjugate"]], "copy() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.copy"]], "could_extract_minus_sign() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.could_extract_minus_sign"]], "count() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.count"]], "count_ops() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.count_ops"]], "count_ops() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.count_ops"]], "count_ops() (in module diofant.core.function)": [[27, "diofant.core.function.count_ops"]], "diff() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.diff"]], "diff() (in module diofant.core.function)": [[27, "diofant.core.function.diff"]], "diofant.core": [[27, "module-diofant.core"]], "diofant.core.add": [[27, "module-diofant.core.add"]], "diofant.core.assumptions": [[27, "module-diofant.core.assumptions"]], "diofant.core.basic": [[27, "module-diofant.core.basic"]], "diofant.core.cache": [[27, "module-diofant.core.cache"]], "diofant.core.compatibility": [[27, "module-diofant.core.compatibility"]], "diofant.core.containers": [[27, "module-diofant.core.containers"]], "diofant.core.core": [[27, "module-diofant.core.core"]], "diofant.core.evalf": [[27, "module-diofant.core.evalf"]], "diofant.core.evaluate": [[27, "module-diofant.core.evaluate"]], "diofant.core.expr": [[27, "module-diofant.core.expr"]], "diofant.core.exprtools": [[27, "module-diofant.core.exprtools"]], "diofant.core.function": [[27, "module-diofant.core.function"]], "diofant.core.mod": [[27, "module-diofant.core.mod"]], "diofant.core.mul": [[27, "module-diofant.core.mul"]], "diofant.core.multidimensional": [[27, "module-diofant.core.multidimensional"]], "diofant.core.numbers": [[27, "module-diofant.core.numbers"]], "diofant.core.power": [[27, "module-diofant.core.power"]], "diofant.core.relational": [[27, "module-diofant.core.relational"]], "diofant.core.singleton": [[27, "module-diofant.core.singleton"]], "diofant.core.symbol": [[27, "module-diofant.core.symbol"]], "diofant.core.sympify": [[27, "module-diofant.core.sympify"]], "doit() (diofant.core.basic.atom method)": [[27, "diofant.core.basic.Atom.doit"]], "doit() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.doit"]], "doit() (diofant.core.function.derivative method)": [[27, "diofant.core.function.Derivative.doit"]], "doit() (diofant.core.function.subs method)": [[27, "diofant.core.function.Subs.doit"]], "doit_numerically() (diofant.core.function.derivative method)": [[27, "diofant.core.function.Derivative.doit_numerically"]], "epsilon_eq() (diofant.core.numbers.float method)": [[27, "diofant.core.numbers.Float.epsilon_eq"]], "equals() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.equals"]], "equals() (diofant.core.relational.relational method)": [[27, "diofant.core.relational.Relational.equals"]], "evalf() (diofant.core.evalf.evalfmixin method)": [[27, "diofant.core.evalf.EvalfMixin.evalf"]], "evalf() (diofant.core.function.subs method)": [[27, "diofant.core.function.Subs.evalf"]], "evaluate() (in module diofant.core.evaluate)": [[27, "diofant.core.evaluate.evaluate"]], "exp (diofant.core.power.pow property)": [[27, "diofant.core.power.Pow.exp"]], "expand() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.expand"]], "expand() (in module diofant.core.function)": [[27, "diofant.core.function.expand"]], "expand_complex() (in module diofant.core.function)": [[27, "diofant.core.function.expand_complex"]], "expand_func() (in module diofant.core.function)": [[27, "diofant.core.function.expand_func"]], "expand_log() (in module diofant.core.function)": [[27, "diofant.core.function.expand_log"]], "expand_mul() (in module diofant.core.function)": [[27, "diofant.core.function.expand_mul"]], "expand_multinomial() (in module diofant.core.function)": [[27, "diofant.core.function.expand_multinomial"]], "expand_power_base() (in module diofant.core.function)": [[27, "diofant.core.function.expand_power_base"]], "expand_power_exp() (in module diofant.core.function)": [[27, "diofant.core.function.expand_power_exp"]], "expand_trig() (in module diofant.core.function)": [[27, "diofant.core.function.expand_trig"]], "expr (diofant.core.function.derivative property)": [[27, "diofant.core.function.Derivative.expr"]], "expr (diofant.core.function.lambda property)": [[27, "diofant.core.function.Lambda.expr"]], "expr (diofant.core.function.subs property)": [[27, "diofant.core.function.Subs.expr"]], "extract_additively() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.extract_additively"]], "extract_branch_factor() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.extract_branch_factor"]], "extract_leading_order() (diofant.core.add.add method)": [[27, "diofant.core.add.Add.extract_leading_order"]], "extract_multiplicatively() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.extract_multiplicatively"]], "factor() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.factor"]], "factor_terms() (in module diofant.core.exprtools)": [[27, "diofant.core.exprtools.factor_terms"]], "factors() (diofant.core.numbers.rational method)": [[27, "diofant.core.numbers.Rational.factors"]], "fdiff() (diofant.core.function.function method)": [[27, "diofant.core.function.Function.fdiff"]], "find() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.find"]], "flatten() (diofant.core.add.add class method)": [[27, "diofant.core.add.Add.flatten"]], "flatten() (diofant.core.mul.mul class method)": [[27, "diofant.core.mul.Mul.flatten"]], "floor() (diofant.core.numbers.float method)": [[27, "diofant.core.numbers.Float.floor"]], "free_symbols (diofant.core.basic.basic property)": [[27, "diofant.core.basic.Basic.free_symbols"]], "free_symbols (diofant.core.function.derivative property)": [[27, "diofant.core.function.Derivative.free_symbols"]], "free_symbols (diofant.core.function.lambda property)": [[27, "diofant.core.function.Lambda.free_symbols"]], "free_symbols (diofant.core.function.subs property)": [[27, "diofant.core.function.Subs.free_symbols"]], "func (diofant.core.basic.basic property)": [[27, "diofant.core.basic.Basic.func"]], "gcd() (diofant.core.numbers.number method)": [[27, "diofant.core.numbers.Number.gcd"]], "gcd() (diofant.core.numbers.rational method)": [[27, "diofant.core.numbers.Rational.gcd"]], "gcd_terms() (in module diofant.core.exprtools)": [[27, "diofant.core.exprtools.gcd_terms"]], "get() (diofant.core.containers.dict method)": [[27, "diofant.core.containers.Dict.get"]], "geto() (diofant.core.add.add method)": [[27, "diofant.core.add.Add.getO"]], "geto() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.getO"]], "getn() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.getn"]], "has() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.has"]], "index() (diofant.core.containers.tuple method)": [[27, "diofant.core.containers.Tuple.index"]], "integer_digits() (in module diofant.core.numbers)": [[27, "diofant.core.numbers.integer_digits"]], "integer_nthroot() (in module diofant.core.power)": [[27, "diofant.core.power.integer_nthroot"]], "integrate() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.integrate"]], "invert() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.invert"]], "is_algebraic (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_algebraic"]], "is_algebraic_expr() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.is_algebraic_expr"]], "is_commutative (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_commutative"]], "is_comparable (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_comparable"]], "is_complex (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_complex"]], "is_composite (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_composite"]], "is_composite (diofant.core.numbers.integer property)": [[27, "diofant.core.numbers.Integer.is_composite"]], "is_constant() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.is_constant"]], "is_constant() (diofant.core.numbers.number method)": [[27, "diofant.core.numbers.Number.is_constant"]], "is_evaluated (diofant.core.basic.basic property)": [[27, "diofant.core.basic.Basic.is_evaluated"]], "is_even (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_even"]], "is_even (diofant.core.numbers.integer property)": [[27, "diofant.core.numbers.Integer.is_even"]], "is_extended_real (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_extended_real"]], "is_finite (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_finite"]], "is_hypergeometric() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.is_hypergeometric"]], "is_imaginary (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_imaginary"]], "is_imaginary (diofant.core.numbers.integer property)": [[27, "diofant.core.numbers.Integer.is_imaginary"]], "is_infinite (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_infinite"]], "is_integer (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_integer"]], "is_irrational (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_irrational"]], "is_negative (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_negative"]], "is_noninteger (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_noninteger"]], "is_nonnegative (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_nonnegative"]], "is_nonpositive (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_nonpositive"]], "is_nonzero (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_nonzero"]], "is_nonzero (diofant.core.numbers.integer property)": [[27, "diofant.core.numbers.Integer.is_nonzero"]], "is_number (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_number"]], "is_odd (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_odd"]], "is_odd (diofant.core.numbers.integer property)": [[27, "diofant.core.numbers.Integer.is_odd"]], "is_polar (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_polar"]], "is_polynomial() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.is_polynomial"]], "is_positive (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_positive"]], "is_prime (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_prime"]], "is_prime (diofant.core.numbers.integer property)": [[27, "diofant.core.numbers.Integer.is_prime"]], "is_rational (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_rational"]], "is_rational_function() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.is_rational_function"]], "is_real (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_real"]], "is_sequence() (in module diofant.core.compatibility)": [[27, "diofant.core.compatibility.is_sequence"]], "is_transcendental (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_transcendental"]], "is_zero (diofant.core.expr.expr property)": [[27, "diofant.core.expr.Expr.is_zero"]], "is_zero (diofant.core.numbers.integer property)": [[27, "diofant.core.numbers.Integer.is_zero"]], "items() (diofant.core.containers.dict method)": [[27, "diofant.core.containers.Dict.items"]], "iterable() (in module diofant.core.compatibility)": [[27, "diofant.core.compatibility.iterable"]], "keys() (diofant.core.containers.dict method)": [[27, "diofant.core.containers.Dict.keys"]], "lcm() (diofant.core.numbers.number method)": [[27, "diofant.core.numbers.Number.lcm"]], "lcm() (diofant.core.numbers.rational method)": [[27, "diofant.core.numbers.Rational.lcm"]], "lhs (diofant.core.relational.relational property)": [[27, "diofant.core.relational.Relational.lhs"]], "limit() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.limit"]], "limit_denominator() (diofant.core.numbers.rational method)": [[27, "diofant.core.numbers.Rational.limit_denominator"]], "make_property() (in module diofant.core.assumptions)": [[27, "diofant.core.assumptions.make_property"]], "match() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.match"]], "mod_inverse() (in module diofant.core.numbers)": [[27, "diofant.core.numbers.mod_inverse"]], "nargs (diofant.core.function.functionclass property)": [[27, "diofant.core.function.FunctionClass.nargs"]], "nfloat() (in module diofant.core.function)": [[27, "diofant.core.function.nfloat"]], "normal() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.normal"]], "nseries() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.nseries"]], "nsimplify() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.nsimplify"]], "num (diofant.core.numbers.float property)": [[27, "diofant.core.numbers.Float.num"]], "point (diofant.core.function.subs property)": [[27, "diofant.core.function.Subs.point"]], "powsimp() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.powsimp"]], "preorder_traversal (class in diofant.core.basic)": [[27, "diofant.core.basic.preorder_traversal"]], "primitive() (diofant.core.add.add method)": [[27, "diofant.core.add.Add.primitive"]], "primitive() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.primitive"]], "radsimp() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.radsimp"]], "ratsimp() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.ratsimp"]], "rcall() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.rcall"]], "removeo() (diofant.core.add.add method)": [[27, "diofant.core.add.Add.removeO"]], "removeo() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.removeO"]], "replace() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.replace"]], "reversed (diofant.core.relational.relational property)": [[27, "diofant.core.relational.Relational.reversed"]], "rewrite() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.rewrite"]], "rhs (diofant.core.relational.relational property)": [[27, "diofant.core.relational.Relational.rhs"]], "round() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.round"]], "series() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.series"]], "simplify() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.simplify"]], "skip() (diofant.core.basic.preorder_traversal method)": [[27, "diofant.core.basic.preorder_traversal.skip"]], "sort_key() (diofant.core.basic.atom method)": [[27, "diofant.core.basic.Atom.sort_key"]], "sort_key() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.sort_key"]], "sort_key() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.sort_key"]], "sort_key() (diofant.core.numbers.number method)": [[27, "diofant.core.numbers.Number.sort_key"]], "sort_key() (diofant.core.symbol.dummy method)": [[27, "diofant.core.symbol.Dummy.sort_key"]], "subs() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.subs"]], "symbols() (in module diofant.core.symbol)": [[27, "diofant.core.symbol.symbols"]], "sympify() (in module diofant.core.sympify)": [[27, "diofant.core.sympify.sympify"]], "taylor_term() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.taylor_term"]], "together() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.together"]], "transpose() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.transpose"]], "trigsimp() (diofant.core.expr.expr method)": [[27, "diofant.core.expr.Expr.trigsimp"]], "tuple_count() (diofant.core.containers.tuple method)": [[27, "diofant.core.containers.Tuple.tuple_count"]], "values() (diofant.core.containers.dict method)": [[27, "diofant.core.containers.Dict.values"]], "var() (in module diofant.core.symbol)": [[27, "diofant.core.symbol.var"]], "variables (diofant.core.function.derivative property)": [[27, "diofant.core.function.Derivative.variables"]], "variables (diofant.core.function.lambda property)": [[27, "diofant.core.function.Lambda.variables"]], "variables (diofant.core.function.subs property)": [[27, "diofant.core.function.Subs.variables"]], "vectorize (class in diofant.core.multidimensional)": [[27, "diofant.core.multidimensional.vectorize"]], "xreplace() (diofant.core.basic.basic method)": [[27, "diofant.core.basic.Basic.xreplace"]], "basecovarderivativeop (class in diofant.diffgeom)": [[28, "diofant.diffgeom.BaseCovarDerivativeOp"]], "basescalarfield (class in diofant.diffgeom)": [[28, "diofant.diffgeom.BaseScalarField"]], "basevectorfield (class in diofant.diffgeom)": [[28, "diofant.diffgeom.BaseVectorField"]], "commutator (class in diofant.diffgeom)": [[28, "diofant.diffgeom.Commutator"]], "coordsystem (class in diofant.diffgeom)": [[28, "diofant.diffgeom.CoordSystem"]], "covarderivativeop (class in diofant.diffgeom)": [[28, "diofant.diffgeom.CovarDerivativeOp"]], "differential (class in diofant.diffgeom)": [[28, "diofant.diffgeom.Differential"]], "liederivative (class in diofant.diffgeom)": [[28, "diofant.diffgeom.LieDerivative"]], "manifold (class in diofant.diffgeom)": [[28, "diofant.diffgeom.Manifold"]], "patch (class in diofant.diffgeom)": [[28, "diofant.diffgeom.Patch"]], "point (class in diofant.diffgeom)": [[28, "diofant.diffgeom.Point"]], "tensorproduct (class in diofant.diffgeom)": [[28, "diofant.diffgeom.TensorProduct"]], "wedgeproduct (class in diofant.diffgeom)": [[28, "diofant.diffgeom.WedgeProduct"]], "base_oneform() (diofant.diffgeom.coordsystem method)": [[28, "diofant.diffgeom.CoordSystem.base_oneform"]], "base_oneforms() (diofant.diffgeom.coordsystem method)": [[28, "diofant.diffgeom.CoordSystem.base_oneforms"]], "base_vector() (diofant.diffgeom.coordsystem method)": [[28, "diofant.diffgeom.CoordSystem.base_vector"]], "base_vectors() (diofant.diffgeom.coordsystem method)": [[28, "diofant.diffgeom.CoordSystem.base_vectors"]], "connect_to() (diofant.diffgeom.coordsystem method)": [[28, "diofant.diffgeom.CoordSystem.connect_to"]], "coord_function() (diofant.diffgeom.coordsystem method)": [[28, "diofant.diffgeom.CoordSystem.coord_function"]], "coord_functions() (diofant.diffgeom.coordsystem method)": [[28, "diofant.diffgeom.CoordSystem.coord_functions"]], "coord_tuple_transform_to() (diofant.diffgeom.coordsystem method)": [[28, "diofant.diffgeom.CoordSystem.coord_tuple_transform_to"]], "coords() (diofant.diffgeom.point method)": [[28, "diofant.diffgeom.Point.coords"]], "diofant.diffgeom": [[28, "module-diofant.diffgeom"]], "intcurve_diffequ() (in module diofant.diffgeom)": [[28, "diofant.diffgeom.intcurve_diffequ"]], "intcurve_series() (in module diofant.diffgeom)": [[28, "diofant.diffgeom.intcurve_series"]], "jacobian() (diofant.diffgeom.coordsystem method)": [[28, "diofant.diffgeom.CoordSystem.jacobian"]], "metric_to_christoffel_1st() (in module diofant.diffgeom)": [[28, "diofant.diffgeom.metric_to_Christoffel_1st"]], "metric_to_christoffel_2nd() (in module diofant.diffgeom)": [[28, "diofant.diffgeom.metric_to_Christoffel_2nd"]], "metric_to_ricci_components() (in module diofant.diffgeom)": [[28, "diofant.diffgeom.metric_to_Ricci_components"]], "metric_to_riemann_components() (in module diofant.diffgeom)": [[28, "diofant.diffgeom.metric_to_Riemann_components"]], "point() (diofant.diffgeom.coordsystem method)": [[28, "diofant.diffgeom.CoordSystem.point"]], "point_to_coords() (diofant.diffgeom.coordsystem method)": [[28, "diofant.diffgeom.CoordSystem.point_to_coords"]], "twoform_to_matrix() (in module diofant.diffgeom)": [[28, "diofant.diffgeom.twoform_to_matrix"]], "vectors_in_basis() (in module diofant.diffgeom)": [[28, "diofant.diffgeom.vectors_in_basis"]], "algebraicfield (class in diofant.domains)": [[29, "diofant.domains.AlgebraicField"]], "characteristiczero (class in diofant.domains.characteristiczero)": [[29, "diofant.domains.characteristiczero.CharacteristicZero"]], "commutativering (class in diofant.domains.ring)": [[29, "diofant.domains.ring.CommutativeRing"]], "complexalgebraicfield (class in diofant.domains)": [[29, "diofant.domains.ComplexAlgebraicField"]], "complexfield (class in diofant.domains)": [[29, "diofant.domains.ComplexField"]], "compositedomain (class in diofant.domains.compositedomain)": [[29, "diofant.domains.compositedomain.CompositeDomain"]], "domain (class in diofant.domains.domain)": [[29, "diofant.domains.domain.Domain"]], "expressiondomain (class in diofant.domains)": [[29, "diofant.domains.ExpressionDomain"]], "expressiondomain.expression (class in diofant.domains)": [[29, "diofant.domains.ExpressionDomain.Expression"]], "field (class in diofant.domains.field)": [[29, "diofant.domains.field.Field"]], "finitefield (class in diofant.domains)": [[29, "diofant.domains.FiniteField"]], "fractionfield (class in diofant.polys.fields)": [[29, "diofant.polys.fields.FractionField"]], "gmpyfinitefield (class in diofant.domains.finitefield)": [[29, "diofant.domains.finitefield.GMPYFiniteField"]], "gmpyintegerring (class in diofant.domains.integerring)": [[29, "diofant.domains.integerring.GMPYIntegerRing"]], "gmpyrationalfield (class in diofant.domains.rationalfield)": [[29, "diofant.domains.rationalfield.GMPYRationalField"]], "galoisfieldelement (class in diofant.domains.finitefield)": [[29, "diofant.domains.finitefield.GaloisFieldElement"]], "integermodring (class in diofant.domains)": [[29, "diofant.domains.IntegerModRing"]], "integerring (class in diofant.domains)": [[29, "diofant.domains.IntegerRing"]], "modularinteger (class in diofant.domains.finitefield)": [[29, "diofant.domains.finitefield.ModularInteger"]], "polynomialring (class in diofant.polys.rings)": [[29, "diofant.polys.rings.PolynomialRing"]], "pythonfinitefield (class in diofant.domains.finitefield)": [[29, "diofant.domains.finitefield.PythonFiniteField"]], "pythonintegerring (class in diofant.domains.integerring)": [[29, "diofant.domains.integerring.PythonIntegerRing"]], "pythonrationalfield (class in diofant.domains.rationalfield)": [[29, "diofant.domains.rationalfield.PythonRationalField"]], "rationalfield (class in diofant.domains)": [[29, "diofant.domains.RationalField"]], "realalgebraicfield (class in diofant.domains)": [[29, "diofant.domains.RealAlgebraicField"]], "realfield (class in diofant.domains)": [[29, "diofant.domains.RealField"]], "simpledomain (class in diofant.domains.simpledomain)": [[29, "diofant.domains.simpledomain.SimpleDomain"]], "univarpolynomialring (class in diofant.polys.univar)": [[29, "diofant.polys.univar.UnivarPolynomialRing"]], "algebraic_field() (diofant.domains.algebraicfield method)": [[29, "diofant.domains.AlgebraicField.algebraic_field"]], "algebraic_field() (diofant.domains.rationalfield method)": [[29, "diofant.domains.RationalField.algebraic_field"]], "almosteq() (diofant.domains.complexfield method)": [[29, "diofant.domains.ComplexField.almosteq"]], "almosteq() (diofant.domains.realfield method)": [[29, "diofant.domains.RealField.almosteq"]], "characteristic (diofant.domains.ring.commutativering property)": [[29, "diofant.domains.ring.CommutativeRing.characteristic"]], "cofactors() (diofant.domains.ring.commutativering method)": [[29, "diofant.domains.ring.CommutativeRing.cofactors"]], "convert() (diofant.domains.domain.domain method)": [[29, "diofant.domains.domain.Domain.convert"]], "convert_from() (diofant.domains.domain.domain method)": [[29, "diofant.domains.domain.Domain.convert_from"]], "diofant.domains": [[29, "module-diofant.domains"]], "dispersionset() (diofant.polys.univar.univarpolynomialring method)": [[29, "diofant.polys.univar.UnivarPolynomialRing.dispersionset"]], "div() (diofant.domains.field.field method)": [[29, "diofant.domains.field.Field.div"]], "div() (diofant.domains.ring.commutativering method)": [[29, "diofant.domains.ring.CommutativeRing.div"]], "drop() (diofant.polys.rings.polynomialring method)": [[29, "diofant.polys.rings.PolynomialRing.drop"]], "dtype (diofant.domains.expressiondomain attribute)": [[29, "diofant.domains.ExpressionDomain.dtype"]], "eject() (diofant.polys.rings.polynomialring method)": [[29, "diofant.polys.rings.PolynomialRing.eject"]], "exquo() (diofant.domains.field.field method)": [[29, "diofant.domains.field.Field.exquo"]], "exquo() (diofant.domains.ring.commutativering method)": [[29, "diofant.domains.ring.CommutativeRing.exquo"]], "field (diofant.domains.integerring property)": [[29, "diofant.domains.IntegerRing.field"]], "field (diofant.domains.field.field property)": [[29, "diofant.domains.field.Field.field"]], "field (diofant.polys.rings.polynomialring property)": [[29, "diofant.polys.rings.PolynomialRing.field"]], "finite_field() (diofant.domains.integerring method)": [[29, "diofant.domains.IntegerRing.finite_field"]], "finite_ring() (diofant.domains.integerring method)": [[29, "diofant.domains.IntegerRing.finite_ring"]], "frac_field() (diofant.domains.domain.domain method)": [[29, "diofant.domains.domain.Domain.frac_field"]], "from_expr() (diofant.domains.domain.domain method)": [[29, "diofant.domains.domain.Domain.from_expr"]], "gcd() (diofant.domains.field.field method)": [[29, "diofant.domains.field.Field.gcd"]], "gcdex() (diofant.polys.rings.polynomialring method)": [[29, "diofant.polys.rings.PolynomialRing.gcdex"]], "half_gcdex() (diofant.domains.ring.commutativering method)": [[29, "diofant.domains.ring.CommutativeRing.half_gcdex"]], "half_gcdex() (diofant.polys.rings.polynomialring method)": [[29, "diofant.polys.rings.PolynomialRing.half_gcdex"]], "index() (diofant.polys.rings.polynomialring method)": [[29, "diofant.polys.rings.PolynomialRing.index"]], "inject() (diofant.domains.compositedomain.compositedomain method)": [[29, "diofant.domains.compositedomain.CompositeDomain.inject"]], "inject() (diofant.domains.simpledomain.simpledomain method)": [[29, "diofant.domains.simpledomain.SimpleDomain.inject"]], "invert() (diofant.domains.ring.commutativering method)": [[29, "diofant.domains.ring.CommutativeRing.invert"]], "is_normal() (diofant.domains.ring.commutativering method)": [[29, "diofant.domains.ring.CommutativeRing.is_normal"]], "is_primitive (diofant.domains.finitefield.modularinteger property)": [[29, "diofant.domains.finitefield.ModularInteger.is_primitive"]], "lcm() (diofant.domains.ring.commutativering method)": [[29, "diofant.domains.ring.CommutativeRing.lcm"]], "poly_ring() (diofant.domains.domain.domain method)": [[29, "diofant.domains.domain.Domain.poly_ring"]], "quo() (diofant.domains.field.field method)": [[29, "diofant.domains.field.Field.quo"]], "quo() (diofant.domains.ring.commutativering method)": [[29, "diofant.domains.ring.CommutativeRing.quo"]], "rem() (diofant.domains.field.field method)": [[29, "diofant.domains.field.Field.rem"]], "rem() (diofant.domains.ring.commutativering method)": [[29, "diofant.domains.ring.CommutativeRing.rem"]], "ring (diofant.domains.ring.commutativering property)": [[29, "diofant.domains.ring.CommutativeRing.ring"]], "to_expr() (diofant.domains.domain.domain method)": [[29, "diofant.domains.domain.Domain.to_expr"]], "to_rational() (diofant.domains.realfield method)": [[29, "diofant.domains.RealField.to_rational"]], "unify() (diofant.domains.domain.domain method)": [[29, "diofant.domains.domain.Domain.unify"]], "fallingfactorial (class in diofant.functions.combinatorial.factorials)": [[30, "diofant.functions.combinatorial.factorials.FallingFactorial"]], "risingfactorial (class in diofant.functions.combinatorial.factorials)": [[30, "diofant.functions.combinatorial.factorials.RisingFactorial"]], "bell (class in diofant.functions.combinatorial.numbers)": [[30, "diofant.functions.combinatorial.numbers.bell"]], "bernoulli (class in diofant.functions.combinatorial.numbers)": [[30, "diofant.functions.combinatorial.numbers.bernoulli"]], "binomial (class in diofant.functions.combinatorial.factorials)": [[30, "diofant.functions.combinatorial.factorials.binomial"]], "catalan (class in diofant.functions.combinatorial.numbers)": [[30, "diofant.functions.combinatorial.numbers.catalan"]], "euler (class in diofant.functions.combinatorial.numbers)": [[30, "diofant.functions.combinatorial.numbers.euler"]], "factorial (class in diofant.functions.combinatorial.factorials)": [[30, "diofant.functions.combinatorial.factorials.factorial"]], "factorial2 (class in diofant.functions.combinatorial.factorials)": [[30, "diofant.functions.combinatorial.factorials.factorial2"]], "fibonacci (class in diofant.functions.combinatorial.numbers)": [[30, "diofant.functions.combinatorial.numbers.fibonacci"]], "harmonic (class in diofant.functions.combinatorial.numbers)": [[30, "diofant.functions.combinatorial.numbers.harmonic"]], "lucas (class in diofant.functions.combinatorial.numbers)": [[30, "diofant.functions.combinatorial.numbers.lucas"]], "nc() (in module diofant.functions.combinatorial.numbers)": [[30, "diofant.functions.combinatorial.numbers.nC"]], "np() (in module diofant.functions.combinatorial.numbers)": [[30, "diofant.functions.combinatorial.numbers.nP"]], "nt() (in module diofant.functions.combinatorial.numbers)": [[30, "diofant.functions.combinatorial.numbers.nT"]], "stirling() (in module diofant.functions.combinatorial.numbers)": [[30, "diofant.functions.combinatorial.numbers.stirling"]], "subfactorial (class in diofant.functions.combinatorial.factorials)": [[30, "diofant.functions.combinatorial.factorials.subfactorial"]], "abs (class in diofant.functions.elementary.complexes)": [[31, "diofant.functions.elementary.complexes.Abs"]], "exprcondpair (class in diofant.functions.elementary.piecewise)": [[31, "diofant.functions.elementary.piecewise.ExprCondPair"]], "hyperbolicfunction (class in diofant.functions.elementary.hyperbolic)": [[31, "diofant.functions.elementary.hyperbolic.HyperbolicFunction"]], "identityfunction (class in diofant.functions.elementary.miscellaneous)": [[31, "diofant.functions.elementary.miscellaneous.IdentityFunction"]], "lambertw (class in diofant.functions.elementary.exponential)": [[31, "diofant.functions.elementary.exponential.LambertW"]], "max (class in diofant.functions.elementary.miscellaneous)": [[31, "diofant.functions.elementary.miscellaneous.Max"]], "min (class in diofant.functions.elementary.miscellaneous)": [[31, "diofant.functions.elementary.miscellaneous.Min"]], "piecewise (class in diofant.functions.elementary.piecewise)": [[31, "diofant.functions.elementary.piecewise.Piecewise"]], "roundfunction (class in diofant.functions.elementary.integers)": [[31, "diofant.functions.elementary.integers.RoundFunction"]], "acos (class in diofant.functions.elementary.trigonometric)": [[31, "diofant.functions.elementary.trigonometric.acos"]], "acosh (class in diofant.functions.elementary.hyperbolic)": [[31, "diofant.functions.elementary.hyperbolic.acosh"]], "acot (class in diofant.functions.elementary.trigonometric)": [[31, "diofant.functions.elementary.trigonometric.acot"]], "acoth (class in diofant.functions.elementary.hyperbolic)": [[31, "diofant.functions.elementary.hyperbolic.acoth"]], "acsc (class in diofant.functions.elementary.trigonometric)": [[31, "diofant.functions.elementary.trigonometric.acsc"]], "adjoint (class in diofant.functions.elementary.complexes)": [[31, "diofant.functions.elementary.complexes.adjoint"]], "arg (class in diofant.functions.elementary.complexes)": [[31, "diofant.functions.elementary.complexes.arg"]], "as_real_imag() (diofant.functions.elementary.complexes.im method)": [[31, "diofant.functions.elementary.complexes.im.as_real_imag"]], "as_real_imag() (diofant.functions.elementary.complexes.re method)": [[31, "diofant.functions.elementary.complexes.re.as_real_imag"]], "as_real_imag() (diofant.functions.elementary.exponential.log method)": [[31, "diofant.functions.elementary.exponential.log.as_real_imag"]], "as_real_imag() (diofant.functions.elementary.hyperbolic.sinh method)": [[31, "diofant.functions.elementary.hyperbolic.sinh.as_real_imag"]], "asec (class in diofant.functions.elementary.trigonometric)": [[31, "diofant.functions.elementary.trigonometric.asec"]], "asin (class in diofant.functions.elementary.trigonometric)": [[31, "diofant.functions.elementary.trigonometric.asin"]], "asinh (class in diofant.functions.elementary.hyperbolic)": [[31, "diofant.functions.elementary.hyperbolic.asinh"]], "atan (class in diofant.functions.elementary.trigonometric)": [[31, "diofant.functions.elementary.trigonometric.atan"]], "atan2 (class in diofant.functions.elementary.trigonometric)": [[31, "diofant.functions.elementary.trigonometric.atan2"]], "atanh (class in diofant.functions.elementary.hyperbolic)": [[31, "diofant.functions.elementary.hyperbolic.atanh"]], "ceiling (class in diofant.functions.elementary.integers)": [[31, "diofant.functions.elementary.integers.ceiling"]], "cond (diofant.functions.elementary.piecewise.exprcondpair property)": [[31, "diofant.functions.elementary.piecewise.ExprCondPair.cond"]], "conjugate (class in diofant.functions.elementary.complexes)": [[31, "diofant.functions.elementary.complexes.conjugate"]], "cos (class in diofant.functions.elementary.trigonometric)": [[31, "diofant.functions.elementary.trigonometric.cos"]], "cosh (class in diofant.functions.elementary.hyperbolic)": [[31, "diofant.functions.elementary.hyperbolic.cosh"]], "cot (class in diofant.functions.elementary.trigonometric)": [[31, "diofant.functions.elementary.trigonometric.cot"]], "coth (class in diofant.functions.elementary.hyperbolic)": [[31, "diofant.functions.elementary.hyperbolic.coth"]], "csc (class in diofant.functions.elementary.trigonometric)": [[31, "diofant.functions.elementary.trigonometric.csc"]], "csch (class in diofant.functions.elementary.hyperbolic)": [[31, "diofant.functions.elementary.hyperbolic.csch"]], "doit() (diofant.functions.elementary.piecewise.piecewise method)": [[31, "diofant.functions.elementary.piecewise.Piecewise.doit"]], "exp (diofant.functions.elementary.exponential.exp_polar property)": [[31, "diofant.functions.elementary.exponential.exp_polar.exp"]], "exp() (in module diofant.functions.elementary.exponential)": [[31, "diofant.functions.elementary.exponential.exp"]], "exp_polar (class in diofant.functions.elementary.exponential)": [[31, "diofant.functions.elementary.exponential.exp_polar"]], "expr (diofant.functions.elementary.piecewise.exprcondpair property)": [[31, "diofant.functions.elementary.piecewise.ExprCondPair.expr"]], "fdiff() (diofant.functions.elementary.complexes.abs method)": [[31, "diofant.functions.elementary.complexes.Abs.fdiff"]], "fdiff() (diofant.functions.elementary.exponential.lambertw method)": [[31, "diofant.functions.elementary.exponential.LambertW.fdiff"]], "fdiff() (diofant.functions.elementary.exponential.log method)": [[31, "diofant.functions.elementary.exponential.log.fdiff"]], "fdiff() (diofant.functions.elementary.hyperbolic.csch method)": [[31, "diofant.functions.elementary.hyperbolic.csch.fdiff"]], "fdiff() (diofant.functions.elementary.hyperbolic.sinh method)": [[31, "diofant.functions.elementary.hyperbolic.sinh.fdiff"]], "floor (class in diofant.functions.elementary.integers)": [[31, "diofant.functions.elementary.integers.floor"]], "im (class in diofant.functions.elementary.complexes)": [[31, "diofant.functions.elementary.complexes.im"]], "inverse() (diofant.functions.elementary.exponential.log method)": [[31, "diofant.functions.elementary.exponential.log.inverse"]], "inverse() (diofant.functions.elementary.hyperbolic.acosh method)": [[31, "diofant.functions.elementary.hyperbolic.acosh.inverse"]], "inverse() (diofant.functions.elementary.hyperbolic.acoth method)": [[31, "diofant.functions.elementary.hyperbolic.acoth.inverse"]], "inverse() (diofant.functions.elementary.hyperbolic.asinh method)": [[31, "diofant.functions.elementary.hyperbolic.asinh.inverse"]], "inverse() (diofant.functions.elementary.hyperbolic.atanh method)": [[31, "diofant.functions.elementary.hyperbolic.atanh.inverse"]], "inverse() (diofant.functions.elementary.hyperbolic.coth method)": [[31, "diofant.functions.elementary.hyperbolic.coth.inverse"]], "inverse() (diofant.functions.elementary.hyperbolic.sinh method)": [[31, "diofant.functions.elementary.hyperbolic.sinh.inverse"]], "inverse() (diofant.functions.elementary.hyperbolic.tanh method)": [[31, "diofant.functions.elementary.hyperbolic.tanh.inverse"]], "inverse() (diofant.functions.elementary.trigonometric.acos method)": [[31, "diofant.functions.elementary.trigonometric.acos.inverse"]], "inverse() (diofant.functions.elementary.trigonometric.acot method)": [[31, "diofant.functions.elementary.trigonometric.acot.inverse"]], "inverse() (diofant.functions.elementary.trigonometric.acsc method)": [[31, "diofant.functions.elementary.trigonometric.acsc.inverse"]], "inverse() (diofant.functions.elementary.trigonometric.asec method)": [[31, "diofant.functions.elementary.trigonometric.asec.inverse"]], "inverse() (diofant.functions.elementary.trigonometric.asin method)": [[31, "diofant.functions.elementary.trigonometric.asin.inverse"]], "inverse() (diofant.functions.elementary.trigonometric.atan method)": [[31, "diofant.functions.elementary.trigonometric.atan.inverse"]], "inverse() (diofant.functions.elementary.trigonometric.cot method)": [[31, "diofant.functions.elementary.trigonometric.cot.inverse"]], "inverse() (diofant.functions.elementary.trigonometric.tan method)": [[31, "diofant.functions.elementary.trigonometric.tan.inverse"]], "log (class in diofant.functions.elementary.exponential)": [[31, "diofant.functions.elementary.exponential.log"]], "periodic_argument (class in diofant.functions.elementary.complexes)": [[31, "diofant.functions.elementary.complexes.periodic_argument"]], "piecewise_fold() (in module diofant.functions.elementary.piecewise)": [[31, "diofant.functions.elementary.piecewise.piecewise_fold"]], "polar_lift (class in diofant.functions.elementary.complexes)": [[31, "diofant.functions.elementary.complexes.polar_lift"]], "principal_branch (class in diofant.functions.elementary.complexes)": [[31, "diofant.functions.elementary.complexes.principal_branch"]], "re (class in diofant.functions.elementary.complexes)": [[31, "diofant.functions.elementary.complexes.re"]], "real_root() (in module diofant.functions.elementary.miscellaneous)": [[31, "diofant.functions.elementary.miscellaneous.real_root"]], "root() (in module diofant.functions.elementary.miscellaneous)": [[31, "diofant.functions.elementary.miscellaneous.root"]], "sec (class in diofant.functions.elementary.trigonometric)": [[31, "diofant.functions.elementary.trigonometric.sec"]], "sech (class in diofant.functions.elementary.hyperbolic)": [[31, "diofant.functions.elementary.hyperbolic.sech"]], "sign (class in diofant.functions.elementary.complexes)": [[31, "diofant.functions.elementary.complexes.sign"]], "sin (class in diofant.functions.elementary.trigonometric)": [[31, "diofant.functions.elementary.trigonometric.sin"]], "sinh (class in diofant.functions.elementary.hyperbolic)": [[31, "diofant.functions.elementary.hyperbolic.sinh"]], "sqrt() (in module diofant.functions.elementary.miscellaneous)": [[31, "diofant.functions.elementary.miscellaneous.sqrt"]], "tan (class in diofant.functions.elementary.trigonometric)": [[31, "diofant.functions.elementary.trigonometric.tan"]], "tanh (class in diofant.functions.elementary.hyperbolic)": [[31, "diofant.functions.elementary.hyperbolic.tanh"]], "taylor_term() (diofant.functions.elementary.hyperbolic.csch static method)": [[31, "diofant.functions.elementary.hyperbolic.csch.taylor_term"]], "taylor_term() (diofant.functions.elementary.hyperbolic.sinh static method)": [[31, "diofant.functions.elementary.hyperbolic.sinh.taylor_term"]], "transpose (class in diofant.functions.elementary.complexes)": [[31, "diofant.functions.elementary.complexes.transpose"]], "diofant.functions": [[32, "module-diofant.functions"]], "airybase (class in diofant.functions.special.bessel)": [[33, "diofant.functions.special.bessel.AiryBase"]], "besselbase (class in diofant.functions.special.bessel)": [[33, "diofant.functions.special.bessel.BesselBase"]], "chi (class in diofant.functions.special.error_functions)": [[33, "diofant.functions.special.error_functions.Chi"]], "ci (class in diofant.functions.special.error_functions)": [[33, "diofant.functions.special.error_functions.Ci"]], "diracdelta (class in diofant.functions.special.delta_functions)": [[33, "diofant.functions.special.delta_functions.DiracDelta"]], "e1() (in module diofant.functions.special.error_functions)": [[33, "diofant.functions.special.error_functions.E1"]], "ei (class in diofant.functions.special.error_functions)": [[33, "diofant.functions.special.error_functions.Ei"]], "eijk() (in module diofant.functions.special.tensor_functions)": [[33, "diofant.functions.special.tensor_functions.Eijk"]], "fresnelintegral (class in diofant.functions.special.error_functions)": [[33, "diofant.functions.special.error_functions.FresnelIntegral"]], "heaviside (class in diofant.functions.special.delta_functions)": [[33, "diofant.functions.special.delta_functions.Heaviside"]], "kroneckerdelta (class in diofant.functions.special.tensor_functions)": [[33, "diofant.functions.special.tensor_functions.KroneckerDelta"]], "levicivita (class in diofant.functions.special.tensor_functions)": [[33, "diofant.functions.special.tensor_functions.LeviCivita"]], "li (class in diofant.functions.special.error_functions)": [[33, "diofant.functions.special.error_functions.Li"], [33, "diofant.functions.special.error_functions.li"]], "shi (class in diofant.functions.special.error_functions)": [[33, "diofant.functions.special.error_functions.Shi"]], "si (class in diofant.functions.special.error_functions)": [[33, "diofant.functions.special.error_functions.Si"]], "ynm (class in diofant.functions.special.spherical_harmonics)": [[33, "diofant.functions.special.spherical_harmonics.Ynm"]], "ynm_c() (in module diofant.functions.special.spherical_harmonics)": [[33, "diofant.functions.special.spherical_harmonics.Ynm_c"]], "znm (class in diofant.functions.special.spherical_harmonics)": [[33, "diofant.functions.special.spherical_harmonics.Znm"]], "airyai (class in diofant.functions.special.bessel)": [[33, "diofant.functions.special.bessel.airyai"]], "airyaiprime (class in diofant.functions.special.bessel)": [[33, "diofant.functions.special.bessel.airyaiprime"]], "airybi (class in diofant.functions.special.bessel)": [[33, "diofant.functions.special.bessel.airybi"]], "airybiprime (class in diofant.functions.special.bessel)": [[33, "diofant.functions.special.bessel.airybiprime"]], "an (diofant.functions.special.hyper.meijerg property)": [[33, "diofant.functions.special.hyper.meijerg.an"]], "aother (diofant.functions.special.hyper.meijerg property)": [[33, "diofant.functions.special.hyper.meijerg.aother"]], "ap (diofant.functions.special.hyper.hyper property)": [[33, "diofant.functions.special.hyper.hyper.ap"]], "ap (diofant.functions.special.hyper.meijerg property)": [[33, "diofant.functions.special.hyper.meijerg.ap"]], "argument (diofant.functions.special.bessel.besselbase property)": [[33, "diofant.functions.special.bessel.BesselBase.argument"]], "argument (diofant.functions.special.hyper.hyper property)": [[33, "diofant.functions.special.hyper.hyper.argument"]], "argument (diofant.functions.special.hyper.meijerg property)": [[33, "diofant.functions.special.hyper.meijerg.argument"]], "assoc_laguerre (class in diofant.functions.special.polynomials)": [[33, "diofant.functions.special.polynomials.assoc_laguerre"]], "assoc_legendre (class in diofant.functions.special.polynomials)": [[33, "diofant.functions.special.polynomials.assoc_legendre"]], "besseli (class in diofant.functions.special.bessel)": [[33, "diofant.functions.special.bessel.besseli"]], "besselj (class in diofant.functions.special.bessel)": [[33, "diofant.functions.special.bessel.besselj"]], "besselk (class in diofant.functions.special.bessel)": [[33, "diofant.functions.special.bessel.besselk"]], "bessely (class in diofant.functions.special.bessel)": [[33, "diofant.functions.special.bessel.bessely"]], "beta (class in diofant.functions.special.beta_functions)": [[33, "diofant.functions.special.beta_functions.beta"]], "bm (diofant.functions.special.hyper.meijerg property)": [[33, "diofant.functions.special.hyper.meijerg.bm"]], "bother (diofant.functions.special.hyper.meijerg property)": [[33, "diofant.functions.special.hyper.meijerg.bother"]], "bq (diofant.functions.special.hyper.hyper property)": [[33, "diofant.functions.special.hyper.hyper.bq"]], "bq (diofant.functions.special.hyper.meijerg property)": [[33, "diofant.functions.special.hyper.meijerg.bq"]], "bspline_basis() (in module diofant.functions.special.bsplines)": [[33, "diofant.functions.special.bsplines.bspline_basis"]], "bspline_basis_set() (in module diofant.functions.special.bsplines)": [[33, "diofant.functions.special.bsplines.bspline_basis_set"]], "chebyshevt (class in diofant.functions.special.polynomials)": [[33, "diofant.functions.special.polynomials.chebyshevt"]], "chebyshevt_root (class in diofant.functions.special.polynomials)": [[33, "diofant.functions.special.polynomials.chebyshevt_root"]], "chebyshevu (class in diofant.functions.special.polynomials)": [[33, "diofant.functions.special.polynomials.chebyshevu"]], "chebyshevu_root (class in diofant.functions.special.polynomials)": [[33, "diofant.functions.special.polynomials.chebyshevu_root"]], "convergence_statement (diofant.functions.special.hyper.hyper property)": [[33, "diofant.functions.special.hyper.hyper.convergence_statement"]], "delta (diofant.functions.special.hyper.meijerg property)": [[33, "diofant.functions.special.hyper.meijerg.delta"]], "digamma() (in module diofant.functions.special.gamma_functions)": [[33, "diofant.functions.special.gamma_functions.digamma"]], "diofant.functions.special.bessel": [[33, "module-diofant.functions.special.bessel"]], "diofant.functions.special.beta_functions": [[33, "module-diofant.functions.special.beta_functions"]], "diofant.functions.special.elliptic_integrals": [[33, "module-diofant.functions.special.elliptic_integrals"]], "diofant.functions.special.error_functions": [[33, "module-diofant.functions.special.error_functions"]], "diofant.functions.special.gamma_functions": [[33, "module-diofant.functions.special.gamma_functions"]], "diofant.functions.special.polynomials": [[33, "module-diofant.functions.special.polynomials"]], "diofant.functions.special.zeta_functions": [[33, "module-diofant.functions.special.zeta_functions"]], "dirichlet_eta (class in diofant.functions.special.zeta_functions)": [[33, "diofant.functions.special.zeta_functions.dirichlet_eta"]], "elliptic_e (class in diofant.functions.special.elliptic_integrals)": [[33, "diofant.functions.special.elliptic_integrals.elliptic_e"]], "elliptic_f (class in diofant.functions.special.elliptic_integrals)": [[33, "diofant.functions.special.elliptic_integrals.elliptic_f"]], "elliptic_k (class in diofant.functions.special.elliptic_integrals)": [[33, "diofant.functions.special.elliptic_integrals.elliptic_k"]], "elliptic_pi (class in diofant.functions.special.elliptic_integrals)": [[33, "diofant.functions.special.elliptic_integrals.elliptic_pi"]], "erf (class in diofant.functions.special.error_functions)": [[33, "diofant.functions.special.error_functions.erf"]], "erf2 (class in diofant.functions.special.error_functions)": [[33, "diofant.functions.special.error_functions.erf2"]], "erf2inv (class in diofant.functions.special.error_functions)": [[33, "diofant.functions.special.error_functions.erf2inv"]], "erfc (class in diofant.functions.special.error_functions)": [[33, "diofant.functions.special.error_functions.erfc"]], "erfcinv (class in diofant.functions.special.error_functions)": [[33, "diofant.functions.special.error_functions.erfcinv"]], "erfi (class in diofant.functions.special.error_functions)": [[33, "diofant.functions.special.error_functions.erfi"]], "erfinv (class in diofant.functions.special.error_functions)": [[33, "diofant.functions.special.error_functions.erfinv"]], "eta (diofant.functions.special.hyper.hyper property)": [[33, "diofant.functions.special.hyper.hyper.eta"]], "eval() (diofant.functions.special.tensor_functions.kroneckerdelta class method)": [[33, "diofant.functions.special.tensor_functions.KroneckerDelta.eval"]], "eval_levicivita() (in module diofant.functions.special.tensor_functions)": [[33, "diofant.functions.special.tensor_functions.eval_levicivita"]], "expint (class in diofant.functions.special.error_functions)": [[33, "diofant.functions.special.error_functions.expint"]], "fresnelc (class in diofant.functions.special.error_functions)": [[33, "diofant.functions.special.error_functions.fresnelc"]], "fresnels (class in diofant.functions.special.error_functions)": [[33, "diofant.functions.special.error_functions.fresnels"]], "gamma (class in diofant.functions.special.gamma_functions)": [[33, "diofant.functions.special.gamma_functions.gamma"]], "gegenbauer (class in diofant.functions.special.polynomials)": [[33, "diofant.functions.special.polynomials.gegenbauer"]], "get_period() (diofant.functions.special.hyper.meijerg method)": [[33, "diofant.functions.special.hyper.meijerg.get_period"]], "hankel1 (class in diofant.functions.special.bessel)": [[33, "diofant.functions.special.bessel.hankel1"]], "hankel2 (class in diofant.functions.special.bessel)": [[33, "diofant.functions.special.bessel.hankel2"]], "hermite (class in diofant.functions.special.polynomials)": [[33, "diofant.functions.special.polynomials.hermite"]], "hyper (class in diofant.functions.special.hyper)": [[33, "diofant.functions.special.hyper.hyper"]], "indices_contain_equal_information (diofant.functions.special.tensor_functions.kroneckerdelta property)": [[33, "diofant.functions.special.tensor_functions.KroneckerDelta.indices_contain_equal_information"]], "integrand() (diofant.functions.special.hyper.meijerg method)": [[33, "diofant.functions.special.hyper.meijerg.integrand"]], "is_above_fermi (diofant.functions.special.tensor_functions.kroneckerdelta property)": [[33, "diofant.functions.special.tensor_functions.KroneckerDelta.is_above_fermi"]], "is_below_fermi (diofant.functions.special.tensor_functions.kroneckerdelta property)": [[33, "diofant.functions.special.tensor_functions.KroneckerDelta.is_below_fermi"]], "is_only_above_fermi (diofant.functions.special.tensor_functions.kroneckerdelta property)": [[33, "diofant.functions.special.tensor_functions.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (diofant.functions.special.tensor_functions.kroneckerdelta property)": [[33, "diofant.functions.special.tensor_functions.KroneckerDelta.is_only_below_fermi"]], "is_simple() (diofant.functions.special.delta_functions.diracdelta method)": [[33, "diofant.functions.special.delta_functions.DiracDelta.is_simple"]], "jacobi (class in diofant.functions.special.polynomials)": [[33, "diofant.functions.special.polynomials.jacobi"]], "jacobi_normalized() (in module diofant.functions.special.polynomials)": [[33, "diofant.functions.special.polynomials.jacobi_normalized"]], "jn (class in diofant.functions.special.bessel)": [[33, "diofant.functions.special.bessel.jn"]], "jn_zeros() (in module diofant.functions.special.bessel)": [[33, "diofant.functions.special.bessel.jn_zeros"]], "killable_index (diofant.functions.special.tensor_functions.kroneckerdelta property)": [[33, "diofant.functions.special.tensor_functions.KroneckerDelta.killable_index"]], "laguerre (class in diofant.functions.special.polynomials)": [[33, "diofant.functions.special.polynomials.laguerre"]], "legendre (class in diofant.functions.special.polynomials)": [[33, "diofant.functions.special.polynomials.legendre"]], "lerchphi (class in diofant.functions.special.zeta_functions)": [[33, "diofant.functions.special.zeta_functions.lerchphi"]], "loggamma (class in diofant.functions.special.gamma_functions)": [[33, "diofant.functions.special.gamma_functions.loggamma"]], "lowergamma (class in diofant.functions.special.gamma_functions)": [[33, "diofant.functions.special.gamma_functions.lowergamma"]], "meijerg (class in diofant.functions.special.hyper)": [[33, "diofant.functions.special.hyper.meijerg"]], "nu (diofant.functions.special.hyper.meijerg property)": [[33, "diofant.functions.special.hyper.meijerg.nu"]], "order (diofant.functions.special.bessel.besselbase property)": [[33, "diofant.functions.special.bessel.BesselBase.order"]], "polygamma (class in diofant.functions.special.gamma_functions)": [[33, "diofant.functions.special.gamma_functions.polygamma"]], "polylog (class in diofant.functions.special.zeta_functions)": [[33, "diofant.functions.special.zeta_functions.polylog"]], "preferred_index (diofant.functions.special.tensor_functions.kroneckerdelta property)": [[33, "diofant.functions.special.tensor_functions.KroneckerDelta.preferred_index"]], "radius_of_convergence (diofant.functions.special.hyper.hyper property)": [[33, "diofant.functions.special.hyper.hyper.radius_of_convergence"]], "simplify() (diofant.functions.special.delta_functions.diracdelta method)": [[33, "diofant.functions.special.delta_functions.DiracDelta.simplify"]], "trigamma() (in module diofant.functions.special.gamma_functions)": [[33, "diofant.functions.special.gamma_functions.trigamma"]], "uppergamma (class in diofant.functions.special.gamma_functions)": [[33, "diofant.functions.special.gamma_functions.uppergamma"]], "yn (class in diofant.functions.special.bessel)": [[33, "diofant.functions.special.bessel.yn"]], "zeta (class in diofant.functions.special.zeta_functions)": [[33, "diofant.functions.special.zeta_functions.zeta"]], "curve (class in diofant.geometry.curve)": [[34, "diofant.geometry.curve.Curve"]], "arbitrary_point() (diofant.geometry.curve.curve method)": [[34, "diofant.geometry.curve.Curve.arbitrary_point"]], "diofant.geometry.curve": [[34, "module-diofant.geometry.curve"]], "free_symbols (diofant.geometry.curve.curve property)": [[34, "diofant.geometry.curve.Curve.free_symbols"]], "functions (diofant.geometry.curve.curve property)": [[34, "diofant.geometry.curve.Curve.functions"]], "limits (diofant.geometry.curve.curve property)": [[34, "diofant.geometry.curve.Curve.limits"]], "parameter (diofant.geometry.curve.curve property)": [[34, "diofant.geometry.curve.Curve.parameter"]], "plot_interval() (diofant.geometry.curve.curve method)": [[34, "diofant.geometry.curve.Curve.plot_interval"]], "rotate() (diofant.geometry.curve.curve method)": [[34, "diofant.geometry.curve.Curve.rotate"]], "scale() (diofant.geometry.curve.curve method)": [[34, "diofant.geometry.curve.Curve.scale"]], "translate() (diofant.geometry.curve.curve method)": [[34, "diofant.geometry.curve.Curve.translate"]], "circle (class in diofant.geometry.ellipse)": [[35, "diofant.geometry.ellipse.Circle"]], "ellipse (class in diofant.geometry.ellipse)": [[35, "diofant.geometry.ellipse.Ellipse"]], "apoapsis (diofant.geometry.ellipse.ellipse property)": [[35, "diofant.geometry.ellipse.Ellipse.apoapsis"]], "arbitrary_point() (diofant.geometry.ellipse.ellipse method)": [[35, "diofant.geometry.ellipse.Ellipse.arbitrary_point"]], "area (diofant.geometry.ellipse.ellipse property)": [[35, "diofant.geometry.ellipse.Ellipse.area"]], "center (diofant.geometry.ellipse.ellipse property)": [[35, "diofant.geometry.ellipse.Ellipse.center"]], "circumference (diofant.geometry.ellipse.circle property)": [[35, "diofant.geometry.ellipse.Circle.circumference"]], "circumference (diofant.geometry.ellipse.ellipse property)": [[35, "diofant.geometry.ellipse.Ellipse.circumference"]], "diofant.geometry.ellipse": [[35, "module-diofant.geometry.ellipse"]], "eccentricity (diofant.geometry.ellipse.ellipse property)": [[35, "diofant.geometry.ellipse.Ellipse.eccentricity"]], "encloses_point() (diofant.geometry.ellipse.ellipse method)": [[35, "diofant.geometry.ellipse.Ellipse.encloses_point"]], "equation() (diofant.geometry.ellipse.circle method)": [[35, "diofant.geometry.ellipse.Circle.equation"]], "equation() (diofant.geometry.ellipse.ellipse method)": [[35, "diofant.geometry.ellipse.Ellipse.equation"]], "evolute() (diofant.geometry.ellipse.ellipse method)": [[35, "diofant.geometry.ellipse.Ellipse.evolute"]], "foci (diofant.geometry.ellipse.ellipse property)": [[35, "diofant.geometry.ellipse.Ellipse.foci"]], "focus_distance (diofant.geometry.ellipse.ellipse property)": [[35, "diofant.geometry.ellipse.Ellipse.focus_distance"]], "hradius (diofant.geometry.ellipse.ellipse property)": [[35, "diofant.geometry.ellipse.Ellipse.hradius"]], "intersection() (diofant.geometry.ellipse.circle method)": [[35, "diofant.geometry.ellipse.Circle.intersection"]], "intersection() (diofant.geometry.ellipse.ellipse method)": [[35, "diofant.geometry.ellipse.Ellipse.intersection"]], "is_tangent() (diofant.geometry.ellipse.ellipse method)": [[35, "diofant.geometry.ellipse.Ellipse.is_tangent"]], "major (diofant.geometry.ellipse.ellipse property)": [[35, "diofant.geometry.ellipse.Ellipse.major"]], "minor (diofant.geometry.ellipse.ellipse property)": [[35, "diofant.geometry.ellipse.Ellipse.minor"]], "normal_lines() (diofant.geometry.ellipse.ellipse method)": [[35, "diofant.geometry.ellipse.Ellipse.normal_lines"]], "periapsis (diofant.geometry.ellipse.ellipse property)": [[35, "diofant.geometry.ellipse.Ellipse.periapsis"]], "plot_interval() (diofant.geometry.ellipse.ellipse method)": [[35, "diofant.geometry.ellipse.Ellipse.plot_interval"]], "radius (diofant.geometry.ellipse.circle property)": [[35, "diofant.geometry.ellipse.Circle.radius"]], "random_point() (diofant.geometry.ellipse.ellipse method)": [[35, "diofant.geometry.ellipse.Ellipse.random_point"]], "reflect() (diofant.geometry.ellipse.circle method)": [[35, "diofant.geometry.ellipse.Circle.reflect"]], "reflect() (diofant.geometry.ellipse.ellipse method)": [[35, "diofant.geometry.ellipse.Ellipse.reflect"]], "rotate() (diofant.geometry.ellipse.ellipse method)": [[35, "diofant.geometry.ellipse.Ellipse.rotate"]], "scale() (diofant.geometry.ellipse.circle method)": [[35, "diofant.geometry.ellipse.Circle.scale"]], "scale() (diofant.geometry.ellipse.ellipse method)": [[35, "diofant.geometry.ellipse.Ellipse.scale"]], "tangent_lines() (diofant.geometry.ellipse.ellipse method)": [[35, "diofant.geometry.ellipse.Ellipse.tangent_lines"]], "vradius (diofant.geometry.ellipse.circle property)": [[35, "diofant.geometry.ellipse.Circle.vradius"]], "vradius (diofant.geometry.ellipse.ellipse property)": [[35, "diofant.geometry.ellipse.Ellipse.vradius"]], "geometryentity (class in diofant.geometry.entity)": [[36, "diofant.geometry.entity.GeometryEntity"]], "ambient_dimension (diofant.geometry.entity.geometryentity property)": [[36, "diofant.geometry.entity.GeometryEntity.ambient_dimension"]], "diofant.geometry.entity": [[36, "module-diofant.geometry.entity"]], "encloses() (diofant.geometry.entity.geometryentity method)": [[36, "diofant.geometry.entity.GeometryEntity.encloses"]], "intersection() (diofant.geometry.entity.geometryentity method)": [[36, "diofant.geometry.entity.GeometryEntity.intersection"]], "is_similar() (diofant.geometry.entity.geometryentity method)": [[36, "diofant.geometry.entity.GeometryEntity.is_similar"]], "rotate() (diofant.geometry.entity.geometryentity method)": [[36, "diofant.geometry.entity.GeometryEntity.rotate"]], "scale() (diofant.geometry.entity.geometryentity method)": [[36, "diofant.geometry.entity.GeometryEntity.scale"]], "translate() (diofant.geometry.entity.geometryentity method)": [[36, "diofant.geometry.entity.GeometryEntity.translate"]], "diofant.geometry": [[37, "module-diofant.geometry"]], "line (class in diofant.geometry.line)": [[38, "diofant.geometry.line.Line"]], "linearentity (class in diofant.geometry.line)": [[38, "diofant.geometry.line.LinearEntity"]], "ray (class in diofant.geometry.line)": [[38, "diofant.geometry.line.Ray"]], "segment (class in diofant.geometry.line)": [[38, "diofant.geometry.line.Segment"]], "angle_between() (diofant.geometry.line.linearentity method)": [[38, "diofant.geometry.line.LinearEntity.angle_between"]], "arbitrary_point() (diofant.geometry.line.linearentity method)": [[38, "diofant.geometry.line.LinearEntity.arbitrary_point"]], "are_concurrent() (diofant.geometry.line.linearentity static method)": [[38, "diofant.geometry.line.LinearEntity.are_concurrent"]], "coefficients (diofant.geometry.line.linearentity property)": [[38, "diofant.geometry.line.LinearEntity.coefficients"]], "contains() (diofant.geometry.line.line method)": [[38, "diofant.geometry.line.Line.contains"]], "contains() (diofant.geometry.line.linearentity method)": [[38, "diofant.geometry.line.LinearEntity.contains"]], "contains() (diofant.geometry.line.ray method)": [[38, "diofant.geometry.line.Ray.contains"]], "contains() (diofant.geometry.line.segment method)": [[38, "diofant.geometry.line.Segment.contains"]], "diofant.geometry.line": [[38, "module-diofant.geometry.line"]], "direction (diofant.geometry.line.ray property)": [[38, "diofant.geometry.line.Ray.direction"]], "distance() (diofant.geometry.line.line method)": [[38, "diofant.geometry.line.Line.distance"]], "distance() (diofant.geometry.line.ray method)": [[38, "diofant.geometry.line.Ray.distance"]], "distance() (diofant.geometry.line.segment method)": [[38, "diofant.geometry.line.Segment.distance"]], "equal() (diofant.geometry.line.line method)": [[38, "diofant.geometry.line.Line.equal"]], "equation() (diofant.geometry.line.line method)": [[38, "diofant.geometry.line.Line.equation"]], "intersection() (diofant.geometry.line.linearentity method)": [[38, "diofant.geometry.line.LinearEntity.intersection"]], "is_parallel() (diofant.geometry.line.linearentity method)": [[38, "diofant.geometry.line.LinearEntity.is_parallel"]], "is_perpendicular() (diofant.geometry.line.linearentity method)": [[38, "diofant.geometry.line.LinearEntity.is_perpendicular"]], "is_similar() (diofant.geometry.line.linearentity method)": [[38, "diofant.geometry.line.LinearEntity.is_similar"]], "length (diofant.geometry.line.linearentity property)": [[38, "diofant.geometry.line.LinearEntity.length"]], "length (diofant.geometry.line.segment property)": [[38, "diofant.geometry.line.Segment.length"]], "midpoint (diofant.geometry.line.segment property)": [[38, "diofant.geometry.line.Segment.midpoint"]], "p1 (diofant.geometry.line.linearentity property)": [[38, "diofant.geometry.line.LinearEntity.p1"]], "p2 (diofant.geometry.line.linearentity property)": [[38, "diofant.geometry.line.LinearEntity.p2"]], "parallel_line() (diofant.geometry.line.linearentity method)": [[38, "diofant.geometry.line.LinearEntity.parallel_line"]], "perpendicular_bisector() (diofant.geometry.line.segment method)": [[38, "diofant.geometry.line.Segment.perpendicular_bisector"]], "perpendicular_line() (diofant.geometry.line.linearentity method)": [[38, "diofant.geometry.line.LinearEntity.perpendicular_line"]], "perpendicular_segment() (diofant.geometry.line.linearentity method)": [[38, "diofant.geometry.line.LinearEntity.perpendicular_segment"]], "plot_interval() (diofant.geometry.line.line method)": [[38, "diofant.geometry.line.Line.plot_interval"]], "plot_interval() (diofant.geometry.line.ray method)": [[38, "diofant.geometry.line.Ray.plot_interval"]], "plot_interval() (diofant.geometry.line.segment method)": [[38, "diofant.geometry.line.Segment.plot_interval"]], "points (diofant.geometry.line.linearentity property)": [[38, "diofant.geometry.line.LinearEntity.points"]], "projection() (diofant.geometry.line.linearentity method)": [[38, "diofant.geometry.line.LinearEntity.projection"]], "random_point() (diofant.geometry.line.linearentity method)": [[38, "diofant.geometry.line.LinearEntity.random_point"]], "slope (diofant.geometry.line.linearentity property)": [[38, "diofant.geometry.line.LinearEntity.slope"]], "source (diofant.geometry.line.ray property)": [[38, "diofant.geometry.line.Ray.source"]], "xdirection (diofant.geometry.line.ray property)": [[38, "diofant.geometry.line.Ray.xdirection"]], "ydirection (diofant.geometry.line.ray property)": [[38, "diofant.geometry.line.Ray.ydirection"]], "point (class in diofant.geometry.point)": [[39, "diofant.geometry.point.Point"]], "ambient_dimension (diofant.geometry.point.point property)": [[39, "diofant.geometry.point.Point.ambient_dimension"]], "bounds (diofant.geometry.point.point property)": [[39, "diofant.geometry.point.Point.bounds"]], "diofant.geometry.point": [[39, "module-diofant.geometry.point"]], "distance() (diofant.geometry.point.point method)": [[39, "diofant.geometry.point.Point.distance"]], "dot() (diofant.geometry.point.point method)": [[39, "diofant.geometry.point.Point.dot"]], "evalf() (diofant.geometry.point.point method)": [[39, "diofant.geometry.point.Point.evalf"]], "intersection() (diofant.geometry.point.point method)": [[39, "diofant.geometry.point.Point.intersection"]], "is_collinear() (diofant.geometry.point.point method)": [[39, "diofant.geometry.point.Point.is_collinear"]], "is_concyclic() (diofant.geometry.point.point method)": [[39, "diofant.geometry.point.Point.is_concyclic"]], "is_scalar_multiple() (diofant.geometry.point.point method)": [[39, "diofant.geometry.point.Point.is_scalar_multiple"]], "is_zero (diofant.geometry.point.point property)": [[39, "diofant.geometry.point.Point.is_zero"]], "length (diofant.geometry.point.point property)": [[39, "diofant.geometry.point.Point.length"]], "midpoint() (diofant.geometry.point.point method)": [[39, "diofant.geometry.point.Point.midpoint"]], "origin (diofant.geometry.point.point property)": [[39, "diofant.geometry.point.Point.origin"]], "rotate() (diofant.geometry.point.point method)": [[39, "diofant.geometry.point.Point.rotate"]], "scale() (diofant.geometry.point.point method)": [[39, "diofant.geometry.point.Point.scale"]], "transform() (diofant.geometry.point.point method)": [[39, "diofant.geometry.point.Point.transform"]], "translate() (diofant.geometry.point.point method)": [[39, "diofant.geometry.point.Point.translate"]], "x (diofant.geometry.point.point property)": [[39, "diofant.geometry.point.Point.x"]], "y (diofant.geometry.point.point property)": [[39, "diofant.geometry.point.Point.y"]], "polygon (class in diofant.geometry.polygon)": [[40, "diofant.geometry.polygon.Polygon"]], "regularpolygon (class in diofant.geometry.polygon)": [[40, "diofant.geometry.polygon.RegularPolygon"]], "triangle (class in diofant.geometry.polygon)": [[40, "diofant.geometry.polygon.Triangle"]], "altitudes (diofant.geometry.polygon.triangle property)": [[40, "diofant.geometry.polygon.Triangle.altitudes"]], "angles (diofant.geometry.polygon.polygon property)": [[40, "diofant.geometry.polygon.Polygon.angles"]], "angles (diofant.geometry.polygon.regularpolygon property)": [[40, "diofant.geometry.polygon.RegularPolygon.angles"]], "apothem (diofant.geometry.polygon.regularpolygon property)": [[40, "diofant.geometry.polygon.RegularPolygon.apothem"]], "arbitrary_point() (diofant.geometry.polygon.polygon method)": [[40, "diofant.geometry.polygon.Polygon.arbitrary_point"]], "area (diofant.geometry.polygon.polygon property)": [[40, "diofant.geometry.polygon.Polygon.area"]], "area (diofant.geometry.polygon.regularpolygon property)": [[40, "diofant.geometry.polygon.RegularPolygon.area"]], "args (diofant.geometry.polygon.regularpolygon property)": [[40, "diofant.geometry.polygon.RegularPolygon.args"]], "bisectors() (diofant.geometry.polygon.triangle method)": [[40, "diofant.geometry.polygon.Triangle.bisectors"]], "center (diofant.geometry.polygon.regularpolygon property)": [[40, "diofant.geometry.polygon.RegularPolygon.center"]], "centroid (diofant.geometry.polygon.polygon property)": [[40, "diofant.geometry.polygon.Polygon.centroid"]], "centroid (diofant.geometry.polygon.regularpolygon property)": [[40, "diofant.geometry.polygon.RegularPolygon.centroid"]], "circumcenter (diofant.geometry.polygon.regularpolygon property)": [[40, "diofant.geometry.polygon.RegularPolygon.circumcenter"]], "circumcenter (diofant.geometry.polygon.triangle property)": [[40, "diofant.geometry.polygon.Triangle.circumcenter"]], "circumcircle (diofant.geometry.polygon.regularpolygon property)": [[40, "diofant.geometry.polygon.RegularPolygon.circumcircle"]], "circumcircle (diofant.geometry.polygon.triangle property)": [[40, "diofant.geometry.polygon.Triangle.circumcircle"]], "circumradius (diofant.geometry.polygon.regularpolygon property)": [[40, "diofant.geometry.polygon.RegularPolygon.circumradius"]], "circumradius (diofant.geometry.polygon.triangle property)": [[40, "diofant.geometry.polygon.Triangle.circumradius"]], "diofant.geometry.polygon": [[40, "module-diofant.geometry.polygon"]], "distance() (diofant.geometry.polygon.polygon method)": [[40, "diofant.geometry.polygon.Polygon.distance"]], "encloses_point() (diofant.geometry.polygon.polygon method)": [[40, "diofant.geometry.polygon.Polygon.encloses_point"]], "encloses_point() (diofant.geometry.polygon.regularpolygon method)": [[40, "diofant.geometry.polygon.RegularPolygon.encloses_point"]], "exterior_angle (diofant.geometry.polygon.regularpolygon property)": [[40, "diofant.geometry.polygon.RegularPolygon.exterior_angle"]], "incenter (diofant.geometry.polygon.triangle property)": [[40, "diofant.geometry.polygon.Triangle.incenter"]], "incircle (diofant.geometry.polygon.regularpolygon property)": [[40, "diofant.geometry.polygon.RegularPolygon.incircle"]], "incircle (diofant.geometry.polygon.triangle property)": [[40, "diofant.geometry.polygon.Triangle.incircle"]], "inradius (diofant.geometry.polygon.regularpolygon property)": [[40, "diofant.geometry.polygon.RegularPolygon.inradius"]], "inradius (diofant.geometry.polygon.triangle property)": [[40, "diofant.geometry.polygon.Triangle.inradius"]], "interior_angle (diofant.geometry.polygon.regularpolygon property)": [[40, "diofant.geometry.polygon.RegularPolygon.interior_angle"]], "intersection() (diofant.geometry.polygon.polygon method)": [[40, "diofant.geometry.polygon.Polygon.intersection"]], "is_convex() (diofant.geometry.polygon.polygon method)": [[40, "diofant.geometry.polygon.Polygon.is_convex"]], "is_equilateral() (diofant.geometry.polygon.triangle method)": [[40, "diofant.geometry.polygon.Triangle.is_equilateral"]], "is_isosceles() (diofant.geometry.polygon.triangle method)": [[40, "diofant.geometry.polygon.Triangle.is_isosceles"]], "is_right() (diofant.geometry.polygon.triangle method)": [[40, "diofant.geometry.polygon.Triangle.is_right"]], "is_scalene() (diofant.geometry.polygon.triangle method)": [[40, "diofant.geometry.polygon.Triangle.is_scalene"]], "is_similar() (diofant.geometry.polygon.triangle method)": [[40, "diofant.geometry.polygon.Triangle.is_similar"]], "length (diofant.geometry.polygon.regularpolygon property)": [[40, "diofant.geometry.polygon.RegularPolygon.length"]], "medial (diofant.geometry.polygon.triangle property)": [[40, "diofant.geometry.polygon.Triangle.medial"]], "medians (diofant.geometry.polygon.triangle property)": [[40, "diofant.geometry.polygon.Triangle.medians"]], "orthocenter (diofant.geometry.polygon.triangle property)": [[40, "diofant.geometry.polygon.Triangle.orthocenter"]], "perimeter (diofant.geometry.polygon.polygon property)": [[40, "diofant.geometry.polygon.Polygon.perimeter"]], "plot_interval() (diofant.geometry.polygon.polygon method)": [[40, "diofant.geometry.polygon.Polygon.plot_interval"]], "radius (diofant.geometry.polygon.regularpolygon property)": [[40, "diofant.geometry.polygon.RegularPolygon.radius"]], "reflect() (diofant.geometry.polygon.regularpolygon method)": [[40, "diofant.geometry.polygon.RegularPolygon.reflect"]], "rotate() (diofant.geometry.polygon.regularpolygon method)": [[40, "diofant.geometry.polygon.RegularPolygon.rotate"]], "rotation (diofant.geometry.polygon.regularpolygon property)": [[40, "diofant.geometry.polygon.RegularPolygon.rotation"]], "scale() (diofant.geometry.polygon.regularpolygon method)": [[40, "diofant.geometry.polygon.RegularPolygon.scale"]], "sides (diofant.geometry.polygon.polygon property)": [[40, "diofant.geometry.polygon.Polygon.sides"]], "spin() (diofant.geometry.polygon.regularpolygon method)": [[40, "diofant.geometry.polygon.RegularPolygon.spin"]], "vertices (diofant.geometry.polygon.polygon property)": [[40, "diofant.geometry.polygon.Polygon.vertices"]], "vertices (diofant.geometry.polygon.regularpolygon property)": [[40, "diofant.geometry.polygon.RegularPolygon.vertices"]], "vertices (diofant.geometry.polygon.triangle property)": [[40, "diofant.geometry.polygon.Triangle.vertices"]], "geometryerror": [[41, "diofant.geometry.exceptions.GeometryError"]], "are_similar() (in module diofant.geometry.util)": [[41, "diofant.geometry.util.are_similar"]], "centroid() (in module diofant.geometry.util)": [[41, "diofant.geometry.util.centroid"]], "convex_hull() (in module diofant.geometry.util)": [[41, "diofant.geometry.util.convex_hull"]], "diofant.geometry.exceptions": [[41, "module-diofant.geometry.exceptions"]], "diofant.geometry.util": [[41, "module-diofant.geometry.util"]], "idiff() (in module diofant.geometry.util)": [[41, "diofant.geometry.util.idiff"]], "intersection() (in module diofant.geometry.util)": [[41, "diofant.geometry.util.intersection"]], "diofant": [[42, "module-diofant"]], "cosinetransform (class in diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.CosineTransform"]], "fouriertransform (class in diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.FourierTransform"]], "hankeltransform (class in diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.HankelTransform"]], "integral (class in diofant.integrals.integrals)": [[43, "diofant.integrals.integrals.Integral"]], "integral.is_commutative (in module diofant.integrals.integrals)": [[43, "diofant.integrals.integrals.Integral.is_commutative"]], "integraltransform (class in diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.IntegralTransform"]], "inversecosinetransform (class in diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.InverseCosineTransform"]], "inversefouriertransform (class in diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.InverseFourierTransform"]], "inversehankeltransform (class in diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.InverseHankelTransform"]], "inverselaplacetransform (class in diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.InverseLaplaceTransform"]], "inversemellintransform (class in diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.InverseMellinTransform"]], "inversesinetransform (class in diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.InverseSineTransform"]], "laplacetransform (class in diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.LaplaceTransform"]], "mellintransform (class in diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.MellinTransform"]], "sinetransform (class in diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.SineTransform"]], "as_sum() (diofant.integrals.integrals.integral method)": [[43, "diofant.integrals.integrals.Integral.as_sum"]], "components() (in module diofant.integrals.heurisch)": [[43, "diofant.integrals.heurisch.components"]], "cosine_transform() (in module diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.cosine_transform"]], "deltaintegrate() (in module diofant.integrals.deltafunctions)": [[43, "diofant.integrals.deltafunctions.deltaintegrate"]], "diofant.integrals": [[43, "module-diofant.integrals"]], "diofant.integrals.quadrature": [[43, "module-diofant.integrals.quadrature"]], "diofant.integrals.transforms": [[43, "module-diofant.integrals.transforms"]], "doit() (diofant.integrals.integrals.integral method)": [[43, "diofant.integrals.integrals.Integral.doit"]], "doit() (diofant.integrals.transforms.integraltransform method)": [[43, "diofant.integrals.transforms.IntegralTransform.doit"]], "fourier_transform() (in module diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.fourier_transform"]], "free_symbols (diofant.integrals.integrals.integral property)": [[43, "diofant.integrals.integrals.Integral.free_symbols"]], "free_symbols (diofant.integrals.transforms.integraltransform property)": [[43, "diofant.integrals.transforms.IntegralTransform.free_symbols"]], "function (diofant.integrals.transforms.integraltransform property)": [[43, "diofant.integrals.transforms.IntegralTransform.function"]], "function_variable (diofant.integrals.transforms.integraltransform property)": [[43, "diofant.integrals.transforms.IntegralTransform.function_variable"]], "gauss_chebyshev_t() (in module diofant.integrals.quadrature)": [[43, "diofant.integrals.quadrature.gauss_chebyshev_t"]], "gauss_chebyshev_u() (in module diofant.integrals.quadrature)": [[43, "diofant.integrals.quadrature.gauss_chebyshev_u"]], "gauss_gen_laguerre() (in module diofant.integrals.quadrature)": [[43, "diofant.integrals.quadrature.gauss_gen_laguerre"]], "gauss_hermite() (in module diofant.integrals.quadrature)": [[43, "diofant.integrals.quadrature.gauss_hermite"]], "gauss_jacobi() (in module diofant.integrals.quadrature)": [[43, "diofant.integrals.quadrature.gauss_jacobi"]], "gauss_laguerre() (in module diofant.integrals.quadrature)": [[43, "diofant.integrals.quadrature.gauss_laguerre"]], "gauss_legendre() (in module diofant.integrals.quadrature)": [[43, "diofant.integrals.quadrature.gauss_legendre"]], "hankel_transform() (in module diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.hankel_transform"]], "heurisch() (in module diofant.integrals.heurisch)": [[43, "diofant.integrals.heurisch.heurisch"]], "heurisch_wrapper() (in module diofant.integrals.heurisch)": [[43, "diofant.integrals.heurisch.heurisch_wrapper"]], "integrate() (in module diofant.integrals.integrals)": [[43, "diofant.integrals.integrals.integrate"]], "inverse_cosine_transform() (in module diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.inverse_cosine_transform"]], "inverse_fourier_transform() (in module diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.inverse_fourier_transform"]], "inverse_hankel_transform() (in module diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.inverse_hankel_transform"]], "inverse_laplace_transform() (in module diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.inverse_laplace_transform"]], "inverse_mellin_transform() (in module diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.inverse_mellin_transform"]], "inverse_sine_transform() (in module diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.inverse_sine_transform"]], "laplace_transform() (in module diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.laplace_transform"]], "line_integrate() (in module diofant.integrals.integrals)": [[43, "diofant.integrals.integrals.line_integrate"]], "mellin_transform() (in module diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.mellin_transform"]], "ratint() (in module diofant.integrals.rationaltools)": [[43, "diofant.integrals.rationaltools.ratint"]], "ratint_logpart() (in module diofant.integrals.rationaltools)": [[43, "diofant.integrals.rationaltools.ratint_logpart"]], "ratint_ratpart() (in module diofant.integrals.rationaltools)": [[43, "diofant.integrals.rationaltools.ratint_ratpart"]], "sine_transform() (in module diofant.integrals.transforms)": [[43, "diofant.integrals.transforms.sine_transform"]], "transform() (diofant.integrals.integrals.integral method)": [[43, "diofant.integrals.integrals.Integral.transform"]], "transform_variable (diofant.integrals.transforms.integraltransform property)": [[43, "diofant.integrals.transforms.IntegralTransform.transform_variable"]], "trigintegrate() (in module diofant.integrals.trigonometry)": [[43, "diofant.integrals.trigonometry.trigintegrate"]], "automaticsymbols (class in diofant.interactive.session)": [[44, "diofant.interactive.session.AutomaticSymbols"]], "floatrationalizer (class in diofant.interactive.session)": [[44, "diofant.interactive.session.FloatRationalizer"]], "integerdivisionwrapper (class in diofant.interactive.session)": [[44, "diofant.interactive.session.IntegerDivisionWrapper"]], "diofant.interactive": [[44, "module-diofant.interactive"]], "diofant.interactive.printing": [[44, "module-diofant.interactive.printing"]], "diofant.interactive.session": [[44, "module-diofant.interactive.session"]], "init_printing() (in module diofant.interactive.printing)": [[44, "diofant.interactive.printing.init_printing"]], "unicode_identifiers() (in module diofant.interactive.session)": [[44, "diofant.interactive.session.unicode_identifiers"]], "and (class in diofant.logic.boolalg)": [[45, "diofant.logic.boolalg.And"]], "booleanfalse (class in diofant.logic.boolalg)": [[45, "diofant.logic.boolalg.BooleanFalse"]], "booleantrue (class in diofant.logic.boolalg)": [[45, "diofant.logic.boolalg.BooleanTrue"]], "equivalent (class in diofant.logic.boolalg)": [[45, "diofant.logic.boolalg.Equivalent"]], "ite (class in diofant.logic.boolalg)": [[45, "diofant.logic.boolalg.ITE"]], "implies (class in diofant.logic.boolalg)": [[45, "diofant.logic.boolalg.Implies"]], "nand (class in diofant.logic.boolalg)": [[45, "diofant.logic.boolalg.Nand"]], "nor (class in diofant.logic.boolalg)": [[45, "diofant.logic.boolalg.Nor"]], "not (class in diofant.logic.boolalg)": [[45, "diofant.logic.boolalg.Not"]], "or (class in diofant.logic.boolalg)": [[45, "diofant.logic.boolalg.Or"]], "xor (class in diofant.logic.boolalg)": [[45, "diofant.logic.boolalg.Xor"]], "diofant.logic": [[45, "module-diofant.logic"]], "is_cnf() (in module diofant.logic.boolalg)": [[45, "diofant.logic.boolalg.is_cnf"]], "is_dnf() (in module diofant.logic.boolalg)": [[45, "diofant.logic.boolalg.is_dnf"]], "is_nnf() (in module diofant.logic.boolalg)": [[45, "diofant.logic.boolalg.is_nnf"]], "satisfiable() (in module diofant.logic.inference)": [[45, "diofant.logic.inference.satisfiable"]], "simplify_logic() (in module diofant.logic.boolalg)": [[45, "diofant.logic.boolalg.simplify_logic"]], "to_cnf() (in module diofant.logic.boolalg)": [[45, "diofant.logic.boolalg.to_cnf"]], "to_dnf() (in module diofant.logic.boolalg)": [[45, "diofant.logic.boolalg.to_dnf"]], "to_nnf() (in module diofant.logic.boolalg)": [[45, "diofant.logic.boolalg.to_nnf"]], "densematrix (class in diofant.matrices.dense)": [[46, "diofant.matrices.dense.DenseMatrix"]], "mutabledensematrix (class in diofant.matrices.dense)": [[46, "diofant.matrices.dense.MutableDenseMatrix"]], "mutablematrix (in module diofant.matrices.dense)": [[46, "diofant.matrices.dense.MutableMatrix"]], "__getitem__() (diofant.matrices.dense.densematrix method)": [[46, "diofant.matrices.dense.DenseMatrix.__getitem__"]], "__mul__() (diofant.matrices.dense.densematrix method)": [[46, "diofant.matrices.dense.DenseMatrix.__mul__"]], "applyfunc() (diofant.matrices.dense.densematrix method)": [[46, "diofant.matrices.dense.DenseMatrix.applyfunc"]], "as_immutable() (diofant.matrices.dense.densematrix method)": [[46, "diofant.matrices.dense.DenseMatrix.as_immutable"]], "as_mutable() (diofant.matrices.dense.densematrix method)": [[46, "diofant.matrices.dense.DenseMatrix.as_mutable"]], "col_op() (diofant.matrices.dense.mutabledensematrix method)": [[46, "diofant.matrices.dense.MutableDenseMatrix.col_op"]], "col_swap() (diofant.matrices.dense.mutabledensematrix method)": [[46, "diofant.matrices.dense.MutableDenseMatrix.col_swap"]], "copyin_list() (diofant.matrices.dense.mutabledensematrix method)": [[46, "diofant.matrices.dense.MutableDenseMatrix.copyin_list"]], "copyin_matrix() (diofant.matrices.dense.mutabledensematrix method)": [[46, "diofant.matrices.dense.MutableDenseMatrix.copyin_matrix"]], "diofant.matrices.dense": [[46, "module-diofant.matrices.dense"]], "equals() (diofant.matrices.dense.densematrix method)": [[46, "diofant.matrices.dense.DenseMatrix.equals"]], "eye() (diofant.matrices.dense.densematrix class method)": [[46, "diofant.matrices.dense.DenseMatrix.eye"]], "fill() (diofant.matrices.dense.mutabledensematrix method)": [[46, "diofant.matrices.dense.MutableDenseMatrix.fill"]], "reshape() (diofant.matrices.dense.densematrix method)": [[46, "diofant.matrices.dense.DenseMatrix.reshape"]], "row_op() (diofant.matrices.dense.mutabledensematrix method)": [[46, "diofant.matrices.dense.MutableDenseMatrix.row_op"]], "row_swap() (diofant.matrices.dense.mutabledensematrix method)": [[46, "diofant.matrices.dense.MutableDenseMatrix.row_swap"]], "simplify() (diofant.matrices.dense.mutabledensematrix method)": [[46, "diofant.matrices.dense.MutableDenseMatrix.simplify"]], "tolist() (diofant.matrices.dense.densematrix method)": [[46, "diofant.matrices.dense.DenseMatrix.tolist"]], "zeros() (diofant.matrices.dense.densematrix class method)": [[46, "diofant.matrices.dense.DenseMatrix.zeros"]], "zip_row_op() (diofant.matrices.dense.mutabledensematrix method)": [[46, "diofant.matrices.dense.MutableDenseMatrix.zip_row_op"]], "blockdiagmatrix (class in diofant.matrices.expressions.blockmatrix)": [[47, "diofant.matrices.expressions.blockmatrix.BlockDiagMatrix"]], "blockmatrix (class in diofant.matrices.expressions.blockmatrix)": [[47, "diofant.matrices.expressions.blockmatrix.BlockMatrix"]], "functionmatrix (class in diofant.matrices.expressions)": [[47, "diofant.matrices.expressions.FunctionMatrix"]], "identity (class in diofant.matrices.expressions)": [[47, "diofant.matrices.expressions.Identity"]], "inverse (class in diofant.matrices.expressions)": [[47, "diofant.matrices.expressions.Inverse"]], "matadd (class in diofant.matrices.expressions)": [[47, "diofant.matrices.expressions.MatAdd"]], "matmul (class in diofant.matrices.expressions)": [[47, "diofant.matrices.expressions.MatMul"]], "matpow (class in diofant.matrices.expressions)": [[47, "diofant.matrices.expressions.MatPow"]], "matrixexpr (class in diofant.matrices.expressions)": [[47, "diofant.matrices.expressions.MatrixExpr"]], "matrixsymbol (class in diofant.matrices.expressions)": [[47, "diofant.matrices.expressions.MatrixSymbol"]], "t (diofant.matrices.expressions.matrixexpr property)": [[47, "diofant.matrices.expressions.MatrixExpr.T"]], "trace (class in diofant.matrices.expressions)": [[47, "diofant.matrices.expressions.Trace"]], "transpose (class in diofant.matrices.expressions)": [[47, "diofant.matrices.expressions.Transpose"]], "zeromatrix (class in diofant.matrices.expressions)": [[47, "diofant.matrices.expressions.ZeroMatrix"]], "as_explicit() (diofant.matrices.expressions.matrixexpr method)": [[47, "diofant.matrices.expressions.MatrixExpr.as_explicit"]], "as_mutable() (diofant.matrices.expressions.matrixexpr method)": [[47, "diofant.matrices.expressions.MatrixExpr.as_mutable"]], "block_collapse() (in module diofant.matrices.expressions.blockmatrix)": [[47, "diofant.matrices.expressions.blockmatrix.block_collapse"]], "diofant.matrices.expressions": [[47, "module-diofant.matrices.expressions"]], "diofant.matrices.expressions.blockmatrix": [[47, "module-diofant.matrices.expressions.blockmatrix"]], "equals() (diofant.matrices.expressions.matrixexpr method)": [[47, "diofant.matrices.expressions.MatrixExpr.equals"]], "transpose() (diofant.matrices.expressions.blockmatrix.blockmatrix method)": [[47, "diofant.matrices.expressions.blockmatrix.BlockMatrix.transpose"]], "c (diofant.matrices.immutable.immutablematrix property)": [[48, "diofant.matrices.immutable.ImmutableMatrix.C"]], "immutablematrix (class in diofant.matrices.immutable)": [[48, "diofant.matrices.immutable.ImmutableMatrix"]], "adjoint() (diofant.matrices.immutable.immutablematrix method)": [[48, "diofant.matrices.immutable.ImmutableMatrix.adjoint"]], "as_mutable() (diofant.matrices.immutable.immutablematrix method)": [[48, "diofant.matrices.immutable.ImmutableMatrix.as_mutable"]], "conjugate() (diofant.matrices.immutable.immutablematrix method)": [[48, "diofant.matrices.immutable.ImmutableMatrix.conjugate"]], "diff() (diofant.matrices.immutable.immutablematrix method)": [[48, "diofant.matrices.immutable.ImmutableMatrix.diff"]], "diofant.matrices.immutable": [[48, "module-diofant.matrices.immutable"]], "equals() (diofant.matrices.immutable.immutablematrix method)": [[48, "diofant.matrices.immutable.ImmutableMatrix.equals"]], "integrate() (diofant.matrices.immutable.immutablematrix method)": [[48, "diofant.matrices.immutable.ImmutableMatrix.integrate"]], "limit() (diofant.matrices.immutable.immutablematrix method)": [[48, "diofant.matrices.immutable.ImmutableMatrix.limit"]], "matrix (class in diofant.matrices)": [[49, "diofant.matrices.Matrix"]], "diofant.matrices": [[49, "module-diofant.matrices"]], "c (diofant.matrices.matrices.matrixbase property)": [[50, "diofant.matrices.matrices.MatrixBase.C"]], "d (diofant.matrices.matrices.matrixbase property)": [[50, "diofant.matrices.matrices.MatrixBase.D"]], "gramschmidt() (in module diofant.matrices.dense)": [[50, "diofant.matrices.dense.GramSchmidt"]], "h (diofant.matrices.matrices.matrixbase property)": [[50, "diofant.matrices.matrices.MatrixBase.H"]], "ldldecomposition() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.LDLdecomposition"]], "ldlsolve() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.LDLsolve"]], "ludecomposition() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.LUdecomposition"]], "ludecompositionff() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.LUdecompositionFF"]], "ludecomposition_simple() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.LUdecomposition_Simple"]], "lusolve() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.LUsolve"]], "matrixbase (class in diofant.matrices.matrices)": [[50, "diofant.matrices.matrices.MatrixBase"]], "matrixerror (class in diofant.matrices.matrices)": [[50, "diofant.matrices.matrices.MatrixError"]], "nonsquarematrixerror (class in diofant.matrices.matrices)": [[50, "diofant.matrices.matrices.NonSquareMatrixError"]], "qrdecomposition() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.QRdecomposition"]], "qrsolve() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.QRsolve"]], "shapeerror (class in diofant.matrices.matrices)": [[50, "diofant.matrices.matrices.ShapeError"]], "t (diofant.matrices.matrices.matrixbase property)": [[50, "diofant.matrices.matrices.MatrixBase.T"]], "a2idx() (in module diofant.matrices.matrices)": [[50, "diofant.matrices.matrices.a2idx"]], "add() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.add"]], "adjoint() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.adjoint"]], "adjugate() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.adjugate"]], "atoms() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.atoms"]], "berkowitz() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.berkowitz"]], "berkowitz_charpoly() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.berkowitz_charpoly"]], "berkowitz_det() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.berkowitz_det"]], "berkowitz_eigenvals() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.berkowitz_eigenvals"]], "berkowitz_minors() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.berkowitz_minors"]], "casoratian() (in module diofant.matrices.dense)": [[50, "diofant.matrices.dense.casoratian"]], "charpoly() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.charpoly"]], "cholesky() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.cholesky"]], "cholesky_solve() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.cholesky_solve"]], "classof() (in module diofant.matrices.matrices)": [[50, "diofant.matrices.matrices.classof"]], "cofactor() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.cofactor"]], "cofactormatrix() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.cofactorMatrix"]], "col_insert() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.col_insert"]], "col_join() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.col_join"]], "condition_number() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.condition_number"]], "conjugate() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.conjugate"]], "copy() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.copy"]], "cross() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.cross"]], "det() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.det"]], "det_lu_decomposition() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.det_LU_decomposition"]], "det_bareiss() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.det_bareiss"]], "diag() (in module diofant.matrices.dense)": [[50, "diofant.matrices.dense.diag"]], "diagonal_solve() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.diagonal_solve"]], "diagonalize() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.diagonalize"]], "diff() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.diff"]], "diofant.matrices.matrices": [[50, "module-diofant.matrices.matrices"]], "dot() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.dot"]], "dual() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.dual"]], "eigenvals() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.eigenvals"]], "eigenvects() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.eigenvects"]], "evalf() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.evalf"]], "exp() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.exp"]], "expand() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.expand"]], "extract() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.extract"]], "eye() (in module diofant.matrices.dense)": [[50, "diofant.matrices.dense.eye"]], "free_symbols (diofant.matrices.matrices.matrixbase property)": [[50, "diofant.matrices.matrices.MatrixBase.free_symbols"]], "get_diag_blocks() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.get_diag_blocks"]], "has() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.has"]], "hessian() (in module diofant.matrices.dense)": [[50, "diofant.matrices.dense.hessian"]], "hstack() (diofant.matrices.matrices.matrixbase class method)": [[50, "diofant.matrices.matrices.MatrixBase.hstack"]], "integrate() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.integrate"]], "inv() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.inv"]], "inv_mod() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.inv_mod"]], "inverse_adj() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.inverse_ADJ"]], "inverse_ge() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.inverse_GE"]], "inverse_lu() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.inverse_LU"]], "is_anti_symmetric() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.is_anti_symmetric"]], "is_diagonal() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.is_diagonal"]], "is_diagonalizable() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.is_diagonalizable"]], "is_hermitian (diofant.matrices.matrices.matrixbase property)": [[50, "diofant.matrices.matrices.MatrixBase.is_hermitian"]], "is_lower (diofant.matrices.matrices.matrixbase property)": [[50, "diofant.matrices.matrices.MatrixBase.is_lower"]], "is_lower_hessenberg (diofant.matrices.matrices.matrixbase property)": [[50, "diofant.matrices.matrices.MatrixBase.is_lower_hessenberg"]], "is_nilpotent() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.is_nilpotent"]], "is_square (diofant.matrices.matrices.matrixbase property)": [[50, "diofant.matrices.matrices.MatrixBase.is_square"]], "is_symbolic() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.is_symbolic"]], "is_symmetric() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.is_symmetric"]], "is_upper (diofant.matrices.matrices.matrixbase property)": [[50, "diofant.matrices.matrices.MatrixBase.is_upper"]], "is_upper_hessenberg (diofant.matrices.matrices.matrixbase property)": [[50, "diofant.matrices.matrices.MatrixBase.is_upper_hessenberg"]], "is_zero (diofant.matrices.matrices.matrixbase property)": [[50, "diofant.matrices.matrices.MatrixBase.is_zero"]], "jacobian() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.jacobian"]], "jordan_cell() (in module diofant.matrices.dense)": [[50, "diofant.matrices.dense.jordan_cell"]], "jordan_cells() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.jordan_cells"]], "jordan_form() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.jordan_form"]], "key2bounds() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.key2bounds"]], "key2ij() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.key2ij"]], "limit() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.limit"]], "list2numpy() (in module diofant.matrices.dense)": [[50, "diofant.matrices.dense.list2numpy"]], "lower_triangular_solve() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.lower_triangular_solve"]], "matrix2numpy() (in module diofant.matrices.dense)": [[50, "diofant.matrices.dense.matrix2numpy"]], "matrix_multiply_elementwise() (in module diofant.matrices.dense)": [[50, "diofant.matrices.dense.matrix_multiply_elementwise"]], "minorentry() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.minorEntry"]], "minormatrix() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.minorMatrix"]], "multiply() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.multiply"]], "multiply_elementwise() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.multiply_elementwise"]], "norm() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.norm"]], "normalized() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.normalized"]], "nullspace() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.nullspace"]], "ones() (in module diofant.matrices.dense)": [[50, "diofant.matrices.dense.ones"]], "permutebkwd() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.permuteBkwd"]], "permutefwd() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.permuteFwd"]], "pinv() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.pinv"]], "pinv_solve() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.pinv_solve"]], "print_nonzero() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.print_nonzero"]], "project() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.project"]], "randmatrix() (in module diofant.matrices.dense)": [[50, "diofant.matrices.dense.randMatrix"]], "rank() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.rank"]], "replace() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.replace"]], "rot_axis1() (in module diofant.matrices.dense)": [[50, "diofant.matrices.dense.rot_axis1"]], "rot_axis2() (in module diofant.matrices.dense)": [[50, "diofant.matrices.dense.rot_axis2"]], "rot_axis3() (in module diofant.matrices.dense)": [[50, "diofant.matrices.dense.rot_axis3"]], "row_insert() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.row_insert"]], "row_join() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.row_join"]], "rref() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.rref"]], "shape (diofant.matrices.matrices.matrixbase property)": [[50, "diofant.matrices.matrices.MatrixBase.shape"]], "simplify() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.simplify"]], "singular_values() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.singular_values"]], "solve_least_squares() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.solve_least_squares"]], "subs() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.subs"]], "symarray() (in module diofant.matrices.dense)": [[50, "diofant.matrices.dense.symarray"]], "table() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.table"]], "trace() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.trace"]], "transpose() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.transpose"]], "upper_triangular_solve() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.upper_triangular_solve"]], "values() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.values"]], "vec() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.vec"]], "vech() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.vech"]], "vstack() (diofant.matrices.matrices.matrixbase class method)": [[50, "diofant.matrices.matrices.MatrixBase.vstack"]], "wronskian() (in module diofant.matrices.dense)": [[50, "diofant.matrices.dense.wronskian"]], "xreplace() (diofant.matrices.matrices.matrixbase method)": [[50, "diofant.matrices.matrices.MatrixBase.xreplace"]], "zeros() (in module diofant.matrices.dense)": [[50, "diofant.matrices.dense.zeros"]], "cl (diofant.matrices.sparse.sparsematrixbase property)": [[51, "diofant.matrices.sparse.SparseMatrixBase.CL"]], "immutablesparsematrix (class in diofant.matrices.immutable)": [[51, "diofant.matrices.immutable.ImmutableSparseMatrix"]], "ldldecomposition() (diofant.matrices.sparse.sparsematrixbase method)": [[51, "diofant.matrices.sparse.SparseMatrixBase.LDLdecomposition"]], "mutablesparsematrix (class in diofant.matrices.sparse)": [[51, "diofant.matrices.sparse.MutableSparseMatrix"]], "rl (diofant.matrices.sparse.sparsematrixbase property)": [[51, "diofant.matrices.sparse.SparseMatrixBase.RL"]], "sparsematrix (in module diofant.matrices.sparse)": [[51, "diofant.matrices.sparse.SparseMatrix"]], "sparsematrixbase (class in diofant.matrices.sparse)": [[51, "diofant.matrices.sparse.SparseMatrixBase"]], "add() (diofant.matrices.sparse.sparsematrixbase method)": [[51, "diofant.matrices.sparse.SparseMatrixBase.add"]], "applyfunc() (diofant.matrices.sparse.sparsematrixbase method)": [[51, "diofant.matrices.sparse.SparseMatrixBase.applyfunc"]], "as_immutable() (diofant.matrices.sparse.sparsematrixbase method)": [[51, "diofant.matrices.sparse.SparseMatrixBase.as_immutable"]], "as_mutable() (diofant.matrices.sparse.sparsematrixbase method)": [[51, "diofant.matrices.sparse.SparseMatrixBase.as_mutable"]], "cholesky() (diofant.matrices.sparse.sparsematrixbase method)": [[51, "diofant.matrices.sparse.SparseMatrixBase.cholesky"]], "col_join() (diofant.matrices.sparse.mutablesparsematrix method)": [[51, "diofant.matrices.sparse.MutableSparseMatrix.col_join"]], "col_list() (diofant.matrices.sparse.sparsematrixbase method)": [[51, "diofant.matrices.sparse.SparseMatrixBase.col_list"]], "col_op() (diofant.matrices.sparse.mutablesparsematrix method)": [[51, "diofant.matrices.sparse.MutableSparseMatrix.col_op"]], "col_swap() (diofant.matrices.sparse.mutablesparsematrix method)": [[51, "diofant.matrices.sparse.MutableSparseMatrix.col_swap"]], "diofant.matrices.sparse": [[51, "module-diofant.matrices.sparse"]], "extract() (diofant.matrices.sparse.sparsematrixbase method)": [[51, "diofant.matrices.sparse.SparseMatrixBase.extract"]], "eye() (diofant.matrices.sparse.sparsematrixbase class method)": [[51, "diofant.matrices.sparse.SparseMatrixBase.eye"]], "fill() (diofant.matrices.sparse.mutablesparsematrix method)": [[51, "diofant.matrices.sparse.MutableSparseMatrix.fill"]], "has() (diofant.matrices.sparse.sparsematrixbase method)": [[51, "diofant.matrices.sparse.SparseMatrixBase.has"]], "is_hermitian (diofant.matrices.sparse.sparsematrixbase property)": [[51, "diofant.matrices.sparse.SparseMatrixBase.is_hermitian"]], "is_symmetric() (diofant.matrices.sparse.sparsematrixbase method)": [[51, "diofant.matrices.sparse.SparseMatrixBase.is_symmetric"]], "liupc() (diofant.matrices.sparse.sparsematrixbase method)": [[51, "diofant.matrices.sparse.SparseMatrixBase.liupc"]], "multiply() (diofant.matrices.sparse.sparsematrixbase method)": [[51, "diofant.matrices.sparse.SparseMatrixBase.multiply"]], "nnz() (diofant.matrices.sparse.sparsematrixbase method)": [[51, "diofant.matrices.sparse.SparseMatrixBase.nnz"]], "reshape() (diofant.matrices.sparse.sparsematrixbase method)": [[51, "diofant.matrices.sparse.SparseMatrixBase.reshape"]], "row_join() (diofant.matrices.sparse.mutablesparsematrix method)": [[51, "diofant.matrices.sparse.MutableSparseMatrix.row_join"]], "row_list() (diofant.matrices.sparse.sparsematrixbase method)": [[51, "diofant.matrices.sparse.SparseMatrixBase.row_list"]], "row_op() (diofant.matrices.sparse.mutablesparsematrix method)": [[51, "diofant.matrices.sparse.MutableSparseMatrix.row_op"]], "row_structure_symbolic_cholesky() (diofant.matrices.sparse.sparsematrixbase method)": [[51, "diofant.matrices.sparse.SparseMatrixBase.row_structure_symbolic_cholesky"]], "row_swap() (diofant.matrices.sparse.mutablesparsematrix method)": [[51, "diofant.matrices.sparse.MutableSparseMatrix.row_swap"]], "scalar_multiply() (diofant.matrices.sparse.sparsematrixbase method)": [[51, "diofant.matrices.sparse.SparseMatrixBase.scalar_multiply"]], "solve() (diofant.matrices.sparse.sparsematrixbase method)": [[51, "diofant.matrices.sparse.SparseMatrixBase.solve"]], "solve_least_squares() (diofant.matrices.sparse.sparsematrixbase method)": [[51, "diofant.matrices.sparse.SparseMatrixBase.solve_least_squares"]], "subs() (diofant.matrices.immutable.immutablesparsematrix method)": [[51, "diofant.matrices.immutable.ImmutableSparseMatrix.subs"]], "tolist() (diofant.matrices.sparse.sparsematrixbase method)": [[51, "diofant.matrices.sparse.SparseMatrixBase.tolist"]], "xreplace() (diofant.matrices.immutable.immutablesparsematrix method)": [[51, "diofant.matrices.immutable.ImmutableSparseMatrix.xreplace"]], "zeros() (diofant.matrices.sparse.sparsematrixbase class method)": [[51, "diofant.matrices.sparse.SparseMatrixBase.zeros"]], "zip_row_op() (diofant.matrices.sparse.mutablesparsematrix method)": [[51, "diofant.matrices.sparse.MutableSparseMatrix.zip_row_op"]], "sieve (class in diofant.ntheory.generate)": [[52, "diofant.ntheory.generate.Sieve"]], "antidivisor_count() (in module diofant.ntheory.factor_)": [[52, "diofant.ntheory.factor_.antidivisor_count"]], "antidivisors() (in module diofant.ntheory.factor_)": [[52, "diofant.ntheory.factor_.antidivisors"]], "binomial_coefficients() (in module diofant.ntheory.multinomial)": [[52, "diofant.ntheory.multinomial.binomial_coefficients"]], "binomial_coefficients_list() (in module diofant.ntheory.multinomial)": [[52, "diofant.ntheory.multinomial.binomial_coefficients_list"]], "continued_fraction_convergents() (in module diofant.ntheory.continued_fraction)": [[52, "diofant.ntheory.continued_fraction.continued_fraction_convergents"]], "continued_fraction_iterator() (in module diofant.ntheory.continued_fraction)": [[52, "diofant.ntheory.continued_fraction.continued_fraction_iterator"]], "continued_fraction_periodic() (in module diofant.ntheory.continued_fraction)": [[52, "diofant.ntheory.continued_fraction.continued_fraction_periodic"]], "continued_fraction_reduce() (in module diofant.ntheory.continued_fraction)": [[52, "diofant.ntheory.continued_fraction.continued_fraction_reduce"]], "core() (in module diofant.ntheory.factor_)": [[52, "diofant.ntheory.factor_.core"]], "crt() (in module diofant.ntheory.modular)": [[52, "diofant.ntheory.modular.crt"]], "crt1() (in module diofant.ntheory.modular)": [[52, "diofant.ntheory.modular.crt1"]], "crt2() (in module diofant.ntheory.modular)": [[52, "diofant.ntheory.modular.crt2"]], "cycle_length() (in module diofant.ntheory.generate)": [[52, "diofant.ntheory.generate.cycle_length"]], "diofant.ntheory.continued_fraction": [[52, "module-diofant.ntheory.continued_fraction"]], "diofant.ntheory.egyptian_fraction": [[52, "module-diofant.ntheory.egyptian_fraction"]], "diofant.ntheory.factor_": [[52, "module-diofant.ntheory.factor_"]], "diofant.ntheory.generate": [[52, "module-diofant.ntheory.generate"]], "diofant.ntheory.modular": [[52, "module-diofant.ntheory.modular"]], "diofant.ntheory.multinomial": [[52, "module-diofant.ntheory.multinomial"]], "diofant.ntheory.partitions_": [[52, "module-diofant.ntheory.partitions_"]], "diofant.ntheory.primetest": [[52, "module-diofant.ntheory.primetest"]], "diofant.ntheory.residue_ntheory": [[52, "module-diofant.ntheory.residue_ntheory"]], "discrete_log() (in module diofant.ntheory.residue_ntheory)": [[52, "diofant.ntheory.residue_ntheory.discrete_log"]], "divisor_count() (in module diofant.ntheory.factor_)": [[52, "diofant.ntheory.factor_.divisor_count"]], "divisor_sigma (class in diofant.ntheory.factor_)": [[52, "diofant.ntheory.factor_.divisor_sigma"]], "divisors() (in module diofant.ntheory.factor_)": [[52, "diofant.ntheory.factor_.divisors"]], "egyptian_fraction() (in module diofant.ntheory.egyptian_fraction)": [[52, "diofant.ntheory.egyptian_fraction.egyptian_fraction"]], "extend() (diofant.ntheory.generate.sieve method)": [[52, "diofant.ntheory.generate.Sieve.extend"]], "extend_to_no() (diofant.ntheory.generate.sieve method)": [[52, "diofant.ntheory.generate.Sieve.extend_to_no"]], "factorint() (in module diofant.ntheory.factor_)": [[52, "diofant.ntheory.factor_.factorint"]], "factorrat() (in module diofant.ntheory.factor_)": [[52, "diofant.ntheory.factor_.factorrat"]], "integer_rational_reconstruction() (in module diofant.ntheory.modular)": [[52, "diofant.ntheory.modular.integer_rational_reconstruction"]], "is_nthpow_residue() (in module diofant.ntheory.residue_ntheory)": [[52, "diofant.ntheory.residue_ntheory.is_nthpow_residue"]], "is_primitive_root() (in module diofant.ntheory.residue_ntheory)": [[52, "diofant.ntheory.residue_ntheory.is_primitive_root"]], "is_quad_residue() (in module diofant.ntheory.residue_ntheory)": [[52, "diofant.ntheory.residue_ntheory.is_quad_residue"]], "is_square() (in module diofant.ntheory.primetest)": [[52, "diofant.ntheory.primetest.is_square"]], "isprime() (in module diofant.ntheory.primetest)": [[52, "diofant.ntheory.primetest.isprime"]], "jacobi_symbol() (in module diofant.ntheory.residue_ntheory)": [[52, "diofant.ntheory.residue_ntheory.jacobi_symbol"]], "legendre_symbol() (in module diofant.ntheory.residue_ntheory)": [[52, "diofant.ntheory.residue_ntheory.legendre_symbol"]], "mobius (class in diofant.ntheory.residue_ntheory)": [[52, "diofant.ntheory.residue_ntheory.mobius"]], "mr() (in module diofant.ntheory.primetest)": [[52, "diofant.ntheory.primetest.mr"]], "multinomial_coefficients() (in module diofant.ntheory.multinomial)": [[52, "diofant.ntheory.multinomial.multinomial_coefficients"]], "multinomial_coefficients_iterator() (in module diofant.ntheory.multinomial)": [[52, "diofant.ntheory.multinomial.multinomial_coefficients_iterator"]], "multiplicity() (in module diofant.ntheory.factor_)": [[52, "diofant.ntheory.factor_.multiplicity"]], "n_order() (in module diofant.ntheory.residue_ntheory)": [[52, "diofant.ntheory.residue_ntheory.n_order"]], "nextprime() (in module diofant.ntheory.generate)": [[52, "diofant.ntheory.generate.nextprime"]], "npartitions() (in module diofant.ntheory.partitions_)": [[52, "diofant.ntheory.partitions_.npartitions"]], "nthroot_mod() (in module diofant.ntheory.residue_ntheory)": [[52, "diofant.ntheory.residue_ntheory.nthroot_mod"]], "perfect_power() (in module diofant.ntheory.factor_)": [[52, "diofant.ntheory.factor_.perfect_power"]], "pollard_pm1() (in module diofant.ntheory.factor_)": [[52, "diofant.ntheory.factor_.pollard_pm1"]], "pollard_rho() (in module diofant.ntheory.factor_)": [[52, "diofant.ntheory.factor_.pollard_rho"]], "prevprime() (in module diofant.ntheory.generate)": [[52, "diofant.ntheory.generate.prevprime"]], "prime() (in module diofant.ntheory.generate)": [[52, "diofant.ntheory.generate.prime"]], "primefactors() (in module diofant.ntheory.factor_)": [[52, "diofant.ntheory.factor_.primefactors"]], "primepi() (in module diofant.ntheory.generate)": [[52, "diofant.ntheory.generate.primepi"]], "primerange() (diofant.ntheory.generate.sieve method)": [[52, "diofant.ntheory.generate.Sieve.primerange"]], "primerange() (in module diofant.ntheory.generate)": [[52, "diofant.ntheory.generate.primerange"]], "primitive_root() (in module diofant.ntheory.residue_ntheory)": [[52, "diofant.ntheory.residue_ntheory.primitive_root"]], "primorial() (in module diofant.ntheory.generate)": [[52, "diofant.ntheory.generate.primorial"]], "quadratic_residues() (in module diofant.ntheory.residue_ntheory)": [[52, "diofant.ntheory.residue_ntheory.quadratic_residues"]], "randprime() (in module diofant.ntheory.generate)": [[52, "diofant.ntheory.generate.randprime"]], "search() (diofant.ntheory.generate.sieve method)": [[52, "diofant.ntheory.generate.Sieve.search"]], "smoothness() (in module diofant.ntheory.factor_)": [[52, "diofant.ntheory.factor_.smoothness"]], "smoothness_p() (in module diofant.ntheory.factor_)": [[52, "diofant.ntheory.factor_.smoothness_p"]], "solve_congruence() (in module diofant.ntheory.modular)": [[52, "diofant.ntheory.modular.solve_congruence"]], "sqrt_mod() (in module diofant.ntheory.residue_ntheory)": [[52, "diofant.ntheory.residue_ntheory.sqrt_mod"]], "sqrt_mod_iter() (in module diofant.ntheory.residue_ntheory)": [[52, "diofant.ntheory.residue_ntheory.sqrt_mod_iter"]], "square_factor() (in module diofant.ntheory.factor_)": [[52, "diofant.ntheory.factor_.square_factor"]], "symmetric_residue() (in module diofant.ntheory.modular)": [[52, "diofant.ntheory.modular.symmetric_residue"]], "totient (class in diofant.ntheory.factor_)": [[52, "diofant.ntheory.factor_.totient"]], "trailing() (in module diofant.ntheory.factor_)": [[52, "diofant.ntheory.factor_.trailing"]], "auto_number() (in module diofant.parsing.sympy_parser)": [[53, "diofant.parsing.sympy_parser.auto_number"]], "auto_symbol() (in module diofant.parsing.sympy_parser)": [[53, "diofant.parsing.sympy_parser.auto_symbol"]], "convert_xor() (in module diofant.parsing.sympy_parser)": [[53, "diofant.parsing.sympy_parser.convert_xor"]], "diofant.parsing": [[53, "module-diofant.parsing"]], "eval_expr() (in module diofant.parsing.sympy_parser)": [[53, "diofant.parsing.sympy_parser.eval_expr"]], "function_exponentiation() (in module diofant.parsing.sympy_parser)": [[53, "diofant.parsing.sympy_parser.function_exponentiation"]], "implicit_application() (in module diofant.parsing.sympy_parser)": [[53, "diofant.parsing.sympy_parser.implicit_application"]], "implicit_multiplication() (in module diofant.parsing.sympy_parser)": [[53, "diofant.parsing.sympy_parser.implicit_multiplication"]], "implicit_multiplication_application() (in module diofant.parsing.sympy_parser)": [[53, "diofant.parsing.sympy_parser.implicit_multiplication_application"]], "mathematica() (in module diofant.parsing.mathematica)": [[53, "diofant.parsing.mathematica.mathematica"]], "parse_expr() (in module diofant.parsing.sympy_parser)": [[53, "diofant.parsing.sympy_parser.parse_expr"]], "parse_maxima() (in module diofant.parsing.maxima)": [[53, "diofant.parsing.maxima.parse_maxima"]], "rationalize() (in module diofant.parsing.sympy_parser)": [[53, "diofant.parsing.sympy_parser.rationalize"]], "split_symbols() (in module diofant.parsing.sympy_parser)": [[53, "diofant.parsing.sympy_parser.split_symbols"]], "split_symbols_custom() (in module diofant.parsing.sympy_parser)": [[53, "diofant.parsing.sympy_parser.split_symbols_custom"]], "standard_transformations (in module diofant.parsing.sympy_parser)": [[53, "diofant.parsing.sympy_parser.standard_transformations"]], "stringify_expr() (in module diofant.parsing.sympy_parser)": [[53, "diofant.parsing.sympy_parser.stringify_expr"]], "baseseries (class in diofant.plotting.plot)": [[54, "diofant.plotting.plot.BaseSeries"]], "implicitseries (class in diofant.plotting.plot_implicit)": [[54, "diofant.plotting.plot_implicit.ImplicitSeries"]], "line2dbaseseries (class in diofant.plotting.plot)": [[54, "diofant.plotting.plot.Line2DBaseSeries"]], "line3dbaseseries (class in diofant.plotting.plot)": [[54, "diofant.plotting.plot.Line3DBaseSeries"]], "lineover1drangeseries (class in diofant.plotting.plot)": [[54, "diofant.plotting.plot.LineOver1DRangeSeries"]], "parametric2dlineseries (class in diofant.plotting.plot)": [[54, "diofant.plotting.plot.Parametric2DLineSeries"]], "parametric3dlineseries (class in diofant.plotting.plot)": [[54, "diofant.plotting.plot.Parametric3DLineSeries"]], "parametricsurfaceseries (class in diofant.plotting.plot)": [[54, "diofant.plotting.plot.ParametricSurfaceSeries"]], "plot (class in diofant.plotting.plot)": [[54, "diofant.plotting.plot.Plot"]], "surfacebaseseries (class in diofant.plotting.plot)": [[54, "diofant.plotting.plot.SurfaceBaseSeries"]], "surfaceover2drangeseries (class in diofant.plotting.plot)": [[54, "diofant.plotting.plot.SurfaceOver2DRangeSeries"]], "append() (diofant.plotting.plot.plot method)": [[54, "diofant.plotting.plot.Plot.append"]], "diofant.plotting": [[54, "module-diofant.plotting"]], "extend() (diofant.plotting.plot.plot method)": [[54, "diofant.plotting.plot.Plot.extend"]], "get_segments() (diofant.plotting.plot.lineover1drangeseries method)": [[54, "diofant.plotting.plot.LineOver1DRangeSeries.get_segments"]], "get_segments() (diofant.plotting.plot.parametric2dlineseries method)": [[54, "diofant.plotting.plot.Parametric2DLineSeries.get_segments"]], "plot() (in module diofant.plotting.plot)": [[54, "diofant.plotting.plot.plot"]], "plot3d() (in module diofant.plotting.plot)": [[54, "diofant.plotting.plot.plot3d"]], "plot3d_parametric_line() (in module diofant.plotting.plot)": [[54, "diofant.plotting.plot.plot3d_parametric_line"]], "plot3d_parametric_surface() (in module diofant.plotting.plot)": [[54, "diofant.plotting.plot.plot3d_parametric_surface"]], "plot_implicit() (in module diofant.plotting.plot_implicit)": [[54, "diofant.plotting.plot_implicit.plot_implicit"]], "plot_parametric() (in module diofant.plotting.plot)": [[54, "diofant.plotting.plot.plot_parametric"]], "ec() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.EC"]], "em() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.EM"]], "et() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.ET"]], "gradedlexorder (class in diofant.polys.orderings)": [[55, "diofant.polys.orderings.GradedLexOrder"]], "groebnerbasis (class in diofant.polys.polytools)": [[55, "diofant.polys.polytools.GroebnerBasis"]], "lc() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.LC"]], "lc() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.LC"]], "lm() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.LM"]], "lm() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.LM"]], "lt() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.LT"]], "lt() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.LT"]], "lexorder (class in diofant.polys.orderings)": [[55, "diofant.polys.orderings.LexOrder"]], "monomial (class in diofant.polys.monomials)": [[55, "diofant.polys.monomials.Monomial"]], "poly (class in diofant.polys.polytools)": [[55, "diofant.polys.polytools.Poly"]], "purepoly (class in diofant.polys.polytools)": [[55, "diofant.polys.polytools.PurePoly"]], "reversedgradedlexorder (class in diofant.polys.orderings)": [[55, "diofant.polys.orderings.ReversedGradedLexOrder"]], "rootof (class in diofant.polys.rootoftools)": [[55, "diofant.polys.rootoftools.RootOf"]], "rootsum (class in diofant.polys.rootoftools)": [[55, "diofant.polys.rootoftools.RootSum"]], "tc() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.TC"]], "all_coeffs() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.all_coeffs"]], "all_roots() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.all_roots"]], "all_roots() (diofant.polys.rootoftools.rootof class method)": [[55, "diofant.polys.rootoftools.RootOf.all_roots"]], "apart() (in module diofant.polys.partfrac)": [[55, "diofant.polys.partfrac.apart"]], "apart_list() (in module diofant.polys.partfrac)": [[55, "diofant.polys.partfrac.apart_list"]], "args (diofant.polys.polytools.poly property)": [[55, "diofant.polys.polytools.Poly.args"]], "as_dict() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.as_dict"]], "as_expr() (diofant.polys.monomials.monomial method)": [[55, "diofant.polys.monomials.Monomial.as_expr"]], "as_expr() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.as_expr"]], "assemble_partfrac_list() (in module diofant.polys.partfrac)": [[55, "diofant.polys.partfrac.assemble_partfrac_list"]], "cancel() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.cancel"]], "cancel() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.cancel"]], "chebyshevt_poly() (in module diofant.polys.orthopolys)": [[55, "diofant.polys.orthopolys.chebyshevt_poly"]], "chebyshevu_poly() (in module diofant.polys.orthopolys)": [[55, "diofant.polys.orthopolys.chebyshevu_poly"]], "clear_denoms() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.clear_denoms"]], "coeff_monomial() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.coeff_monomial"]], "coeffs() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.coeffs"]], "cofactors() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.cofactors"]], "cofactors() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.cofactors"]], "compose() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.compose"]], "compose() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.compose"]], "construct_domain() (in module diofant.polys.constructor)": [[55, "diofant.polys.constructor.construct_domain"]], "contains() (diofant.polys.polytools.groebnerbasis method)": [[55, "diofant.polys.polytools.GroebnerBasis.contains"]], "content() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.content"]], "content() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.content"]], "count_roots() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.count_roots"]], "count_roots() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.count_roots"]], "cyclotomic_poly() (in module diofant.polys.specialpolys)": [[55, "diofant.polys.specialpolys.cyclotomic_poly"]], "decompose() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.decompose"]], "decompose() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.decompose"]], "degree() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.degree"]], "degree() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.degree"]], "dimension (diofant.polys.polytools.groebnerbasis property)": [[55, "diofant.polys.polytools.GroebnerBasis.dimension"]], "diofant.polys": [[55, "module-diofant.polys"]], "diofant.polys.constructor": [[55, "module-diofant.polys.constructor"]], "diofant.polys.monomials": [[55, "module-diofant.polys.monomials"]], "diofant.polys.numberfields": [[55, "module-diofant.polys.numberfields"]], "diofant.polys.orderings": [[55, "module-diofant.polys.orderings"]], "diofant.polys.orthopolys": [[55, "module-diofant.polys.orthopolys"]], "diofant.polys.partfrac": [[55, "module-diofant.polys.partfrac"]], "diofant.polys.polyfuncs": [[55, "module-diofant.polys.polyfuncs"]], "diofant.polys.polyroots": [[55, "module-diofant.polys.polyroots"]], "diofant.polys.polytools": [[55, "module-diofant.polys.polytools"]], "diofant.polys.rationaltools": [[55, "module-diofant.polys.rationaltools"]], "diofant.polys.rootoftools": [[55, "module-diofant.polys.rootoftools"]], "diofant.polys.specialpolys": [[55, "module-diofant.polys.specialpolys"]], "discriminant() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.discriminant"]], "discriminant() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.discriminant"]], "dispersionset() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.dispersionset"]], "div() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.div"]], "div() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.div"]], "divides() (diofant.polys.monomials.monomial method)": [[55, "diofant.polys.monomials.Monomial.divides"]], "domain (diofant.polys.polytools.poly property)": [[55, "diofant.polys.polytools.Poly.domain"]], "eject() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.eject"]], "eval() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.eval"]], "eval_rational() (diofant.polys.rootoftools.rootof method)": [[55, "diofant.polys.rootoftools.RootOf.eval_rational"]], "exclude() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.exclude"]], "exquo() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.exquo"]], "exquo() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.exquo"]], "exquo_ground() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.exquo_ground"]], "factor() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.factor"]], "factor_list() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.factor_list"]], "factor_list() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.factor_list"]], "field_isomorphism() (in module diofant.polys.numberfields)": [[55, "diofant.polys.numberfields.field_isomorphism"]], "free_symbols (diofant.polys.polytools.poly property)": [[55, "diofant.polys.polytools.Poly.free_symbols"]], "free_symbols (diofant.polys.polytools.purepoly property)": [[55, "diofant.polys.polytools.PurePoly.free_symbols"]], "free_symbols_in_domain (diofant.polys.polytools.poly property)": [[55, "diofant.polys.polytools.Poly.free_symbols_in_domain"]], "from_dict() (diofant.polys.polytools.poly class method)": [[55, "diofant.polys.polytools.Poly.from_dict"]], "from_expr() (diofant.polys.polytools.poly class method)": [[55, "diofant.polys.polytools.Poly.from_expr"]], "from_list() (diofant.polys.polytools.poly class method)": [[55, "diofant.polys.polytools.Poly.from_list"]], "from_poly() (diofant.polys.polytools.poly class method)": [[55, "diofant.polys.polytools.Poly.from_poly"]], "gcd() (diofant.polys.monomials.monomial method)": [[55, "diofant.polys.monomials.Monomial.gcd"]], "gcd() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.gcd"]], "gcd() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.gcd"]], "gcdex() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.gcdex"]], "gcdex() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.gcdex"]], "gegenbauer_poly() (in module diofant.polys.orthopolys)": [[55, "diofant.polys.orthopolys.gegenbauer_poly"]], "gen (diofant.polys.polytools.poly property)": [[55, "diofant.polys.polytools.Poly.gen"]], "get_modulus() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.get_modulus"]], "groebner() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.groebner"]], "half_gcdex() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.half_gcdex"]], "half_gcdex() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.half_gcdex"]], "has_only_gens() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.has_only_gens"]], "hermite_poly() (in module diofant.polys.orthopolys)": [[55, "diofant.polys.orthopolys.hermite_poly"]], "horner() (in module diofant.polys.polyfuncs)": [[55, "diofant.polys.polyfuncs.horner"]], "independent_sets (diofant.polys.polytools.groebnerbasis property)": [[55, "diofant.polys.polytools.GroebnerBasis.independent_sets"]], "inject() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.inject"]], "integrate() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.integrate"]], "interpolate() (in module diofant.polys.polyfuncs)": [[55, "diofant.polys.polyfuncs.interpolate"]], "interpolating_poly() (in module diofant.polys.specialpolys)": [[55, "diofant.polys.specialpolys.interpolating_poly"]], "interval (diofant.polys.rootoftools.rootof property)": [[55, "diofant.polys.rootoftools.RootOf.interval"]], "invert() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.invert"]], "invert() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.invert"]], "is_cyclotomic (diofant.polys.polytools.poly property)": [[55, "diofant.polys.polytools.Poly.is_cyclotomic"]], "is_ground (diofant.polys.polytools.poly property)": [[55, "diofant.polys.polytools.Poly.is_ground"]], "is_homogeneous (diofant.polys.polytools.poly property)": [[55, "diofant.polys.polytools.Poly.is_homogeneous"]], "is_irreducible (diofant.polys.polytools.poly property)": [[55, "diofant.polys.polytools.Poly.is_irreducible"]], "is_linear (diofant.polys.polytools.poly property)": [[55, "diofant.polys.polytools.Poly.is_linear"]], "is_multivariate (diofant.polys.polytools.poly property)": [[55, "diofant.polys.polytools.Poly.is_multivariate"]], "is_one (diofant.polys.polytools.poly property)": [[55, "diofant.polys.polytools.Poly.is_one"]], "is_quadratic (diofant.polys.polytools.poly property)": [[55, "diofant.polys.polytools.Poly.is_quadratic"]], "is_squarefree (diofant.polys.polytools.poly property)": [[55, "diofant.polys.polytools.Poly.is_squarefree"]], "is_term (diofant.polys.polytools.poly property)": [[55, "diofant.polys.polytools.Poly.is_term"]], "is_univariate (diofant.polys.polytools.poly property)": [[55, "diofant.polys.polytools.Poly.is_univariate"]], "is_zero (diofant.polys.polytools.poly property)": [[55, "diofant.polys.polytools.Poly.is_zero"]], "itermonomials() (in module diofant.polys.monomials)": [[55, "diofant.polys.monomials.itermonomials"]], "jacobi_poly() (in module diofant.polys.orthopolys)": [[55, "diofant.polys.orthopolys.jacobi_poly"]], "laguerre_poly() (in module diofant.polys.orthopolys)": [[55, "diofant.polys.orthopolys.laguerre_poly"]], "lcm() (diofant.polys.monomials.monomial method)": [[55, "diofant.polys.monomials.Monomial.lcm"]], "lcm() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.lcm"]], "lcm() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.lcm"]], "legendre_poly() (in module diofant.polys.orthopolys)": [[55, "diofant.polys.orthopolys.legendre_poly"]], "length() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.length"]], "minimal_polynomial() (in module diofant.polys.numberfields)": [[55, "diofant.polys.numberfields.minimal_polynomial"]], "monic() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.monic"]], "monic() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.monic"]], "monoms() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.monoms"]], "new() (diofant.polys.polytools.poly class method)": [[55, "diofant.polys.polytools.Poly.new"]], "new() (diofant.polys.rootoftools.rootsum class method)": [[55, "diofant.polys.rootoftools.RootSum.new"]], "nroots() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.nroots"]], "nroots() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.nroots"]], "parallel_poly_from_expr() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.parallel_poly_from_expr"]], "per() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.per"]], "primitive() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.primitive"]], "primitive() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.primitive"]], "primitive_element() (in module diofant.polys.numberfields)": [[55, "diofant.polys.numberfields.primitive_element"]], "quo() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.quo"]], "quo() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.quo"]], "quo_ground() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.quo_ground"]], "random_poly() (in module diofant.polys.specialpolys)": [[55, "diofant.polys.specialpolys.random_poly"]], "rat_clear_denoms() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.rat_clear_denoms"]], "real_roots() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.real_roots"]], "real_roots() (diofant.polys.rootoftools.rootof class method)": [[55, "diofant.polys.rootoftools.RootOf.real_roots"]], "real_roots() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.real_roots"]], "reduce() (diofant.polys.polytools.groebnerbasis method)": [[55, "diofant.polys.polytools.GroebnerBasis.reduce"]], "reduced() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.reduced"]], "refine() (diofant.polys.rootoftools.rootof method)": [[55, "diofant.polys.rootoftools.RootOf.refine"]], "rem() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.rem"]], "rem() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.rem"]], "reorder() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.reorder"]], "replace() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.replace"]], "resultant() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.resultant"]], "resultant() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.resultant"]], "retract() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.retract"]], "root() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.root"]], "roots() (in module diofant.polys.polyroots)": [[55, "diofant.polys.polyroots.roots"]], "set_domain() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.set_domain"]], "set_modulus() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.set_modulus"]], "set_order() (diofant.polys.polytools.groebnerbasis method)": [[55, "diofant.polys.polytools.GroebnerBasis.set_order"]], "shift() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.shift"]], "slice() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.slice"]], "spherical_bessel_fn() (in module diofant.polys.orthopolys)": [[55, "diofant.polys.orthopolys.spherical_bessel_fn"]], "sqf() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.sqf"]], "sqf_list() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.sqf_list"]], "sqf_list() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.sqf_list"]], "sqf_norm() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.sqf_norm"]], "sqf_norm() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.sqf_norm"]], "sqf_part() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.sqf_part"]], "sqf_part() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.sqf_part"]], "subresultants() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.subresultants"]], "subresultants() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.subresultants"]], "swinnerton_dyer_poly() (in module diofant.polys.specialpolys)": [[55, "diofant.polys.specialpolys.swinnerton_dyer_poly"]], "symmetric_poly() (in module diofant.polys.specialpolys)": [[55, "diofant.polys.specialpolys.symmetric_poly"]], "symmetrize() (in module diofant.polys.polyfuncs)": [[55, "diofant.polys.polyfuncs.symmetrize"]], "terms() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.terms"]], "terms_gcd() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.terms_gcd"]], "terms_gcd() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.terms_gcd"]], "termwise() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.termwise"]], "to_exact() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.to_exact"]], "to_field() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.to_field"]], "to_ring() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.to_ring"]], "together() (in module diofant.polys.rationaltools)": [[55, "diofant.polys.rationaltools.together"]], "total_degree() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.total_degree"]], "trunc() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.trunc"]], "trunc() (in module diofant.polys.polytools)": [[55, "diofant.polys.polytools.trunc"]], "unify() (diofant.polys.polytools.poly method)": [[55, "diofant.polys.polytools.Poly.unify"]], "viete() (in module diofant.polys.polyfuncs)": [[55, "diofant.polys.polyfuncs.viete"]], "assignmenterror": [[56, "diofant.printing.codeprinter.AssignmentError"]], "ccodeprinter (class in diofant.printing.ccode)": [[56, "diofant.printing.ccode.CCodePrinter"]], "codeprinter (class in diofant.printing.codeprinter)": [[56, "diofant.printing.codeprinter.CodePrinter"]], "fcodeprinter (class in diofant.printing.fcode)": [[56, "diofant.printing.fcode.FCodePrinter"]], "g() (in module diofant.printing.pretty.pretty_symbology)": [[56, "diofant.printing.pretty.pretty_symbology.G"], [56, "diofant.printing.pretty.pretty_symbology.g"]], "lambdaprinter (class in diofant.printing.lambdarepr)": [[56, "diofant.printing.lambdarepr.LambdaPrinter"]], "latexprinter (class in diofant.printing.latex)": [[56, "diofant.printing.latex.LatexPrinter"]], "mcodeprinter (class in diofant.printing.mathematica)": [[56, "diofant.printing.mathematica.MCodePrinter"]], "mathmlprinter (class in diofant.printing.mathml)": [[56, "diofant.printing.mathml.MathMLPrinter"]], "prettyprinter (class in diofant.printing.pretty.pretty)": [[56, "diofant.printing.pretty.pretty.PrettyPrinter"]], "printer (class in diofant.printing.printer)": [[56, "diofant.printing.printer.Printer"]], "reprprinter (class in diofant.printing.repr)": [[56, "diofant.printing.repr.ReprPrinter"]], "strprinter (class in diofant.printing.str)": [[56, "diofant.printing.str.StrPrinter"]], "u() (in module diofant.printing.pretty.pretty_symbology)": [[56, "diofant.printing.pretty.pretty_symbology.U"]], "_print() (diofant.printing.printer.printer method)": [[56, "diofant.printing.printer.Printer._print"]], "above() (diofant.printing.pretty.stringpict.stringpict method)": [[56, "diofant.printing.pretty.stringpict.stringPict.above"]], "accepted_latex_functions (in module diofant.printing.latex)": [[56, "diofant.printing.latex.accepted_latex_functions"]], "annotated() (in module diofant.printing.pretty.pretty_symbology)": [[56, "diofant.printing.pretty.pretty_symbology.annotated"]], "below() (diofant.printing.pretty.stringpict.stringpict method)": [[56, "diofant.printing.pretty.stringpict.stringPict.below"]], "ccode() (in module diofant.printing.ccode)": [[56, "diofant.printing.ccode.ccode"]], "diofant.printing": [[56, "module-diofant.printing"]], "diofant.printing.ccode": [[56, "module-diofant.printing.ccode"]], "diofant.printing.codeprinter": [[56, "module-diofant.printing.codeprinter"]], "diofant.printing.conventions": [[56, "module-diofant.printing.conventions"]], "diofant.printing.fcode": [[56, "module-diofant.printing.fcode"]], "diofant.printing.lambdarepr": [[56, "module-diofant.printing.lambdarepr"]], "diofant.printing.latex": [[56, "module-diofant.printing.latex"]], "diofant.printing.mathematica": [[56, "module-diofant.printing.mathematica"]], "diofant.printing.mathml": [[56, "module-diofant.printing.mathml"]], "diofant.printing.precedence": [[56, "module-diofant.printing.precedence"]], "diofant.printing.pretty.pretty": [[56, "module-diofant.printing.pretty.pretty"]], "diofant.printing.pretty.pretty_symbology": [[56, "module-diofant.printing.pretty.pretty_symbology"]], "diofant.printing.pretty.stringpict": [[56, "module-diofant.printing.pretty.stringpict"]], "diofant.printing.printer": [[56, "module-diofant.printing.printer"]], "diofant.printing.python": [[56, "module-diofant.printing.python"]], "diofant.printing.repr": [[56, "module-diofant.printing.repr"]], "diofant.printing.str": [[56, "module-diofant.printing.str"]], "doprint() (diofant.printing.mathematica.mcodeprinter method)": [[56, "diofant.printing.mathematica.MCodePrinter.doprint"]], "doprint() (diofant.printing.mathml.mathmlprinter method)": [[56, "diofant.printing.mathml.MathMLPrinter.doprint"]], "doprint() (diofant.printing.printer.printer method)": [[56, "diofant.printing.printer.Printer.doprint"]], "dotprint() (in module diofant.printing.dot)": [[56, "diofant.printing.dot.dotprint"]], "emptyprinter() (diofant.printing.repr.reprprinter method)": [[56, "diofant.printing.repr.ReprPrinter.emptyPrinter"]], "fcode() (in module diofant.printing.fcode)": [[56, "diofant.printing.fcode.fcode"]], "greek_letters (in module diofant.printing.pretty.pretty_symbology)": [[56, "diofant.printing.pretty.pretty_symbology.greek_letters"]], "height() (diofant.printing.pretty.stringpict.stringpict method)": [[56, "diofant.printing.pretty.stringpict.stringPict.height"]], "hobj() (in module diofant.printing.pretty.pretty_symbology)": [[56, "diofant.printing.pretty.pretty_symbology.hobj"]], "indent_code() (diofant.printing.ccode.ccodeprinter method)": [[56, "diofant.printing.ccode.CCodePrinter.indent_code"]], "indent_code() (diofant.printing.fcode.fcodeprinter method)": [[56, "diofant.printing.fcode.FCodePrinter.indent_code"]], "lambdarepr() (in module diofant.printing.lambdarepr)": [[56, "diofant.printing.lambdarepr.lambdarepr"]], "latex() (in module diofant.printing.latex)": [[56, "diofant.printing.latex.latex"]], "left() (diofant.printing.pretty.stringpict.stringpict method)": [[56, "diofant.printing.pretty.stringpict.stringPict.left"]], "mathematica_code() (in module diofant.printing.mathematica)": [[56, "diofant.printing.mathematica.mathematica_code"]], "mathml() (in module diofant.printing.mathml)": [[56, "diofant.printing.mathml.mathml"]], "mathml_tag() (diofant.printing.mathml.mathmlprinter method)": [[56, "diofant.printing.mathml.MathMLPrinter.mathml_tag"]], "next() (diofant.printing.pretty.stringpict.stringpict static method)": [[56, "diofant.printing.pretty.stringpict.stringPict.next"]], "parens() (diofant.printing.pretty.stringpict.stringpict method)": [[56, "diofant.printing.pretty.stringpict.stringPict.parens"]], "pprint() (in module diofant.printing.pretty.pretty)": [[56, "diofant.printing.pretty.pretty.pprint"]], "pretty() (in module diofant.printing.pretty.pretty)": [[56, "diofant.printing.pretty.pretty.pretty"]], "prettyform (class in diofant.printing.pretty.stringpict)": [[56, "diofant.printing.pretty.stringpict.prettyForm"]], "pretty_atom() (in module diofant.printing.pretty.pretty_symbology)": [[56, "diofant.printing.pretty.pretty_symbology.pretty_atom"]], "pretty_print() (in module diofant.printing.pretty.pretty)": [[56, "diofant.printing.pretty.pretty.pretty_print"]], "pretty_symbol() (in module diofant.printing.pretty.pretty_symbology)": [[56, "diofant.printing.pretty.pretty_symbology.pretty_symbol"]], "pretty_use_unicode() (in module diofant.printing.pretty.pretty_symbology)": [[56, "diofant.printing.pretty.pretty_symbology.pretty_use_unicode"]], "printmethod (diofant.printing.ccode.ccodeprinter attribute)": [[56, "diofant.printing.ccode.CCodePrinter.printmethod"]], "printmethod (diofant.printing.codeprinter.codeprinter attribute)": [[56, "diofant.printing.codeprinter.CodePrinter.printmethod"]], "printmethod (diofant.printing.fcode.fcodeprinter attribute)": [[56, "diofant.printing.fcode.FCodePrinter.printmethod"]], "printmethod (diofant.printing.lambdarepr.lambdaprinter attribute)": [[56, "diofant.printing.lambdarepr.LambdaPrinter.printmethod"]], "printmethod (diofant.printing.latex.latexprinter attribute)": [[56, "diofant.printing.latex.LatexPrinter.printmethod"]], "printmethod (diofant.printing.mathematica.mcodeprinter attribute)": [[56, "diofant.printing.mathematica.MCodePrinter.printmethod"]], "printmethod (diofant.printing.mathml.mathmlprinter attribute)": [[56, "diofant.printing.mathml.MathMLPrinter.printmethod"]], "printmethod (diofant.printing.printer.printer attribute)": [[56, "diofant.printing.printer.Printer.printmethod"]], "printmethod (diofant.printing.repr.reprprinter attribute)": [[56, "diofant.printing.repr.ReprPrinter.printmethod"]], "printmethod (diofant.printing.str.strprinter attribute)": [[56, "diofant.printing.str.StrPrinter.printmethod"]], "render() (diofant.printing.pretty.stringpict.stringpict method)": [[56, "diofant.printing.pretty.stringpict.stringPict.render"]], "reprify() (diofant.printing.repr.reprprinter method)": [[56, "diofant.printing.repr.ReprPrinter.reprify"]], "right() (diofant.printing.pretty.stringpict.stringpict method)": [[56, "diofant.printing.pretty.stringpict.stringPict.right"]], "set_global_settings() (diofant.printing.printer.printer class method)": [[56, "diofant.printing.printer.Printer.set_global_settings"]], "split_super_sub() (in module diofant.printing.conventions)": [[56, "diofant.printing.conventions.split_super_sub"]], "srepr() (in module diofant.printing.repr)": [[56, "diofant.printing.repr.srepr"]], "sstr() (in module diofant.printing.str)": [[56, "diofant.printing.str.sstr"]], "sstrrepr() (in module diofant.printing.str)": [[56, "diofant.printing.str.sstrrepr"]], "stack() (diofant.printing.pretty.stringpict.stringpict static method)": [[56, "diofant.printing.pretty.stringpict.stringPict.stack"]], "stringpict (class in diofant.printing.pretty.stringpict)": [[56, "diofant.printing.pretty.stringpict.stringPict"]], "terminal_width() (diofant.printing.pretty.stringpict.stringpict method)": [[56, "diofant.printing.pretty.stringpict.stringPict.terminal_width"]], "vobj() (in module diofant.printing.pretty.pretty_symbology)": [[56, "diofant.printing.pretty.pretty_symbology.vobj"]], "width() (diofant.printing.pretty.stringpict.stringpict method)": [[56, "diofant.printing.pretty.stringpict.stringPict.width"]], "xobj() (in module diofant.printing.pretty.pretty_symbology)": [[56, "diofant.printing.pretty.pretty_symbology.xobj"]], "xsym() (in module diofant.printing.pretty.pretty_symbology)": [[56, "diofant.printing.pretty.pretty_symbology.xsym"]], "complement (class in diofant.sets.sets)": [[57, "diofant.sets.sets.Complement"]], "emptyset (class in diofant.sets.sets)": [[57, "diofant.sets.sets.EmptySet"]], "extendedreals (class in diofant.sets.fancysets)": [[57, "diofant.sets.fancysets.ExtendedReals"]], "finiteset (class in diofant.sets.sets)": [[57, "diofant.sets.sets.FiniteSet"]], "imageset (class in diofant.sets.fancysets)": [[57, "diofant.sets.fancysets.ImageSet"]], "integers (class in diofant.sets.fancysets)": [[57, "diofant.sets.fancysets.Integers"]], "intersection (class in diofant.sets.sets)": [[57, "diofant.sets.sets.Intersection"]], "interval (class in diofant.sets.sets)": [[57, "diofant.sets.sets.Interval"]], "lopen() (diofant.sets.sets.interval class method)": [[57, "diofant.sets.sets.Interval.Lopen"]], "naturals (class in diofant.sets.fancysets)": [[57, "diofant.sets.fancysets.Naturals"]], "naturals0 (class in diofant.sets.fancysets)": [[57, "diofant.sets.fancysets.Naturals0"]], "productset (class in diofant.sets.sets)": [[57, "diofant.sets.sets.ProductSet"]], "range (class in diofant.sets.fancysets)": [[57, "diofant.sets.fancysets.Range"]], "rationals (class in diofant.sets.fancysets)": [[57, "diofant.sets.fancysets.Rationals"]], "reals (class in diofant.sets.fancysets)": [[57, "diofant.sets.fancysets.Reals"]], "ropen() (diofant.sets.sets.interval class method)": [[57, "diofant.sets.sets.Interval.Ropen"]], "set (class in diofant.sets.sets)": [[57, "diofant.sets.sets.Set"]], "union (class in diofant.sets.sets)": [[57, "diofant.sets.sets.Union"]], "universalset (class in diofant.sets.sets)": [[57, "diofant.sets.sets.UniversalSet"]], "as_relational() (diofant.sets.sets.finiteset method)": [[57, "diofant.sets.sets.FiniteSet.as_relational"]], "as_relational() (diofant.sets.sets.intersection method)": [[57, "diofant.sets.sets.Intersection.as_relational"]], "as_relational() (diofant.sets.sets.interval method)": [[57, "diofant.sets.sets.Interval.as_relational"]], "as_relational() (diofant.sets.sets.union method)": [[57, "diofant.sets.sets.Union.as_relational"]], "boundary (diofant.sets.sets.set property)": [[57, "diofant.sets.sets.Set.boundary"]], "closure (diofant.sets.sets.set property)": [[57, "diofant.sets.sets.Set.closure"]], "complement() (diofant.sets.sets.set method)": [[57, "diofant.sets.sets.Set.complement"]], "contains() (diofant.sets.sets.set method)": [[57, "diofant.sets.sets.Set.contains"]], "diofant.sets.fancysets": [[57, "module-diofant.sets.fancysets"]], "diofant.sets.sets": [[57, "module-diofant.sets.sets"]], "end (diofant.sets.sets.interval property)": [[57, "diofant.sets.sets.Interval.end"]], "imageset() (in module diofant.sets.sets)": [[57, "diofant.sets.sets.imageset"]], "inf (diofant.sets.sets.interval property)": [[57, "diofant.sets.sets.Interval.inf"]], "inf (diofant.sets.sets.set property)": [[57, "diofant.sets.sets.Set.inf"]], "interior (diofant.sets.sets.set property)": [[57, "diofant.sets.sets.Set.interior"]], "intersection() (diofant.sets.sets.set method)": [[57, "diofant.sets.sets.Set.intersection"]], "is_closed (diofant.sets.sets.set property)": [[57, "diofant.sets.sets.Set.is_closed"]], "is_disjoint() (diofant.sets.sets.set method)": [[57, "diofant.sets.sets.Set.is_disjoint"]], "is_left_unbounded (diofant.sets.sets.interval property)": [[57, "diofant.sets.sets.Interval.is_left_unbounded"]], "is_open (diofant.sets.sets.set property)": [[57, "diofant.sets.sets.Set.is_open"]], "is_proper_subset() (diofant.sets.sets.set method)": [[57, "diofant.sets.sets.Set.is_proper_subset"]], "is_proper_superset() (diofant.sets.sets.set method)": [[57, "diofant.sets.sets.Set.is_proper_superset"]], "is_right_unbounded (diofant.sets.sets.interval property)": [[57, "diofant.sets.sets.Interval.is_right_unbounded"]], "is_subset() (diofant.sets.sets.set method)": [[57, "diofant.sets.sets.Set.is_subset"]], "is_superset() (diofant.sets.sets.set method)": [[57, "diofant.sets.sets.Set.is_superset"]], "isdisjoint() (diofant.sets.sets.set method)": [[57, "diofant.sets.sets.Set.isdisjoint"]], "issubset() (diofant.sets.sets.set method)": [[57, "diofant.sets.sets.Set.issubset"]], "issuperset() (diofant.sets.sets.set method)": [[57, "diofant.sets.sets.Set.issuperset"]], "left (diofant.sets.sets.interval property)": [[57, "diofant.sets.sets.Interval.left"]], "left_open (diofant.sets.sets.interval property)": [[57, "diofant.sets.sets.Interval.left_open"]], "measure (diofant.sets.sets.set property)": [[57, "diofant.sets.sets.Set.measure"]], "open() (diofant.sets.sets.interval class method)": [[57, "diofant.sets.sets.Interval.open"]], "powerset() (diofant.sets.sets.set method)": [[57, "diofant.sets.sets.Set.powerset"]], "reduce() (diofant.sets.sets.complement static method)": [[57, "diofant.sets.sets.Complement.reduce"]], "reduce() (diofant.sets.sets.intersection static method)": [[57, "diofant.sets.sets.Intersection.reduce"]], "reduce() (diofant.sets.sets.union static method)": [[57, "diofant.sets.sets.Union.reduce"]], "right (diofant.sets.sets.interval property)": [[57, "diofant.sets.sets.Interval.right"]], "right_open (diofant.sets.sets.interval property)": [[57, "diofant.sets.sets.Interval.right_open"]], "start (diofant.sets.sets.interval property)": [[57, "diofant.sets.sets.Interval.start"]], "sup (diofant.sets.sets.interval property)": [[57, "diofant.sets.sets.Interval.sup"]], "sup (diofant.sets.sets.set property)": [[57, "diofant.sets.sets.Set.sup"]], "symmetric_difference() (diofant.sets.sets.set method)": [[57, "diofant.sets.sets.Set.symmetric_difference"]], "union() (diofant.sets.sets.set method)": [[57, "diofant.sets.sets.Set.union"]], "epath (class in diofant.simplify.epathtools)": [[58, "diofant.simplify.epathtools.EPath"]], "apply() (diofant.simplify.epathtools.epath method)": [[58, "diofant.simplify.epathtools.EPath.apply"]], "besselsimp() (in module diofant.simplify.simplify)": [[58, "diofant.simplify.simplify.besselsimp"]], "collect() (in module diofant.simplify.radsimp)": [[58, "diofant.simplify.radsimp.collect"]], "collect_const() (in module diofant.simplify.radsimp)": [[58, "diofant.simplify.radsimp.collect_const"]], "collect_sqrt() (in module diofant.simplify.radsimp)": [[58, "diofant.simplify.radsimp.collect_sqrt"]], "combsimp() (in module diofant.simplify.combsimp)": [[58, "diofant.simplify.combsimp.combsimp"]], "cse() (in module diofant.simplify.cse_main)": [[58, "diofant.simplify.cse_main.cse"]], "diofant.simplify.combsimp": [[58, "module-diofant.simplify.combsimp"]], "diofant.simplify.cse_main": [[58, "module-diofant.simplify.cse_main"]], "diofant.simplify.epathtools": [[58, "module-diofant.simplify.epathtools"]], "diofant.simplify.fu": [[58, "module-diofant.simplify.fu"]], "diofant.simplify.hyperexpand": [[58, "module-diofant.simplify.hyperexpand"]], "diofant.simplify.powsimp": [[58, "module-diofant.simplify.powsimp"]], "diofant.simplify.radsimp": [[58, "module-diofant.simplify.radsimp"]], "diofant.simplify.ratsimp": [[58, "module-diofant.simplify.ratsimp"]], "diofant.simplify.sqrtdenest": [[58, "module-diofant.simplify.sqrtdenest"]], "diofant.simplify.traversaltools": [[58, "module-diofant.simplify.traversaltools"]], "diofant.simplify.trigsimp": [[58, "module-diofant.simplify.trigsimp"]], "epath() (in module diofant.simplify.epathtools)": [[58, "diofant.simplify.epathtools.epath"]], "fraction() (in module diofant.simplify.radsimp)": [[58, "diofant.simplify.radsimp.fraction"]], "fu() (in module diofant.simplify.fu)": [[58, "diofant.simplify.fu.fu"]], "futrig() (in module diofant.simplify.trigsimp)": [[58, "diofant.simplify.trigsimp.futrig"]], "hyperexpand() (in module diofant.simplify.hyperexpand)": [[58, "diofant.simplify.hyperexpand.hyperexpand"]], "hypersimilar() (in module diofant.simplify.simplify)": [[58, "diofant.simplify.simplify.hypersimilar"]], "hypersimp() (in module diofant.simplify.simplify)": [[58, "diofant.simplify.simplify.hypersimp"]], "logcombine() (in module diofant.simplify.simplify)": [[58, "diofant.simplify.simplify.logcombine"]], "nsimplify() (in module diofant.simplify.simplify)": [[58, "diofant.simplify.simplify.nsimplify"]], "nthroot() (in module diofant.simplify.simplify)": [[58, "diofant.simplify.simplify.nthroot"]], "opt_cse() (in module diofant.simplify.cse_main)": [[58, "diofant.simplify.cse_main.opt_cse"]], "posify() (in module diofant.simplify.simplify)": [[58, "diofant.simplify.simplify.posify"]], "powdenest() (in module diofant.simplify.powsimp)": [[58, "diofant.simplify.powsimp.powdenest"]], "powsimp() (in module diofant.simplify.powsimp)": [[58, "diofant.simplify.powsimp.powsimp"]], "rad_rationalize() (in module diofant.simplify.radsimp)": [[58, "diofant.simplify.radsimp.rad_rationalize"]], "radsimp() (in module diofant.simplify.radsimp)": [[58, "diofant.simplify.radsimp.radsimp"]], "ratsimp() (in module diofant.simplify.ratsimp)": [[58, "diofant.simplify.ratsimp.ratsimp"]], "rcollect() (in module diofant.simplify.radsimp)": [[58, "diofant.simplify.radsimp.rcollect"]], "select() (diofant.simplify.epathtools.epath method)": [[58, "diofant.simplify.epathtools.EPath.select"]], "separatevars() (in module diofant.simplify.simplify)": [[58, "diofant.simplify.simplify.separatevars"]], "simplify() (in module diofant.simplify.simplify)": [[58, "diofant.simplify.simplify.simplify"]], "sqrtdenest() (in module diofant.simplify.sqrtdenest)": [[58, "diofant.simplify.sqrtdenest.sqrtdenest"]], "tree_cse() (in module diofant.simplify.cse_main)": [[58, "diofant.simplify.cse_main.tree_cse"]], "trigsimp() (in module diofant.simplify.trigsimp)": [[58, "diofant.simplify.trigsimp.trigsimp"]], "unrad() (in module diofant.simplify.sqrtdenest)": [[58, "diofant.simplify.sqrtdenest.unrad"]], "use() (in module diofant.simplify.traversaltools)": [[58, "diofant.simplify.traversaltools.use"]], "pqa() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.PQa"]], "base_solution_linear() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.base_solution_linear"]], "classify_diop() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.classify_diop"]], "cornacchia() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.cornacchia"]], "descent() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.descent"]], "diofant.solvers.diophantine": [[59, "module-diofant.solvers.diophantine"]], "diop_dn() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.diop_DN"]], "diop_bf_dn() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.diop_bf_DN"]], "diop_general_pythagorean() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.diop_general_pythagorean"]], "diop_general_sum_of_even_powers() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.diop_general_sum_of_even_powers"]], "diop_general_sum_of_squares() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.diop_general_sum_of_squares"]], "diop_linear() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.diop_linear"]], "diop_quadratic() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.diop_quadratic"]], "diop_solve() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.diop_solve"]], "diop_ternary_quadratic() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.diop_ternary_quadratic"]], "diop_ternary_quadratic_normal() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.diop_ternary_quadratic_normal"]], "diophantine() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.diophantine"]], "divisible() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.divisible"]], "equivalent() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.equivalent"]], "find_dn() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.find_DN"]], "gaussian_reduce() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.gaussian_reduce"]], "holzer() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.holzer"]], "ldescent() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.ldescent"]], "merge_solution() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.merge_solution"]], "parametrize_ternary_quadratic() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.parametrize_ternary_quadratic"]], "partition() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.partition"]], "power_representation() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.power_representation"]], "prime_as_sum_of_two_squares() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.prime_as_sum_of_two_squares"]], "reconstruct() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.reconstruct"]], "sqf_normal() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.sqf_normal"]], "square_factor() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.square_factor"]], "sum_of_four_squares() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.sum_of_four_squares"]], "sum_of_powers() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.sum_of_powers"]], "sum_of_squares() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.sum_of_squares"]], "sum_of_three_squares() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.sum_of_three_squares"]], "transformation_to_dn() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.transformation_to_DN"]], "transformation_to_normal() (in module diofant.solvers.diophantine)": [[59, "diofant.solvers.diophantine.transformation_to_normal"]], "diofant.solvers": [[60, "module-diofant.solvers"]], "diofant.solvers.inequalities": [[61, "module-diofant.solvers.inequalities"]], "reduce_inequalities() (in module diofant.solvers.inequalities)": [[61, "diofant.solvers.inequalities.reduce_inequalities"]], "_handle_integral() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode._handle_Integral"]], "_linear_2eq_order1_type3() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode._linear_2eq_order1_type3"]], "_linear_2eq_order1_type4() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode._linear_2eq_order1_type4"]], "_linear_2eq_order1_type5() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode._linear_2eq_order1_type5"]], "_linear_2eq_order1_type6() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode._linear_2eq_order1_type6"]], "_linear_2eq_order1_type7() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode._linear_2eq_order1_type7"]], "_linear_2eq_order2_type1() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode._linear_2eq_order2_type1"]], "_linear_2eq_order2_type11() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode._linear_2eq_order2_type11"]], "_linear_2eq_order2_type2() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode._linear_2eq_order2_type2"]], "_linear_2eq_order2_type3() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode._linear_2eq_order2_type3"]], "_linear_2eq_order2_type5() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode._linear_2eq_order2_type5"]], "_linear_2eq_order2_type6() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode._linear_2eq_order2_type6"]], "_linear_2eq_order2_type7() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode._linear_2eq_order2_type7"]], "_linear_2eq_order2_type8() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode._linear_2eq_order2_type8"]], "_linear_2eq_order2_type9() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode._linear_2eq_order2_type9"]], "_linear_3eq_order1_type4() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode._linear_3eq_order1_type4"]], "_nonlinear_2eq_order1_type1() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode._nonlinear_2eq_order1_type1"]], "_nonlinear_2eq_order1_type2() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode._nonlinear_2eq_order1_type2"]], "_nonlinear_2eq_order1_type3() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode._nonlinear_2eq_order1_type3"]], "_nonlinear_2eq_order1_type4() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode._nonlinear_2eq_order1_type4"]], "_nonlinear_2eq_order1_type5() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode._nonlinear_2eq_order1_type5"]], "_nonlinear_3eq_order1_type1() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode._nonlinear_3eq_order1_type1"]], "_nonlinear_3eq_order1_type2() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode._nonlinear_3eq_order1_type2"]], "_undetermined_coefficients_match() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode._undetermined_coefficients_match"]], "allhints (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.allhints"]], "checkinfsol() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.checkinfsol"]], "checkodesol() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.checkodesol"]], "classify_ode() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.classify_ode"]], "constant_renumber() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.constant_renumber"]], "constantsimp() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.constantsimp"]], "diofant.solvers.ode": [[62, "module-diofant.solvers.ode"]], "dsolve() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.dsolve"]], "homogeneous_order() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.homogeneous_order"]], "infinitesimals() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.infinitesimals"]], "lie_heuristic_abaco1_product() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.lie_heuristic_abaco1_product"]], "lie_heuristic_abaco1_simple() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.lie_heuristic_abaco1_simple"]], "lie_heuristic_abaco2_similar() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.lie_heuristic_abaco2_similar"]], "lie_heuristic_abaco2_unique_unknown() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.lie_heuristic_abaco2_unique_unknown"]], "lie_heuristic_bivariate() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.lie_heuristic_bivariate"]], "lie_heuristic_chi() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.lie_heuristic_chi"]], "lie_heuristic_function_sum() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.lie_heuristic_function_sum"]], "lie_heuristic_linear() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.lie_heuristic_linear"]], "ode_1st_exact() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.ode_1st_exact"]], "ode_1st_homogeneous_coeff_best() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.ode_1st_homogeneous_coeff_best"]], "ode_1st_homogeneous_coeff_subs_dep_div_indep() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.ode_1st_homogeneous_coeff_subs_dep_div_indep"]], "ode_1st_homogeneous_coeff_subs_indep_div_dep() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.ode_1st_homogeneous_coeff_subs_indep_div_dep"]], "ode_1st_linear() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.ode_1st_linear"]], "ode_1st_power_series() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.ode_1st_power_series"]], "ode_2nd_power_series_ordinary() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.ode_2nd_power_series_ordinary"]], "ode_2nd_power_series_regular() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.ode_2nd_power_series_regular"]], "ode_bernoulli() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.ode_Bernoulli"]], "ode_liouville() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.ode_Liouville"]], "ode_riccati_special_minus2() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.ode_Riccati_special_minus2"]], "ode_almost_linear() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.ode_almost_linear"]], "ode_lie_group() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.ode_lie_group"]], "ode_linear_coefficients() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.ode_linear_coefficients"]], "ode_nth_linear_constant_coeff_homogeneous() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.ode_nth_linear_constant_coeff_homogeneous"]], "ode_nth_linear_constant_coeff_undetermined_coefficients() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.ode_nth_linear_constant_coeff_undetermined_coefficients"]], "ode_nth_linear_constant_coeff_variation_of_parameters() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.ode_nth_linear_constant_coeff_variation_of_parameters"]], "ode_separable() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.ode_separable"]], "ode_separable_reduced() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.ode_separable_reduced"]], "ode_sol_simplicity() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.ode_sol_simplicity"]], "odesimp() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.odesimp"]], "sysode_linear_neq_order1() (in module diofant.solvers.ode)": [[62, "diofant.solvers.ode.sysode_linear_neq_order1"]], "checkpdesol() (in module diofant.solvers.pde)": [[63, "diofant.solvers.pde.checkpdesol"]], "classify_pde() (in module diofant.solvers.pde)": [[63, "diofant.solvers.pde.classify_pde"]], "diofant.solvers.pde": [[63, "module-diofant.solvers.pde"]], "pde_1st_linear_constant_coeff() (in module diofant.solvers.pde)": [[63, "diofant.solvers.pde.pde_1st_linear_constant_coeff"]], "pde_1st_linear_constant_coeff_homogeneous() (in module diofant.solvers.pde)": [[63, "diofant.solvers.pde.pde_1st_linear_constant_coeff_homogeneous"]], "pde_1st_linear_variable_coeff() (in module diofant.solvers.pde)": [[63, "diofant.solvers.pde.pde_1st_linear_variable_coeff"]], "pde_separate() (in module diofant.solvers.pde)": [[63, "diofant.solvers.pde.pde_separate"]], "pde_separate_add() (in module diofant.solvers.pde)": [[63, "diofant.solvers.pde.pde_separate_add"]], "pde_separate_mul() (in module diofant.solvers.pde)": [[63, "diofant.solvers.pde.pde_separate_mul"]], "pdsolve() (in module diofant.solvers.pde)": [[63, "diofant.solvers.pde.pdsolve"]], "diofant.solvers.recurr": [[64, "module-diofant.solvers.recurr"]], "rsolve() (in module diofant.solvers.recurr)": [[64, "diofant.solvers.recurr.rsolve"]], "rsolve_hyper() (in module diofant.solvers.recurr)": [[64, "diofant.solvers.recurr.rsolve_hyper"]], "rsolve_poly() (in module diofant.solvers.recurr)": [[64, "diofant.solvers.recurr.rsolve_poly"]], "rsolve_ratio() (in module diofant.solvers.recurr)": [[64, "diofant.solvers.recurr.rsolve_ratio"]], "diofant.solvers.polysys": [[65, "module-diofant.solvers.polysys"]], "diofant.solvers.solvers": [[65, "module-diofant.solvers.solvers"]], "minsolve_linear_system() (in module diofant.solvers.solvers)": [[65, "diofant.solvers.solvers.minsolve_linear_system"]], "solve() (in module diofant.solvers.solvers)": [[65, "diofant.solvers.solvers.solve"]], "solve_linear() (in module diofant.solvers.solvers)": [[65, "diofant.solvers.solvers.solve_linear"]], "solve_linear_system() (in module diofant.solvers.polysys)": [[65, "diofant.solvers.polysys.solve_linear_system"]], "solve_poly_system() (in module diofant.solvers.polysys)": [[65, "diofant.solvers.polysys.solve_poly_system"]], "solve_surd_system() (in module diofant.solvers.polysys)": [[65, "diofant.solvers.polysys.solve_surd_system"]], "checksol() (in module diofant.solvers.utils)": [[66, "diofant.solvers.utils.checksol"]], "diofant.solvers.deutils": [[66, "module-diofant.solvers.deutils"]], "diofant.solvers.utils": [[66, "module-diofant.solvers.utils"]], "ode_order() (in module diofant.solvers.deutils)": [[66, "diofant.solvers.deutils.ode_order"]], "arcsin() (in module diofant.stats)": [[67, "diofant.stats.Arcsin"]], "benini() (in module diofant.stats)": [[67, "diofant.stats.Benini"]], "bernoulli() (in module diofant.stats)": [[67, "diofant.stats.Bernoulli"]], "beta() (in module diofant.stats)": [[67, "diofant.stats.Beta"]], "betaprime() (in module diofant.stats)": [[67, "diofant.stats.BetaPrime"]], "binomial() (in module diofant.stats)": [[67, "diofant.stats.Binomial"]], "cauchy() (in module diofant.stats)": [[67, "diofant.stats.Cauchy"]], "chi() (in module diofant.stats)": [[67, "diofant.stats.Chi"]], "chinoncentral() (in module diofant.stats)": [[67, "diofant.stats.ChiNoncentral"]], "chisquared() (in module diofant.stats)": [[67, "diofant.stats.ChiSquared"]], "coin() (in module diofant.stats)": [[67, "diofant.stats.Coin"]], "conditionaldomain (class in diofant.stats.rv)": [[67, "diofant.stats.rv.ConditionalDomain"]], "continuousdomain (class in diofant.stats.crv)": [[67, "diofant.stats.crv.ContinuousDomain"]], "continuouspspace (class in diofant.stats.crv)": [[67, "diofant.stats.crv.ContinuousPSpace"]], "continuousrv() (in module diofant.stats)": [[67, "diofant.stats.ContinuousRV"]], "dagum() (in module diofant.stats)": [[67, "diofant.stats.Dagum"]], "die() (in module diofant.stats)": [[67, "diofant.stats.Die"]], "diepspace (class in diofant.stats.frv_types)": [[67, "diofant.stats.frv_types.DiePSpace"]], "discreteuniform() (in module diofant.stats)": [[67, "diofant.stats.DiscreteUniform"]], "e() (in module diofant.stats)": [[67, "diofant.stats.E"]], "erlang() (in module diofant.stats)": [[67, "diofant.stats.Erlang"]], "exponential() (in module diofant.stats)": [[67, "diofant.stats.Exponential"]], "fdistribution() (in module diofant.stats)": [[67, "diofant.stats.FDistribution"]], "finitedomain (class in diofant.stats.frv)": [[67, "diofant.stats.frv.FiniteDomain"]], "finitepspace (class in diofant.stats.frv)": [[67, "diofant.stats.frv.FinitePSpace"]], "finiterv() (in module diofant.stats)": [[67, "diofant.stats.FiniteRV"]], "fisherz() (in module diofant.stats)": [[67, "diofant.stats.FisherZ"]], "frechet() (in module diofant.stats)": [[67, "diofant.stats.Frechet"]], "gamma() (in module diofant.stats)": [[67, "diofant.stats.Gamma"]], "gammainverse() (in module diofant.stats)": [[67, "diofant.stats.GammaInverse"]], "geometric() (in module diofant.stats)": [[67, "diofant.stats.Geometric"]], "hypergeometric() (in module diofant.stats)": [[67, "diofant.stats.Hypergeometric"]], "kumaraswamy() (in module diofant.stats)": [[67, "diofant.stats.Kumaraswamy"]], "laplace() (in module diofant.stats)": [[67, "diofant.stats.Laplace"]], "lognormal() (in module diofant.stats)": [[67, "diofant.stats.LogNormal"]], "logistic() (in module diofant.stats)": [[67, "diofant.stats.Logistic"]], "maxwell() (in module diofant.stats)": [[67, "diofant.stats.Maxwell"]], "nakagami() (in module diofant.stats)": [[67, "diofant.stats.Nakagami"]], "normal() (in module diofant.stats)": [[67, "diofant.stats.Normal"]], "normalpspace (class in diofant.stats.crv_types)": [[67, "diofant.stats.crv_types.NormalPSpace"]], "p() (in module diofant.stats)": [[67, "diofant.stats.P"]], "pspace (class in diofant.stats.rv)": [[67, "diofant.stats.rv.PSpace"]], "pareto() (in module diofant.stats)": [[67, "diofant.stats.Pareto"]], "poisson() (in module diofant.stats)": [[67, "diofant.stats.Poisson"]], "productdomain (class in diofant.stats.rv)": [[67, "diofant.stats.rv.ProductDomain"]], "productpspace (class in diofant.stats.rv)": [[67, "diofant.stats.rv.ProductPSpace"]], "quadraticu() (in module diofant.stats)": [[67, "diofant.stats.QuadraticU"]], "raisedcosine() (in module diofant.stats)": [[67, "diofant.stats.RaisedCosine"]], "randomdomain (class in diofant.stats.rv)": [[67, "diofant.stats.rv.RandomDomain"]], "randomsymbol (class in diofant.stats.rv)": [[67, "diofant.stats.rv.RandomSymbol"]], "rayleigh() (in module diofant.stats)": [[67, "diofant.stats.Rayleigh"]], "singledomain (class in diofant.stats.rv)": [[67, "diofant.stats.rv.SingleDomain"]], "singlepspace (class in diofant.stats.rv)": [[67, "diofant.stats.rv.SinglePSpace"]], "studentt() (in module diofant.stats)": [[67, "diofant.stats.StudentT"]], "triangular() (in module diofant.stats)": [[67, "diofant.stats.Triangular"]], "uniform() (in module diofant.stats)": [[67, "diofant.stats.Uniform"]], "uniformsum() (in module diofant.stats)": [[67, "diofant.stats.UniformSum"]], "vonmises() (in module diofant.stats)": [[67, "diofant.stats.VonMises"]], "weibull() (in module diofant.stats)": [[67, "diofant.stats.Weibull"]], "wignersemicircle() (in module diofant.stats)": [[67, "diofant.stats.WignerSemicircle"]], "density() (in module diofant.stats)": [[67, "diofant.stats.density"]], "dependent() (in module diofant.stats.rv)": [[67, "diofant.stats.rv.dependent"]], "diofant.stats": [[67, "module-diofant.stats"]], "diofant.stats.die() (in module diofant.stats.crv_types)": [[67, "diofant.stats.crv_types.diofant.stats.Die"]], "diofant.stats.normal() (in module diofant.stats.crv_types)": [[67, "diofant.stats.crv_types.diofant.stats.Normal"]], "diofant.stats.crv": [[67, "module-diofant.stats.crv"]], "diofant.stats.crv_types": [[67, "module-diofant.stats.crv_types"]], "diofant.stats.frv": [[67, "module-diofant.stats.frv"]], "diofant.stats.frv_types": [[67, "module-diofant.stats.frv_types"]], "diofant.stats.rv": [[67, "module-diofant.stats.rv"]], "given() (in module diofant.stats)": [[67, "diofant.stats.given"]], "independent() (in module diofant.stats.rv)": [[67, "diofant.stats.rv.independent"]], "pspace() (in module diofant.stats.rv)": [[67, "diofant.stats.rv.pspace"]], "random_symbols() (in module diofant.stats.rv)": [[67, "diofant.stats.rv.random_symbols"]], "rs_swap() (in module diofant.stats.rv)": [[67, "diofant.stats.rv.rs_swap"]], "sample() (in module diofant.stats)": [[67, "diofant.stats.sample"]], "sample_iter() (in module diofant.stats)": [[67, "diofant.stats.sample_iter"]], "sampling_e() (in module diofant.stats.rv)": [[67, "diofant.stats.rv.sampling_E"]], "sampling_p() (in module diofant.stats.rv)": [[67, "diofant.stats.rv.sampling_P"]], "sampling_density() (in module diofant.stats.rv)": [[67, "diofant.stats.rv.sampling_density"]], "std() (in module diofant.stats)": [[67, "diofant.stats.std"]], "variance() (in module diofant.stats)": [[67, "diofant.stats.variance"]], "where() (in module diofant.stats)": [[67, "diofant.stats.where"]], "array (class in diofant.tensor.array)": [[68, "diofant.tensor.array.Array"]], "immutabledensendimarray (class in diofant.tensor.array)": [[68, "diofant.tensor.array.ImmutableDenseNDimArray"]], "immutablesparsendimarray (class in diofant.tensor.array)": [[68, "diofant.tensor.array.ImmutableSparseNDimArray"]], "mutabledensendimarray (class in diofant.tensor.array)": [[68, "diofant.tensor.array.MutableDenseNDimArray"]], "mutablesparsendimarray (class in diofant.tensor.array)": [[68, "diofant.tensor.array.MutableSparseNDimArray"]], "derive_by_array() (in module diofant.tensor.array)": [[68, "diofant.tensor.array.derive_by_array"]], "diofant.tensor.array": [[68, "module-diofant.tensor.array"]], "permutedims() (in module diofant.tensor.array)": [[68, "diofant.tensor.array.permutedims"]], "tensorcontraction() (in module diofant.tensor.array)": [[68, "diofant.tensor.array.tensorcontraction"]], "tensorproduct() (in module diofant.tensor.array)": [[68, "diofant.tensor.array.tensorproduct"]], "diofant.tensor": [[69, "module-diofant.tensor"]], "indexconformanceexceptionerror": [[70, "diofant.tensor.index_methods.IndexConformanceExceptionError"]], "diofant.tensor.index_methods": [[70, "module-diofant.tensor.index_methods"]], "get_contraction_structure() (in module diofant.tensor.index_methods)": [[70, "diofant.tensor.index_methods.get_contraction_structure"]], "get_indices() (in module diofant.tensor.index_methods)": [[70, "diofant.tensor.index_methods.get_indices"]], "idx (class in diofant.tensor.indexed)": [[71, "diofant.tensor.indexed.Idx"]], "indexexceptionerror": [[71, "diofant.tensor.indexed.IndexExceptionError"]], "indexed (class in diofant.tensor.indexed)": [[71, "diofant.tensor.indexed.Indexed"]], "indexedbase (class in diofant.tensor.indexed)": [[71, "diofant.tensor.indexed.IndexedBase"]], "args (diofant.tensor.indexed.indexedbase property)": [[71, "diofant.tensor.indexed.IndexedBase.args"]], "base (diofant.tensor.indexed.indexed property)": [[71, "diofant.tensor.indexed.Indexed.base"]], "diofant.tensor.indexed": [[71, "module-diofant.tensor.indexed"]], "indices (diofant.tensor.indexed.indexed property)": [[71, "diofant.tensor.indexed.Indexed.indices"]], "label (diofant.tensor.indexed.idx property)": [[71, "diofant.tensor.indexed.Idx.label"]], "label (diofant.tensor.indexed.indexedbase property)": [[71, "diofant.tensor.indexed.IndexedBase.label"]], "lower (diofant.tensor.indexed.idx property)": [[71, "diofant.tensor.indexed.Idx.lower"]], "ranges (diofant.tensor.indexed.indexed property)": [[71, "diofant.tensor.indexed.Indexed.ranges"]], "rank (diofant.tensor.indexed.indexed property)": [[71, "diofant.tensor.indexed.Indexed.rank"]], "shape (diofant.tensor.indexed.indexed property)": [[71, "diofant.tensor.indexed.Indexed.shape"]], "shape (diofant.tensor.indexed.indexedbase property)": [[71, "diofant.tensor.indexed.IndexedBase.shape"]], "upper (diofant.tensor.indexed.idx property)": [[71, "diofant.tensor.indexed.Idx.upper"]], "tensadd (class in diofant.tensor.tensor)": [[72, "diofant.tensor.tensor.TensAdd"]], "tensexpr (class in diofant.tensor.tensor)": [[72, "diofant.tensor.tensor.TensExpr"]], "tensmul (class in diofant.tensor.tensor)": [[72, "diofant.tensor.tensor.TensMul"]], "tensorhead (class in diofant.tensor.tensor)": [[72, "diofant.tensor.tensor.TensorHead"]], "tensorindex (class in diofant.tensor.tensor)": [[72, "diofant.tensor.tensor.TensorIndex"]], "tensorindextype (class in diofant.tensor.tensor)": [[72, "diofant.tensor.tensor.TensorIndexType"]], "tensorsymmetry (class in diofant.tensor.tensor)": [[72, "diofant.tensor.tensor.TensorSymmetry"]], "tensortype (class in diofant.tensor.tensor)": [[72, "diofant.tensor.tensor.TensorType"]], "_tensormanager (class in diofant.tensor.tensor)": [[72, "diofant.tensor.tensor._TensorManager"]], "canon_bp() (diofant.tensor.tensor.tensadd method)": [[72, "diofant.tensor.tensor.TensAdd.canon_bp"]], "canon_bp() (diofant.tensor.tensor.tensmul method)": [[72, "diofant.tensor.tensor.TensMul.canon_bp"]], "canon_bp() (in module diofant.tensor.tensor)": [[72, "diofant.tensor.tensor.canon_bp"]], "clear() (diofant.tensor.tensor._tensormanager method)": [[72, "diofant.tensor.tensor._TensorManager.clear"]], "comm_i2symbol() (diofant.tensor.tensor._tensormanager method)": [[72, "diofant.tensor.tensor._TensorManager.comm_i2symbol"]], "comm_symbols2i() (diofant.tensor.tensor._tensormanager method)": [[72, "diofant.tensor.tensor._TensorManager.comm_symbols2i"]], "commutes_with() (diofant.tensor.tensor.tensorhead method)": [[72, "diofant.tensor.tensor.TensorHead.commutes_with"]], "contract_metric() (diofant.tensor.tensor.tensadd method)": [[72, "diofant.tensor.tensor.TensAdd.contract_metric"]], "contract_metric() (diofant.tensor.tensor.tensmul method)": [[72, "diofant.tensor.tensor.TensMul.contract_metric"]], "diofant.tensor.tensor": [[72, "module-diofant.tensor.tensor"]], "from_tids_list() (diofant.tensor.tensor.tensadd static method)": [[72, "diofant.tensor.tensor.TensAdd.from_TIDS_list"]], "fun_eval() (diofant.tensor.tensor.tensadd method)": [[72, "diofant.tensor.tensor.TensAdd.fun_eval"]], "fun_eval() (diofant.tensor.tensor.tensmul method)": [[72, "diofant.tensor.tensor.TensMul.fun_eval"]], "get_comm() (diofant.tensor.tensor._tensormanager method)": [[72, "diofant.tensor.tensor._TensorManager.get_comm"]], "get_indices() (diofant.tensor.tensor.tensmul method)": [[72, "diofant.tensor.tensor.TensMul.get_indices"]], "get_matrix() (diofant.tensor.tensor.tensexpr method)": [[72, "diofant.tensor.tensor.TensExpr.get_matrix"]], "perm2tensor() (diofant.tensor.tensor.tensmul method)": [[72, "diofant.tensor.tensor.TensMul.perm2tensor"]], "riemann_cyclic() (in module diofant.tensor.tensor)": [[72, "diofant.tensor.tensor.riemann_cyclic"]], "riemann_cyclic_replace() (in module diofant.tensor.tensor)": [[72, "diofant.tensor.tensor.riemann_cyclic_replace"]], "set_comm() (diofant.tensor.tensor._tensormanager method)": [[72, "diofant.tensor.tensor._TensorManager.set_comm"]], "set_comms() (diofant.tensor.tensor._tensormanager method)": [[72, "diofant.tensor.tensor._TensorManager.set_comms"]], "sorted_components() (diofant.tensor.tensor.tensmul method)": [[72, "diofant.tensor.tensor.TensMul.sorted_components"]], "split() (diofant.tensor.tensor.tensmul method)": [[72, "diofant.tensor.tensor.TensMul.split"]], "substitute_indices() (diofant.tensor.tensor.tensadd method)": [[72, "diofant.tensor.tensor.TensAdd.substitute_indices"]], "tensor_indices() (in module diofant.tensor.tensor)": [[72, "diofant.tensor.tensor.tensor_indices"]], "tensor_mul() (in module diofant.tensor.tensor)": [[72, "diofant.tensor.tensor.tensor_mul"]], "tensorsymmetry() (in module diofant.tensor.tensor)": [[72, "diofant.tensor.tensor.tensorsymmetry"]], "codewraperror": [[73, "diofant.utilities.autowrap.CodeWrapError"]], "codewrapper (class in diofant.utilities.autowrap)": [[73, "diofant.utilities.autowrap.CodeWrapper"]], "cythoncodewrapper (class in diofant.utilities.autowrap)": [[73, "diofant.utilities.autowrap.CythonCodeWrapper"]], "dummywrapper (class in diofant.utilities.autowrap)": [[73, "diofant.utilities.autowrap.DummyWrapper"]], "f2pycodewrapper (class in diofant.utilities.autowrap)": [[73, "diofant.utilities.autowrap.F2PyCodeWrapper"]], "ufuncifycodewrapper (class in diofant.utilities.autowrap)": [[73, "diofant.utilities.autowrap.UfuncifyCodeWrapper"]], "autowrap() (in module diofant.utilities.autowrap)": [[73, "diofant.utilities.autowrap.autowrap"]], "binary_function() (in module diofant.utilities.autowrap)": [[73, "diofant.utilities.autowrap.binary_function"]], "diofant.utilities.autowrap": [[73, "module-diofant.utilities.autowrap"]], "dump_c() (diofant.utilities.autowrap.ufuncifycodewrapper method)": [[73, "diofant.utilities.autowrap.UfuncifyCodeWrapper.dump_c"]], "dump_pyx() (diofant.utilities.autowrap.cythoncodewrapper method)": [[73, "diofant.utilities.autowrap.CythonCodeWrapper.dump_pyx"]], "ufuncify() (in module diofant.utilities.autowrap)": [[73, "diofant.utilities.autowrap.ufuncify"]], "argument (class in diofant.utilities.codegen)": [[74, "diofant.utilities.codegen.Argument"]], "ccodegen (class in diofant.utilities.codegen)": [[74, "diofant.utilities.codegen.CCodeGen"]], "codegen (class in diofant.utilities.codegen)": [[74, "diofant.utilities.codegen.CodeGen"]], "datatype (class in diofant.utilities.codegen)": [[74, "diofant.utilities.codegen.DataType"]], "fcodegen (class in diofant.utilities.codegen)": [[74, "diofant.utilities.codegen.FCodeGen"]], "inputargument (class in diofant.utilities.codegen)": [[74, "diofant.utilities.codegen.InputArgument"]], "octavecodegen (class in diofant.utilities.codegen)": [[74, "diofant.utilities.codegen.OctaveCodeGen"]], "outputargument (class in diofant.utilities.codegen)": [[74, "diofant.utilities.codegen.OutputArgument"]], "result (class in diofant.utilities.codegen)": [[74, "diofant.utilities.codegen.Result"]], "routine (class in diofant.utilities.codegen)": [[74, "diofant.utilities.codegen.Routine"]], "codegen() (in module diofant.utilities.codegen)": [[74, "diofant.utilities.codegen.codegen"]], "diofant.utilities.codegen": [[74, "module-diofant.utilities.codegen"]], "dump_c() (diofant.utilities.codegen.ccodegen method)": [[74, "diofant.utilities.codegen.CCodeGen.dump_c"]], "dump_code() (diofant.utilities.codegen.codegen method)": [[74, "diofant.utilities.codegen.CodeGen.dump_code"]], "dump_f95() (diofant.utilities.codegen.fcodegen method)": [[74, "diofant.utilities.codegen.FCodeGen.dump_f95"]], "dump_h() (diofant.utilities.codegen.ccodegen method)": [[74, "diofant.utilities.codegen.CCodeGen.dump_h"]], "dump_h() (diofant.utilities.codegen.fcodegen method)": [[74, "diofant.utilities.codegen.FCodeGen.dump_h"]], "dump_m() (diofant.utilities.codegen.octavecodegen method)": [[74, "diofant.utilities.codegen.OctaveCodeGen.dump_m"]], "get_default_datatype() (in module diofant.utilities.codegen)": [[74, "diofant.utilities.codegen.get_default_datatype"]], "get_interface() (diofant.utilities.codegen.fcodegen method)": [[74, "diofant.utilities.codegen.FCodeGen.get_interface"]], "get_prototype() (diofant.utilities.codegen.ccodegen method)": [[74, "diofant.utilities.codegen.CCodeGen.get_prototype"]], "make_routine() (in module diofant.utilities.codegen)": [[74, "diofant.utilities.codegen.make_routine"]], "result_variables (diofant.utilities.codegen.routine property)": [[74, "diofant.utilities.codegen.Routine.result_variables"]], "routine() (diofant.utilities.codegen.codegen method)": [[74, "diofant.utilities.codegen.CodeGen.routine"]], "routine() (diofant.utilities.codegen.octavecodegen method)": [[74, "diofant.utilities.codegen.OctaveCodeGen.routine"]], "variables (diofant.utilities.codegen.routine property)": [[74, "diofant.utilities.codegen.Routine.variables"]], "write() (diofant.utilities.codegen.codegen method)": [[74, "diofant.utilities.codegen.CodeGen.write"]], "conserve_mpmath_dps() (in module diofant.utilities.decorator)": [[75, "diofant.utilities.decorator.conserve_mpmath_dps"]], "diofant.utilities.decorator": [[75, "module-diofant.utilities.decorator"]], "doctest_depends_on() (in module diofant.utilities.decorator)": [[75, "diofant.utilities.decorator.doctest_depends_on"]], "no_attrs_in_subclass (class in diofant.utilities.decorator)": [[75, "diofant.utilities.decorator.no_attrs_in_subclass"]], "multisetpartitiontraverser (class in diofant.utilities.enumerative)": [[76, "diofant.utilities.enumerative.MultisetPartitionTraverser"]], "count_partitions() (diofant.utilities.enumerative.multisetpartitiontraverser method)": [[76, "diofant.utilities.enumerative.MultisetPartitionTraverser.count_partitions"]], "diofant.utilities.enumerative": [[76, "module-diofant.utilities.enumerative"]], "enum_all() (diofant.utilities.enumerative.multisetpartitiontraverser method)": [[76, "diofant.utilities.enumerative.MultisetPartitionTraverser.enum_all"]], "enum_large() (diofant.utilities.enumerative.multisetpartitiontraverser method)": [[76, "diofant.utilities.enumerative.MultisetPartitionTraverser.enum_large"]], "enum_range() (diofant.utilities.enumerative.multisetpartitiontraverser method)": [[76, "diofant.utilities.enumerative.MultisetPartitionTraverser.enum_range"]], "enum_small() (diofant.utilities.enumerative.multisetpartitiontraverser method)": [[76, "diofant.utilities.enumerative.MultisetPartitionTraverser.enum_small"]], "factoring_visitor() (in module diofant.utilities.enumerative)": [[76, "diofant.utilities.enumerative.factoring_visitor"]], "list_visitor() (in module diofant.utilities.enumerative)": [[76, "diofant.utilities.enumerative.list_visitor"]], "multiset_partitions_taocp() (in module diofant.utilities.enumerative)": [[76, "diofant.utilities.enumerative.multiset_partitions_taocp"]], "diofant.utilities": [[77, "module-diofant.utilities"]], "binary_partitions() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.binary_partitions"]], "bracelets() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.bracelets"]], "cantor_product() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.cantor_product"]], "capture() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.capture"]], "common_prefix() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.common_prefix"]], "common_suffix() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.common_suffix"]], "default_sort_key() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.default_sort_key"]], "diofant.utilities.iterables": [[78, "module-diofant.utilities.iterables"]], "filter_symbols() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.filter_symbols"]], "flatten() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.flatten"]], "generate_derangements() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.generate_derangements"]], "generate_involutions() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.generate_involutions"]], "group() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.group"]], "has_dups() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.has_dups"]], "has_variety() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.has_variety"]], "minlex() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.minlex"]], "multiset() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.multiset"]], "multiset_combinations() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.multiset_combinations"]], "multiset_partitions() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.multiset_partitions"]], "multiset_permutations() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.multiset_permutations"]], "necklaces() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.necklaces"]], "numbered_symbols() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.numbered_symbols"]], "ordered() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.ordered"]], "ordered_partitions() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.ordered_partitions"]], "partitions() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.partitions"]], "permute_signs() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.permute_signs"]], "postfixes() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.postfixes"]], "postorder_traversal() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.postorder_traversal"]], "prefixes() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.prefixes"]], "rotate_left() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.rotate_left"]], "rotate_right() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.rotate_right"]], "runs() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.runs"]], "sift() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.sift"]], "signed_permutations() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.signed_permutations"]], "subsets() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.subsets"]], "topological_sort() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.topological_sort"]], "unflatten() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.unflatten"]], "uniq() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.uniq"]], "variations() (in module diofant.utilities.iterables)": [[78, "diofant.utilities.iterables.variations"]], "diofant.utilities.lambdify": [[79, "module-diofant.utilities.lambdify"]], "implemented_function() (in module diofant.utilities.lambdify)": [[79, "diofant.utilities.lambdify.implemented_function"]], "lambdastr() (in module diofant.utilities.lambdify)": [[79, "diofant.utilities.lambdify.lambdastr"]], "lambdify() (in module diofant.utilities.lambdify)": [[79, "diofant.utilities.lambdify.lambdify"]], "diofant.utilities.memoization": [[80, "module-diofant.utilities.memoization"]], "recurrence_memo() (in module diofant.utilities.memoization)": [[80, "diofant.utilities.memoization.recurrence_memo"]], "diofant.utilities.misc": [[81, "module-diofant.utilities.misc"]], "filldedent() (in module diofant.utilities.misc)": [[81, "diofant.utilities.misc.filldedent"]], "diofant.utilities.randtest": [[82, "module-diofant.utilities.randtest"]], "random_complex_number() (in module diofant.utilities.randtest)": [[82, "diofant.utilities.randtest.random_complex_number"]], "verify_derivative_numerically() (in module diofant.utilities.randtest)": [[82, "diofant.utilities.randtest.verify_derivative_numerically"]], "verify_numerically() (in module diofant.utilities.randtest)": [[82, "diofant.utilities.randtest.verify_numerically"]]}})